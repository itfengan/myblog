{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.png","path":"favicon.png","modified":1,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/Yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":1,"renderable":1},{"_id":"source/uploads/wechat-qcode.jpg","path":"uploads/wechat-qcode.jpg","modified":1,"renderable":0},{"_id":"themes/Yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":1,"renderable":1},{"_id":"themes/Yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":1,"renderable":1},{"_id":"themes/Yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":1,"renderable":1},{"_id":"themes/Yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":1,"renderable":1},{"_id":"themes/Yelee/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/CSDN.png","path":"img/CSDN.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/AcFun.png","path":"img/AcFun.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/LOFTER.png","path":"img/LOFTER.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/Coding.png","path":"img/Coding.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/Plunker.png","path":"img/Plunker.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/Quora.png","path":"img/Quora.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/bilibili.png","path":"img/bilibili.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/niconico.png","path":"img/niconico.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/博客园.png","path":"img/博客园.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/简书.png","path":"img/简书.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/知乎.png","path":"img/知乎.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/avatar1.jpeg","path":"img/avatar1.jpeg","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":1,"renderable":1},{"_id":"themes/Yelee/source/js/instagram.js","path":"js/instagram.js","modified":1,"renderable":1},{"_id":"themes/Yelee/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/Yelee/source/js/mobile.js","path":"js/mobile.js","modified":1,"renderable":1},{"_id":"themes/Yelee/source/js/pc.js","path":"js/pc.js","modified":1,"renderable":1},{"_id":"themes/Yelee/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/Yelee/source/js/toc.js","path":"js/toc.js","modified":1,"renderable":1},{"_id":"themes/Yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":1,"renderable":1},{"_id":"themes/Yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":1,"renderable":1},{"_id":"themes/Yelee/source/background/backup/bg-1.jpg","path":"background/backup/bg-1.jpg","modified":1,"renderable":1},{"_id":"themes/Yelee/source/background/backup/bg-2.jpg","path":"background/backup/bg-2.jpg","modified":1,"renderable":1},{"_id":"themes/Yelee/source/background/backup/bg-3.jpg","path":"background/backup/bg-3.jpg","modified":1,"renderable":1},{"_id":"themes/Yelee/source/background/backup/bg-4.jpg","path":"background/backup/bg-4.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/favicon.png","hash":"81d9781886293ade0f24e69a1cc06ff91ae777e7","modified":1510639315000},{"_id":"source/CNAME","hash":"f33fc22be437f8d5994e215aa487ed18b91c260b","modified":1518073974874},{"_id":"themes/Yelee/.gitignore","hash":"237760b38ce80bcc3a8b556566bef0295c145393","modified":1475282440000},{"_id":"themes/Yelee/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1520270012104},{"_id":"themes/Yelee/README.md","hash":"12bc9cdb68f51df81bcc36a5263e0a6c5860f646","modified":1475282440000},{"_id":"themes/Yelee/_config.yml","hash":"da6c3606adfde577f8d26fdde388463852d5d57f","modified":1533192322349},{"_id":"themes/Yelee/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1475282440000},{"_id":"source/.DS_Store","hash":"6213e6e876872de11574bd29ca3848133ec7fd2e","modified":1520239485456},{"_id":"source/_posts/Android7-0之应用间共享文件.md","hash":"2ba5dc20580ffa986adf1a3e1bb27d1a96a95d81","modified":1531966051291},{"_id":"source/_posts/Gson封装.md","hash":"28bc4c4ed3cb1d73ae8f4f93396f3cf37409ed98","modified":1531966349217},{"_id":"source/_posts/Android签名.md","hash":"0a2ba6aa6cc77bc5bf0e50de9619998cea51fbfa","modified":1531966032653},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1531965898006},{"_id":"source/_posts/AsyncTask缺陷总结.md","hash":"f6549aecc0da75e9f8a6506916ec0762258c833b","modified":1531966024645},{"_id":"source/_posts/ReactNative碎片整理之State.md","hash":"74dfd02a0277a0eda10173503158cf01fe6beb41","modified":1533114487820},{"_id":"source/_posts/HandlerThread.md","hash":"12deee260c210bb9fda86377fc40adf6baf0ee2a","modified":1531966340671},{"_id":"source/_posts/ReactNative的prop-types属性验证问题.md","hash":"af4bb4a57bc66e5ef7f575f1d6df8f0618fae92d","modified":1533199913534},{"_id":"source/_posts/ReactNative start.md","hash":"7c0a4e3dc5dc46548f62416e42c87cc97c2af307","modified":1531966445738},{"_id":"source/_posts/ReactNative碎片整理之按妞交互.md","hash":"246dd7dd848b543ecd506168d62354e1112e2336","modified":1533208022492},{"_id":"source/_posts/ReactNative碎片整理之Props.md","hash":"64fc650012dd582178d1b78662270e4308073add","modified":1532774956076},{"_id":"source/_posts/ReactNative碎片整理之ref.md","hash":"26a5e1f1fbea002250dd5050c9dd0cc9caf2d275","modified":1533190280716},{"_id":"source/_posts/3-x的gradle依赖implementation.md","hash":"77242b52ae17d73ac40d738108cda0a4ff5f87a2","modified":1532420208712},{"_id":"source/_posts/ReactNative碎片整理之样式.md","hash":"4132bad7411025584d7a27bfd96f70d607d70746","modified":1533090251909},{"_id":"source/_posts/ReactNative碎片整理之组件生命周期.md","hash":"76b0b99148fc172769db73eb988cfd2336fe3ef3","modified":1533176036772},{"_id":"source/_posts/Rxjava2-0-知识碎片（三）.md","hash":"5ec4f7f5e1be9df7add494d1655f627d41235413","modified":1532416439867},{"_id":"source/_posts/Sources-for-‘Android-API-xx-Platform’-not-found.md","hash":"6f4a9ef96f8ddd42e9dcabab38de7d082c538be8","modified":1531966874808},{"_id":"source/_posts/Rxjava2-0-知识碎片（二）.md","hash":"29b9d4fbd4b625bbf2f93da842bb72d19c910d49","modified":1532360433675},{"_id":"source/_posts/ThreadLocal的理解.md","hash":"409691537ecce83e03d59e77a7493f7f907284b2","modified":1531966524144},{"_id":"source/_posts/WebView中软键盘遮挡问题.md","hash":"fae2f241393fb9fd79a7b6b5f31d9c43633ec24a","modified":1531966735773},{"_id":"source/_posts/Webview使用总结.md","hash":"e76bb0ca544a73918b86aa166792d48988b0aca8","modified":1531966691570},{"_id":"source/_posts/Rxjava2-0-知识碎片（一）.md","hash":"2fce8df931f3749d03c1a9e894964eb632019b3c","modified":1532332051924},{"_id":"source/_posts/app启动流程简析.md","hash":"fce455c3319d558a6fb5a62860b33318b8c2f322","modified":1531966018355},{"_id":"source/_posts/edittext输入限制.md","hash":"4fe6ee62c1cd8c295ac713778ef8d552068a9eae","modified":1531966138979},{"_id":"source/_posts/ReactNative碎片整理之网络请求.md","hash":"cbcf29245abf2485ff5c5df973a4d40f805aefcc","modified":1533007670498},{"_id":"source/_posts/mysql关联阿里云dms.md","hash":"76ac86f8eb804a4ec65a06529bbe1b93315ce21d","modified":1531966405625},{"_id":"source/_posts/transient关键字的作用.md","hash":"954953702a0c2a9f27395a18a27ef524a7b88100","modified":1531966595237},{"_id":"source/_posts/view被软键盘挡住和点击外部软键盘消失.md","hash":"16d2b0d129a812d9596ec36857ec31891dee727c","modified":1531966662443},{"_id":"source/_posts/retrofit和动态代理.md","hash":"f3514841203884f9348cffb04dd9aad6774d4257","modified":1531966471360},{"_id":"source/_posts/webview中点击网页图片跳转查看图片.md","hash":"a2440571eab14b7411174854bfce1a9444a70e97","modified":1531966718195},{"_id":"source/_posts/事件分发小结.md","hash":"277014a196fb70e2846149567ae01a912a049e94","modified":1531965269988},{"_id":"source/_posts/产生65535的原因和解决办法.md","hash":"61788c1ce2a9ee58924d00ddac86603d3d1c6102","modified":1531964943179},{"_id":"source/_posts/保存图片到本地.md","hash":"63fb50f7a7e2b32bfe6cb5289d3beccf119e1eb4","modified":1531964851238},{"_id":"source/_posts/回顾集合体系.md","hash":"297beb3dded1fb155d6652ef0d6cfcd6446adbae","modified":1531964984607},{"_id":"source/_posts/图片上传-角度不正确.md","hash":"4ba01a91ef462bd0dda3ca7f63647ef89b5b8458","modified":1531966069799},{"_id":"source/_posts/浅析Dalvik和ART的区别.md","hash":"b2e6c9ec40d5ef88bae72daf2400b4a7ca33e495","modified":1531965003927},{"_id":"source/_posts/夏日.md","hash":"08e52e509773a98ef71fd44404ce6e840fe749ce","modified":1532767037639},{"_id":"source/_posts/推荐使用枚举注解.md","hash":"116b9663131f23b4c3de3eb45c5297694dd63eaa","modified":1531978423897},{"_id":"source/_posts/浅析volatile关键字.md","hash":"abea87adc22f7964ba65349b2ddf3bcf0666368e","modified":1531965029933},{"_id":"source/_posts/线程安全的CopyOnWriteArrayList.md","hash":"f114086ae4ba658cd88cbe31707346587ee6bb2b","modified":1531966062880},{"_id":"source/_posts/设计模式之单例模式.md","hash":"9bb5b1144e382561f6f2a05a56810406e8376ffa","modified":1531965153284},{"_id":"source/_posts/祝你今天心情愉快.md","hash":"ffebb5cbf1debfc66ca570f37e90ca12bd44ac67","modified":1531965822678},{"_id":"source/_posts/设计模式之原型模式.md","hash":"8b8cfdda6327e4f5a645ab7e26ad215975389cb9","modified":1531965259327},{"_id":"source/_posts/SharedPreferences的缺陷.md","hash":"ba5810af030ee5cbe833765559c1626a8b34d90a","modified":1531987504036},{"_id":"source/_posts/设计模式之建造者模式.md","hash":"03e7974df495526aa881d17597e15d0446982b82","modified":1531965224473},{"_id":"source/_posts/设计模式之观察者模式.md","hash":"8d9607ee643e3f0aeb2418fe0ce7dab1a35c14cb","modified":1531965180705},{"_id":"source/_posts/设计模式之策略模式.md","hash":"c94758bfa7e0fe55f406d85eca3dfff002358cbc","modified":1531965103561},{"_id":"source/_posts/谈谈加密算法.md","hash":"a9bc3a3d6abd4205ab848271df0560b92aeeadec","modified":1531965525502},{"_id":"source/_posts/谈谈启动流程.md","hash":"fdf4b91462201fa09e5d74a8c7d6772873821f7e","modified":1531966083913},{"_id":"source/_posts/shadowsocks服务端部署.md","hash":"d0e6ed136330daf764ad51577504e9124e2cff26","modified":1531966487372},{"_id":"source/_posts/随滑动改变的的动态矩形背景.md","hash":"561742c4b2969aeb336fb9d6678c0fa3d5396ff7","modified":1531965501802},{"_id":"source/_posts/git.md","hash":"d575b53dd42892f7d241300c64fe6cf75fc02614","modified":1531966161319},{"_id":"source/_posts/谈谈线程池.md","hash":"7f9d6c00d64aa1690f2a0aed2ef10472a0b59fe5","modified":1531966076933},{"_id":"source/categories/index.md","hash":"215e95b12cb7c6de66803d979932c1c4aed1c34a","modified":1520300538399},{"_id":"source/tags/index.md","hash":"6866484a6f2e3d2fd64bdec711ce85bfe5c78f6e","modified":1520300525670},{"_id":"source/about/index.md","hash":"a8ef762aae6d8afdc736ad35aa291910242d4416","modified":1532755955566},{"_id":"source/weixin/index.md","hash":"67a6d5a540bbf1c6f14079dce1b3a1d90221d04e","modified":1533192436331},{"_id":"themes/Yelee/.github/ISSUE_TEMPLATE.md","hash":"09e2580d457ce93b4d7d554b75618036b45f8717","modified":1475282440000},{"_id":"themes/Yelee/languages/default.yml","hash":"80cc17267333753accc0b1c85a73678fedcbce76","modified":1475282440000},{"_id":"themes/Yelee/languages/en.yml","hash":"2c096d06c0af4ddf9c128fc8f77fb276b59a47fb","modified":1475282440000},{"_id":"themes/Yelee/languages/zh-Hans.yml","hash":"b5b2d20cde04db3773962284a002d025b09134b0","modified":1475282440000},{"_id":"themes/Yelee/languages/zh-Hant-HK.yml","hash":"c38a95f5076ad951839aaf7748295d7eea277c61","modified":1475282440000},{"_id":"themes/Yelee/languages/zh-Hant-TW.yml","hash":"f372cc0d758a7d8bbb885aa9756d607bec26469a","modified":1475282440000},{"_id":"themes/Yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1475282440000},{"_id":"themes/Yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1475282440000},{"_id":"themes/Yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1475282440000},{"_id":"themes/Yelee/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1475282440000},{"_id":"themes/Yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1475282440000},{"_id":"themes/Yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1475282440000},{"_id":"themes/Yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1475282440000},{"_id":"themes/Yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1475282440000},{"_id":"source/uploads/wechat-qcode.jpg","hash":"07a245af7df3ed177865e1550244e230e71bb7da","modified":1510639315000},{"_id":"themes/Yelee/layout/_partial/after-footer.ejs","hash":"748391b89b661fa1ed7da0b15ed6870981ec4dc3","modified":1475282440000},{"_id":"themes/Yelee/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1475282440000},{"_id":"themes/Yelee/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1475282440000},{"_id":"themes/Yelee/layout/_partial/article.ejs","hash":"43e464225fe5425ca0ddef35554d618e7487a4aa","modified":1533189987688},{"_id":"themes/Yelee/layout/_partial/background.ejs","hash":"aeef39abef66ee0bd6c9efe856eaeb1b81416d41","modified":1475282440000},{"_id":"themes/Yelee/layout/_partial/footer.ejs","hash":"8ad20e6ead93f54d7d4c47efbe6d7152ec9231e6","modified":1520347373543},{"_id":"themes/Yelee/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1475282440000},{"_id":"themes/Yelee/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1475282440000},{"_id":"themes/Yelee/layout/_partial/head.ejs","hash":"55e90c3d5de6d7ffcfe26c4dc22189a7a27b6651","modified":1475282440000},{"_id":"themes/Yelee/layout/_partial/ie-updater.ejs","hash":"3e5f2e41bbb1a5b93a8a7a6cb9ccd191ced54408","modified":1475282440000},{"_id":"themes/Yelee/layout/_partial/left-col.ejs","hash":"90fd7c763faf8d64d58612f592cbacbefdaea161","modified":1475282440000},{"_id":"themes/Yelee/layout/_partial/mobile-nav.ejs","hash":"306be982577b0ef968f855d0dfeaab6b180b8a50","modified":1475282440000},{"_id":"themes/Yelee/layout/_partial/page.ejs","hash":"cfce60062cdb60893baeda7fa0266ae4086c2bc8","modified":1475282440000},{"_id":"themes/Yelee/layout/_partial/open-in-new-tab.ejs","hash":"a6046bc322ce9194faa9559c70e1618a7e1e4cbc","modified":1475282440000},{"_id":"themes/Yelee/layout/_partial/mathjax.ejs","hash":"ce868f8b2b5b377cadc270e3a5bb5826f8bf0dee","modified":1475282440000},{"_id":"themes/Yelee/layout/_partial/post-nav-button.ejs","hash":"0a98bffdd14f6677721841c0ac4487a86c77266c","modified":1475282440000},{"_id":"themes/Yelee/layout/_partial/scrolling-button.ejs","hash":"c5e1c3a8e1e6b0d927ac25a7fb8720ee7ac83ad8","modified":1475282440000},{"_id":"themes/Yelee/layout/_partial/tab-title-change.ejs","hash":"1bebab6eb7a849319cd48fe051f3c71b9349a723","modified":1475282440000},{"_id":"themes/Yelee/layout/_partial/tag-cloud-page.ejs","hash":"432ded02bcc1f0d52cd833e8eeac688ee886169a","modified":1475282440000},{"_id":"themes/Yelee/layout/_partial/toc.ejs","hash":"7ee88b1a98eea5cbd44c0f9a11b86b46aa2d6752","modified":1475282440000},{"_id":"themes/Yelee/source/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1475282440000},{"_id":"themes/Yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1475282440000},{"_id":"themes/Yelee/source/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1475282440000},{"_id":"themes/Yelee/source/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1475282440000},{"_id":"themes/Yelee/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1475282440000},{"_id":"themes/Yelee/source/css/_variables.styl","hash":"f429eb9bc9f0a270ec68c4f4c63903250746a01c","modified":1475282440000},{"_id":"themes/Yelee/source/css/style.styl","hash":"b285f9a75abd09c7d06fe89e70f9e1819eac27dd","modified":1475282440000},{"_id":"themes/Yelee/source/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1475282440000},{"_id":"themes/Yelee/source/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1475282440000},{"_id":"themes/Yelee/source/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1475282440000},{"_id":"themes/Yelee/source/img/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1520269570505},{"_id":"themes/Yelee/source/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1475282440000},{"_id":"themes/Yelee/source/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1475282440000},{"_id":"themes/Yelee/source/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1475282440000},{"_id":"themes/Yelee/source/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1475282440000},{"_id":"themes/Yelee/source/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1475282440000},{"_id":"themes/Yelee/source/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1475282440000},{"_id":"themes/Yelee/source/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1475282440000},{"_id":"themes/Yelee/source/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1475282440000},{"_id":"themes/Yelee/source/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1475282440000},{"_id":"themes/Yelee/source/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1475282440000},{"_id":"themes/Yelee/source/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1475282440000},{"_id":"themes/Yelee/source/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1475282440000},{"_id":"themes/Yelee/source/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1475282440000},{"_id":"themes/Yelee/source/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1475282440000},{"_id":"themes/Yelee/source/img/avatar1.jpeg","hash":"ac965d7c4df9d7dca230bac9e9b9898e3413763f","modified":1520266169180},{"_id":"themes/Yelee/source/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1475282440000},{"_id":"themes/Yelee/source/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1475282440000},{"_id":"themes/Yelee/source/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1475282440000},{"_id":"themes/Yelee/source/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1475282440000},{"_id":"themes/Yelee/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1475282440000},{"_id":"themes/Yelee/source/js/main.js","hash":"369774a7ff45a2e5117a796330a04aeb50a61fdf","modified":1475282440000},{"_id":"themes/Yelee/source/js/mobile.js","hash":"8abc32d18f16db56f51caad607cffb6ca756eca9","modified":1475282440000},{"_id":"themes/Yelee/source/js/pc.js","hash":"bc289c5dc610e2a34d308daeb9adea96d01f7788","modified":1475282440000},{"_id":"themes/Yelee/source/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1475282440000},{"_id":"themes/Yelee/source/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1475282440000},{"_id":"themes/Yelee/source/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1475282440000},{"_id":"themes/Yelee/source/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1475282440000},{"_id":"themes/Yelee/layout/_partial/comments/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1533189839010},{"_id":"themes/Yelee/layout/_partial/comments/disqus.ejs","hash":"df7ee469b648b12b5ee3104ef513d54cbb7418af","modified":1475282440000},{"_id":"themes/Yelee/layout/_partial/comments/click2show.ejs","hash":"678f3aec2980d378ea44be60eec3eb504c8ba668","modified":1475282440000},{"_id":"themes/Yelee/layout/_partial/comments/count-comment.ejs","hash":"d3c1b0b31db9d80e857f3054d010ea49c0f88134","modified":1475282440000},{"_id":"themes/Yelee/layout/_partial/comments/duoshuo.ejs","hash":"e7f12f1246a67a5b556c2d5b37dc78733f1cf15a","modified":1475282440000},{"_id":"themes/Yelee/layout/_partial/comments/youyan.ejs","hash":"bcf2070587645afd20a4eb046b9c8bb9c44d1cf5","modified":1475282440000},{"_id":"themes/Yelee/layout/_partial/comments/livere.ejs","hash":"95ccb26baefbabcf479b19fe59919b0e7c4ffc09","modified":1533190082614},{"_id":"themes/Yelee/layout/_partial/post/date.ejs","hash":"329ed372296a86bce73ff8936af5601723fdd70a","modified":1475282440000},{"_id":"themes/Yelee/layout/_partial/post/nav.ejs","hash":"6f531dbc9cc7ae42d2486d6707f826cfe7d9d8bc","modified":1475282440000},{"_id":"themes/Yelee/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1475282440000},{"_id":"themes/Yelee/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1475282440000},{"_id":"themes/Yelee/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1475282440000},{"_id":"themes/Yelee/layout/_partial/post/share.ejs","hash":"58c2db54a9867aaafe68a7f052b04701c7c3df0f","modified":1475282440000},{"_id":"themes/Yelee/source/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1475282440000},{"_id":"themes/Yelee/source/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1475282440000},{"_id":"themes/Yelee/source/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1475282440000},{"_id":"themes/Yelee/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1475282440000},{"_id":"themes/Yelee/source/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1475282440000},{"_id":"themes/Yelee/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1475282440000},{"_id":"themes/Yelee/source/css/_partial/archive.styl","hash":"102c23dbb6cde3cbfca3b151c742e0d77911186e","modified":1475282440000},{"_id":"themes/Yelee/source/css/_partial/article.styl","hash":"190828c822096bb3098a7d14c3340eb004057aa0","modified":1475282440000},{"_id":"themes/Yelee/source/css/_partial/footer.styl","hash":"a419108f1b820c59fcc56d218bfaaa4ffc4f1d4d","modified":1475282440000},{"_id":"themes/Yelee/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1475282440000},{"_id":"themes/Yelee/source/css/_partial/highlight.styl","hash":"4e34bf9340ce9b15d2d59fc4ea761d1d110927cf","modified":1475282440000},{"_id":"themes/Yelee/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1475282440000},{"_id":"themes/Yelee/source/css/_partial/mobile-slider.styl","hash":"39db458d4e9f6973afc1390b4d3fc0291fff4c40","modified":1475282440000},{"_id":"themes/Yelee/source/css/_partial/main.styl","hash":"405db411896f3c7de9e7dd27e58c920fb90b9834","modified":1475282440000},{"_id":"themes/Yelee/source/css/_partial/mobile.styl","hash":"dfb20f2515a26d75e42fe09741e91cc889426b11","modified":1475282440000},{"_id":"themes/Yelee/source/css/_partial/page.styl","hash":"ca3f871adf8fdb296e4394070605dded53d93cb2","modified":1475282440000},{"_id":"themes/Yelee/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1475282440000},{"_id":"themes/Yelee/source/css/_partial/share.styl","hash":"88c1277397b71eb1f3473a94d9542314f983cd09","modified":1475282440000},{"_id":"themes/Yelee/source/css/_partial/search.styl","hash":"fcaa5deaa654aaec69e267e23b49df07f84f633a","modified":1475282440000},{"_id":"themes/Yelee/source/css/_partial/tagcloud.styl","hash":"b38b275728bfe11809defe1077b03cb423c3c92f","modified":1475282440000},{"_id":"themes/Yelee/source/css/_partial/toc.styl","hash":"eb19bbd37fc2c1abd238e2ed96b22cb1aae41ab7","modified":1475282440000},{"_id":"themes/Yelee/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1475282440000},{"_id":"themes/Yelee/source/css/_partial/customise/color-scheme.styl","hash":"b58262a9f8903e75df431291745e19ccd8ff243a","modified":1475282440000},{"_id":"themes/Yelee/source/css/_partial/customise/blockquote.styl","hash":"5e6edb9ad49288743ed550a2bd8c9a3c8e208455","modified":1475282440000},{"_id":"themes/Yelee/source/css/_partial/customise/heading.styl","hash":"f309241c1daa9b6c04aa04063307537c219fdd59","modified":1475282440000},{"_id":"themes/Yelee/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1475282440000},{"_id":"themes/Yelee/source/css/_partial/customise/inline-code.styl","hash":"a15292b2b3541ea022c0fb7441875192dee5ad9d","modified":1475282440000},{"_id":"themes/Yelee/source/css/_partial/customise/list.styl","hash":"b1e564ed76d6e892556b61b4278270fc9eeea961","modified":1475282440000},{"_id":"themes/Yelee/source/css/_partial/customise/social-icon.styl","hash":"b71c9d7ed3e23b69f51a74b12b1855dbf924b462","modified":1533089413588},{"_id":"public/search.xml","hash":"28b054087b6e73333ff507ca2780d099900779b1","modified":1533208036989},{"_id":"public/archives/2016/07/index.html","hash":"bce1b899a06b7970ad1829f2dfa12246f00efdb6","modified":1533208037606},{"_id":"public/archives/2016/10/index.html","hash":"1c0ddb226965cb8cd1a3f0fa6a8d0716d5e25c7c","modified":1533208037606},{"_id":"public/archives/2017/page/2/index.html","hash":"ee1bb251a0988acf2df5ce54f4b55d9276238c88","modified":1533208037606},{"_id":"public/archives/2017/01/index.html","hash":"1cc10a0beb4148b3e1e61fb1f2fedfb6f8d24129","modified":1533208037606},{"_id":"public/archives/2017/07/index.html","hash":"71fdf8be364d9c3396213bac0503a612a2d60677","modified":1533208037606},{"_id":"public/archives/2018/01/index.html","hash":"b02d41ea66d29100c288af444e3d9630109bb37f","modified":1533208037606},{"_id":"public/archives/2018/04/index.html","hash":"4ed7bc80460da755c9bf70f4210798e2053399a1","modified":1533208037606},{"_id":"public/archives/2018/06/index.html","hash":"5aac9131d3cc6d728bbd8dc6b63a6cdec8067317","modified":1533208037606},{"_id":"public/categories/Design-Pattern/index.html","hash":"73c888a24d20199a0c766c9f62f9b7c82a039e12","modified":1533208037606},{"_id":"public/categories/index.html","hash":"0ef74d6c092916c4c7dddb64fef8a5c43a24bc99","modified":1533208037606},{"_id":"public/tags/index.html","hash":"8e1dfb488c86342d1405a214011099509be6bed9","modified":1533208037606},{"_id":"public/about/index.html","hash":"17590567ccffb17ffb7b529e0fee1e04a6cbdaae","modified":1533208037606},{"_id":"public/weixin/index.html","hash":"bdf81fd68771ec1b00dc331348c1bed95e7e0091","modified":1533208037606},{"_id":"public/2018/08/02/ReactNative的prop-types属性验证问题/index.html","hash":"fc71e927b3d30f6c1f951ee91602997d1726b204","modified":1533208037606},{"_id":"public/2018/08/02/ReactNative碎片整理之按妞交互/index.html","hash":"25f40bc0662f73058a596c1644c7593812b5c244","modified":1533208037606},{"_id":"public/2018/08/01/ReactNative碎片整理之组件生命周期/index.html","hash":"382297f65007067975c4759ca8a3f05986b97735","modified":1533208037606},{"_id":"public/2018/08/01/ReactNative碎片整理之ref/index.html","hash":"f4666faed5f3b8872c4f3a10b05a1463680e5c25","modified":1533208037607},{"_id":"public/2018/07/31/ReactNative碎片整理之样式/index.html","hash":"23953c18fd095c286bcaf4067e53d0bffa56f42b","modified":1533208037607},{"_id":"public/2018/07/30/ReactNative碎片整理之网络请求/index.html","hash":"445dc0efb3d376f336f36fabf7d498962dc0910c","modified":1533208037607},{"_id":"public/2018/07/28/ReactNative碎片整理之State/index.html","hash":"9d9a590accb849b792820989acc74ed31ea812f0","modified":1533208037607},{"_id":"public/2018/07/28/夏日/index.html","hash":"0ca3a2cb2ca096d0cd49291683fb8a7e89638da0","modified":1533208037607},{"_id":"public/2018/07/24/Rxjava2-0-知识碎片（三）/index.html","hash":"a936ae9a894103aafed24bad53044792b488f06c","modified":1533208037607},{"_id":"public/2018/07/23/Rxjava2-0-知识碎片（二）/index.html","hash":"0e02135d443ccfc845b991119f0c2032a89c152b","modified":1533208037607},{"_id":"public/2018/07/23/Rxjava2-0-知识碎片（一）/index.html","hash":"46aab24c31d31d3eb9baadde60e11b4c88c8da41","modified":1533208037607},{"_id":"public/2018/07/19/SharedPreferences的缺陷/index.html","hash":"085096bb18ab6cc7e7b625f56d8ddf2eede82601","modified":1533208037607},{"_id":"public/2018/07/18/shadowsocks服务端部署/index.html","hash":"a9e37df341043e5c618dc8624240d4b366ff1334","modified":1533208037607},{"_id":"public/2018/06/14/mysql关联阿里云dms/index.html","hash":"4d31271c72389ddb29909ed0a06d6bc5246659f4","modified":1533208037607},{"_id":"public/2018/04/28/ReactNative碎片整理之Props/index.html","hash":"651c662a30a512f6ca5f2ab04f7f5b43380a1e34","modified":1533208037607},{"_id":"public/2018/03/05/浅析Dalvik和ART的区别/index.html","hash":"0f8b281be27688f540e3cc67339aa1f2c3141937","modified":1533208037608},{"_id":"public/2018/03/02/ThreadLocal的理解/index.html","hash":"7b9d1a48642ee8cf27e91691afaff1a7bd660c0b","modified":1533208037608},{"_id":"public/2018/01/24/3-x的gradle依赖implementation/index.html","hash":"bebcf5c5374ea22d11ecb25591d51e2e2227bb97","modified":1533208037608},{"_id":"public/2017/12/29/谈谈启动流程/index.html","hash":"56b2d31f151a2cd744be853eae382d4918421f9a","modified":1533208037608},{"_id":"public/2017/12/25/ReactNative start/index.html","hash":"5f851bffc4dd6cff18cc7acd7562b1d21444a440","modified":1533208037608},{"_id":"public/2017/12/20/谈谈加密算法/index.html","hash":"7da445ef8927282c14e0269e0614c2578e214349","modified":1533208037608},{"_id":"public/2017/07/02/Android签名/index.html","hash":"91ec10eaed59ff5ead8389f2a02b22b6fa187eea","modified":1533208037608},{"_id":"public/2017/03/15/transient关键字的作用/index.html","hash":"bec25b95783f98c52aceda7acdd8b8ad12bb3a2a","modified":1533208037608},{"_id":"public/2017/03/13/Sources-for-‘Android-API-xx-Platform’-not-found/index.html","hash":"f62479def6bba79810d9f807f2e0cdf10a6307f0","modified":1533208037608},{"_id":"public/2017/03/12/Webview使用总结/index.html","hash":"841ea11c2801426950f84c50d3fa1e5e7cae306f","modified":1533208037608},{"_id":"public/2017/03/07/浅析volatile关键字/index.html","hash":"ca90de383aa715a8974435950fe6bd3b7c06942a","modified":1533208037608},{"_id":"public/2017/02/16/线程安全的CopyOnWriteArrayList/index.html","hash":"b670fa1a40a755b96ebb9642c4b324931a5593bf","modified":1533208037608},{"_id":"public/2017/02/07/retrofit和动态代理/index.html","hash":"036e97bb9c6920db6cf52ed4aac974105b44132b","modified":1533208037608},{"_id":"public/2017/01/20/事件分发小结/index.html","hash":"9511c5e80134ced69a3740965f6904acecce5f8d","modified":1533208037608},{"_id":"public/2016/12/25/谈谈线程池/index.html","hash":"4b4ea5c19850adc4e65aefb0cc6690f6cedc5c65","modified":1533208037608},{"_id":"public/2016/12/20/AsyncTask缺陷总结/index.html","hash":"c20a815faa329e866673589340543974df90503d","modified":1533208037608},{"_id":"public/2016/12/19/设计模式之原型模式/index.html","hash":"d3fa5c07c2f9c7d93df060ed7948a07504c7911a","modified":1533208037609},{"_id":"public/2016/12/19/设计模式之观察者模式/index.html","hash":"e1bf6d553d0001273d696e83605bde6024791dc6","modified":1533208037609},{"_id":"public/2016/12/16/设计模式之策略模式/index.html","hash":"9a851bccc11b60a3f422bc63b6855f7836fb48ec","modified":1533208037609},{"_id":"public/2016/12/15/设计模式之建造者模式/index.html","hash":"7f7d9b53a9321e7ad6f62755f717e33585463894","modified":1533208037609},{"_id":"public/2016/12/15/设计模式之单例模式/index.html","hash":"a11c323e33bbe13c685d857f99d5be5099e2038f","modified":1533208037609},{"_id":"public/2016/10/11/随滑动改变的的动态矩形背景/index.html","hash":"e95a23f4848c0291fb93e08f646de27ee5716d61","modified":1533208037609},{"_id":"public/2016/08/21/Gson封装/index.html","hash":"c77b1c04dba7113ff534470d973b4188164a3bb9","modified":1533208037609},{"_id":"public/2016/08/21/view被软键盘挡住和点击外部软键盘消失/index.html","hash":"db54be94631634d7092a3dd9fd06ac2a8e4c47d1","modified":1533208037609},{"_id":"public/2016/08/21/保存图片到本地/index.html","hash":"3340189736e739d8100ab1b2435201393dcafdcb","modified":1533208037609},{"_id":"public/2016/07/23/Android7-0之应用间共享文件/index.html","hash":"9dc0f25fbc637a2be953b8bc3f76ce011d0bd59e","modified":1533208037609},{"_id":"public/2016/03/16/app启动流程简析/index.html","hash":"0d63f8c35b127a92aed27d26672f639569b6fbc8","modified":1533208037609},{"_id":"public/2016/03/08/webview中点击网页图片跳转查看图片/index.html","hash":"babf3edc2e9ccdc64d552d4d151c141a460c60ec","modified":1533208037609},{"_id":"public/2016/03/06/产生65535的原因和解决办法/index.html","hash":"6cd9d507a94fa3fe69ede1ce99922a52c6634884","modified":1533208037609},{"_id":"public/2015/12/26/回顾集合体系/index.html","hash":"dfb1661260037807c432e7b23cd790a20cc30c06","modified":1533208037609},{"_id":"public/2015/12/22/HandlerThread/index.html","hash":"e2c1d1be61595427cca94b064a8f85c05f4e937c","modified":1533208037609},{"_id":"public/2015/12/13/edittext输入限制/index.html","hash":"cd37b97bc8b4d80c63d55ff08fec30af203466b0","modified":1533208037609},{"_id":"public/2015/08/08/图片上传-角度不正确/index.html","hash":"72a5415d4afceabc2030710e0fed1f8094d124f7","modified":1533208037609},{"_id":"public/2015/08/08/祝你今天心情愉快/index.html","hash":"82005d6022f9c0b09741c580421d529dbf30f895","modified":1533208037610},{"_id":"public/archives/index.html","hash":"68104a4afd39add210d1469e23a45e5c6824256c","modified":1533208037610},{"_id":"public/archives/page/2/index.html","hash":"a4432ab0fd3820f3e484c6f735908099953c214f","modified":1533208037610},{"_id":"public/archives/page/3/index.html","hash":"cc35857e4946e531ac92c9b9a28894defadba25c","modified":1533208037610},{"_id":"public/archives/page/4/index.html","hash":"9c897da93eb37fc6df41ce7cde1285af3a8c98b2","modified":1533208037610},{"_id":"public/archives/page/5/index.html","hash":"de6400b788f2c14c86a988118cb03912e8e435f0","modified":1533208037610},{"_id":"public/archives/2015/index.html","hash":"30001499134313d21d2faf7640a9f84220b540f6","modified":1533208037610},{"_id":"public/archives/2015/08/index.html","hash":"9e8c534a1c586f40e27d32cfd9e7a48cd1d9e868","modified":1533208037610},{"_id":"public/archives/2015/12/index.html","hash":"066f4b05d387eb3c7b348acd982f7a3f509e7a80","modified":1533208037610},{"_id":"public/archives/2016/index.html","hash":"6b040249c9e47b6a390a1a8dba57c101d720dc7b","modified":1533208037610},{"_id":"public/archives/2016/page/2/index.html","hash":"3f3d6250cc9de1efe0cb727ecbb895aace31ccf4","modified":1533208037610},{"_id":"public/archives/2016/03/index.html","hash":"3a322e74c7b465e5a4170cabdc510067d23461ea","modified":1533208037610},{"_id":"public/archives/2016/08/index.html","hash":"c9ee65ca148f495a6a6c2cf5d62620651b3ed1e1","modified":1533208037610},{"_id":"public/archives/2016/12/index.html","hash":"98747713bede7281e1ddc73d19cf2ba26ae3d1d6","modified":1533208037610},{"_id":"public/archives/2017/index.html","hash":"1792ab4cd23d03159b8845540543ab4dc54bf584","modified":1533208037610},{"_id":"public/archives/2017/02/index.html","hash":"9b42d864de05a34343bda8ee8e127b75a44c2a0c","modified":1533208037611},{"_id":"public/archives/2017/03/index.html","hash":"1b2ca844ad9ffc99a96b8e6112df015923d0910d","modified":1533208037611},{"_id":"public/archives/2017/12/index.html","hash":"604d166abfc799ee4af3f0e88a8d0ed92d349bfe","modified":1533208037611},{"_id":"public/archives/2018/index.html","hash":"cb2b57e976906dc71ce9b901a5d9f759ba70b7a1","modified":1533208037611},{"_id":"public/archives/2018/page/2/index.html","hash":"be63b7942172dc76b0f71d97d01e5be31836034d","modified":1533208037611},{"_id":"public/archives/2018/03/index.html","hash":"78776cdc49a1dfaf9b461859dcf51f140c9cd06b","modified":1533208037611},{"_id":"public/archives/2018/07/index.html","hash":"71d44fec314df606aa565291adb09e8ee021b974","modified":1533208037611},{"_id":"public/archives/2018/08/index.html","hash":"bb7f31f5805bf94623fa189f4b4e6eee30d99695","modified":1533208037611},{"_id":"public/categories/Android/index.html","hash":"708936dc1762702e6c4eee4cf6823165e26632d7","modified":1533208037611},{"_id":"public/categories/Android/page/2/index.html","hash":"bc4da9edf6385c0ed63521cfa2ae95c0bc7499f8","modified":1533208037611},{"_id":"public/categories/Android/page/3/index.html","hash":"54a0753dcd4c569ff107af1f51208f0eb4a69b4c","modified":1533208037611},{"_id":"public/categories/Android/page/4/index.html","hash":"a6e307172a8351ed1eabb46dc8b2039a5cea2991","modified":1533208037611},{"_id":"public/categories/RN/index.html","hash":"666b808ec71ee65e614ae4fc7bb5dcaef7a32be5","modified":1533208037611},{"_id":"public/categories/Rxjava/index.html","hash":"056070256675bf6c65e206d2d84df2de2d3ad904","modified":1533208037611},{"_id":"public/categories/Dev/index.html","hash":"215d5a6521c85cebf19a9f0e7e3c0a5a9f859a46","modified":1533208037611},{"_id":"public/categories/Life/index.html","hash":"d63b901c6a4d014da3f5615be7384cc1816edc49","modified":1533208037611},{"_id":"public/index.html","hash":"46472938fc7c2a81142e490cef1eae7ca85bcbc6","modified":1533208037611},{"_id":"public/page/2/index.html","hash":"2e75ceb55207a32528c2dd36e8c87af5c5e359d5","modified":1533208037612},{"_id":"public/page/3/index.html","hash":"953803ed24d0ec188f7bfd0c86dbf92f1d995232","modified":1533208037612},{"_id":"public/page/4/index.html","hash":"3a698d3bbb0a7dbc9f44a29b81dc6480d675c247","modified":1533208037612},{"_id":"public/page/5/index.html","hash":"7ff392d83787406759538e0aeb3ca0d2b2a8b446","modified":1533208037612},{"_id":"public/tags/Android/index.html","hash":"4c8f10a23dcd6e9cf8122986426ec01986a70ca1","modified":1533208037612},{"_id":"public/tags/Android/page/2/index.html","hash":"e8ccba1ec42c0092811c7d97b16b688cb4cc64a6","modified":1533208037612},{"_id":"public/tags/Android/page/3/index.html","hash":"bf1236e6836298cc0d9b0ca63944f628bc60a1db","modified":1533208037612},{"_id":"public/tags/Android/page/4/index.html","hash":"35ce2a3d40abee4c35876d017b9b68867f4f5b4f","modified":1533208037612},{"_id":"public/tags/RN/index.html","hash":"f03d794d97e974b5dc9c6688aca80fb2d31d3956","modified":1533208037612},{"_id":"public/tags/Rxjava/index.html","hash":"73e00111943ed3135b6d902eebf92a171182d183","modified":1533208037612},{"_id":"public/tags/Dev/index.html","hash":"a9a6b9381e176ed13eb84880cc96f4f10f954c62","modified":1533208037612},{"_id":"public/tags/Life/index.html","hash":"70e90822586f85120b5cd0879baf3bea430bdaee","modified":1533208037612},{"_id":"public/favicon.png","hash":"81d9781886293ade0f24e69a1cc06ff91ae777e7","modified":1533208037619},{"_id":"public/CNAME","hash":"f33fc22be437f8d5994e215aa487ed18b91c260b","modified":1533208037619},{"_id":"public/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1533208037619},{"_id":"public/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1533208037619},{"_id":"public/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1533208037619},{"_id":"public/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1533208037619},{"_id":"public/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1533208037619},{"_id":"public/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1533208037620},{"_id":"public/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1533208037620},{"_id":"public/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1533208037620},{"_id":"public/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1533208037620},{"_id":"public/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1533208037620},{"_id":"public/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1533208037620},{"_id":"public/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1533208037620},{"_id":"public/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1533208037620},{"_id":"public/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1533208037620},{"_id":"public/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1533208037620},{"_id":"public/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1533208037620},{"_id":"public/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1533208037620},{"_id":"public/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1533208037620},{"_id":"public/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1533208037620},{"_id":"public/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1533208037620},{"_id":"public/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1533208037620},{"_id":"public/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1533208037620},{"_id":"public/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1533208037620},{"_id":"public/img/avatar1.jpeg","hash":"ac965d7c4df9d7dca230bac9e9b9898e3413763f","modified":1533208037621},{"_id":"public/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1533208037621},{"_id":"public/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1533208037621},{"_id":"public/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1533208037621},{"_id":"public/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1533208037621},{"_id":"public/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1533208037621},{"_id":"public/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1533208037621},{"_id":"public/live2d/device.min.js","hash":"ad8ffa5cc29d478f718c73eef31052dd4cdae7b6","modified":1533208037621},{"_id":"public/live2d/assets/hijiki.model.json","hash":"feff43bf7498d213982c3736c2c029664e4bcbd2","modified":1533208037621},{"_id":"public/live2d/assets/hijiki.pose.json","hash":"81438bf69b32c7c11e311b4fe043730cdc7b7ec2","modified":1533208037621},{"_id":"public/live2d/assets/mtn/00_idle.mtn","hash":"b224c60e463b9f71ddbfc0c720e430496c175f4f","modified":1533208037621},{"_id":"public/live2d/assets/mtn/01.mtn","hash":"fb550833ae22c9954c3e01df37ed29b2d61700f2","modified":1533208037621},{"_id":"public/live2d/assets/mtn/02.mtn","hash":"7eafc52edc73b7cb80ae70d34b43c6ac778fa47b","modified":1533208037622},{"_id":"public/live2d/assets/mtn/03.mtn","hash":"f900737c7a98441cbb2e05255427e6260e19ae68","modified":1533208037622},{"_id":"public/live2d/assets/mtn/04.mtn","hash":"c7a25d3c5d783639bae18db2f3cd284b819c3c85","modified":1533208037622},{"_id":"public/live2d/assets/mtn/06.mtn","hash":"ad404bd852d276cdd3d054c953e23f90e4e45ae1","modified":1533208037622},{"_id":"public/live2d/assets/mtn/05.mtn","hash":"dd20ad24b5d1830a5d44b9bccb28f922eea5e0e5","modified":1533208037622},{"_id":"public/live2d/assets/mtn/07.mtn","hash":"b7f2e3a9fa4f3ffbb6e64a08f8d9f45ca1868ffb","modified":1533208037622},{"_id":"public/live2d/assets/mtn/08.mtn","hash":"4411c7651ff65195b113d95e7d5ebef8a59a37d9","modified":1533208037622},{"_id":"public/uploads/wechat-qcode.jpg","hash":"07a245af7df3ed177865e1550244e230e71bb7da","modified":1533208038512},{"_id":"public/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1533208038512},{"_id":"public/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1533208038513},{"_id":"public/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1533208038517},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1533208038517},{"_id":"public/js/main.js","hash":"d58bbc593d94d48e85d4ebfb002910444080cb06","modified":1533208038517},{"_id":"public/js/mobile.js","hash":"0f4c1fcd6df47a196ed9495c225173402aa7d769","modified":1533208038517},{"_id":"public/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1533208038517},{"_id":"public/js/pc.js","hash":"19a1660b10358046e7a1f398284491519b2ffd47","modified":1533208038518},{"_id":"public/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1533208038518},{"_id":"public/css/style.css","hash":"13e6ed97480d6a1e8981a4a5cc08da5f4314bc98","modified":1533208038518},{"_id":"public/live2d/script.js","hash":"6b85d115e5785ab244c8ffa8073be3930868589a","modified":1533208038518},{"_id":"public/live2d/assets/moc/hijiki.moc","hash":"44289e62545a7046e0f5231103a851750b78524e","modified":1533208038518},{"_id":"public/live2d/assets/moc/hijiki.2048/texture_00.png","hash":"66464e0d96439695b5542c5e2f5be60739c29999","modified":1533208038522}],"Category":[{"name":"Android","_id":"cjkcgh6m900021kyg3xcof5vt"},{"name":"RN","_id":"cjkcgh6ml000m1kygq26v4xfr"},{"name":"Rxjava","_id":"cjkcgh6mu001d1kyghtvt0hj1"},{"name":"Dev","_id":"cjkcgh6n200251kygbbutb2qj"},{"name":"Life","_id":"cjkcgh6nf00341kygye2bolug"},{"name":"Design Pattern","_id":"cjkcgh6nn003x1kygiu2o9p0t"}],"Data":[],"Page":[{"title":"分类","date":"2015-12-22T09:16:59.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2015-12-22 17:16:59\ntype: \"categories\"\n---\n","updated":"2018-03-06T01:42:18.399Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjkcgh6nz004j1kygofkf5xu5","content":"","excerpt":"","more":""},{"title":"标签","date":"2015-12-22T09:32:44.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2015-12-22 17:32:44\ntype: \"tags\"\n---\n","updated":"2018-03-06T01:42:05.670Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjkcgh6o0004l1kygz4m1zk54","content":"","excerpt":"","more":""},{"title":"关于我","date":"2015-12-22T09:32:44.000Z","type":"about","_content":"\n\n\n### 冯安\n\n### 移动端爱好者，喜欢探索新鲜事物\n\n#### 个人邮箱：fengan1102@gmail.com\n\n- React Native\n- Android\n- Php\n- ...\n\n\n\n<img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/IMG_2203.GIF\" width=\"500\" hegiht=\"300\" align=center />\n\n\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2015-12-22 17:32:44\ntype: \"about\"\n---\n\n\n\n### 冯安\n\n### 移动端爱好者，喜欢探索新鲜事物\n\n#### 个人邮箱：fengan1102@gmail.com\n\n- React Native\n- Android\n- Php\n- ...\n\n\n\n<img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/IMG_2203.GIF\" width=\"500\" hegiht=\"300\" align=center />\n\n\n","updated":"2018-07-28T05:32:35.566Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjkcgh6o0004n1kygc64ubiox","content":"<h3 id=\"冯安\"><a href=\"#冯安\" class=\"headerlink\" title=\"冯安\"></a>冯安</h3><h3 id=\"移动端爱好者，喜欢探索新鲜事物\"><a href=\"#移动端爱好者，喜欢探索新鲜事物\" class=\"headerlink\" title=\"移动端爱好者，喜欢探索新鲜事物\"></a>移动端爱好者，喜欢探索新鲜事物</h3><h4 id=\"个人邮箱：fengan1102-gmail-com\"><a href=\"#个人邮箱：fengan1102-gmail-com\" class=\"headerlink\" title=\"个人邮箱：fengan1102@gmail.com\"></a>个人邮箱：fengan1102@gmail.com</h4><ul>\n<li>React Native</li>\n<li>Android</li>\n<li>Php</li>\n<li>…</li>\n</ul>\n<p><img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/IMG_2203.GIF\" width=\"500\" hegiht=\"300\" align=\"center\"></p>\n","excerpt":"","more":"<h3 id=\"冯安\"><a href=\"#冯安\" class=\"headerlink\" title=\"冯安\"></a>冯安</h3><h3 id=\"移动端爱好者，喜欢探索新鲜事物\"><a href=\"#移动端爱好者，喜欢探索新鲜事物\" class=\"headerlink\" title=\"移动端爱好者，喜欢探索新鲜事物\"></a>移动端爱好者，喜欢探索新鲜事物</h3><h4 id=\"个人邮箱：fengan1102-gmail-com\"><a href=\"#个人邮箱：fengan1102-gmail-com\" class=\"headerlink\" title=\"个人邮箱：fengan1102@gmail.com\"></a>个人邮箱：fengan1102@gmail.com</h4><ul>\n<li>React Native</li>\n<li>Android</li>\n<li>Php</li>\n<li>…</li>\n</ul>\n<p><img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/IMG_2203.GIF\" width=\"500\" hegiht=\"300\" align=center /></p>\n"},{"title":"联系方式","date":"2018-08-02T06:31:11.000Z","_content":"\n### 微信联系我\n\n<img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/mine/wx.jpeg\" width=\"200\">\n\n### 赏这个帅哥哥一包辣条\n\n##### 微信\n\n<img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/mine/wxpay.jpeg\" width=\"200\" >\n\n##### 支付宝\n\n<img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/mine/alipay.jpeg\" width=\"200\">","source":"weixin/index.md","raw":"---\ntitle: 联系方式\ndate: 2018-08-02 14:31:11\n---\n\n### 微信联系我\n\n<img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/mine/wx.jpeg\" width=\"200\">\n\n### 赏这个帅哥哥一包辣条\n\n##### 微信\n\n<img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/mine/wxpay.jpeg\" width=\"200\" >\n\n##### 支付宝\n\n<img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/mine/alipay.jpeg\" width=\"200\">","updated":"2018-08-02T06:47:16.331Z","path":"weixin/index.html","comments":1,"layout":"page","_id":"cjkcgh6oa004r1kyg55g84hwz","content":"<h3 id=\"微信联系我\"><a href=\"#微信联系我\" class=\"headerlink\" title=\"微信联系我\"></a>微信联系我</h3><p><img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/mine/wx.jpeg\" width=\"200\"></p>\n<h3 id=\"赏这个帅哥哥一包辣条\"><a href=\"#赏这个帅哥哥一包辣条\" class=\"headerlink\" title=\"赏这个帅哥哥一包辣条\"></a>赏这个帅哥哥一包辣条</h3><h5 id=\"微信\"><a href=\"#微信\" class=\"headerlink\" title=\"微信\"></a>微信</h5><p><img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/mine/wxpay.jpeg\" width=\"200\"></p>\n<h5 id=\"支付宝\"><a href=\"#支付宝\" class=\"headerlink\" title=\"支付宝\"></a>支付宝</h5><p><img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/mine/alipay.jpeg\" width=\"200\"></p>\n","excerpt":"","more":"<h3 id=\"微信联系我\"><a href=\"#微信联系我\" class=\"headerlink\" title=\"微信联系我\"></a>微信联系我</h3><p><img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/mine/wx.jpeg\" width=\"200\"></p>\n<h3 id=\"赏这个帅哥哥一包辣条\"><a href=\"#赏这个帅哥哥一包辣条\" class=\"headerlink\" title=\"赏这个帅哥哥一包辣条\"></a>赏这个帅哥哥一包辣条</h3><h5 id=\"微信\"><a href=\"#微信\" class=\"headerlink\" title=\"微信\"></a>微信</h5><p><img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/mine/wxpay.jpeg\" width=\"200\" ></p>\n<h5 id=\"支付宝\"><a href=\"#支付宝\" class=\"headerlink\" title=\"支付宝\"></a>支付宝</h5><p><img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/mine/alipay.jpeg\" width=\"200\"></p>\n"}],"Post":[{"title":"Android7.0之应用间共享文件","date":"2016-07-23T08:58:17.000Z","_content":"Android7.0适配之应用间共享文件\n\n<!--more-->\n\n\n### 出现问题 ###\nAndroid N(API 25),打开相册编辑页面crash,报出FileUriExposedException异常\n\n```\nandroid.os.FileUriExposedException: file:////storage/emulated/0/temp/1474956193735.jpg exposed beyond app through Intent.getData()\nat android.os.StrictMode.onFileUriExposed(StrictMode.java:1799)\nat android.net.Uri.checkFileUriExposed(Uri.java:2346)\nat android.content.Intent.prepareToLeaveProcess(Intent.java:8933)\nat android.content.Intent.prepareToLeaveProcess(Intent.java:8894)\nat android.app.Instrumentation.execStartActivity(Instrumentation.java:1517)\nat android.app.Activity.startActivityForResult(Activity.java:4223)\n...\nat android.app.Activity.startActivityForResult(Activity.java:4182)\n```\n### 查找原因 ###\nAndroid N的应用,API禁止向应用外公开file://URI,如果一项包含文件URI的Intent离开应用, 应用crash并报FileUriExposedException异常\n### 解决办法 ###\n若想要在应用间共享文件,应该发送一项content://URI,并该URI临时访问权限,进行此授权的方式是通过FileProvider类 \n### 具体步骤 ###\n#### [1] 清单文件 ####\n```\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.fengan.providerdemo\">\n\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\">\n        <activity android:name=\".MainActivity\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n           <!--authorities=\"你的包名+fileprovider\" -->\n        <provider\n            android:authorities=\"com.fengan.providerdemo.fileprovider\"\n            android:name=\"android.support.v4.content.FileProvider\"\n            android:grantUriPermissions=\"true\"\n            android:exported=\"false\">\n            <meta-data\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\n                android:resource=\"@xml/filepaths\"/>\n        </provider>\n    </application>\n\n</manifest>\n```\n#### [2] res下xml文件夹 ####\n![Alt text](./1485158383668.png)\n注意xml文件名和清单文件中@xml/filepaths相同\nxml文件内容\n\n```\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n<paths>\n    <!-- external-path:sd ；path:你的应用保存文件的根目录；name随便定义-->\n    //<external-path path=\"fengan_imgs/\" name=\"files_path\" />\n    <external-path path=\"\" name=\"files_path\" />\n</paths>\n```\n注意:\npath=\"\",有特殊意义,它代表更目录,也就是说可以向应用共享根目录及其子目录下任何一个文件,如果将path写为path=\"fengan_imgs/\",那么只能在fengan_imgs/目录下才可以分享!\n[3]核心代码\n将File转换为uri\n\n```\n private static Uri getUriForFile(Context context, File file) {\n        if (context == null || file == null) {\n            throw new NullPointerException();\n        }\n        Uri uri;\n        if (Build.VERSION.SDK_INT >= 24) {\n        //和android:authorities=\"com.fengan.providerdemo.fileprovider\"对应\n            uri = FileProvider.getUriForFile(context.getApplicationContext(), \"com.fengan.providerdemo.fileprovider\", file);\n        } else {\n            uri = Uri.fromFile(file);\n        }\n        return uri;\n    }\n```\n\n\n\n\n- Uri的scheme类型为file,改成了又FileProvider创建一个content类型的Uri打开相机,打印该Uri为content://com.fengan.providerdemo/files_path/temp/1474960080319.jpg`。 \n  //其中camera_photos就是file_paths.xml中paths的name。\n\n```\n /**\n     * 打开相机\n     * 兼容7.0\n     *\n     * @param activity    Activity\n     * @param file        File\n     * @param requestCode result requestCode\n     */\n    public static void startActionCapture(Activity activity, File file, int requestCode) {\n        if (activity == null) {\n            return;\n        }\n        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n     intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION); //添加这一句表示对目标应用临时授权该Uri所代表的文件\n        intent.putExtra(MediaStore.EXTRA_OUTPUT, getUriForFile(activity, file));//拍取照片保存到指定Uri\n        activity.startActivityForResult(intent, requestCode);\n    }\n```\n## 总结 ##\n - 针对涉及到从Android设备上获取照片(拍照,或从相册,文件中选择)打开相机,裁剪图片,压缩图片,可以使用一个轻量级开源库,TakePhoto!\n    https://github.com/crazycodeboy/TakePhoto/\n\n","source":"_posts/Android7-0之应用间共享文件.md","raw":"---\ntitle: Android7.0之应用间共享文件\ndate: 2016-07-23 16:58:17\ntags: \n- Android\ncategories: Android\n---\nAndroid7.0适配之应用间共享文件\n\n<!--more-->\n\n\n### 出现问题 ###\nAndroid N(API 25),打开相册编辑页面crash,报出FileUriExposedException异常\n\n```\nandroid.os.FileUriExposedException: file:////storage/emulated/0/temp/1474956193735.jpg exposed beyond app through Intent.getData()\nat android.os.StrictMode.onFileUriExposed(StrictMode.java:1799)\nat android.net.Uri.checkFileUriExposed(Uri.java:2346)\nat android.content.Intent.prepareToLeaveProcess(Intent.java:8933)\nat android.content.Intent.prepareToLeaveProcess(Intent.java:8894)\nat android.app.Instrumentation.execStartActivity(Instrumentation.java:1517)\nat android.app.Activity.startActivityForResult(Activity.java:4223)\n...\nat android.app.Activity.startActivityForResult(Activity.java:4182)\n```\n### 查找原因 ###\nAndroid N的应用,API禁止向应用外公开file://URI,如果一项包含文件URI的Intent离开应用, 应用crash并报FileUriExposedException异常\n### 解决办法 ###\n若想要在应用间共享文件,应该发送一项content://URI,并该URI临时访问权限,进行此授权的方式是通过FileProvider类 \n### 具体步骤 ###\n#### [1] 清单文件 ####\n```\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.fengan.providerdemo\">\n\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\">\n        <activity android:name=\".MainActivity\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n           <!--authorities=\"你的包名+fileprovider\" -->\n        <provider\n            android:authorities=\"com.fengan.providerdemo.fileprovider\"\n            android:name=\"android.support.v4.content.FileProvider\"\n            android:grantUriPermissions=\"true\"\n            android:exported=\"false\">\n            <meta-data\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\n                android:resource=\"@xml/filepaths\"/>\n        </provider>\n    </application>\n\n</manifest>\n```\n#### [2] res下xml文件夹 ####\n![Alt text](./1485158383668.png)\n注意xml文件名和清单文件中@xml/filepaths相同\nxml文件内容\n\n```\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n<paths>\n    <!-- external-path:sd ；path:你的应用保存文件的根目录；name随便定义-->\n    //<external-path path=\"fengan_imgs/\" name=\"files_path\" />\n    <external-path path=\"\" name=\"files_path\" />\n</paths>\n```\n注意:\npath=\"\",有特殊意义,它代表更目录,也就是说可以向应用共享根目录及其子目录下任何一个文件,如果将path写为path=\"fengan_imgs/\",那么只能在fengan_imgs/目录下才可以分享!\n[3]核心代码\n将File转换为uri\n\n```\n private static Uri getUriForFile(Context context, File file) {\n        if (context == null || file == null) {\n            throw new NullPointerException();\n        }\n        Uri uri;\n        if (Build.VERSION.SDK_INT >= 24) {\n        //和android:authorities=\"com.fengan.providerdemo.fileprovider\"对应\n            uri = FileProvider.getUriForFile(context.getApplicationContext(), \"com.fengan.providerdemo.fileprovider\", file);\n        } else {\n            uri = Uri.fromFile(file);\n        }\n        return uri;\n    }\n```\n\n\n\n\n- Uri的scheme类型为file,改成了又FileProvider创建一个content类型的Uri打开相机,打印该Uri为content://com.fengan.providerdemo/files_path/temp/1474960080319.jpg`。 \n  //其中camera_photos就是file_paths.xml中paths的name。\n\n```\n /**\n     * 打开相机\n     * 兼容7.0\n     *\n     * @param activity    Activity\n     * @param file        File\n     * @param requestCode result requestCode\n     */\n    public static void startActionCapture(Activity activity, File file, int requestCode) {\n        if (activity == null) {\n            return;\n        }\n        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n     intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION); //添加这一句表示对目标应用临时授权该Uri所代表的文件\n        intent.putExtra(MediaStore.EXTRA_OUTPUT, getUriForFile(activity, file));//拍取照片保存到指定Uri\n        activity.startActivityForResult(intent, requestCode);\n    }\n```\n## 总结 ##\n - 针对涉及到从Android设备上获取照片(拍照,或从相册,文件中选择)打开相机,裁剪图片,压缩图片,可以使用一个轻量级开源库,TakePhoto!\n    https://github.com/crazycodeboy/TakePhoto/\n\n","slug":"Android7-0之应用间共享文件","published":1,"updated":"2018-07-19T02:07:31.291Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6m100001kyguqk46mj2","content":"<p>Android7.0适配之应用间共享文件</p>\n<a id=\"more\"></a>\n<h3 id=\"出现问题\"><a href=\"#出现问题\" class=\"headerlink\" title=\"出现问题\"></a>出现问题</h3><p>Android N(API 25),打开相册编辑页面crash,报出FileUriExposedException异常</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">android<span class=\"selector-class\">.os</span><span class=\"selector-class\">.FileUriExposedException</span>: file:<span class=\"comment\">////storage/emulated/0/temp/1474956193735.jpg exposed beyond app through Intent.getData()</span></div><div class=\"line\">at android<span class=\"selector-class\">.os</span><span class=\"selector-class\">.StrictMode</span><span class=\"selector-class\">.onFileUriExposed</span>(StrictMode<span class=\"selector-class\">.java</span>:<span class=\"number\">1799</span>)</div><div class=\"line\">at android<span class=\"selector-class\">.net</span><span class=\"selector-class\">.Uri</span><span class=\"selector-class\">.checkFileUriExposed</span>(Uri<span class=\"selector-class\">.java</span>:<span class=\"number\">2346</span>)</div><div class=\"line\">at android<span class=\"selector-class\">.content</span><span class=\"selector-class\">.Intent</span><span class=\"selector-class\">.prepareToLeaveProcess</span>(Intent<span class=\"selector-class\">.java</span>:<span class=\"number\">8933</span>)</div><div class=\"line\">at android<span class=\"selector-class\">.content</span><span class=\"selector-class\">.Intent</span><span class=\"selector-class\">.prepareToLeaveProcess</span>(Intent<span class=\"selector-class\">.java</span>:<span class=\"number\">8894</span>)</div><div class=\"line\">at android<span class=\"selector-class\">.app</span><span class=\"selector-class\">.Instrumentation</span><span class=\"selector-class\">.execStartActivity</span>(Instrumentation<span class=\"selector-class\">.java</span>:<span class=\"number\">1517</span>)</div><div class=\"line\">at android<span class=\"selector-class\">.app</span><span class=\"selector-class\">.Activity</span><span class=\"selector-class\">.startActivityForResult</span>(Activity<span class=\"selector-class\">.java</span>:<span class=\"number\">4223</span>)</div><div class=\"line\">...</div><div class=\"line\">at android<span class=\"selector-class\">.app</span><span class=\"selector-class\">.Activity</span><span class=\"selector-class\">.startActivityForResult</span>(Activity<span class=\"selector-class\">.java</span>:<span class=\"number\">4182</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"查找原因\"><a href=\"#查找原因\" class=\"headerlink\" title=\"查找原因\"></a>查找原因</h3><p>Android N的应用,API禁止向应用外公开file://URI,如果一项包含文件URI的Intent离开应用, 应用crash并报FileUriExposedException异常</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>若想要在应用间共享文件,应该发送一项content://URI,并该URI临时访问权限,进行此授权的方式是通过FileProvider类 </p>\n<h3 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h3><h4 id=\"1-清单文件\"><a href=\"#1-清单文件\" class=\"headerlink\" title=\"[1] 清单文件\"></a>[1] 清单文件</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">package</span>=<span class=\"string\">\"com.fengan.providerdemo\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">application</span></span></div><div class=\"line\">        <span class=\"attr\">android:allowBackup</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@mipmap/ic_launcher\"</span></div><div class=\"line\">        <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span></div><div class=\"line\">        <span class=\"attr\">android:supportsRtl</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/AppTheme\"</span>&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".MainActivity\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\">           <span class=\"comment\">&lt;!--authorities=\"你的包名+fileprovider\" --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">provider</span></span></div><div class=\"line\">            <span class=\"attr\">android:authorities</span>=<span class=\"string\">\"com.fengan.providerdemo.fileprovider\"</span></div><div class=\"line\">            <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.v4.content.FileProvider\"</span></div><div class=\"line\">            <span class=\"attr\">android:grantUriPermissions</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">            <span class=\"attr\">android:exported</span>=<span class=\"string\">\"false\"</span>&gt;</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">meta-data</span></span></div><div class=\"line\">                <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.FILE_PROVIDER_PATHS\"</span></div><div class=\"line\">                <span class=\"attr\">android:resource</span>=<span class=\"string\">\"@xml/filepaths\"</span>/&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">provider</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"2-res下xml文件夹\"><a href=\"#2-res下xml文件夹\" class=\"headerlink\" title=\"[2] res下xml文件夹\"></a>[2] res下xml文件夹</h4><p><img src=\"./1485158383668.png\" alt=\"Alt text\"><br>注意xml文件名和清单文件中@xml/filepaths相同<br>xml文件内容</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">paths</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- external-path:sd ；path:你的应用保存文件的根目录；name随便定义--&gt;</span></div><div class=\"line\">    //<span class=\"tag\">&lt;<span class=\"name\">external-path</span> <span class=\"attr\">path</span>=<span class=\"string\">\"fengan_imgs/\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"files_path\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">external-path</span> <span class=\"attr\">path</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"files_path\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">paths</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>注意:<br>path=””,有特殊意义,它代表更目录,也就是说可以向应用共享根目录及其子目录下任何一个文件,如果将path写为path=”fengan_imgs/“,那么只能在fengan_imgs/目录下才可以分享!<br>[3]核心代码<br>将File转换为uri</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Uri getUriForFile(Context context, <span class=\"keyword\">File</span> <span class=\"keyword\">file</span>) &#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (context == <span class=\"keyword\">null</span> || <span class=\"keyword\">file</span> == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</div><div class=\"line\">       &#125;</div><div class=\"line\">       Uri uri;</div><div class=\"line\">       <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= <span class=\"number\">24</span>) &#123;</div><div class=\"line\">       <span class=\"comment\">//和android:authorities=\"com.fengan.providerdemo.fileprovider\"对应</span></div><div class=\"line\">           uri = FileProvider.getUriForFile(context.getApplicationContext(), <span class=\"string\">\"com.fengan.providerdemo.fileprovider\"</span>, <span class=\"keyword\">file</span>);</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           uri = Uri.fromFile(<span class=\"keyword\">file</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> uri;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Uri的scheme类型为file,改成了又FileProvider创建一个content类型的Uri打开相机,打印该Uri为content://com.fengan.providerdemo/files_path/temp/1474960080319.jpg`。<br>//其中camera_photos就是file_paths.xml中paths的name。</li>\n</ul>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * 打开相机</div><div class=\"line\">    * 兼容7.0</div><div class=\"line\">    *</div><div class=\"line\">    * <span class=\"doctag\">@param</span> activity    Activity</div><div class=\"line\">    * <span class=\"doctag\">@param</span> file        File</div><div class=\"line\">    * <span class=\"doctag\">@param</span> requestCode result requestCode</div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">startActionCapture</span><span class=\"params\">(Activity activity, File file, <span class=\"keyword\">int</span> requestCode)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (activity == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       Intent intent = <span class=\"keyword\">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</div><div class=\"line\">    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION); <span class=\"comment\">//添加这一句表示对目标应用临时授权该Uri所代表的文件</span></div><div class=\"line\">       intent.putExtra(MediaStore.EXTRA_OUTPUT, getUriForFile(activity, file));<span class=\"comment\">//拍取照片保存到指定Uri</span></div><div class=\"line\">       activity.startActivityForResult(intent, requestCode);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>针对涉及到从Android设备上获取照片(拍照,或从相册,文件中选择)打开相机,裁剪图片,压缩图片,可以使用一个轻量级开源库,TakePhoto!<br> <a href=\"https://github.com/crazycodeboy/TakePhoto/\" target=\"_blank\" rel=\"external\">https://github.com/crazycodeboy/TakePhoto/</a></li>\n</ul>\n","excerpt":"<p>Android7.0适配之应用间共享文件</p>","more":"<h3 id=\"出现问题\"><a href=\"#出现问题\" class=\"headerlink\" title=\"出现问题\"></a>出现问题</h3><p>Android N(API 25),打开相册编辑页面crash,报出FileUriExposedException异常</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">android<span class=\"selector-class\">.os</span><span class=\"selector-class\">.FileUriExposedException</span>: file:<span class=\"comment\">////storage/emulated/0/temp/1474956193735.jpg exposed beyond app through Intent.getData()</span></div><div class=\"line\">at android<span class=\"selector-class\">.os</span><span class=\"selector-class\">.StrictMode</span><span class=\"selector-class\">.onFileUriExposed</span>(StrictMode<span class=\"selector-class\">.java</span>:<span class=\"number\">1799</span>)</div><div class=\"line\">at android<span class=\"selector-class\">.net</span><span class=\"selector-class\">.Uri</span><span class=\"selector-class\">.checkFileUriExposed</span>(Uri<span class=\"selector-class\">.java</span>:<span class=\"number\">2346</span>)</div><div class=\"line\">at android<span class=\"selector-class\">.content</span><span class=\"selector-class\">.Intent</span><span class=\"selector-class\">.prepareToLeaveProcess</span>(Intent<span class=\"selector-class\">.java</span>:<span class=\"number\">8933</span>)</div><div class=\"line\">at android<span class=\"selector-class\">.content</span><span class=\"selector-class\">.Intent</span><span class=\"selector-class\">.prepareToLeaveProcess</span>(Intent<span class=\"selector-class\">.java</span>:<span class=\"number\">8894</span>)</div><div class=\"line\">at android<span class=\"selector-class\">.app</span><span class=\"selector-class\">.Instrumentation</span><span class=\"selector-class\">.execStartActivity</span>(Instrumentation<span class=\"selector-class\">.java</span>:<span class=\"number\">1517</span>)</div><div class=\"line\">at android<span class=\"selector-class\">.app</span><span class=\"selector-class\">.Activity</span><span class=\"selector-class\">.startActivityForResult</span>(Activity<span class=\"selector-class\">.java</span>:<span class=\"number\">4223</span>)</div><div class=\"line\">...</div><div class=\"line\">at android<span class=\"selector-class\">.app</span><span class=\"selector-class\">.Activity</span><span class=\"selector-class\">.startActivityForResult</span>(Activity<span class=\"selector-class\">.java</span>:<span class=\"number\">4182</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"查找原因\"><a href=\"#查找原因\" class=\"headerlink\" title=\"查找原因\"></a>查找原因</h3><p>Android N的应用,API禁止向应用外公开file://URI,如果一项包含文件URI的Intent离开应用, 应用crash并报FileUriExposedException异常</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>若想要在应用间共享文件,应该发送一项content://URI,并该URI临时访问权限,进行此授权的方式是通过FileProvider类 </p>\n<h3 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h3><h4 id=\"1-清单文件\"><a href=\"#1-清单文件\" class=\"headerlink\" title=\"[1] 清单文件\"></a>[1] 清单文件</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">package</span>=<span class=\"string\">\"com.fengan.providerdemo\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">application</span></div><div class=\"line\">        <span class=\"attr\">android:allowBackup</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@mipmap/ic_launcher\"</span></div><div class=\"line\">        <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span></div><div class=\"line\">        <span class=\"attr\">android:supportsRtl</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/AppTheme\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".MainActivity\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\">           <span class=\"comment\">&lt;!--authorities=\"你的包名+fileprovider\" --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">provider</span></div><div class=\"line\">            <span class=\"attr\">android:authorities</span>=<span class=\"string\">\"com.fengan.providerdemo.fileprovider\"</span></div><div class=\"line\">            <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.v4.content.FileProvider\"</span></div><div class=\"line\">            <span class=\"attr\">android:grantUriPermissions</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">            <span class=\"attr\">android:exported</span>=<span class=\"string\">\"false\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">meta-data</span></div><div class=\"line\">                <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.FILE_PROVIDER_PATHS\"</span></div><div class=\"line\">                <span class=\"attr\">android:resource</span>=<span class=\"string\">\"@xml/filepaths\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">provider</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"2-res下xml文件夹\"><a href=\"#2-res下xml文件夹\" class=\"headerlink\" title=\"[2] res下xml文件夹\"></a>[2] res下xml文件夹</h4><p><img src=\"./1485158383668.png\" alt=\"Alt text\"><br>注意xml文件名和清单文件中@xml/filepaths相同<br>xml文件内容</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">paths</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- external-path:sd ；path:你的应用保存文件的根目录；name随便定义--&gt;</span></div><div class=\"line\">    //<span class=\"tag\">&lt;<span class=\"name\">external-path</span> <span class=\"attr\">path</span>=<span class=\"string\">\"fengan_imgs/\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"files_path\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">external-path</span> <span class=\"attr\">path</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"files_path\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">paths</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>注意:<br>path=””,有特殊意义,它代表更目录,也就是说可以向应用共享根目录及其子目录下任何一个文件,如果将path写为path=”fengan_imgs/“,那么只能在fengan_imgs/目录下才可以分享!<br>[3]核心代码<br>将File转换为uri</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Uri getUriForFile(Context context, <span class=\"keyword\">File</span> <span class=\"keyword\">file</span>) &#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (context == <span class=\"keyword\">null</span> || <span class=\"keyword\">file</span> == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</div><div class=\"line\">       &#125;</div><div class=\"line\">       Uri uri;</div><div class=\"line\">       <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= <span class=\"number\">24</span>) &#123;</div><div class=\"line\">       <span class=\"comment\">//和android:authorities=\"com.fengan.providerdemo.fileprovider\"对应</span></div><div class=\"line\">           uri = FileProvider.getUriForFile(context.getApplicationContext(), <span class=\"string\">\"com.fengan.providerdemo.fileprovider\"</span>, <span class=\"keyword\">file</span>);</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           uri = Uri.fromFile(<span class=\"keyword\">file</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> uri;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Uri的scheme类型为file,改成了又FileProvider创建一个content类型的Uri打开相机,打印该Uri为content://com.fengan.providerdemo/files_path/temp/1474960080319.jpg`。<br>//其中camera_photos就是file_paths.xml中paths的name。</li>\n</ul>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">    * 打开相机</div><div class=\"line\">    * 兼容7.0</div><div class=\"line\">    *</div><div class=\"line\">    * <span class=\"doctag\">@param</span> activity    Activity</div><div class=\"line\">    * <span class=\"doctag\">@param</span> file        File</div><div class=\"line\">    * <span class=\"doctag\">@param</span> requestCode result requestCode</div><div class=\"line\">    */</span></div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">startActionCapture</span><span class=\"params\">(Activity activity, File file, <span class=\"keyword\">int</span> requestCode)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (activity == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       Intent intent = <span class=\"keyword\">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</div><div class=\"line\">    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION); <span class=\"comment\">//添加这一句表示对目标应用临时授权该Uri所代表的文件</span></div><div class=\"line\">       intent.putExtra(MediaStore.EXTRA_OUTPUT, getUriForFile(activity, file));<span class=\"comment\">//拍取照片保存到指定Uri</span></div><div class=\"line\">       activity.startActivityForResult(intent, requestCode);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>针对涉及到从Android设备上获取照片(拍照,或从相册,文件中选择)打开相机,裁剪图片,压缩图片,可以使用一个轻量级开源库,TakePhoto!<br> <a href=\"https://github.com/crazycodeboy/TakePhoto/\">https://github.com/crazycodeboy/TakePhoto/</a></li>\n</ul>"},{"title":"Gson封装","date":"2016-08-21T03:20:34.000Z","_content":"Gson封装\n\n- Gson封装的工具类\n- javabean和集合相互转换\n\n<!--more-->\n\n```\n\t/**\n\t * Created by fengan on 2017/7/6/006.\n\t */\n\n\timport com.google.gson.Gson;\n\timport com.google.gson.JsonArray;\n\timport com.google.gson.JsonElement;\n\timport com.google.gson.JsonParser;\n\timport com.google.gson.reflect.TypeToken;\n\n\timport java.util.ArrayList;\n\timport java.util.List;\n\timport java.util.Map;\n\n\n\tpublic class GsonUtil {\n    private static Gson gson = null;\n\n    static {\n        if (gson == null) {\n            gson = new Gson();\n        }\n    }\n\n    private GsonUtil() {\n    }\n\n    /**\n     * 转成json\n     *\n     * @param object\n     * @return\n     */\n    public static String GsonString(Object object) {\n        String gsonString = null;\n        if (gson != null) {\n            gsonString = gson.toJson(object);\n        }\n        return gsonString;\n    }\n\n    /**\n     * 转成bean\n     *\n     * @param gsonString\n     * @param cls\n     * @return\n     */\n    public static <T> T GsonToBean(String gsonString, Class<T> cls) {\n        T t = null;\n        if (gson != null) {\n            t = gson.fromJson(gsonString, cls);\n        }\n        return t;\n    }\n\n    /**\n     * 转成list\n     * 泛型在编译期类型被擦除导致报错\n     *\n     * @param gsonString\n     * @param cls\n     * @return\n     */\n    public static <T> List<T> GsonToList(String gsonString, Class<T> cls) {\n        List<T> list = null;\n        if (gson != null) {\n            list = gson.fromJson(gsonString, new TypeToken<List<T>>() {\n            }.getType());\n        }\n        return list;\n    }\n\n    /**\n     * 转成list\n     * 解决泛型问题\n     *\n     * @param json\n     * @param cls\n     * @param <T>\n     * @return\n     */\n    public static <T> List<T> jsonToList(String json, Class<T> cls) {\n        Gson gson = new Gson();\n        List<T> list = new ArrayList<T>();\n        JsonArray array = new JsonParser().parse(json).getAsJsonArray();\n        for (final JsonElement elem : array) {\n            list.add(gson.fromJson(elem, cls));\n        }\n        return list;\n    }\n\n\n    /**\n     * 转成list中有map的\n     *\n     * @param gsonString\n     * @return\n     */\n    public static <T> List<Map<String, T>> GsonToListMaps(String gsonString) {\n        List<Map<String, T>> list = null;\n        if (gson != null) {\n            list = gson.fromJson(gsonString,\n                    new TypeToken<List<Map<String, T>>>() {\n                    }.getType());\n        }\n        return list;\n    }\n\n    /**\n     * 转成map的\n     *\n     * @param gsonString\n     * @return\n     */\n    public static <T> Map<String, T> GsonToMaps(String gsonString) {\n        Map<String, T> map = null;\n        if (gson != null) {\n            map = gson.fromJson(gsonString, new TypeToken<Map<String, T>>() {\n            }.getType());\n        }\n        return map;\n    }\n}\n```\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=415792881&auto=1&height=66\"></iframe>","source":"_posts/Gson封装.md","raw":"---\ntitle: Gson封装\ndate: 2016-08-21 11:20:34\ntags: \n- Android\ncategories: Android\n---\nGson封装\n\n- Gson封装的工具类\n- javabean和集合相互转换\n\n<!--more-->\n\n```\n\t/**\n\t * Created by fengan on 2017/7/6/006.\n\t */\n\n\timport com.google.gson.Gson;\n\timport com.google.gson.JsonArray;\n\timport com.google.gson.JsonElement;\n\timport com.google.gson.JsonParser;\n\timport com.google.gson.reflect.TypeToken;\n\n\timport java.util.ArrayList;\n\timport java.util.List;\n\timport java.util.Map;\n\n\n\tpublic class GsonUtil {\n    private static Gson gson = null;\n\n    static {\n        if (gson == null) {\n            gson = new Gson();\n        }\n    }\n\n    private GsonUtil() {\n    }\n\n    /**\n     * 转成json\n     *\n     * @param object\n     * @return\n     */\n    public static String GsonString(Object object) {\n        String gsonString = null;\n        if (gson != null) {\n            gsonString = gson.toJson(object);\n        }\n        return gsonString;\n    }\n\n    /**\n     * 转成bean\n     *\n     * @param gsonString\n     * @param cls\n     * @return\n     */\n    public static <T> T GsonToBean(String gsonString, Class<T> cls) {\n        T t = null;\n        if (gson != null) {\n            t = gson.fromJson(gsonString, cls);\n        }\n        return t;\n    }\n\n    /**\n     * 转成list\n     * 泛型在编译期类型被擦除导致报错\n     *\n     * @param gsonString\n     * @param cls\n     * @return\n     */\n    public static <T> List<T> GsonToList(String gsonString, Class<T> cls) {\n        List<T> list = null;\n        if (gson != null) {\n            list = gson.fromJson(gsonString, new TypeToken<List<T>>() {\n            }.getType());\n        }\n        return list;\n    }\n\n    /**\n     * 转成list\n     * 解决泛型问题\n     *\n     * @param json\n     * @param cls\n     * @param <T>\n     * @return\n     */\n    public static <T> List<T> jsonToList(String json, Class<T> cls) {\n        Gson gson = new Gson();\n        List<T> list = new ArrayList<T>();\n        JsonArray array = new JsonParser().parse(json).getAsJsonArray();\n        for (final JsonElement elem : array) {\n            list.add(gson.fromJson(elem, cls));\n        }\n        return list;\n    }\n\n\n    /**\n     * 转成list中有map的\n     *\n     * @param gsonString\n     * @return\n     */\n    public static <T> List<Map<String, T>> GsonToListMaps(String gsonString) {\n        List<Map<String, T>> list = null;\n        if (gson != null) {\n            list = gson.fromJson(gsonString,\n                    new TypeToken<List<Map<String, T>>>() {\n                    }.getType());\n        }\n        return list;\n    }\n\n    /**\n     * 转成map的\n     *\n     * @param gsonString\n     * @return\n     */\n    public static <T> Map<String, T> GsonToMaps(String gsonString) {\n        Map<String, T> map = null;\n        if (gson != null) {\n            map = gson.fromJson(gsonString, new TypeToken<Map<String, T>>() {\n            }.getType());\n        }\n        return map;\n    }\n}\n```\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=415792881&auto=1&height=66\"></iframe>","slug":"Gson封装","published":1,"updated":"2018-07-19T02:12:29.217Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6m700011kygt246os06","content":"<p>Gson封装</p>\n<ul>\n<li>Gson封装的工具类</li>\n<li>javabean和集合相互转换</li>\n</ul>\n<a id=\"more\"></a>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * Created by fengan on 2017/7/6/006.</div><div class=\"line\">\t */</div><div class=\"line\"></div><div class=\"line\">\timport com.google.gson.Gson;</div><div class=\"line\">\timport com.google.gson.JsonArray;</div><div class=\"line\">\timport com.google.gson.JsonElement;</div><div class=\"line\">\timport com.google.gson.JsonParser;</div><div class=\"line\">\timport com.google.gson.reflect.TypeToken;</div><div class=\"line\"></div><div class=\"line\">\timport java.util.ArrayList;</div><div class=\"line\">\timport java.util.<span class=\"keyword\">List</span>;</div><div class=\"line\">\timport java.util.Map;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GsonUtil</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Gson gson = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (gson == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            gson = <span class=\"keyword\">new</span> Gson();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> GsonUtil() &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 转成json</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> object</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String GsonString(Object object) &#123;</div><div class=\"line\">        String gsonString = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (gson != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            gsonString = gson.toJson(object);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> gsonString;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 转成bean</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> gsonString</div><div class=\"line\">     * <span class=\"doctag\">@param</span> cls</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T GsonToBean(String gsonString, <span class=\"class\"><span class=\"keyword\">Class</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"title\">cls</span>) </span>&#123;</div><div class=\"line\">        T t = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (gson != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            t = gson.fromJson(gsonString, cls);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> t;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 转成list</div><div class=\"line\">     * 泛型在编译期类型被擦除导致报错</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> gsonString</div><div class=\"line\">     * <span class=\"doctag\">@param</span> cls</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"keyword\">List</span>&lt;T&gt; GsonToList(String gsonString, <span class=\"class\"><span class=\"keyword\">Class</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"title\">cls</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">List</span>&lt;T&gt; <span class=\"keyword\">list</span> = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (gson != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">list</span> = gson.fromJson(gsonString, <span class=\"keyword\">new</span> TypeToken&lt;<span class=\"keyword\">List</span>&lt;T&gt;&gt;() &#123;</div><div class=\"line\">            &#125;.getType());</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">list</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 转成list</div><div class=\"line\">     * 解决泛型问题</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> json</div><div class=\"line\">     * <span class=\"doctag\">@param</span> cls</div><div class=\"line\">     * <span class=\"doctag\">@param</span> &lt;T&gt;</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"keyword\">List</span>&lt;T&gt; jsonToList(String json, <span class=\"class\"><span class=\"keyword\">Class</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"title\">cls</span>) </span>&#123;</div><div class=\"line\">        Gson gson = <span class=\"keyword\">new</span> Gson();</div><div class=\"line\">        <span class=\"keyword\">List</span>&lt;T&gt; <span class=\"keyword\">list</span> = <span class=\"keyword\">new</span> ArrayList&lt;T&gt;();</div><div class=\"line\">        JsonArray <span class=\"keyword\">array</span> = <span class=\"keyword\">new</span> JsonParser().parse(json).getAsJsonArray();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">final</span> JsonElement elem : <span class=\"keyword\">array</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">list</span>.add(gson.fromJson(elem, cls));</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">list</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 转成list中有map的</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> gsonString</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"keyword\">List</span>&lt;Map&lt;String, T&gt;&gt; GsonToListMaps(String gsonString) &#123;</div><div class=\"line\">        <span class=\"keyword\">List</span>&lt;Map&lt;String, T&gt;&gt; <span class=\"keyword\">list</span> = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (gson != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">list</span> = gson.fromJson(gsonString,</div><div class=\"line\">                    <span class=\"keyword\">new</span> TypeToken&lt;<span class=\"keyword\">List</span>&lt;Map&lt;String, T&gt;&gt;&gt;() &#123;</div><div class=\"line\">                    &#125;.getType());</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">list</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 转成map的</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> gsonString</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; Map&lt;String, T&gt; GsonToMaps(String gsonString) &#123;</div><div class=\"line\">        Map&lt;String, T&gt; map = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (gson != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            map = gson.fromJson(gsonString, <span class=\"keyword\">new</span> TypeToken&lt;Map&lt;String, T&gt;&gt;() &#123;</div><div class=\"line\">            &#125;.getType());</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> map;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=415792881&auto=1&height=66\"></iframe>","excerpt":"<p>Gson封装</p>\n<ul>\n<li>Gson封装的工具类</li>\n<li>javabean和集合相互转换</li>\n</ul>","more":"<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * Created by fengan on 2017/7/6/006.</div><div class=\"line\">\t */</span></div><div class=\"line\"></div><div class=\"line\">\timport com.google.gson.Gson;</div><div class=\"line\">\timport com.google.gson.JsonArray;</div><div class=\"line\">\timport com.google.gson.JsonElement;</div><div class=\"line\">\timport com.google.gson.JsonParser;</div><div class=\"line\">\timport com.google.gson.reflect.TypeToken;</div><div class=\"line\"></div><div class=\"line\">\timport java.util.ArrayList;</div><div class=\"line\">\timport java.util.<span class=\"keyword\">List</span>;</div><div class=\"line\">\timport java.util.Map;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GsonUtil</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Gson gson = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (gson == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            gson = <span class=\"keyword\">new</span> Gson();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> GsonUtil() &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 转成json</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> object</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String GsonString(Object object) &#123;</div><div class=\"line\">        String gsonString = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (gson != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            gsonString = gson.toJson(object);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> gsonString;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 转成bean</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> gsonString</div><div class=\"line\">     * <span class=\"doctag\">@param</span> cls</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T GsonToBean(String gsonString, <span class=\"class\"><span class=\"keyword\">Class</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"title\">cls</span>) </span>&#123;</div><div class=\"line\">        T t = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (gson != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            t = gson.fromJson(gsonString, cls);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> t;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 转成list</div><div class=\"line\">     * 泛型在编译期类型被擦除导致报错</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> gsonString</div><div class=\"line\">     * <span class=\"doctag\">@param</span> cls</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"keyword\">List</span>&lt;T&gt; GsonToList(String gsonString, <span class=\"class\"><span class=\"keyword\">Class</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"title\">cls</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">List</span>&lt;T&gt; <span class=\"keyword\">list</span> = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (gson != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">list</span> = gson.fromJson(gsonString, <span class=\"keyword\">new</span> TypeToken&lt;<span class=\"keyword\">List</span>&lt;T&gt;&gt;() &#123;</div><div class=\"line\">            &#125;.getType());</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">list</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 转成list</div><div class=\"line\">     * 解决泛型问题</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> json</div><div class=\"line\">     * <span class=\"doctag\">@param</span> cls</div><div class=\"line\">     * <span class=\"doctag\">@param</span> &lt;T&gt;</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"keyword\">List</span>&lt;T&gt; jsonToList(String json, <span class=\"class\"><span class=\"keyword\">Class</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"title\">cls</span>) </span>&#123;</div><div class=\"line\">        Gson gson = <span class=\"keyword\">new</span> Gson();</div><div class=\"line\">        <span class=\"keyword\">List</span>&lt;T&gt; <span class=\"keyword\">list</span> = <span class=\"keyword\">new</span> ArrayList&lt;T&gt;();</div><div class=\"line\">        JsonArray <span class=\"keyword\">array</span> = <span class=\"keyword\">new</span> JsonParser().parse(json).getAsJsonArray();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">final</span> JsonElement elem : <span class=\"keyword\">array</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">list</span>.add(gson.fromJson(elem, cls));</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">list</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 转成list中有map的</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> gsonString</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"keyword\">List</span>&lt;Map&lt;String, T&gt;&gt; GsonToListMaps(String gsonString) &#123;</div><div class=\"line\">        <span class=\"keyword\">List</span>&lt;Map&lt;String, T&gt;&gt; <span class=\"keyword\">list</span> = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (gson != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">list</span> = gson.fromJson(gsonString,</div><div class=\"line\">                    <span class=\"keyword\">new</span> TypeToken&lt;<span class=\"keyword\">List</span>&lt;Map&lt;String, T&gt;&gt;&gt;() &#123;</div><div class=\"line\">                    &#125;.getType());</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">list</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 转成map的</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> gsonString</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; Map&lt;String, T&gt; GsonToMaps(String gsonString) &#123;</div><div class=\"line\">        Map&lt;String, T&gt; map = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (gson != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            map = gson.fromJson(gsonString, <span class=\"keyword\">new</span> TypeToken&lt;Map&lt;String, T&gt;&gt;() &#123;</div><div class=\"line\">            &#125;.getType());</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> map;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=415792881&auto=1&height=66\"></iframe>"},{"title":"Android签名","date":"2017-07-02T09:40:06.000Z","password":123456,"_content":"\n签名文件生成与配置\n\n<!--more-->\n\n当我们使用Android Studio运行app，一般有两种模式：debug和release模式，如果我们没有配置签名，则会使用默认的签名文件（一般在Mac：/Users/fengan/.android/debug.keystore），一般我们需要自己配置应用的签名文件\n\n### 创建Keystore\n\n### 配置信息\n\n### 签名V1和V2的区别\n\n### 微信开放平台填写应用签名的获取\n\n### 参考：\n\n[链接一](https://www.cnblogs.com/details-666/p/keystore.html)\n\n[链接二](https://blog.csdn.net/francisbingo/article/details/78655848)","source":"_posts/Android签名.md","raw":"---\ntitle: Android签名\ndate: 2017-07-02 17:40:06\ntags:\n- Android\ncategories: Android\npassword: 123456\n---\n\n签名文件生成与配置\n\n<!--more-->\n\n当我们使用Android Studio运行app，一般有两种模式：debug和release模式，如果我们没有配置签名，则会使用默认的签名文件（一般在Mac：/Users/fengan/.android/debug.keystore），一般我们需要自己配置应用的签名文件\n\n### 创建Keystore\n\n### 配置信息\n\n### 签名V1和V2的区别\n\n### 微信开放平台填写应用签名的获取\n\n### 参考：\n\n[链接一](https://www.cnblogs.com/details-666/p/keystore.html)\n\n[链接二](https://blog.csdn.net/francisbingo/article/details/78655848)","slug":"Android签名","published":1,"updated":"2018-07-19T02:07:12.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6mb00041kygj1vjlpdi","content":"<p>签名文件生成与配置</p>\n<a id=\"more\"></a>\n<p>当我们使用Android Studio运行app，一般有两种模式：debug和release模式，如果我们没有配置签名，则会使用默认的签名文件（一般在Mac：/Users/fengan/.android/debug.keystore），一般我们需要自己配置应用的签名文件</p>\n<h3 id=\"创建Keystore\"><a href=\"#创建Keystore\" class=\"headerlink\" title=\"创建Keystore\"></a>创建Keystore</h3><h3 id=\"配置信息\"><a href=\"#配置信息\" class=\"headerlink\" title=\"配置信息\"></a>配置信息</h3><h3 id=\"签名V1和V2的区别\"><a href=\"#签名V1和V2的区别\" class=\"headerlink\" title=\"签名V1和V2的区别\"></a>签名V1和V2的区别</h3><h3 id=\"微信开放平台填写应用签名的获取\"><a href=\"#微信开放平台填写应用签名的获取\" class=\"headerlink\" title=\"微信开放平台填写应用签名的获取\"></a>微信开放平台填写应用签名的获取</h3><h3 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h3><p><a href=\"https://www.cnblogs.com/details-666/p/keystore.html\" target=\"_blank\" rel=\"external\">链接一</a></p>\n<p><a href=\"https://blog.csdn.net/francisbingo/article/details/78655848\" target=\"_blank\" rel=\"external\">链接二</a></p>\n","excerpt":"<p>签名文件生成与配置</p>","more":"<p>当我们使用Android Studio运行app，一般有两种模式：debug和release模式，如果我们没有配置签名，则会使用默认的签名文件（一般在Mac：/Users/fengan/.android/debug.keystore），一般我们需要自己配置应用的签名文件</p>\n<h3 id=\"创建Keystore\"><a href=\"#创建Keystore\" class=\"headerlink\" title=\"创建Keystore\"></a>创建Keystore</h3><h3 id=\"配置信息\"><a href=\"#配置信息\" class=\"headerlink\" title=\"配置信息\"></a>配置信息</h3><h3 id=\"签名V1和V2的区别\"><a href=\"#签名V1和V2的区别\" class=\"headerlink\" title=\"签名V1和V2的区别\"></a>签名V1和V2的区别</h3><h3 id=\"微信开放平台填写应用签名的获取\"><a href=\"#微信开放平台填写应用签名的获取\" class=\"headerlink\" title=\"微信开放平台填写应用签名的获取\"></a>微信开放平台填写应用签名的获取</h3><h3 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h3><p><a href=\"https://www.cnblogs.com/details-666/p/keystore.html\">链接一</a></p>\n<p><a href=\"https://blog.csdn.net/francisbingo/article/details/78655848\">链接二</a></p>"},{"title":"AsyncTask的弊端","date":"2016-12-20T02:42:03.000Z","_content":"\nAndroid开发中，AsyncTask可以替代Handler和Thread来处理后台操作和通知Ui刷新，适用于处理异步数据，并将更新Ui的场景，AsyncTask适用于后台操作只有几秒的短时操作。但是AsyncTask本身存在很多糟糕的问题，如果使用中不注意，将会影响程序的健壮性。\n\n<!--more-->\n\n## AsyncTask和Handler对比\n\n**注意：按照Android官方文档支出,AsyncTask被推荐为处理短时间(10秒以内)的操作,即本地的轻量IO操作.不适合使用网络这样时间不定的操作.**\n\n### 共同点\n\n都是为了解决耗时操作的问题，主要区别在于一个流程完善，拿来就用（AsyncTask），一个偏向自主定制，扩展性高（Handler+Thread）。\n\n- **AsyncTask比Handler轻量级，对吗？**\n\n1. 通过看源码，发现AsyncTask实际上就是一个线程池，而网上的说法是AsyncTask比handler要轻量级，显然上不准确的，只能这样说，AsyncTask在代码上比handler要轻量级别，而实际上要比handler更耗资源，因为AsyncTask底层是一个线程池！而Handler仅仅就是发送了一个消息队列，连线程都没有开。\n2. 但是，如果异步任务的数据特别庞大，AsyncTask这种线程池结构的优势就体现出来了。\n\n- **AsyncTask实现的原理,和适用的优缺点**\n\nAsyncTask,是android提供的轻量级的异步类,可以直接继承AsyncTask,在类中实现异步操作,并提供接口反馈当前异步执行的程度(可以通过接口实现UI进度更新),最后反馈执行的结果给UI主线程.\n\n使用的优点:\n\nl  简单,快捷\n\nl  过程可控\n\n使用的缺点:\n\nl 在使用多个异步操作的同时，共同进行Ui变更时,就变得复杂起来.\n\nl 最大并发数不超过5\n\n-  **Handler异步实现的原理和适用的优缺点**\n\n在Handler 异步实现时,涉及到 Handler, Looper, Message,Thread四个对象，实现异步的流程是主线程启动Thread（子线程）àthread(子线程)运行并生成Message-àLooper获取Message并传递给HandleràHandler逐个获取Looper中的Message，并进行UI变更。\n\n**使用的优点：**\n\nl  结构清晰，功能定义明确\n\nl  对于多个后台任务时，简单，清晰\n\n**使用的缺点：**\n\nl  在单个后台异步处理时，显得代码过多，结构过于复杂（相对性）\n\n## AsyncTask的使用：\n\n- **必选方法：**\n\n1，  doinbackground(params…) 后台执行，比较耗时的操作都可以放在这里。\n\n注意这里不能直接操作UI。此方法在后台线程执行，完成任务的主要工作\n\n，通常需要较长的时间。在执行过程中可以调用\n\nPublic progress(progress…)来更新任务的进度。\n\n \n\n2，  onpostexecute(result)相当于handler处理UI的方式，在这里可以使用在\n\ndoinbackground得到的结果处理操作UI。此方法在主线程执行，任务执行的结果作为此方法的参数返回。\n\n \n\n- **可选方法：**\n\n1，  onprogressupdate(progress…) 可以使用进度条增加用户体验度。此方法在主线程执行，用户显示任务执行的进度。\n\n2，  onpreExecute()  这里是最新用户调用excute时的接口，当任务执行之前开始调用此方法，可以在这里显示进度对话框。\n\n3，  onCancelled()  用户调用取消时，要做的操作\n\n- **AsyncTask三个状态：**\n\npending,running,finished\n\n- **使用AsyncTask类，遵守的准则：**\n\n1，  Task的实例必须在UI thread中创建；\n\n2，  Execute方法必须在UI thread中调用\n\n3，  不要手动的调用onPfreexecute()，onPostExecute(result)\n\nDoinbackground(params…),onProgressupdate(progress…)这几个方法；\n\n4，  该task只能被执行一次，否则多次调用时将会出现异常;\n\n## AsyncTask缺陷总结：\n\n- **生命周期**\n\n  很多开发者会认为在一个Activity中创建的AsyncTask会随着Activity销毁而销毁，事实并非如此，AsyncTask会随着doInBackground（）方法执行完毕才销毁，然后，cancel（）被调用，那么onCancel会执行；否则执行postExecute方法会执行。如果在AsyncTask没有执行完毕，就销毁了Activity，AsyncTask可能会崩溃，因为它想要处理的view已经不存在了。所以，我们总是必须确保在销毁活动之前取消任务。总之，我们使用AsyncTask需要确保AsyncTask正确地取消。\n\n  另外，即使我们正确地调用了cancle() 也未必能真正地取消任务。因为如果在doInBackgroud里有一个不可中断的操作，比如BitmapFactory.decodeStream()，那么这个操作会继续下去。\n\n- **内存泄漏**\n\n  如果AsyncTask未声明成静态，则会持有外部类Activity的引用，当Activity销毁之后，AsyncTask还在执行，它将在内存中依旧保持这个引用，会造成内存泄漏\n\n- **结果丢失**\n\n  当屏幕旋转Activity销毁重新创建（未配置android:configChanges=\"orientation|screenSize\"的情况）之前运行的AsyncTask会持有之前Activity的引用，这时调用onPostExecute()再去更新界面将不再生效。\n\n- **并行还是串行**\n\n  当想要串行执行时，直接执行execute()方法，如果需要并行执行，则要执行executeOnExecutor(Executor)。\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=29761059&auto=1&height=66\"></iframe>","source":"_posts/AsyncTask缺陷总结.md","raw":"---\ntitle: AsyncTask的弊端\ndate: 2016-12-20 10:42:03\ntags: \n- Android\ncategories: Android\n---\n\nAndroid开发中，AsyncTask可以替代Handler和Thread来处理后台操作和通知Ui刷新，适用于处理异步数据，并将更新Ui的场景，AsyncTask适用于后台操作只有几秒的短时操作。但是AsyncTask本身存在很多糟糕的问题，如果使用中不注意，将会影响程序的健壮性。\n\n<!--more-->\n\n## AsyncTask和Handler对比\n\n**注意：按照Android官方文档支出,AsyncTask被推荐为处理短时间(10秒以内)的操作,即本地的轻量IO操作.不适合使用网络这样时间不定的操作.**\n\n### 共同点\n\n都是为了解决耗时操作的问题，主要区别在于一个流程完善，拿来就用（AsyncTask），一个偏向自主定制，扩展性高（Handler+Thread）。\n\n- **AsyncTask比Handler轻量级，对吗？**\n\n1. 通过看源码，发现AsyncTask实际上就是一个线程池，而网上的说法是AsyncTask比handler要轻量级，显然上不准确的，只能这样说，AsyncTask在代码上比handler要轻量级别，而实际上要比handler更耗资源，因为AsyncTask底层是一个线程池！而Handler仅仅就是发送了一个消息队列，连线程都没有开。\n2. 但是，如果异步任务的数据特别庞大，AsyncTask这种线程池结构的优势就体现出来了。\n\n- **AsyncTask实现的原理,和适用的优缺点**\n\nAsyncTask,是android提供的轻量级的异步类,可以直接继承AsyncTask,在类中实现异步操作,并提供接口反馈当前异步执行的程度(可以通过接口实现UI进度更新),最后反馈执行的结果给UI主线程.\n\n使用的优点:\n\nl  简单,快捷\n\nl  过程可控\n\n使用的缺点:\n\nl 在使用多个异步操作的同时，共同进行Ui变更时,就变得复杂起来.\n\nl 最大并发数不超过5\n\n-  **Handler异步实现的原理和适用的优缺点**\n\n在Handler 异步实现时,涉及到 Handler, Looper, Message,Thread四个对象，实现异步的流程是主线程启动Thread（子线程）àthread(子线程)运行并生成Message-àLooper获取Message并传递给HandleràHandler逐个获取Looper中的Message，并进行UI变更。\n\n**使用的优点：**\n\nl  结构清晰，功能定义明确\n\nl  对于多个后台任务时，简单，清晰\n\n**使用的缺点：**\n\nl  在单个后台异步处理时，显得代码过多，结构过于复杂（相对性）\n\n## AsyncTask的使用：\n\n- **必选方法：**\n\n1，  doinbackground(params…) 后台执行，比较耗时的操作都可以放在这里。\n\n注意这里不能直接操作UI。此方法在后台线程执行，完成任务的主要工作\n\n，通常需要较长的时间。在执行过程中可以调用\n\nPublic progress(progress…)来更新任务的进度。\n\n \n\n2，  onpostexecute(result)相当于handler处理UI的方式，在这里可以使用在\n\ndoinbackground得到的结果处理操作UI。此方法在主线程执行，任务执行的结果作为此方法的参数返回。\n\n \n\n- **可选方法：**\n\n1，  onprogressupdate(progress…) 可以使用进度条增加用户体验度。此方法在主线程执行，用户显示任务执行的进度。\n\n2，  onpreExecute()  这里是最新用户调用excute时的接口，当任务执行之前开始调用此方法，可以在这里显示进度对话框。\n\n3，  onCancelled()  用户调用取消时，要做的操作\n\n- **AsyncTask三个状态：**\n\npending,running,finished\n\n- **使用AsyncTask类，遵守的准则：**\n\n1，  Task的实例必须在UI thread中创建；\n\n2，  Execute方法必须在UI thread中调用\n\n3，  不要手动的调用onPfreexecute()，onPostExecute(result)\n\nDoinbackground(params…),onProgressupdate(progress…)这几个方法；\n\n4，  该task只能被执行一次，否则多次调用时将会出现异常;\n\n## AsyncTask缺陷总结：\n\n- **生命周期**\n\n  很多开发者会认为在一个Activity中创建的AsyncTask会随着Activity销毁而销毁，事实并非如此，AsyncTask会随着doInBackground（）方法执行完毕才销毁，然后，cancel（）被调用，那么onCancel会执行；否则执行postExecute方法会执行。如果在AsyncTask没有执行完毕，就销毁了Activity，AsyncTask可能会崩溃，因为它想要处理的view已经不存在了。所以，我们总是必须确保在销毁活动之前取消任务。总之，我们使用AsyncTask需要确保AsyncTask正确地取消。\n\n  另外，即使我们正确地调用了cancle() 也未必能真正地取消任务。因为如果在doInBackgroud里有一个不可中断的操作，比如BitmapFactory.decodeStream()，那么这个操作会继续下去。\n\n- **内存泄漏**\n\n  如果AsyncTask未声明成静态，则会持有外部类Activity的引用，当Activity销毁之后，AsyncTask还在执行，它将在内存中依旧保持这个引用，会造成内存泄漏\n\n- **结果丢失**\n\n  当屏幕旋转Activity销毁重新创建（未配置android:configChanges=\"orientation|screenSize\"的情况）之前运行的AsyncTask会持有之前Activity的引用，这时调用onPostExecute()再去更新界面将不再生效。\n\n- **并行还是串行**\n\n  当想要串行执行时，直接执行execute()方法，如果需要并行执行，则要执行executeOnExecutor(Executor)。\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=29761059&auto=1&height=66\"></iframe>","slug":"AsyncTask缺陷总结","published":1,"updated":"2018-07-19T02:07:04.645Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6mc00051kyg5eawlutx","content":"<p>Android开发中，AsyncTask可以替代Handler和Thread来处理后台操作和通知Ui刷新，适用于处理异步数据，并将更新Ui的场景，AsyncTask适用于后台操作只有几秒的短时操作。但是AsyncTask本身存在很多糟糕的问题，如果使用中不注意，将会影响程序的健壮性。</p>\n<a id=\"more\"></a>\n<h2 id=\"AsyncTask和Handler对比\"><a href=\"#AsyncTask和Handler对比\" class=\"headerlink\" title=\"AsyncTask和Handler对比\"></a>AsyncTask和Handler对比</h2><p><strong>注意：按照Android官方文档支出,AsyncTask被推荐为处理短时间(10秒以内)的操作,即本地的轻量IO操作.不适合使用网络这样时间不定的操作.</strong></p>\n<h3 id=\"共同点\"><a href=\"#共同点\" class=\"headerlink\" title=\"共同点\"></a>共同点</h3><p>都是为了解决耗时操作的问题，主要区别在于一个流程完善，拿来就用（AsyncTask），一个偏向自主定制，扩展性高（Handler+Thread）。</p>\n<ul>\n<li><strong>AsyncTask比Handler轻量级，对吗？</strong></li>\n</ul>\n<ol>\n<li>通过看源码，发现AsyncTask实际上就是一个线程池，而网上的说法是AsyncTask比handler要轻量级，显然上不准确的，只能这样说，AsyncTask在代码上比handler要轻量级别，而实际上要比handler更耗资源，因为AsyncTask底层是一个线程池！而Handler仅仅就是发送了一个消息队列，连线程都没有开。</li>\n<li>但是，如果异步任务的数据特别庞大，AsyncTask这种线程池结构的优势就体现出来了。</li>\n</ol>\n<ul>\n<li><strong>AsyncTask实现的原理,和适用的优缺点</strong></li>\n</ul>\n<p>AsyncTask,是android提供的轻量级的异步类,可以直接继承AsyncTask,在类中实现异步操作,并提供接口反馈当前异步执行的程度(可以通过接口实现UI进度更新),最后反馈执行的结果给UI主线程.</p>\n<p>使用的优点:</p>\n<p>l  简单,快捷</p>\n<p>l  过程可控</p>\n<p>使用的缺点:</p>\n<p>l 在使用多个异步操作的同时，共同进行Ui变更时,就变得复杂起来.</p>\n<p>l 最大并发数不超过5</p>\n<ul>\n<li><strong>Handler异步实现的原理和适用的优缺点</strong></li>\n</ul>\n<p>在Handler 异步实现时,涉及到 Handler, Looper, Message,Thread四个对象，实现异步的流程是主线程启动Thread（子线程）àthread(子线程)运行并生成Message-àLooper获取Message并传递给HandleràHandler逐个获取Looper中的Message，并进行UI变更。</p>\n<p><strong>使用的优点：</strong></p>\n<p>l  结构清晰，功能定义明确</p>\n<p>l  对于多个后台任务时，简单，清晰</p>\n<p><strong>使用的缺点：</strong></p>\n<p>l  在单个后台异步处理时，显得代码过多，结构过于复杂（相对性）</p>\n<h2 id=\"AsyncTask的使用：\"><a href=\"#AsyncTask的使用：\" class=\"headerlink\" title=\"AsyncTask的使用：\"></a>AsyncTask的使用：</h2><ul>\n<li><strong>必选方法：</strong></li>\n</ul>\n<p>1，  doinbackground(params…) 后台执行，比较耗时的操作都可以放在这里。</p>\n<p>注意这里不能直接操作UI。此方法在后台线程执行，完成任务的主要工作</p>\n<p>，通常需要较长的时间。在执行过程中可以调用</p>\n<p>Public progress(progress…)来更新任务的进度。</p>\n<p>2，  onpostexecute(result)相当于handler处理UI的方式，在这里可以使用在</p>\n<p>doinbackground得到的结果处理操作UI。此方法在主线程执行，任务执行的结果作为此方法的参数返回。</p>\n<ul>\n<li><strong>可选方法：</strong></li>\n</ul>\n<p>1，  onprogressupdate(progress…) 可以使用进度条增加用户体验度。此方法在主线程执行，用户显示任务执行的进度。</p>\n<p>2，  onpreExecute()  这里是最新用户调用excute时的接口，当任务执行之前开始调用此方法，可以在这里显示进度对话框。</p>\n<p>3，  onCancelled()  用户调用取消时，要做的操作</p>\n<ul>\n<li><strong>AsyncTask三个状态：</strong></li>\n</ul>\n<p>pending,running,finished</p>\n<ul>\n<li><strong>使用AsyncTask类，遵守的准则：</strong></li>\n</ul>\n<p>1，  Task的实例必须在UI thread中创建；</p>\n<p>2，  Execute方法必须在UI thread中调用</p>\n<p>3，  不要手动的调用onPfreexecute()，onPostExecute(result)</p>\n<p>Doinbackground(params…),onProgressupdate(progress…)这几个方法；</p>\n<p>4，  该task只能被执行一次，否则多次调用时将会出现异常;</p>\n<h2 id=\"AsyncTask缺陷总结：\"><a href=\"#AsyncTask缺陷总结：\" class=\"headerlink\" title=\"AsyncTask缺陷总结：\"></a>AsyncTask缺陷总结：</h2><ul>\n<li><p><strong>生命周期</strong></p>\n<p>很多开发者会认为在一个Activity中创建的AsyncTask会随着Activity销毁而销毁，事实并非如此，AsyncTask会随着doInBackground（）方法执行完毕才销毁，然后，cancel（）被调用，那么onCancel会执行；否则执行postExecute方法会执行。如果在AsyncTask没有执行完毕，就销毁了Activity，AsyncTask可能会崩溃，因为它想要处理的view已经不存在了。所以，我们总是必须确保在销毁活动之前取消任务。总之，我们使用AsyncTask需要确保AsyncTask正确地取消。</p>\n<p>另外，即使我们正确地调用了cancle() 也未必能真正地取消任务。因为如果在doInBackgroud里有一个不可中断的操作，比如BitmapFactory.decodeStream()，那么这个操作会继续下去。</p>\n</li>\n<li><p><strong>内存泄漏</strong></p>\n<p>如果AsyncTask未声明成静态，则会持有外部类Activity的引用，当Activity销毁之后，AsyncTask还在执行，它将在内存中依旧保持这个引用，会造成内存泄漏</p>\n</li>\n<li><p><strong>结果丢失</strong></p>\n<p>当屏幕旋转Activity销毁重新创建（未配置android:configChanges=”orientation|screenSize”的情况）之前运行的AsyncTask会持有之前Activity的引用，这时调用onPostExecute()再去更新界面将不再生效。</p>\n</li>\n<li><p><strong>并行还是串行</strong></p>\n<p>当想要串行执行时，直接执行execute()方法，如果需要并行执行，则要执行executeOnExecutor(Executor)。</p>\n</li>\n</ul>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=29761059&auto=1&height=66\"></iframe>","excerpt":"<p>Android开发中，AsyncTask可以替代Handler和Thread来处理后台操作和通知Ui刷新，适用于处理异步数据，并将更新Ui的场景，AsyncTask适用于后台操作只有几秒的短时操作。但是AsyncTask本身存在很多糟糕的问题，如果使用中不注意，将会影响程序的健壮性。</p>","more":"<h2 id=\"AsyncTask和Handler对比\"><a href=\"#AsyncTask和Handler对比\" class=\"headerlink\" title=\"AsyncTask和Handler对比\"></a>AsyncTask和Handler对比</h2><p><strong>注意：按照Android官方文档支出,AsyncTask被推荐为处理短时间(10秒以内)的操作,即本地的轻量IO操作.不适合使用网络这样时间不定的操作.</strong></p>\n<h3 id=\"共同点\"><a href=\"#共同点\" class=\"headerlink\" title=\"共同点\"></a>共同点</h3><p>都是为了解决耗时操作的问题，主要区别在于一个流程完善，拿来就用（AsyncTask），一个偏向自主定制，扩展性高（Handler+Thread）。</p>\n<ul>\n<li><strong>AsyncTask比Handler轻量级，对吗？</strong></li>\n</ul>\n<ol>\n<li>通过看源码，发现AsyncTask实际上就是一个线程池，而网上的说法是AsyncTask比handler要轻量级，显然上不准确的，只能这样说，AsyncTask在代码上比handler要轻量级别，而实际上要比handler更耗资源，因为AsyncTask底层是一个线程池！而Handler仅仅就是发送了一个消息队列，连线程都没有开。</li>\n<li>但是，如果异步任务的数据特别庞大，AsyncTask这种线程池结构的优势就体现出来了。</li>\n</ol>\n<ul>\n<li><strong>AsyncTask实现的原理,和适用的优缺点</strong></li>\n</ul>\n<p>AsyncTask,是android提供的轻量级的异步类,可以直接继承AsyncTask,在类中实现异步操作,并提供接口反馈当前异步执行的程度(可以通过接口实现UI进度更新),最后反馈执行的结果给UI主线程.</p>\n<p>使用的优点:</p>\n<p>l  简单,快捷</p>\n<p>l  过程可控</p>\n<p>使用的缺点:</p>\n<p>l 在使用多个异步操作的同时，共同进行Ui变更时,就变得复杂起来.</p>\n<p>l 最大并发数不超过5</p>\n<ul>\n<li><strong>Handler异步实现的原理和适用的优缺点</strong></li>\n</ul>\n<p>在Handler 异步实现时,涉及到 Handler, Looper, Message,Thread四个对象，实现异步的流程是主线程启动Thread（子线程）àthread(子线程)运行并生成Message-àLooper获取Message并传递给HandleràHandler逐个获取Looper中的Message，并进行UI变更。</p>\n<p><strong>使用的优点：</strong></p>\n<p>l  结构清晰，功能定义明确</p>\n<p>l  对于多个后台任务时，简单，清晰</p>\n<p><strong>使用的缺点：</strong></p>\n<p>l  在单个后台异步处理时，显得代码过多，结构过于复杂（相对性）</p>\n<h2 id=\"AsyncTask的使用：\"><a href=\"#AsyncTask的使用：\" class=\"headerlink\" title=\"AsyncTask的使用：\"></a>AsyncTask的使用：</h2><ul>\n<li><strong>必选方法：</strong></li>\n</ul>\n<p>1，  doinbackground(params…) 后台执行，比较耗时的操作都可以放在这里。</p>\n<p>注意这里不能直接操作UI。此方法在后台线程执行，完成任务的主要工作</p>\n<p>，通常需要较长的时间。在执行过程中可以调用</p>\n<p>Public progress(progress…)来更新任务的进度。</p>\n<p>2，  onpostexecute(result)相当于handler处理UI的方式，在这里可以使用在</p>\n<p>doinbackground得到的结果处理操作UI。此方法在主线程执行，任务执行的结果作为此方法的参数返回。</p>\n<ul>\n<li><strong>可选方法：</strong></li>\n</ul>\n<p>1，  onprogressupdate(progress…) 可以使用进度条增加用户体验度。此方法在主线程执行，用户显示任务执行的进度。</p>\n<p>2，  onpreExecute()  这里是最新用户调用excute时的接口，当任务执行之前开始调用此方法，可以在这里显示进度对话框。</p>\n<p>3，  onCancelled()  用户调用取消时，要做的操作</p>\n<ul>\n<li><strong>AsyncTask三个状态：</strong></li>\n</ul>\n<p>pending,running,finished</p>\n<ul>\n<li><strong>使用AsyncTask类，遵守的准则：</strong></li>\n</ul>\n<p>1，  Task的实例必须在UI thread中创建；</p>\n<p>2，  Execute方法必须在UI thread中调用</p>\n<p>3，  不要手动的调用onPfreexecute()，onPostExecute(result)</p>\n<p>Doinbackground(params…),onProgressupdate(progress…)这几个方法；</p>\n<p>4，  该task只能被执行一次，否则多次调用时将会出现异常;</p>\n<h2 id=\"AsyncTask缺陷总结：\"><a href=\"#AsyncTask缺陷总结：\" class=\"headerlink\" title=\"AsyncTask缺陷总结：\"></a>AsyncTask缺陷总结：</h2><ul>\n<li><p><strong>生命周期</strong></p>\n<p>很多开发者会认为在一个Activity中创建的AsyncTask会随着Activity销毁而销毁，事实并非如此，AsyncTask会随着doInBackground（）方法执行完毕才销毁，然后，cancel（）被调用，那么onCancel会执行；否则执行postExecute方法会执行。如果在AsyncTask没有执行完毕，就销毁了Activity，AsyncTask可能会崩溃，因为它想要处理的view已经不存在了。所以，我们总是必须确保在销毁活动之前取消任务。总之，我们使用AsyncTask需要确保AsyncTask正确地取消。</p>\n<p>另外，即使我们正确地调用了cancle() 也未必能真正地取消任务。因为如果在doInBackgroud里有一个不可中断的操作，比如BitmapFactory.decodeStream()，那么这个操作会继续下去。</p>\n</li>\n<li><p><strong>内存泄漏</strong></p>\n<p>如果AsyncTask未声明成静态，则会持有外部类Activity的引用，当Activity销毁之后，AsyncTask还在执行，它将在内存中依旧保持这个引用，会造成内存泄漏</p>\n</li>\n<li><p><strong>结果丢失</strong></p>\n<p>当屏幕旋转Activity销毁重新创建（未配置android:configChanges=”orientation|screenSize”的情况）之前运行的AsyncTask会持有之前Activity的引用，这时调用onPostExecute()再去更新界面将不再生效。</p>\n</li>\n<li><p><strong>并行还是串行</strong></p>\n<p>当想要串行执行时，直接执行execute()方法，如果需要并行执行，则要执行executeOnExecutor(Executor)。</p>\n</li>\n</ul>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=29761059&auto=1&height=66\"></iframe>"},{"title":"ReactNative碎片整理之State","date":"2018-07-28T09:51:46.000Z","password":null,"_content":"\n我们使用两种数据来控制一个组件：props和state。props是在父组件中指定，而且一经指定，在被指定的组件的生命周期中则不再改变。 对于需要改变的数据，我们需要使用state。\n\n<!--more-->\n\nstate属性主要用来存储组件自身需要的数据，是组件自己私有的，我们一般通过修改 state 属性的值来更新数据，React 内部会监听 `state` 的变化，一旦发生变化就会主动触发组件的 render() 方法来更新 Dom 结构\n\n### state的使用\n\n一般来说，你需要在 constructor()方法中初始化 state（这是ES6的写法，ES5 中一般在 `getInitialState()` 方法中来初始化 `state`），然后在需要修改时调用 setState() 方法。\n\n不要使用 `this.state` 来修改 `state` 属性值，应该调用 `setState()` 方法，`this.state` **是无效的**。\n\n### setState（）方法\n\n`setState()` 的完整表达式：\n\n`setState(updater, [callback])`\n\n`setState()` 方法会把对组件 state 的改变加入到队列中，并且告诉 React 这个组件及其子组件需要重新渲染。\n\n#### 第一个参数：`updater` 函数\n\n`setState(updater, callback)` 方法的第一个参数是一个固定格式的 `updater` 函数：\n\n```javascript\n(prevState, props) => stateChange\n```\n\n`prevState` 是一个对之前状态（previous state）的引用，我们是不能直接修改这个参数的值，要想修改 `state` 的值，我们应该根据 `prevState` 和 `props` 参数来创建一个新的 JavaScript 对象。\n\n**例子1：**\n\n```javascript\nthis.setState((prevState, props) => {\n  return {counter: prevState.counter + props.step};\n});\n```\n\n你也可以传一个对象而不是函数，来作为`setState(updater, callback)` 方法的第一个参数，React 会将该参数 merge 到 state 中。\n\n**例子2:**\n\n```\nthis.setState({quantity: 2});\n```\n\n#### 第二个参数：callback\n\n`setState(updater, callback)` 方法的第二个参数 `callback` 是一个可选参数。（基本是空的，一般不这么使用）\n\n为了更好的性能表现，React 并不能保证 `setState()` 一被调用 state 就能更新。所以，如果在调用 `setState()` 之后，马上就读取 `this.state` 的值的话，可能会出现误差。\n\n因此，这种情况下，推荐使用 `componentDidUpdate` 或者 `setState(updater, callback)` 方法的 `callback` 来获取最新的状态。\n\n**React 官方更推荐**使用 `componentDidUpdate()`，而不是 `callback` 来监听 update 事件（注： 除非 `shouldComponentUpdate()` 方法返回 `false`，`setState()` 将永远都会引发重新渲染）。\n\n**例子1:**\n\n```javascript\nimport React, {Component} from 'react';\nimport {\n    View,\n    StyleSheet,\n    TouchableOpacity,\n    ToastAndroid,\n    Platform,\n    Text,\n} from 'react-native';\nexport default class App extends Component<Props> {\n    // 构造\n    constructor(props) {\n        super(props);\n        // 初始状态\n        this.state = {\n            num: 1\n        };\n    }\n\n    shouldComponentUpdate() {\n  \t\t//返回 false 则setState不刷新\n        return false;\n    }\n\n    static defaultProps = {\n        add: 100\n    }\n\n    componentDidUpdate() {\n        if(Platform.OS=='ios'){\n            return;\n        }\n        ToastAndroid.show(\"\"+this.state.num,ToastAndroid.SHORT)\n    }\n\n    render() {\n        return (\n            <View style={{flex:1,justifyContent:'center',alignItems: 'center'}}>\n                <TouchableOpacity onPress={() => {\n                    this.setState((prevState, props) => {\n                        return {num: prevState.num + props.add};\n                    });\n                }} style={styles.container}>\n                    <Text style={styles.text}>{this.state.num}</Text>\n                </TouchableOpacity>\n            </View>\n        )\n    }\n}\nconst styles = StyleSheet.create({\n\n    container: {\n        backgroundColor: '#00a056',\n        paddingRight: 70,\n        paddingTop: 10,\n        paddingBottom: 10,\n        paddingLeft: 70,\n        shadowColor: '#00a056',\n        shadowOffset: {width: 3, height: 3},\n        shadowOpacity: 0.5,\n        shadowRadius: 4\n    },\n    text: {\n        color: '#ffffff',\n        fontSize: 30,\n\n    }\n})\n\n```\n\n<img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/state.gif\" width=\"600\">\n\n**如上图效果：**\n\n- shouldComponentUpdate 不重写或者返回true，则象左侧ios模拟器一样，可以修改状态\n- 返回false，则不重写\n- 官方不推荐我们使用setState的第二个参数Callback的形式获取，我们可以在componentDidUpdate回调中，获取最新的State\n\n### 如何正确操作state\n\n#### 不要使用`this.state`来修改`state`\n\n```\n// Wrong\nthis.state.comment = 'Hello';\n```\n\n记住，`this.state` 是不可变的。\n\n```javascript\n//事实证明，并改变不了\nrender() {\n    return (\n        <View style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>\n            <TouchableOpacity onPress={() => {\n                this.state.num = 3\n            }} style={styles.container}>\n                <Text style={styles.text}>{this.state.num}</Text>\n            </TouchableOpacity>\n        </View>\n    )\n```\n\n应该调用 `setState()` 方法：\n\n```javascript\n// Correct\nthis.setState({comment: 'Hello'});\n//或者\nthis.setState((prevState, props) => {\n                        return {num: prevState.num + props.add};\n                    });\n//prevState 可以获取上个state 数值\n//props 可以获取当前props所有数值，可以做一些操作\n\n\n//不要这么使用\nthis.setState((prevState, props) => {\n                        return {num: this.state.num+1};\n                    });\n//考虑到setState可能是异步调用的，所以推荐使用prevState（上一个值），而不是依赖this.state来计算最新的state，这样可能会有误差\n```\n\n#### state的改变是一个覆盖（合并）过程\n\n当你调用 `setState()` 方法时，React 会将将你当前所提供的对象合并到当前的状态中。\n\n**例子1:**\n\n```javascript\nconstructor(props) {\n    super(props);\n    this.state = {\n      posts: [],\n      comments: []\n    };\n  }\n\ncomponentDidMount() {\n\n    fetchComments().then(response => {\n      this.setState({\n        comments: response.comments\n      });\n    });\n  }\n```\n\n⬆面的栗子，state更新至替换了comments，posts不受影响\n\n### state传递？\n\n**注意：**\n\n- 父组件和子组件之间不能通过 state 来交互，父组件只能将自己的 state 值传给子组件的 props。\n\n\n- 这种数据传递的方式通常被称为 “自顶向下（top-down）”或者“单向（unidirectional）”数据流。\n- 任何state都是由一个特定的组件所拥有的，任何state数据修改默认只会影响当前组件，\n- 可以通过回调传值（后面会整理）\n- **React Native建议由顶层的父组件定义state值，并将state值作为子组件的props属性值传递给子组件，这样可以保持单一的数据传递。**\n\n### 参考\n\n[[【1】React Native] React 中的状态（State）](https://www.jianshu.com/p/583473c37db9)\n\n\n\n\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=298 height=52 src=\"//music.163.com/outchain/player?type=2&id=455304006&auto=1&height=32\"></iframe>\n\n","source":"_posts/ReactNative碎片整理之State.md","raw":"---\ntitle: ReactNative碎片整理之State\ndate: 2018-07-28 17:51:46\ntags:\n- RN\ncategories: RN\npassword:\n---\n\n我们使用两种数据来控制一个组件：props和state。props是在父组件中指定，而且一经指定，在被指定的组件的生命周期中则不再改变。 对于需要改变的数据，我们需要使用state。\n\n<!--more-->\n\nstate属性主要用来存储组件自身需要的数据，是组件自己私有的，我们一般通过修改 state 属性的值来更新数据，React 内部会监听 `state` 的变化，一旦发生变化就会主动触发组件的 render() 方法来更新 Dom 结构\n\n### state的使用\n\n一般来说，你需要在 constructor()方法中初始化 state（这是ES6的写法，ES5 中一般在 `getInitialState()` 方法中来初始化 `state`），然后在需要修改时调用 setState() 方法。\n\n不要使用 `this.state` 来修改 `state` 属性值，应该调用 `setState()` 方法，`this.state` **是无效的**。\n\n### setState（）方法\n\n`setState()` 的完整表达式：\n\n`setState(updater, [callback])`\n\n`setState()` 方法会把对组件 state 的改变加入到队列中，并且告诉 React 这个组件及其子组件需要重新渲染。\n\n#### 第一个参数：`updater` 函数\n\n`setState(updater, callback)` 方法的第一个参数是一个固定格式的 `updater` 函数：\n\n```javascript\n(prevState, props) => stateChange\n```\n\n`prevState` 是一个对之前状态（previous state）的引用，我们是不能直接修改这个参数的值，要想修改 `state` 的值，我们应该根据 `prevState` 和 `props` 参数来创建一个新的 JavaScript 对象。\n\n**例子1：**\n\n```javascript\nthis.setState((prevState, props) => {\n  return {counter: prevState.counter + props.step};\n});\n```\n\n你也可以传一个对象而不是函数，来作为`setState(updater, callback)` 方法的第一个参数，React 会将该参数 merge 到 state 中。\n\n**例子2:**\n\n```\nthis.setState({quantity: 2});\n```\n\n#### 第二个参数：callback\n\n`setState(updater, callback)` 方法的第二个参数 `callback` 是一个可选参数。（基本是空的，一般不这么使用）\n\n为了更好的性能表现，React 并不能保证 `setState()` 一被调用 state 就能更新。所以，如果在调用 `setState()` 之后，马上就读取 `this.state` 的值的话，可能会出现误差。\n\n因此，这种情况下，推荐使用 `componentDidUpdate` 或者 `setState(updater, callback)` 方法的 `callback` 来获取最新的状态。\n\n**React 官方更推荐**使用 `componentDidUpdate()`，而不是 `callback` 来监听 update 事件（注： 除非 `shouldComponentUpdate()` 方法返回 `false`，`setState()` 将永远都会引发重新渲染）。\n\n**例子1:**\n\n```javascript\nimport React, {Component} from 'react';\nimport {\n    View,\n    StyleSheet,\n    TouchableOpacity,\n    ToastAndroid,\n    Platform,\n    Text,\n} from 'react-native';\nexport default class App extends Component<Props> {\n    // 构造\n    constructor(props) {\n        super(props);\n        // 初始状态\n        this.state = {\n            num: 1\n        };\n    }\n\n    shouldComponentUpdate() {\n  \t\t//返回 false 则setState不刷新\n        return false;\n    }\n\n    static defaultProps = {\n        add: 100\n    }\n\n    componentDidUpdate() {\n        if(Platform.OS=='ios'){\n            return;\n        }\n        ToastAndroid.show(\"\"+this.state.num,ToastAndroid.SHORT)\n    }\n\n    render() {\n        return (\n            <View style={{flex:1,justifyContent:'center',alignItems: 'center'}}>\n                <TouchableOpacity onPress={() => {\n                    this.setState((prevState, props) => {\n                        return {num: prevState.num + props.add};\n                    });\n                }} style={styles.container}>\n                    <Text style={styles.text}>{this.state.num}</Text>\n                </TouchableOpacity>\n            </View>\n        )\n    }\n}\nconst styles = StyleSheet.create({\n\n    container: {\n        backgroundColor: '#00a056',\n        paddingRight: 70,\n        paddingTop: 10,\n        paddingBottom: 10,\n        paddingLeft: 70,\n        shadowColor: '#00a056',\n        shadowOffset: {width: 3, height: 3},\n        shadowOpacity: 0.5,\n        shadowRadius: 4\n    },\n    text: {\n        color: '#ffffff',\n        fontSize: 30,\n\n    }\n})\n\n```\n\n<img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/state.gif\" width=\"600\">\n\n**如上图效果：**\n\n- shouldComponentUpdate 不重写或者返回true，则象左侧ios模拟器一样，可以修改状态\n- 返回false，则不重写\n- 官方不推荐我们使用setState的第二个参数Callback的形式获取，我们可以在componentDidUpdate回调中，获取最新的State\n\n### 如何正确操作state\n\n#### 不要使用`this.state`来修改`state`\n\n```\n// Wrong\nthis.state.comment = 'Hello';\n```\n\n记住，`this.state` 是不可变的。\n\n```javascript\n//事实证明，并改变不了\nrender() {\n    return (\n        <View style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>\n            <TouchableOpacity onPress={() => {\n                this.state.num = 3\n            }} style={styles.container}>\n                <Text style={styles.text}>{this.state.num}</Text>\n            </TouchableOpacity>\n        </View>\n    )\n```\n\n应该调用 `setState()` 方法：\n\n```javascript\n// Correct\nthis.setState({comment: 'Hello'});\n//或者\nthis.setState((prevState, props) => {\n                        return {num: prevState.num + props.add};\n                    });\n//prevState 可以获取上个state 数值\n//props 可以获取当前props所有数值，可以做一些操作\n\n\n//不要这么使用\nthis.setState((prevState, props) => {\n                        return {num: this.state.num+1};\n                    });\n//考虑到setState可能是异步调用的，所以推荐使用prevState（上一个值），而不是依赖this.state来计算最新的state，这样可能会有误差\n```\n\n#### state的改变是一个覆盖（合并）过程\n\n当你调用 `setState()` 方法时，React 会将将你当前所提供的对象合并到当前的状态中。\n\n**例子1:**\n\n```javascript\nconstructor(props) {\n    super(props);\n    this.state = {\n      posts: [],\n      comments: []\n    };\n  }\n\ncomponentDidMount() {\n\n    fetchComments().then(response => {\n      this.setState({\n        comments: response.comments\n      });\n    });\n  }\n```\n\n⬆面的栗子，state更新至替换了comments，posts不受影响\n\n### state传递？\n\n**注意：**\n\n- 父组件和子组件之间不能通过 state 来交互，父组件只能将自己的 state 值传给子组件的 props。\n\n\n- 这种数据传递的方式通常被称为 “自顶向下（top-down）”或者“单向（unidirectional）”数据流。\n- 任何state都是由一个特定的组件所拥有的，任何state数据修改默认只会影响当前组件，\n- 可以通过回调传值（后面会整理）\n- **React Native建议由顶层的父组件定义state值，并将state值作为子组件的props属性值传递给子组件，这样可以保持单一的数据传递。**\n\n### 参考\n\n[[【1】React Native] React 中的状态（State）](https://www.jianshu.com/p/583473c37db9)\n\n\n\n\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=298 height=52 src=\"//music.163.com/outchain/player?type=2&id=455304006&auto=1&height=32\"></iframe>\n\n","slug":"ReactNative碎片整理之State","published":1,"updated":"2018-08-01T09:08:07.820Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6mc00061kygclj4134z","content":"<p>我们使用两种数据来控制一个组件：props和state。props是在父组件中指定，而且一经指定，在被指定的组件的生命周期中则不再改变。 对于需要改变的数据，我们需要使用state。</p>\n<a id=\"more\"></a>\n<p>state属性主要用来存储组件自身需要的数据，是组件自己私有的，我们一般通过修改 state 属性的值来更新数据，React 内部会监听 <code>state</code> 的变化，一旦发生变化就会主动触发组件的 render() 方法来更新 Dom 结构</p>\n<h3 id=\"state的使用\"><a href=\"#state的使用\" class=\"headerlink\" title=\"state的使用\"></a>state的使用</h3><p>一般来说，你需要在 constructor()方法中初始化 state（这是ES6的写法，ES5 中一般在 <code>getInitialState()</code> 方法中来初始化 <code>state</code>），然后在需要修改时调用 setState() 方法。</p>\n<p>不要使用 <code>this.state</code> 来修改 <code>state</code> 属性值，应该调用 <code>setState()</code> 方法，<code>this.state</code> <strong>是无效的</strong>。</p>\n<h3 id=\"setState（）方法\"><a href=\"#setState（）方法\" class=\"headerlink\" title=\"setState（）方法\"></a>setState（）方法</h3><p><code>setState()</code> 的完整表达式：</p>\n<p><code>setState(updater, [callback])</code></p>\n<p><code>setState()</code> 方法会把对组件 state 的改变加入到队列中，并且告诉 React 这个组件及其子组件需要重新渲染。</p>\n<h4 id=\"第一个参数：updater-函数\"><a href=\"#第一个参数：updater-函数\" class=\"headerlink\" title=\"第一个参数：updater 函数\"></a>第一个参数：<code>updater</code> 函数</h4><p><code>setState(updater, callback)</code> 方法的第一个参数是一个固定格式的 <code>updater</code> 函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(prevState, props) =&gt; stateChange</div></pre></td></tr></table></figure>\n<p><code>prevState</code> 是一个对之前状态（previous state）的引用，我们是不能直接修改这个参数的值，要想修改 <code>state</code> 的值，我们应该根据 <code>prevState</code> 和 <code>props</code> 参数来创建一个新的 JavaScript 对象。</p>\n<p><strong>例子1：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.setState(<span class=\"function\">(<span class=\"params\">prevState, props</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;<span class=\"attr\">counter</span>: prevState.counter + props.step&#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>你也可以传一个对象而不是函数，来作为<code>setState(updater, callback)</code> 方法的第一个参数，React 会将该参数 merge 到 state 中。</p>\n<p><strong>例子2:</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">this</span><span class=\"selector-class\">.setState</span>(&#123;<span class=\"attribute\">quantity</span>: <span class=\"number\">2</span>&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"第二个参数：callback\"><a href=\"#第二个参数：callback\" class=\"headerlink\" title=\"第二个参数：callback\"></a>第二个参数：callback</h4><p><code>setState(updater, callback)</code> 方法的第二个参数 <code>callback</code> 是一个可选参数。（基本是空的，一般不这么使用）</p>\n<p>为了更好的性能表现，React 并不能保证 <code>setState()</code> 一被调用 state 就能更新。所以，如果在调用 <code>setState()</code> 之后，马上就读取 <code>this.state</code> 的值的话，可能会出现误差。</p>\n<p>因此，这种情况下，推荐使用 <code>componentDidUpdate</code> 或者 <code>setState(updater, callback)</code> 方法的 <code>callback</code> 来获取最新的状态。</p>\n<p><strong>React 官方更推荐</strong>使用 <code>componentDidUpdate()</code>，而不是 <code>callback</code> 来监听 update 事件（注： 除非 <code>shouldComponentUpdate()</code> 方法返回 <code>false</code>，<code>setState()</code> 将永远都会引发重新渲染）。</p>\n<p><strong>例子1:</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;</div><div class=\"line\">    View,</div><div class=\"line\">    StyleSheet,</div><div class=\"line\">    TouchableOpacity,</div><div class=\"line\">    ToastAndroid,</div><div class=\"line\">    Platform,</div><div class=\"line\">    Text,</div><div class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 构造</span></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props);</div><div class=\"line\">        <span class=\"comment\">// 初始状态</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.state = &#123;</div><div class=\"line\">            <span class=\"attr\">num</span>: <span class=\"number\">1</span></div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    shouldComponentUpdate() &#123;</div><div class=\"line\">  \t\t<span class=\"comment\">//返回 false 则setState不刷新</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> defaultProps = &#123;</div><div class=\"line\">        <span class=\"attr\">add</span>: <span class=\"number\">100</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    componentDidUpdate() &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(Platform.OS==<span class=\"string\">'ios'</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        ToastAndroid.show(<span class=\"string\">\"\"</span>+<span class=\"keyword\">this</span>.state.num,ToastAndroid.SHORT)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;flex:1,justifyContent:</span>'<span class=\"attr\">center</span>',<span class=\"attr\">alignItems:</span> '<span class=\"attr\">center</span>'&#125;&#125;&gt;</span></span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">TouchableOpacity</span> <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</div><div class=\"line\">                    this.setState((prevState, props) =&gt; &#123;</div><div class=\"line\">                        return &#123;num: prevState.num + props.add&#125;;</div><div class=\"line\">                    &#125;);</div><div class=\"line\">                &#125;&#125; style=&#123;styles.container&#125;&gt;</div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.text&#125;</span>&gt;</span>&#123;this.state.num&#125;<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">TouchableOpacity</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">const</span> styles = StyleSheet.create(&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">container</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'#00a056'</span>,</div><div class=\"line\">        <span class=\"attr\">paddingRight</span>: <span class=\"number\">70</span>,</div><div class=\"line\">        <span class=\"attr\">paddingTop</span>: <span class=\"number\">10</span>,</div><div class=\"line\">        <span class=\"attr\">paddingBottom</span>: <span class=\"number\">10</span>,</div><div class=\"line\">        <span class=\"attr\">paddingLeft</span>: <span class=\"number\">70</span>,</div><div class=\"line\">        <span class=\"attr\">shadowColor</span>: <span class=\"string\">'#00a056'</span>,</div><div class=\"line\">        <span class=\"attr\">shadowOffset</span>: &#123;<span class=\"attr\">width</span>: <span class=\"number\">3</span>, <span class=\"attr\">height</span>: <span class=\"number\">3</span>&#125;,</div><div class=\"line\">        <span class=\"attr\">shadowOpacity</span>: <span class=\"number\">0.5</span>,</div><div class=\"line\">        <span class=\"attr\">shadowRadius</span>: <span class=\"number\">4</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">text</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">color</span>: <span class=\"string\">'#ffffff'</span>,</div><div class=\"line\">        <span class=\"attr\">fontSize</span>: <span class=\"number\">30</span>,</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p><img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/state.gif\" width=\"600\"></p>\n<p><strong>如上图效果：</strong></p>\n<ul>\n<li>shouldComponentUpdate 不重写或者返回true，则象左侧ios模拟器一样，可以修改状态</li>\n<li>返回false，则不重写</li>\n<li>官方不推荐我们使用setState的第二个参数Callback的形式获取，我们可以在componentDidUpdate回调中，获取最新的State</li>\n</ul>\n<h3 id=\"如何正确操作state\"><a href=\"#如何正确操作state\" class=\"headerlink\" title=\"如何正确操作state\"></a>如何正确操作state</h3><h4 id=\"不要使用this-state来修改state\"><a href=\"#不要使用this-state来修改state\" class=\"headerlink\" title=\"不要使用this.state来修改state\"></a>不要使用<code>this.state</code>来修改<code>state</code></h4><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Wrong</div><div class=\"line\">this.<span class=\"keyword\">state</span>.comment = 'Hello';</div></pre></td></tr></table></figure>\n<p>记住，<code>this.state</code> 是不可变的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//事实证明，并改变不了</span></div><div class=\"line\">render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;flex:</span> <span class=\"attr\">1</span>, <span class=\"attr\">justifyContent:</span> '<span class=\"attr\">center</span>', <span class=\"attr\">alignItems:</span> '<span class=\"attr\">center</span>'&#125;&#125;&gt;</span></span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">TouchableOpacity</span> <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</div><div class=\"line\">                this.state.num = 3</div><div class=\"line\">            &#125;&#125; style=&#123;styles.container&#125;&gt;</div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.text&#125;</span>&gt;</span>&#123;this.state.num&#125;<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">TouchableOpacity</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></div><div class=\"line\">    )</div></pre></td></tr></table></figure>\n<p>应该调用 <code>setState()</code> 方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Correct</span></div><div class=\"line\"><span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">comment</span>: <span class=\"string\">'Hello'</span>&#125;);</div><div class=\"line\"><span class=\"comment\">//或者</span></div><div class=\"line\"><span class=\"keyword\">this</span>.setState(<span class=\"function\">(<span class=\"params\">prevState, props</span>) =&gt;</span> &#123;</div><div class=\"line\">                        <span class=\"keyword\">return</span> &#123;<span class=\"attr\">num</span>: prevState.num + props.add&#125;;</div><div class=\"line\">                    &#125;);</div><div class=\"line\"><span class=\"comment\">//prevState 可以获取上个state 数值</span></div><div class=\"line\"><span class=\"comment\">//props 可以获取当前props所有数值，可以做一些操作</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//不要这么使用</span></div><div class=\"line\"><span class=\"keyword\">this</span>.setState(<span class=\"function\">(<span class=\"params\">prevState, props</span>) =&gt;</span> &#123;</div><div class=\"line\">                        <span class=\"keyword\">return</span> &#123;<span class=\"attr\">num</span>: <span class=\"keyword\">this</span>.state.num+<span class=\"number\">1</span>&#125;;</div><div class=\"line\">                    &#125;);</div><div class=\"line\"><span class=\"comment\">//考虑到setState可能是异步调用的，所以推荐使用prevState（上一个值），而不是依赖this.state来计算最新的state，这样可能会有误差</span></div></pre></td></tr></table></figure>\n<h4 id=\"state的改变是一个覆盖（合并）过程\"><a href=\"#state的改变是一个覆盖（合并）过程\" class=\"headerlink\" title=\"state的改变是一个覆盖（合并）过程\"></a>state的改变是一个覆盖（合并）过程</h4><p>当你调用 <code>setState()</code> 方法时，React 会将将你当前所提供的对象合并到当前的状态中。</p>\n<p><strong>例子1:</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;</div><div class=\"line\">      <span class=\"attr\">posts</span>: [],</div><div class=\"line\">      <span class=\"attr\">comments</span>: []</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">componentDidMount() &#123;</div><div class=\"line\"></div><div class=\"line\">    fetchComments().then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">        <span class=\"attr\">comments</span>: response.comments</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>⬆面的栗子，state更新至替换了comments，posts不受影响</p>\n<h3 id=\"state传递？\"><a href=\"#state传递？\" class=\"headerlink\" title=\"state传递？\"></a>state传递？</h3><p><strong>注意：</strong></p>\n<ul>\n<li>父组件和子组件之间不能通过 state 来交互，父组件只能将自己的 state 值传给子组件的 props。</li>\n</ul>\n<ul>\n<li>这种数据传递的方式通常被称为 “自顶向下（top-down）”或者“单向（unidirectional）”数据流。</li>\n<li>任何state都是由一个特定的组件所拥有的，任何state数据修改默认只会影响当前组件，</li>\n<li>可以通过回调传值（后面会整理）</li>\n<li><strong>React Native建议由顶层的父组件定义state值，并将state值作为子组件的props属性值传递给子组件，这样可以保持单一的数据传递。</strong></li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://www.jianshu.com/p/583473c37db9\" target=\"_blank\" rel=\"external\">[【1】React Native] React 中的状态（State）</a></p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"298\" height=\"52\" src=\"//music.163.com/outchain/player?type=2&id=455304006&auto=1&height=32\"></iframe>\n\n","excerpt":"<p>我们使用两种数据来控制一个组件：props和state。props是在父组件中指定，而且一经指定，在被指定的组件的生命周期中则不再改变。 对于需要改变的数据，我们需要使用state。</p>","more":"<p>state属性主要用来存储组件自身需要的数据，是组件自己私有的，我们一般通过修改 state 属性的值来更新数据，React 内部会监听 <code>state</code> 的变化，一旦发生变化就会主动触发组件的 render() 方法来更新 Dom 结构</p>\n<h3 id=\"state的使用\"><a href=\"#state的使用\" class=\"headerlink\" title=\"state的使用\"></a>state的使用</h3><p>一般来说，你需要在 constructor()方法中初始化 state（这是ES6的写法，ES5 中一般在 <code>getInitialState()</code> 方法中来初始化 <code>state</code>），然后在需要修改时调用 setState() 方法。</p>\n<p>不要使用 <code>this.state</code> 来修改 <code>state</code> 属性值，应该调用 <code>setState()</code> 方法，<code>this.state</code> <strong>是无效的</strong>。</p>\n<h3 id=\"setState（）方法\"><a href=\"#setState（）方法\" class=\"headerlink\" title=\"setState（）方法\"></a>setState（）方法</h3><p><code>setState()</code> 的完整表达式：</p>\n<p><code>setState(updater, [callback])</code></p>\n<p><code>setState()</code> 方法会把对组件 state 的改变加入到队列中，并且告诉 React 这个组件及其子组件需要重新渲染。</p>\n<h4 id=\"第一个参数：updater-函数\"><a href=\"#第一个参数：updater-函数\" class=\"headerlink\" title=\"第一个参数：updater 函数\"></a>第一个参数：<code>updater</code> 函数</h4><p><code>setState(updater, callback)</code> 方法的第一个参数是一个固定格式的 <code>updater</code> 函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(prevState, props) =&gt; stateChange</div></pre></td></tr></table></figure>\n<p><code>prevState</code> 是一个对之前状态（previous state）的引用，我们是不能直接修改这个参数的值，要想修改 <code>state</code> 的值，我们应该根据 <code>prevState</code> 和 <code>props</code> 参数来创建一个新的 JavaScript 对象。</p>\n<p><strong>例子1：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.setState(<span class=\"function\">(<span class=\"params\">prevState, props</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;<span class=\"attr\">counter</span>: prevState.counter + props.step&#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>你也可以传一个对象而不是函数，来作为<code>setState(updater, callback)</code> 方法的第一个参数，React 会将该参数 merge 到 state 中。</p>\n<p><strong>例子2:</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">this</span><span class=\"selector-class\">.setState</span>(&#123;<span class=\"attribute\">quantity</span>: <span class=\"number\">2</span>&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"第二个参数：callback\"><a href=\"#第二个参数：callback\" class=\"headerlink\" title=\"第二个参数：callback\"></a>第二个参数：callback</h4><p><code>setState(updater, callback)</code> 方法的第二个参数 <code>callback</code> 是一个可选参数。（基本是空的，一般不这么使用）</p>\n<p>为了更好的性能表现，React 并不能保证 <code>setState()</code> 一被调用 state 就能更新。所以，如果在调用 <code>setState()</code> 之后，马上就读取 <code>this.state</code> 的值的话，可能会出现误差。</p>\n<p>因此，这种情况下，推荐使用 <code>componentDidUpdate</code> 或者 <code>setState(updater, callback)</code> 方法的 <code>callback</code> 来获取最新的状态。</p>\n<p><strong>React 官方更推荐</strong>使用 <code>componentDidUpdate()</code>，而不是 <code>callback</code> 来监听 update 事件（注： 除非 <code>shouldComponentUpdate()</code> 方法返回 <code>false</code>，<code>setState()</code> 将永远都会引发重新渲染）。</p>\n<p><strong>例子1:</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;</div><div class=\"line\">    View,</div><div class=\"line\">    StyleSheet,</div><div class=\"line\">    TouchableOpacity,</div><div class=\"line\">    ToastAndroid,</div><div class=\"line\">    Platform,</div><div class=\"line\">    Text,</div><div class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 构造</span></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props);</div><div class=\"line\">        <span class=\"comment\">// 初始状态</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.state = &#123;</div><div class=\"line\">            <span class=\"attr\">num</span>: <span class=\"number\">1</span></div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    shouldComponentUpdate() &#123;</div><div class=\"line\">  \t\t<span class=\"comment\">//返回 false 则setState不刷新</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> defaultProps = &#123;</div><div class=\"line\">        <span class=\"attr\">add</span>: <span class=\"number\">100</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    componentDidUpdate() &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(Platform.OS==<span class=\"string\">'ios'</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        ToastAndroid.show(<span class=\"string\">\"\"</span>+<span class=\"keyword\">this</span>.state.num,ToastAndroid.SHORT)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;flex:1,justifyContent:</span>'<span class=\"attr\">center</span>',<span class=\"attr\">alignItems:</span> '<span class=\"attr\">center</span>'&#125;&#125;&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">TouchableOpacity</span> <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</div><div class=\"line\">                    this.setState((prevState, props) =&gt; &#123;</div><div class=\"line\">                        return &#123;num: prevState.num + props.add&#125;;</div><div class=\"line\">                    &#125;);</div><div class=\"line\">                &#125;&#125; style=&#123;styles.container&#125;&gt;</div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.text&#125;</span>&gt;</span>&#123;this.state.num&#125;<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">TouchableOpacity</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">const</span> styles = StyleSheet.create(&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">container</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'#00a056'</span>,</div><div class=\"line\">        <span class=\"attr\">paddingRight</span>: <span class=\"number\">70</span>,</div><div class=\"line\">        <span class=\"attr\">paddingTop</span>: <span class=\"number\">10</span>,</div><div class=\"line\">        <span class=\"attr\">paddingBottom</span>: <span class=\"number\">10</span>,</div><div class=\"line\">        <span class=\"attr\">paddingLeft</span>: <span class=\"number\">70</span>,</div><div class=\"line\">        <span class=\"attr\">shadowColor</span>: <span class=\"string\">'#00a056'</span>,</div><div class=\"line\">        <span class=\"attr\">shadowOffset</span>: &#123;<span class=\"attr\">width</span>: <span class=\"number\">3</span>, <span class=\"attr\">height</span>: <span class=\"number\">3</span>&#125;,</div><div class=\"line\">        <span class=\"attr\">shadowOpacity</span>: <span class=\"number\">0.5</span>,</div><div class=\"line\">        <span class=\"attr\">shadowRadius</span>: <span class=\"number\">4</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">text</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">color</span>: <span class=\"string\">'#ffffff'</span>,</div><div class=\"line\">        <span class=\"attr\">fontSize</span>: <span class=\"number\">30</span>,</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p><img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/state.gif\" width=\"600\"></p>\n<p><strong>如上图效果：</strong></p>\n<ul>\n<li>shouldComponentUpdate 不重写或者返回true，则象左侧ios模拟器一样，可以修改状态</li>\n<li>返回false，则不重写</li>\n<li>官方不推荐我们使用setState的第二个参数Callback的形式获取，我们可以在componentDidUpdate回调中，获取最新的State</li>\n</ul>\n<h3 id=\"如何正确操作state\"><a href=\"#如何正确操作state\" class=\"headerlink\" title=\"如何正确操作state\"></a>如何正确操作state</h3><h4 id=\"不要使用this-state来修改state\"><a href=\"#不要使用this-state来修改state\" class=\"headerlink\" title=\"不要使用this.state来修改state\"></a>不要使用<code>this.state</code>来修改<code>state</code></h4><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Wrong</div><div class=\"line\">this.<span class=\"keyword\">state</span>.comment = 'Hello';</div></pre></td></tr></table></figure>\n<p>记住，<code>this.state</code> 是不可变的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//事实证明，并改变不了</span></div><div class=\"line\">render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;flex:</span> <span class=\"attr\">1</span>, <span class=\"attr\">justifyContent:</span> '<span class=\"attr\">center</span>', <span class=\"attr\">alignItems:</span> '<span class=\"attr\">center</span>'&#125;&#125;&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">TouchableOpacity</span> <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</div><div class=\"line\">                this.state.num = 3</div><div class=\"line\">            &#125;&#125; style=&#123;styles.container&#125;&gt;</div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.text&#125;</span>&gt;</span>&#123;this.state.num&#125;<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">TouchableOpacity</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></span></div><div class=\"line\">    )</div></pre></td></tr></table></figure>\n<p>应该调用 <code>setState()</code> 方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Correct</span></div><div class=\"line\"><span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">comment</span>: <span class=\"string\">'Hello'</span>&#125;);</div><div class=\"line\"><span class=\"comment\">//或者</span></div><div class=\"line\"><span class=\"keyword\">this</span>.setState(<span class=\"function\">(<span class=\"params\">prevState, props</span>) =&gt;</span> &#123;</div><div class=\"line\">                        <span class=\"keyword\">return</span> &#123;<span class=\"attr\">num</span>: prevState.num + props.add&#125;;</div><div class=\"line\">                    &#125;);</div><div class=\"line\"><span class=\"comment\">//prevState 可以获取上个state 数值</span></div><div class=\"line\"><span class=\"comment\">//props 可以获取当前props所有数值，可以做一些操作</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//不要这么使用</span></div><div class=\"line\"><span class=\"keyword\">this</span>.setState(<span class=\"function\">(<span class=\"params\">prevState, props</span>) =&gt;</span> &#123;</div><div class=\"line\">                        <span class=\"keyword\">return</span> &#123;<span class=\"attr\">num</span>: <span class=\"keyword\">this</span>.state.num+<span class=\"number\">1</span>&#125;;</div><div class=\"line\">                    &#125;);</div><div class=\"line\"><span class=\"comment\">//考虑到setState可能是异步调用的，所以推荐使用prevState（上一个值），而不是依赖this.state来计算最新的state，这样可能会有误差</span></div></pre></td></tr></table></figure>\n<h4 id=\"state的改变是一个覆盖（合并）过程\"><a href=\"#state的改变是一个覆盖（合并）过程\" class=\"headerlink\" title=\"state的改变是一个覆盖（合并）过程\"></a>state的改变是一个覆盖（合并）过程</h4><p>当你调用 <code>setState()</code> 方法时，React 会将将你当前所提供的对象合并到当前的状态中。</p>\n<p><strong>例子1:</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;</div><div class=\"line\">      <span class=\"attr\">posts</span>: [],</div><div class=\"line\">      <span class=\"attr\">comments</span>: []</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">componentDidMount() &#123;</div><div class=\"line\"></div><div class=\"line\">    fetchComments().then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">        <span class=\"attr\">comments</span>: response.comments</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>⬆面的栗子，state更新至替换了comments，posts不受影响</p>\n<h3 id=\"state传递？\"><a href=\"#state传递？\" class=\"headerlink\" title=\"state传递？\"></a>state传递？</h3><p><strong>注意：</strong></p>\n<ul>\n<li>父组件和子组件之间不能通过 state 来交互，父组件只能将自己的 state 值传给子组件的 props。</li>\n</ul>\n<ul>\n<li>这种数据传递的方式通常被称为 “自顶向下（top-down）”或者“单向（unidirectional）”数据流。</li>\n<li>任何state都是由一个特定的组件所拥有的，任何state数据修改默认只会影响当前组件，</li>\n<li>可以通过回调传值（后面会整理）</li>\n<li><strong>React Native建议由顶层的父组件定义state值，并将state值作为子组件的props属性值传递给子组件，这样可以保持单一的数据传递。</strong></li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://www.jianshu.com/p/583473c37db9\">[【1】React Native] React 中的状态（State）</a></p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=298 height=52 src=\"//music.163.com/outchain/player?type=2&id=455304006&auto=1&height=32\"></iframe>"},{"title":"HandlerThread","date":"2015-12-22T05:52:02.000Z","_content":"\n**HandlerThread**\n\nHandlerThread知识点整理\n\n<!--more-->\n\n **官方介绍**\n\n> Handy class for starting a new thread that has a looper. The looper can then be used to create handler classes. Note that start() must still be called.\n\n意思就是HandlerThread能够新建拥有Looper的线程(除了主线程,我们新建线程是需要手动调用Looper.prepare来初始化looper和messagequeue的),而这个looper能够来新建其他的Handler(新建的这个handler是属于子线程的,并且looper和messagequeue都是初始化好了的)\n\n**如以下代码：**\n\n```java\nmHandlerThread = new HandlerThread(\"check-message-coming\");//the name of the new thread\n        mHandlerThread.start();\n\n        mThreadHandler = new Handler(mHandlerThread.getLooper())//拥有子线程looper的handler\n        {\n            @Override\n            public void handleMessage(Message msg)\n            {\n                update();//模拟数据更新\n\n                if (isUpdateInfo)\n                    mThreadHandler.sendEmptyMessage(MSG_UPDATE_INFO);\n            }\n        };\n        \n\t @Override\n\t    protected void onDestroy() {\n\t        super.onDestroy();\n\n\t        //释放资源\n\t        myHandlerThread.quit() ;\n\t    }\n//其他线程可以拿mThreadHandler发消息了，来完成向该HandlerThread线程通讯\n```\n\nmThreadHandler构建的时候,传的是HandlerThread的looper对象,也就是说这个mThreadHandler是属于子线程的管理的,他的handlerMessage的回调中是可以做耗时操作的(切记,是不能做更新UI的操作的,如需要更新,需要用主线程的handler发消息来更新,或者使用runOnUiThread或者eventBus等其他方式来刷新ui)\n\n**退出循环**\n\nLooper是通过调用loop方法驱动着消息循环的进行: 从MessageQueue中阻塞式地取出一个消息，然后让Handler处理该消息，周而复始，loop方法是个死循环方法。\n\n那如何终止消息循环呢？我们可以调用Looper的quit方法或quitSafely方法，二者稍有不同。\n\n```java\n/**\n     * Quits the looper.\n     * <p>\n     * Causes the {@link #loop} method to terminate without processing any\n     * more messages in the message queue.\n     * </p><p>\n     * Any attempt to post messages to the queue after the looper is asked to quit will fail.\n     * For example, the {@link Handler#sendMessage(Message)} method will return false.\n     * </p><p class=\"note\">\n     * Using this method may be unsafe because some messages may not be delivered\n     * before the looper terminates.  Consider using {@link #quitSafely} instead to ensure\n     * that all pending work is completed in an orderly manner.\n     * </p>\n     *\n     * @see #quitSafely\n     */\n    public void quit() {\n        mQueue.quit(false);\n    }\n\n    /**\n     * Quits the looper safely.\n     * <p>\n     * Causes the {@link #loop} method to terminate as soon as all remaining messages\n     * in the message queue that are already due to be delivered have been handled.\n     * However pending delayed messages with due times in the future will not be\n     * delivered before the loop terminates.\n     * </p><p>\n     * Any attempt to post messages to the queue after the looper is asked to quit will fail.\n     * For example, the {@link Handler#sendMessage(Message)} method will return false.\n     * </p>\n     */\n    public void quitSafely() {\n        mQueue.quit(true);\n    }\n```\n\n**quit（）和quitSafety的区别**\n\n当我们调用Looper的quit方法时，实际上执行了MessageQueue中的removeAllMessagesLocked方法，该方法的作用是把MessageQueue消息池中所有的消息全部清空，无论是延迟消息（延迟消息是指通过sendMessageDelayed或通过postDelayed等方法发送的需要延迟执行的消息）还是非延迟消息。\n\n当我们调用Looper的quitSafely方法时，实际上执行了MessageQueue中的removeAllFutureMessagesLocked方法，通过名字就可以看出，该方法只会清空MessageQueue消息池中所有的延迟消息，并将消息池中所有的非延迟消息派发出去让Handler去处理，quitSafely相比于quit方法安全之处在于清空消息之前会派发所有的非延迟消息。\n\n无论是调用了quit方法还是quitSafely方法只会，Looper就不再接收新的消息。即在调用了Looper的quit或quitSafely方法之后，消息循环就终结了，这时候再通过Handler调用sendMessage或post等方法发送消息时均返回false，表示消息没有成功放入消息队列MessageQueue中，因为消息队列已经退出了。\n\n需要注意的是Looper的quit方法从API Level 1就存在了，但是Looper的quitSafely方法从API Level 18才添加进来。\n\n**总结**\n\n    1. HandlerThread继承自Thread,因此调用start方法,也是执行run方法,run()方法的逻辑都是在子线程中运行的。\n    2. 查看HandlerThread源码可以看到,run()中主要做了Looper.prepare()和looper.loop()创建looper和messagequeue对象并开启消息队列的循环\n    3. 需要注意的是,对于网络io操作,HandlerThread并不适合,因为它只有一个线程,得排队一个一个等着。\n    4. 页面消耗的时候,调用 myHandlerThread.quit() ;looper就不在接受新的消息,消息循环结束,这个时候再通过handler调用sendMessage或者post等方法发送消息时均返回false,表示没有成功的放入消息队列。","source":"_posts/HandlerThread.md","raw":"---\ntitle: HandlerThread\ndate: 2015-12-22 13:52:02\ntags: \n- Android\ncategories: Android\n---\n\n**HandlerThread**\n\nHandlerThread知识点整理\n\n<!--more-->\n\n **官方介绍**\n\n> Handy class for starting a new thread that has a looper. The looper can then be used to create handler classes. Note that start() must still be called.\n\n意思就是HandlerThread能够新建拥有Looper的线程(除了主线程,我们新建线程是需要手动调用Looper.prepare来初始化looper和messagequeue的),而这个looper能够来新建其他的Handler(新建的这个handler是属于子线程的,并且looper和messagequeue都是初始化好了的)\n\n**如以下代码：**\n\n```java\nmHandlerThread = new HandlerThread(\"check-message-coming\");//the name of the new thread\n        mHandlerThread.start();\n\n        mThreadHandler = new Handler(mHandlerThread.getLooper())//拥有子线程looper的handler\n        {\n            @Override\n            public void handleMessage(Message msg)\n            {\n                update();//模拟数据更新\n\n                if (isUpdateInfo)\n                    mThreadHandler.sendEmptyMessage(MSG_UPDATE_INFO);\n            }\n        };\n        \n\t @Override\n\t    protected void onDestroy() {\n\t        super.onDestroy();\n\n\t        //释放资源\n\t        myHandlerThread.quit() ;\n\t    }\n//其他线程可以拿mThreadHandler发消息了，来完成向该HandlerThread线程通讯\n```\n\nmThreadHandler构建的时候,传的是HandlerThread的looper对象,也就是说这个mThreadHandler是属于子线程的管理的,他的handlerMessage的回调中是可以做耗时操作的(切记,是不能做更新UI的操作的,如需要更新,需要用主线程的handler发消息来更新,或者使用runOnUiThread或者eventBus等其他方式来刷新ui)\n\n**退出循环**\n\nLooper是通过调用loop方法驱动着消息循环的进行: 从MessageQueue中阻塞式地取出一个消息，然后让Handler处理该消息，周而复始，loop方法是个死循环方法。\n\n那如何终止消息循环呢？我们可以调用Looper的quit方法或quitSafely方法，二者稍有不同。\n\n```java\n/**\n     * Quits the looper.\n     * <p>\n     * Causes the {@link #loop} method to terminate without processing any\n     * more messages in the message queue.\n     * </p><p>\n     * Any attempt to post messages to the queue after the looper is asked to quit will fail.\n     * For example, the {@link Handler#sendMessage(Message)} method will return false.\n     * </p><p class=\"note\">\n     * Using this method may be unsafe because some messages may not be delivered\n     * before the looper terminates.  Consider using {@link #quitSafely} instead to ensure\n     * that all pending work is completed in an orderly manner.\n     * </p>\n     *\n     * @see #quitSafely\n     */\n    public void quit() {\n        mQueue.quit(false);\n    }\n\n    /**\n     * Quits the looper safely.\n     * <p>\n     * Causes the {@link #loop} method to terminate as soon as all remaining messages\n     * in the message queue that are already due to be delivered have been handled.\n     * However pending delayed messages with due times in the future will not be\n     * delivered before the loop terminates.\n     * </p><p>\n     * Any attempt to post messages to the queue after the looper is asked to quit will fail.\n     * For example, the {@link Handler#sendMessage(Message)} method will return false.\n     * </p>\n     */\n    public void quitSafely() {\n        mQueue.quit(true);\n    }\n```\n\n**quit（）和quitSafety的区别**\n\n当我们调用Looper的quit方法时，实际上执行了MessageQueue中的removeAllMessagesLocked方法，该方法的作用是把MessageQueue消息池中所有的消息全部清空，无论是延迟消息（延迟消息是指通过sendMessageDelayed或通过postDelayed等方法发送的需要延迟执行的消息）还是非延迟消息。\n\n当我们调用Looper的quitSafely方法时，实际上执行了MessageQueue中的removeAllFutureMessagesLocked方法，通过名字就可以看出，该方法只会清空MessageQueue消息池中所有的延迟消息，并将消息池中所有的非延迟消息派发出去让Handler去处理，quitSafely相比于quit方法安全之处在于清空消息之前会派发所有的非延迟消息。\n\n无论是调用了quit方法还是quitSafely方法只会，Looper就不再接收新的消息。即在调用了Looper的quit或quitSafely方法之后，消息循环就终结了，这时候再通过Handler调用sendMessage或post等方法发送消息时均返回false，表示消息没有成功放入消息队列MessageQueue中，因为消息队列已经退出了。\n\n需要注意的是Looper的quit方法从API Level 1就存在了，但是Looper的quitSafely方法从API Level 18才添加进来。\n\n**总结**\n\n    1. HandlerThread继承自Thread,因此调用start方法,也是执行run方法,run()方法的逻辑都是在子线程中运行的。\n    2. 查看HandlerThread源码可以看到,run()中主要做了Looper.prepare()和looper.loop()创建looper和messagequeue对象并开启消息队列的循环\n    3. 需要注意的是,对于网络io操作,HandlerThread并不适合,因为它只有一个线程,得排队一个一个等着。\n    4. 页面消耗的时候,调用 myHandlerThread.quit() ;looper就不在接受新的消息,消息循环结束,这个时候再通过handler调用sendMessage或者post等方法发送消息时均返回false,表示没有成功的放入消息队列。","slug":"HandlerThread","published":1,"updated":"2018-07-19T02:12:20.671Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6me000a1kygwwtj660o","content":"<p><strong>HandlerThread</strong></p>\n<p>HandlerThread知识点整理</p>\n<a id=\"more\"></a>\n<p> <strong>官方介绍</strong></p>\n<blockquote>\n<p>Handy class for starting a new thread that has a looper. The looper can then be used to create handler classes. Note that start() must still be called.</p>\n</blockquote>\n<p>意思就是HandlerThread能够新建拥有Looper的线程(除了主线程,我们新建线程是需要手动调用Looper.prepare来初始化looper和messagequeue的),而这个looper能够来新建其他的Handler(新建的这个handler是属于子线程的,并且looper和messagequeue都是初始化好了的)</p>\n<p><strong>如以下代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">mHandlerThread = <span class=\"keyword\">new</span> HandlerThread(<span class=\"string\">\"check-message-coming\"</span>);<span class=\"comment\">//the name of the new thread</span></div><div class=\"line\">        mHandlerThread.start();</div><div class=\"line\"></div><div class=\"line\">        mThreadHandler = <span class=\"keyword\">new</span> Handler(mHandlerThread.getLooper())<span class=\"comment\">//拥有子线程looper的handler</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span></span></div><div class=\"line\">            &#123;</div><div class=\"line\">                update();<span class=\"comment\">//模拟数据更新</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (isUpdateInfo)</div><div class=\"line\">                    mThreadHandler.sendEmptyMessage(MSG_UPDATE_INFO);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        </div><div class=\"line\">\t <span class=\"meta\">@Override</span></div><div class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\"></div><div class=\"line\">\t        <span class=\"comment\">//释放资源</span></div><div class=\"line\">\t        myHandlerThread.quit() ;</div><div class=\"line\">\t    &#125;</div><div class=\"line\"><span class=\"comment\">//其他线程可以拿mThreadHandler发消息了，来完成向该HandlerThread线程通讯</span></div></pre></td></tr></table></figure>\n<p>mThreadHandler构建的时候,传的是HandlerThread的looper对象,也就是说这个mThreadHandler是属于子线程的管理的,他的handlerMessage的回调中是可以做耗时操作的(切记,是不能做更新UI的操作的,如需要更新,需要用主线程的handler发消息来更新,或者使用runOnUiThread或者eventBus等其他方式来刷新ui)</p>\n<p><strong>退出循环</strong></p>\n<p>Looper是通过调用loop方法驱动着消息循环的进行: 从MessageQueue中阻塞式地取出一个消息，然后让Handler处理该消息，周而复始，loop方法是个死循环方法。</p>\n<p>那如何终止消息循环呢？我们可以调用Looper的quit方法或quitSafely方法，二者稍有不同。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">     * Quits the looper.</div><div class=\"line\">     * &lt;p&gt;</div><div class=\"line\">     * Causes the &#123;<span class=\"doctag\">@link</span> #loop&#125; method to terminate without processing any</div><div class=\"line\">     * more messages in the message queue.</div><div class=\"line\">     * &lt;/p&gt;&lt;p&gt;</div><div class=\"line\">     * Any attempt to post messages to the queue after the looper is asked to quit will fail.</div><div class=\"line\">     * For example, the &#123;<span class=\"doctag\">@link</span> Handler#sendMessage(Message)&#125; method will return false.</div><div class=\"line\">     * &lt;/p&gt;&lt;p class=\"note\"&gt;</div><div class=\"line\">     * Using this method may be unsafe because some messages may not be delivered</div><div class=\"line\">     * before the looper terminates.  Consider using &#123;<span class=\"doctag\">@link</span> #quitSafely&#125; instead to ensure</div><div class=\"line\">     * that all pending work is completed in an orderly manner.</div><div class=\"line\">     * &lt;/p&gt;</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@see</span> #quitSafely</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">quit</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mQueue.quit(<span class=\"keyword\">false</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Quits the looper safely.</div><div class=\"line\">     * &lt;p&gt;</div><div class=\"line\">     * Causes the &#123;<span class=\"doctag\">@link</span> #loop&#125; method to terminate as soon as all remaining messages</div><div class=\"line\">     * in the message queue that are already due to be delivered have been handled.</div><div class=\"line\">     * However pending delayed messages with due times in the future will not be</div><div class=\"line\">     * delivered before the loop terminates.</div><div class=\"line\">     * &lt;/p&gt;&lt;p&gt;</div><div class=\"line\">     * Any attempt to post messages to the queue after the looper is asked to quit will fail.</div><div class=\"line\">     * For example, the &#123;<span class=\"doctag\">@link</span> Handler#sendMessage(Message)&#125; method will return false.</div><div class=\"line\">     * &lt;/p&gt;</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">quitSafely</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mQueue.quit(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p><strong>quit（）和quitSafety的区别</strong></p>\n<p>当我们调用Looper的quit方法时，实际上执行了MessageQueue中的removeAllMessagesLocked方法，该方法的作用是把MessageQueue消息池中所有的消息全部清空，无论是延迟消息（延迟消息是指通过sendMessageDelayed或通过postDelayed等方法发送的需要延迟执行的消息）还是非延迟消息。</p>\n<p>当我们调用Looper的quitSafely方法时，实际上执行了MessageQueue中的removeAllFutureMessagesLocked方法，通过名字就可以看出，该方法只会清空MessageQueue消息池中所有的延迟消息，并将消息池中所有的非延迟消息派发出去让Handler去处理，quitSafely相比于quit方法安全之处在于清空消息之前会派发所有的非延迟消息。</p>\n<p>无论是调用了quit方法还是quitSafely方法只会，Looper就不再接收新的消息。即在调用了Looper的quit或quitSafely方法之后，消息循环就终结了，这时候再通过Handler调用sendMessage或post等方法发送消息时均返回false，表示消息没有成功放入消息队列MessageQueue中，因为消息队列已经退出了。</p>\n<p>需要注意的是Looper的quit方法从API Level 1就存在了，但是Looper的quitSafely方法从API Level 18才添加进来。</p>\n<p><strong>总结</strong></p>\n<pre><code>1. HandlerThread继承自Thread,因此调用start方法,也是执行run方法,run()方法的逻辑都是在子线程中运行的。\n2. 查看HandlerThread源码可以看到,run()中主要做了Looper.prepare()和looper.loop()创建looper和messagequeue对象并开启消息队列的循环\n3. 需要注意的是,对于网络io操作,HandlerThread并不适合,因为它只有一个线程,得排队一个一个等着。\n4. 页面消耗的时候,调用 myHandlerThread.quit() ;looper就不在接受新的消息,消息循环结束,这个时候再通过handler调用sendMessage或者post等方法发送消息时均返回false,表示没有成功的放入消息队列。\n</code></pre>","excerpt":"<p><strong>HandlerThread</strong></p>\n<p>HandlerThread知识点整理</p>","more":"<p> <strong>官方介绍</strong></p>\n<blockquote>\n<p>Handy class for starting a new thread that has a looper. The looper can then be used to create handler classes. Note that start() must still be called.</p>\n</blockquote>\n<p>意思就是HandlerThread能够新建拥有Looper的线程(除了主线程,我们新建线程是需要手动调用Looper.prepare来初始化looper和messagequeue的),而这个looper能够来新建其他的Handler(新建的这个handler是属于子线程的,并且looper和messagequeue都是初始化好了的)</p>\n<p><strong>如以下代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">mHandlerThread = <span class=\"keyword\">new</span> HandlerThread(<span class=\"string\">\"check-message-coming\"</span>);<span class=\"comment\">//the name of the new thread</span></div><div class=\"line\">        mHandlerThread.start();</div><div class=\"line\"></div><div class=\"line\">        mThreadHandler = <span class=\"keyword\">new</span> Handler(mHandlerThread.getLooper())<span class=\"comment\">//拥有子线程looper的handler</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span></div><div class=\"line\">            </span>&#123;</div><div class=\"line\">                update();<span class=\"comment\">//模拟数据更新</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (isUpdateInfo)</div><div class=\"line\">                    mThreadHandler.sendEmptyMessage(MSG_UPDATE_INFO);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        </div><div class=\"line\">\t <span class=\"meta\">@Override</span></div><div class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\"></div><div class=\"line\">\t        <span class=\"comment\">//释放资源</span></div><div class=\"line\">\t        myHandlerThread.quit() ;</div><div class=\"line\">\t    &#125;</div><div class=\"line\"><span class=\"comment\">//其他线程可以拿mThreadHandler发消息了，来完成向该HandlerThread线程通讯</span></div></pre></td></tr></table></figure>\n<p>mThreadHandler构建的时候,传的是HandlerThread的looper对象,也就是说这个mThreadHandler是属于子线程的管理的,他的handlerMessage的回调中是可以做耗时操作的(切记,是不能做更新UI的操作的,如需要更新,需要用主线程的handler发消息来更新,或者使用runOnUiThread或者eventBus等其他方式来刷新ui)</p>\n<p><strong>退出循环</strong></p>\n<p>Looper是通过调用loop方法驱动着消息循环的进行: 从MessageQueue中阻塞式地取出一个消息，然后让Handler处理该消息，周而复始，loop方法是个死循环方法。</p>\n<p>那如何终止消息循环呢？我们可以调用Looper的quit方法或quitSafely方法，二者稍有不同。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">     * Quits the looper.</div><div class=\"line\">     * &lt;p&gt;</div><div class=\"line\">     * Causes the &#123;<span class=\"doctag\">@link</span> #loop&#125; method to terminate without processing any</div><div class=\"line\">     * more messages in the message queue.</div><div class=\"line\">     * &lt;/p&gt;&lt;p&gt;</div><div class=\"line\">     * Any attempt to post messages to the queue after the looper is asked to quit will fail.</div><div class=\"line\">     * For example, the &#123;<span class=\"doctag\">@link</span> Handler#sendMessage(Message)&#125; method will return false.</div><div class=\"line\">     * &lt;/p&gt;&lt;p class=\"note\"&gt;</div><div class=\"line\">     * Using this method may be unsafe because some messages may not be delivered</div><div class=\"line\">     * before the looper terminates.  Consider using &#123;<span class=\"doctag\">@link</span> #quitSafely&#125; instead to ensure</div><div class=\"line\">     * that all pending work is completed in an orderly manner.</div><div class=\"line\">     * &lt;/p&gt;</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@see</span> #quitSafely</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">quit</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mQueue.quit(<span class=\"keyword\">false</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Quits the looper safely.</div><div class=\"line\">     * &lt;p&gt;</div><div class=\"line\">     * Causes the &#123;<span class=\"doctag\">@link</span> #loop&#125; method to terminate as soon as all remaining messages</div><div class=\"line\">     * in the message queue that are already due to be delivered have been handled.</div><div class=\"line\">     * However pending delayed messages with due times in the future will not be</div><div class=\"line\">     * delivered before the loop terminates.</div><div class=\"line\">     * &lt;/p&gt;&lt;p&gt;</div><div class=\"line\">     * Any attempt to post messages to the queue after the looper is asked to quit will fail.</div><div class=\"line\">     * For example, the &#123;<span class=\"doctag\">@link</span> Handler#sendMessage(Message)&#125; method will return false.</div><div class=\"line\">     * &lt;/p&gt;</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">quitSafely</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mQueue.quit(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p><strong>quit（）和quitSafety的区别</strong></p>\n<p>当我们调用Looper的quit方法时，实际上执行了MessageQueue中的removeAllMessagesLocked方法，该方法的作用是把MessageQueue消息池中所有的消息全部清空，无论是延迟消息（延迟消息是指通过sendMessageDelayed或通过postDelayed等方法发送的需要延迟执行的消息）还是非延迟消息。</p>\n<p>当我们调用Looper的quitSafely方法时，实际上执行了MessageQueue中的removeAllFutureMessagesLocked方法，通过名字就可以看出，该方法只会清空MessageQueue消息池中所有的延迟消息，并将消息池中所有的非延迟消息派发出去让Handler去处理，quitSafely相比于quit方法安全之处在于清空消息之前会派发所有的非延迟消息。</p>\n<p>无论是调用了quit方法还是quitSafely方法只会，Looper就不再接收新的消息。即在调用了Looper的quit或quitSafely方法之后，消息循环就终结了，这时候再通过Handler调用sendMessage或post等方法发送消息时均返回false，表示消息没有成功放入消息队列MessageQueue中，因为消息队列已经退出了。</p>\n<p>需要注意的是Looper的quit方法从API Level 1就存在了，但是Looper的quitSafely方法从API Level 18才添加进来。</p>\n<p><strong>总结</strong></p>\n<pre><code>1. HandlerThread继承自Thread,因此调用start方法,也是执行run方法,run()方法的逻辑都是在子线程中运行的。\n2. 查看HandlerThread源码可以看到,run()中主要做了Looper.prepare()和looper.loop()创建looper和messagequeue对象并开启消息队列的循环\n3. 需要注意的是,对于网络io操作,HandlerThread并不适合,因为它只有一个线程,得排队一个一个等着。\n4. 页面消耗的时候,调用 myHandlerThread.quit() ;looper就不在接受新的消息,消息循环结束,这个时候再通过handler调用sendMessage或者post等方法发送消息时均返回false,表示没有成功的放入消息队列。\n</code></pre>"},{"title":"ReactNative的prop-types属性验证问题","date":"2018-08-02T08:12:54.000Z","password":null,"_content":"\n使用 React Native 创建的组件是可以复用的，所以我们开发的组件可能会给项目组其他同事使用。但别人可能对这个组件不熟悉，常常会忘记使用某些属性，或者某些属性传递的数据类型有误。\n\n<!--more-->\n\n在开发 React Native 自定义组件时，可以通过属性确认来声明这个组件需要哪些属性。这样，如果在调用这个自定义组件时没有提供相应的属性，则会在手机与调试工具中弹出警告信息，告知开发者该组件需要哪些属性。\n\n# 新版本的问题\n\nReact Native已经升级到0.51.0了，版本升级很快，但是对老项目也会有一些问题，常见的就是属性找不到的问题。例如：\n\n\n\n<img src=\"https://ws1.sinaimg.cn/large/006tKfTcgy1ftvfe47ylmj30d40nkjt9.jpg\" width=\"200\"/>\n\n主要原因是随着React Native的升级，系统废弃了很多的东西，过去我们可以直接使用 React.PropTypes 来进行属性确认，不过这个自 React v15.5 起就被移除了，转而使用prop-types库来进行替换\n\n# 如何使用\n\n## 安装\n\n**需要先安装这个第三方库**\n\n`npm install --save prop-types`\n\n安装成功如下：\n\n<img src=\"https://ws1.sinaimg.cn/large/006tKfTcgy1ftvfhhy65bj30y40j274r.jpg\" width=\"200\"/>\n\n## 导入\n\n`import propTypes from 'prop-types';`\n\n## 验证\n\n```\nstatic propTypes = {\n  title: PropTypes.string,\n  leftIcon: PropTypes.string,\n  rightIcon: PropTypes.string,\n  leftPress: PropTypes.func,\n  rightPress: PropTypes.func,\n  style: PropTypes.object\n }\n```\n\n这样，如果在调用这个自定义组件时没有提供相应的属性，则会在手机与调试工具中弹出警告信息，告知开发者该组件需要哪些属性。\n\n# 完整语法\n\n1，要求属性是指定的 JavaScript 基本类型。例如：\n\n属性: PropTypes.array,\n属性: PropTypes.bool,\n属性: PropTypes.func,\n属性: PropTypes.number,\n属性: PropTypes.object,\n属性: PropTypes.string,\n\n2，要求属性是可渲染节点。例如：\n\n属性: PropTypes.node,\n\n3，要求属性是某个 React 元素。例如：\n\n属性: PropTypes.element,\n\n4，要求属性是某个指定类的实例。例如：\n\n属性: PropTypes.instanceOf(NameOfAClass),\n\n5，要求属性取值为特定的几个值。例如：\n\n属性: PropTypes.oneOf(['value1', 'value2']),\n\n6，要求属性可以为指定类型中的任意一个。例如：\n\n属性: PropTypes.oneOfType([\n  PropTypes.bool,\n  PropTypes.number,\n  PropTypes.instanceOf(NameOfAClass),\n])\n\n7，要求属性为指定类型的数组。例如：\n\n属性: PropTypes.arrayOf(PropTypes.number),\n\n8，要求属性是一个有特定成员变量的对象。例如：\n\n属性: PropTypes.objectOf(PropTypes.number),\n\n9，要求属性是一个指定构成方式的对象。例如：\n\n属性: PropTypes.shape({\n  color: PropTypes.string,\n  fontSize: PropTypes.number,\n}),\n\n10，属性可以是任意类型。例如：\n\n属性: PropTypes.any\n\n**将属性声明为必须**\n\n使用关键字 isRequired 声明它是必需的。\n\n属性: PropTypes.array.isRequired,\n属性: PropTypes.any.isRequired,\n属性: PropTypes.instanceOf(NameOfAClass).isRequired,\n\n## 源码（prop-types.js）\n\n```javascript\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @nolint\n * @format\n */\n\n// TODO (bvaughn) Remove this file once flowtype/flow-typed/pull/773 is merged\n\ntype $npm$propTypes$ReactPropsCheckType = (\n  props: any,\n  propName: string,\n  componentName: string,\n  href?: string,\n) => ?Error;\n\ndeclare module 'prop-types' {\n  declare var array: React$PropType$Primitive<Array<any>>;\n  declare var bool: React$PropType$Primitive<boolean>;\n  declare var func: React$PropType$Primitive<Function>;\n  declare var number: React$PropType$Primitive<number>;\n  declare var object: React$PropType$Primitive<Object>;\n  declare var string: React$PropType$Primitive<string>;\n  declare var any: React$PropType$Primitive<any>;\n  declare var arrayOf: React$PropType$ArrayOf;\n  declare var element: React$PropType$Primitive<any>; /* TODO */\n  declare var instanceOf: React$PropType$InstanceOf;\n  declare var node: React$PropType$Primitive<any>; /* TODO */\n  declare var objectOf: React$PropType$ObjectOf;\n  declare var oneOf: React$PropType$OneOf;\n  declare var oneOfType: React$PropType$OneOfType;\n  declare var shape: React$PropType$Shape;\n\n  declare function checkPropTypes<V>(\n    propTypes: $Subtype<{[_: $Keys<V>]: $npm$propTypes$ReactPropsCheckType}>,\n    values: V,\n    location: string,\n    componentName: string,\n    getStack: ?() => ?string,\n  ): void;\n}\n\n```\n\n[参考](https://www.jb51.net/article/130879.htm)","source":"_posts/ReactNative的prop-types属性验证问题.md","raw":"---\ntitle: ReactNative的prop-types属性验证问题\ndate: 2018-08-02 16:12:54\ntags:\n- RN\ncategories: RN\npassword:\n---\n\n使用 React Native 创建的组件是可以复用的，所以我们开发的组件可能会给项目组其他同事使用。但别人可能对这个组件不熟悉，常常会忘记使用某些属性，或者某些属性传递的数据类型有误。\n\n<!--more-->\n\n在开发 React Native 自定义组件时，可以通过属性确认来声明这个组件需要哪些属性。这样，如果在调用这个自定义组件时没有提供相应的属性，则会在手机与调试工具中弹出警告信息，告知开发者该组件需要哪些属性。\n\n# 新版本的问题\n\nReact Native已经升级到0.51.0了，版本升级很快，但是对老项目也会有一些问题，常见的就是属性找不到的问题。例如：\n\n\n\n<img src=\"https://ws1.sinaimg.cn/large/006tKfTcgy1ftvfe47ylmj30d40nkjt9.jpg\" width=\"200\"/>\n\n主要原因是随着React Native的升级，系统废弃了很多的东西，过去我们可以直接使用 React.PropTypes 来进行属性确认，不过这个自 React v15.5 起就被移除了，转而使用prop-types库来进行替换\n\n# 如何使用\n\n## 安装\n\n**需要先安装这个第三方库**\n\n`npm install --save prop-types`\n\n安装成功如下：\n\n<img src=\"https://ws1.sinaimg.cn/large/006tKfTcgy1ftvfhhy65bj30y40j274r.jpg\" width=\"200\"/>\n\n## 导入\n\n`import propTypes from 'prop-types';`\n\n## 验证\n\n```\nstatic propTypes = {\n  title: PropTypes.string,\n  leftIcon: PropTypes.string,\n  rightIcon: PropTypes.string,\n  leftPress: PropTypes.func,\n  rightPress: PropTypes.func,\n  style: PropTypes.object\n }\n```\n\n这样，如果在调用这个自定义组件时没有提供相应的属性，则会在手机与调试工具中弹出警告信息，告知开发者该组件需要哪些属性。\n\n# 完整语法\n\n1，要求属性是指定的 JavaScript 基本类型。例如：\n\n属性: PropTypes.array,\n属性: PropTypes.bool,\n属性: PropTypes.func,\n属性: PropTypes.number,\n属性: PropTypes.object,\n属性: PropTypes.string,\n\n2，要求属性是可渲染节点。例如：\n\n属性: PropTypes.node,\n\n3，要求属性是某个 React 元素。例如：\n\n属性: PropTypes.element,\n\n4，要求属性是某个指定类的实例。例如：\n\n属性: PropTypes.instanceOf(NameOfAClass),\n\n5，要求属性取值为特定的几个值。例如：\n\n属性: PropTypes.oneOf(['value1', 'value2']),\n\n6，要求属性可以为指定类型中的任意一个。例如：\n\n属性: PropTypes.oneOfType([\n  PropTypes.bool,\n  PropTypes.number,\n  PropTypes.instanceOf(NameOfAClass),\n])\n\n7，要求属性为指定类型的数组。例如：\n\n属性: PropTypes.arrayOf(PropTypes.number),\n\n8，要求属性是一个有特定成员变量的对象。例如：\n\n属性: PropTypes.objectOf(PropTypes.number),\n\n9，要求属性是一个指定构成方式的对象。例如：\n\n属性: PropTypes.shape({\n  color: PropTypes.string,\n  fontSize: PropTypes.number,\n}),\n\n10，属性可以是任意类型。例如：\n\n属性: PropTypes.any\n\n**将属性声明为必须**\n\n使用关键字 isRequired 声明它是必需的。\n\n属性: PropTypes.array.isRequired,\n属性: PropTypes.any.isRequired,\n属性: PropTypes.instanceOf(NameOfAClass).isRequired,\n\n## 源码（prop-types.js）\n\n```javascript\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @nolint\n * @format\n */\n\n// TODO (bvaughn) Remove this file once flowtype/flow-typed/pull/773 is merged\n\ntype $npm$propTypes$ReactPropsCheckType = (\n  props: any,\n  propName: string,\n  componentName: string,\n  href?: string,\n) => ?Error;\n\ndeclare module 'prop-types' {\n  declare var array: React$PropType$Primitive<Array<any>>;\n  declare var bool: React$PropType$Primitive<boolean>;\n  declare var func: React$PropType$Primitive<Function>;\n  declare var number: React$PropType$Primitive<number>;\n  declare var object: React$PropType$Primitive<Object>;\n  declare var string: React$PropType$Primitive<string>;\n  declare var any: React$PropType$Primitive<any>;\n  declare var arrayOf: React$PropType$ArrayOf;\n  declare var element: React$PropType$Primitive<any>; /* TODO */\n  declare var instanceOf: React$PropType$InstanceOf;\n  declare var node: React$PropType$Primitive<any>; /* TODO */\n  declare var objectOf: React$PropType$ObjectOf;\n  declare var oneOf: React$PropType$OneOf;\n  declare var oneOfType: React$PropType$OneOfType;\n  declare var shape: React$PropType$Shape;\n\n  declare function checkPropTypes<V>(\n    propTypes: $Subtype<{[_: $Keys<V>]: $npm$propTypes$ReactPropsCheckType}>,\n    values: V,\n    location: string,\n    componentName: string,\n    getStack: ?() => ?string,\n  ): void;\n}\n\n```\n\n[参考](https://www.jb51.net/article/130879.htm)","slug":"ReactNative的prop-types属性验证问题","published":1,"updated":"2018-08-02T08:51:53.534Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6mg000d1kyglo39dt7y","content":"<p>使用 React Native 创建的组件是可以复用的，所以我们开发的组件可能会给项目组其他同事使用。但别人可能对这个组件不熟悉，常常会忘记使用某些属性，或者某些属性传递的数据类型有误。</p>\n<a id=\"more\"></a>\n<p>在开发 React Native 自定义组件时，可以通过属性确认来声明这个组件需要哪些属性。这样，如果在调用这个自定义组件时没有提供相应的属性，则会在手机与调试工具中弹出警告信息，告知开发者该组件需要哪些属性。</p>\n<h1 id=\"新版本的问题\"><a href=\"#新版本的问题\" class=\"headerlink\" title=\"新版本的问题\"></a>新版本的问题</h1><p>React Native已经升级到0.51.0了，版本升级很快，但是对老项目也会有一些问题，常见的就是属性找不到的问题。例如：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tKfTcgy1ftvfe47ylmj30d40nkjt9.jpg\" width=\"200\"></p>\n<p>主要原因是随着React Native的升级，系统废弃了很多的东西，过去我们可以直接使用 React.PropTypes 来进行属性确认，不过这个自 React v15.5 起就被移除了，转而使用prop-types库来进行替换</p>\n<h1 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><strong>需要先安装这个第三方库</strong></p>\n<p><code>npm install --save prop-types</code></p>\n<p>安装成功如下：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tKfTcgy1ftvfhhy65bj30y40j274r.jpg\" width=\"200\"></p>\n<h2 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h2><p><code>import propTypes from &#39;prop-types&#39;;</code></p>\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">static propTypes = &#123;</div><div class=\"line\">  title: PropTypes<span class=\"selector-class\">.string</span>,</div><div class=\"line\">  leftIcon: PropTypes<span class=\"selector-class\">.string</span>,</div><div class=\"line\">  rightIcon: PropTypes<span class=\"selector-class\">.string</span>,</div><div class=\"line\">  leftPress: PropTypes<span class=\"selector-class\">.func</span>,</div><div class=\"line\">  rightPress: PropTypes<span class=\"selector-class\">.func</span>,</div><div class=\"line\">  style: PropTypes<span class=\"selector-class\">.object</span></div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>这样，如果在调用这个自定义组件时没有提供相应的属性，则会在手机与调试工具中弹出警告信息，告知开发者该组件需要哪些属性。</p>\n<h1 id=\"完整语法\"><a href=\"#完整语法\" class=\"headerlink\" title=\"完整语法\"></a>完整语法</h1><p>1，要求属性是指定的 JavaScript 基本类型。例如：</p>\n<p>属性: PropTypes.array,<br>属性: PropTypes.bool,<br>属性: PropTypes.func,<br>属性: PropTypes.number,<br>属性: PropTypes.object,<br>属性: PropTypes.string,</p>\n<p>2，要求属性是可渲染节点。例如：</p>\n<p>属性: PropTypes.node,</p>\n<p>3，要求属性是某个 React 元素。例如：</p>\n<p>属性: PropTypes.element,</p>\n<p>4，要求属性是某个指定类的实例。例如：</p>\n<p>属性: PropTypes.instanceOf(NameOfAClass),</p>\n<p>5，要求属性取值为特定的几个值。例如：</p>\n<p>属性: PropTypes.oneOf([‘value1’, ‘value2’]),</p>\n<p>6，要求属性可以为指定类型中的任意一个。例如：</p>\n<p>属性: PropTypes.oneOfType([<br>  PropTypes.bool,<br>  PropTypes.number,<br>  PropTypes.instanceOf(NameOfAClass),<br>])</p>\n<p>7，要求属性为指定类型的数组。例如：</p>\n<p>属性: PropTypes.arrayOf(PropTypes.number),</p>\n<p>8，要求属性是一个有特定成员变量的对象。例如：</p>\n<p>属性: PropTypes.objectOf(PropTypes.number),</p>\n<p>9，要求属性是一个指定构成方式的对象。例如：</p>\n<p>属性: PropTypes.shape({<br>  color: PropTypes.string,<br>  fontSize: PropTypes.number,<br>}),</p>\n<p>10，属性可以是任意类型。例如：</p>\n<p>属性: PropTypes.any</p>\n<p><strong>将属性声明为必须</strong></p>\n<p>使用关键字 isRequired 声明它是必需的。</p>\n<p>属性: PropTypes.array.isRequired,<br>属性: PropTypes.any.isRequired,<br>属性: PropTypes.instanceOf(NameOfAClass).isRequired,</p>\n<h2 id=\"源码（prop-types-js）\"><a href=\"#源码（prop-types-js）\" class=\"headerlink\" title=\"源码（prop-types.js）\"></a>源码（prop-types.js）</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Copyright (c) 2015-present, Facebook, Inc.</div><div class=\"line\"> *</div><div class=\"line\"> * This source code is licensed under the MIT license found in the</div><div class=\"line\"> * LICENSE file in the root directory of this source tree.</div><div class=\"line\"> *</div><div class=\"line\"> * @flow</div><div class=\"line\"> * @nolint</div><div class=\"line\"> * @format</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// TODO (bvaughn) Remove this file once flowtype/flow-typed/pull/773 is merged</span></div><div class=\"line\"></div><div class=\"line\">type $npm$propTypes$ReactPropsCheckType = (</div><div class=\"line\">  props: any,</div><div class=\"line\">  <span class=\"attr\">propName</span>: string,</div><div class=\"line\">  <span class=\"attr\">componentName</span>: string,</div><div class=\"line\">  href?: string,</div><div class=\"line\">) =&gt; ?<span class=\"built_in\">Error</span>;</div><div class=\"line\"></div><div class=\"line\">declare <span class=\"built_in\">module</span> <span class=\"string\">'prop-types'</span> &#123;</div><div class=\"line\">  declare <span class=\"keyword\">var</span> array: React$PropType$Primitive&lt;<span class=\"built_in\">Array</span>&lt;any&gt;&gt;;</div><div class=\"line\">  declare <span class=\"keyword\">var</span> bool: React$PropType$Primitive&lt;boolean&gt;;</div><div class=\"line\">  declare <span class=\"keyword\">var</span> func: React$PropType$Primitive&lt;<span class=\"built_in\">Function</span>&gt;;</div><div class=\"line\">  declare <span class=\"keyword\">var</span> number: React$PropType$Primitive&lt;number&gt;;</div><div class=\"line\">  declare <span class=\"keyword\">var</span> object: React$PropType$Primitive&lt;<span class=\"built_in\">Object</span>&gt;;</div><div class=\"line\">  declare <span class=\"keyword\">var</span> string: React$PropType$Primitive&lt;string&gt;;</div><div class=\"line\">  declare <span class=\"keyword\">var</span> any: React$PropType$Primitive&lt;any&gt;;</div><div class=\"line\">  declare <span class=\"keyword\">var</span> arrayOf: React$PropType$ArrayOf;</div><div class=\"line\">  declare <span class=\"keyword\">var</span> element: React$PropType$Primitive&lt;any&gt;; <span class=\"comment\">/* TODO */</span></div><div class=\"line\">  declare <span class=\"keyword\">var</span> instanceOf: React$PropType$InstanceOf;</div><div class=\"line\">  declare <span class=\"keyword\">var</span> node: React$PropType$Primitive&lt;any&gt;; <span class=\"comment\">/* TODO */</span></div><div class=\"line\">  declare <span class=\"keyword\">var</span> objectOf: React$PropType$ObjectOf;</div><div class=\"line\">  declare <span class=\"keyword\">var</span> oneOf: React$PropType$OneOf;</div><div class=\"line\">  declare <span class=\"keyword\">var</span> oneOfType: React$PropType$OneOfType;</div><div class=\"line\">  declare <span class=\"keyword\">var</span> shape: React$PropType$Shape;</div><div class=\"line\"></div><div class=\"line\">  declare <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkPropTypes</span>&lt;<span class=\"title\">V</span>&gt;(<span class=\"params\"></span></span></div><div class=\"line\">    propTypes: $Subtype&lt;&#123;[_: $Keys&lt;V&gt;]: $npm$propTypes$ReactPropsCheckType&#125;&gt;,</div><div class=\"line\">    values: V,</div><div class=\"line\">    location: string,</div><div class=\"line\">    componentName: string,</div><div class=\"line\">    getStack: ?() =&gt; ?<span class=\"title\">string</span>,</div><div class=\"line\">  ): <span class=\"title\">void</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a href=\"https://www.jb51.net/article/130879.htm\" target=\"_blank\" rel=\"external\">参考</a></p>\n","excerpt":"<p>使用 React Native 创建的组件是可以复用的，所以我们开发的组件可能会给项目组其他同事使用。但别人可能对这个组件不熟悉，常常会忘记使用某些属性，或者某些属性传递的数据类型有误。</p>","more":"<p>在开发 React Native 自定义组件时，可以通过属性确认来声明这个组件需要哪些属性。这样，如果在调用这个自定义组件时没有提供相应的属性，则会在手机与调试工具中弹出警告信息，告知开发者该组件需要哪些属性。</p>\n<h1 id=\"新版本的问题\"><a href=\"#新版本的问题\" class=\"headerlink\" title=\"新版本的问题\"></a>新版本的问题</h1><p>React Native已经升级到0.51.0了，版本升级很快，但是对老项目也会有一些问题，常见的就是属性找不到的问题。例如：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tKfTcgy1ftvfe47ylmj30d40nkjt9.jpg\" width=\"200\"/></p>\n<p>主要原因是随着React Native的升级，系统废弃了很多的东西，过去我们可以直接使用 React.PropTypes 来进行属性确认，不过这个自 React v15.5 起就被移除了，转而使用prop-types库来进行替换</p>\n<h1 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><strong>需要先安装这个第三方库</strong></p>\n<p><code>npm install --save prop-types</code></p>\n<p>安装成功如下：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tKfTcgy1ftvfhhy65bj30y40j274r.jpg\" width=\"200\"/></p>\n<h2 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h2><p><code>import propTypes from &#39;prop-types&#39;;</code></p>\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">static propTypes = &#123;</div><div class=\"line\">  title: PropTypes<span class=\"selector-class\">.string</span>,</div><div class=\"line\">  leftIcon: PropTypes<span class=\"selector-class\">.string</span>,</div><div class=\"line\">  rightIcon: PropTypes<span class=\"selector-class\">.string</span>,</div><div class=\"line\">  leftPress: PropTypes<span class=\"selector-class\">.func</span>,</div><div class=\"line\">  rightPress: PropTypes<span class=\"selector-class\">.func</span>,</div><div class=\"line\">  style: PropTypes<span class=\"selector-class\">.object</span></div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>这样，如果在调用这个自定义组件时没有提供相应的属性，则会在手机与调试工具中弹出警告信息，告知开发者该组件需要哪些属性。</p>\n<h1 id=\"完整语法\"><a href=\"#完整语法\" class=\"headerlink\" title=\"完整语法\"></a>完整语法</h1><p>1，要求属性是指定的 JavaScript 基本类型。例如：</p>\n<p>属性: PropTypes.array,<br>属性: PropTypes.bool,<br>属性: PropTypes.func,<br>属性: PropTypes.number,<br>属性: PropTypes.object,<br>属性: PropTypes.string,</p>\n<p>2，要求属性是可渲染节点。例如：</p>\n<p>属性: PropTypes.node,</p>\n<p>3，要求属性是某个 React 元素。例如：</p>\n<p>属性: PropTypes.element,</p>\n<p>4，要求属性是某个指定类的实例。例如：</p>\n<p>属性: PropTypes.instanceOf(NameOfAClass),</p>\n<p>5，要求属性取值为特定的几个值。例如：</p>\n<p>属性: PropTypes.oneOf([‘value1’, ‘value2’]),</p>\n<p>6，要求属性可以为指定类型中的任意一个。例如：</p>\n<p>属性: PropTypes.oneOfType([<br>  PropTypes.bool,<br>  PropTypes.number,<br>  PropTypes.instanceOf(NameOfAClass),<br>])</p>\n<p>7，要求属性为指定类型的数组。例如：</p>\n<p>属性: PropTypes.arrayOf(PropTypes.number),</p>\n<p>8，要求属性是一个有特定成员变量的对象。例如：</p>\n<p>属性: PropTypes.objectOf(PropTypes.number),</p>\n<p>9，要求属性是一个指定构成方式的对象。例如：</p>\n<p>属性: PropTypes.shape({<br>  color: PropTypes.string,<br>  fontSize: PropTypes.number,<br>}),</p>\n<p>10，属性可以是任意类型。例如：</p>\n<p>属性: PropTypes.any</p>\n<p><strong>将属性声明为必须</strong></p>\n<p>使用关键字 isRequired 声明它是必需的。</p>\n<p>属性: PropTypes.array.isRequired,<br>属性: PropTypes.any.isRequired,<br>属性: PropTypes.instanceOf(NameOfAClass).isRequired,</p>\n<h2 id=\"源码（prop-types-js）\"><a href=\"#源码（prop-types-js）\" class=\"headerlink\" title=\"源码（prop-types.js）\"></a>源码（prop-types.js）</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Copyright (c) 2015-present, Facebook, Inc.</div><div class=\"line\"> *</div><div class=\"line\"> * This source code is licensed under the MIT license found in the</div><div class=\"line\"> * LICENSE file in the root directory of this source tree.</div><div class=\"line\"> *</div><div class=\"line\"> * @flow</div><div class=\"line\"> * @nolint</div><div class=\"line\"> * @format</div><div class=\"line\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// TODO (bvaughn) Remove this file once flowtype/flow-typed/pull/773 is merged</span></div><div class=\"line\"></div><div class=\"line\">type $npm$propTypes$ReactPropsCheckType = (</div><div class=\"line\">  props: any,</div><div class=\"line\">  <span class=\"attr\">propName</span>: string,</div><div class=\"line\">  <span class=\"attr\">componentName</span>: string,</div><div class=\"line\">  href?: string,</div><div class=\"line\">) =&gt; ?<span class=\"built_in\">Error</span>;</div><div class=\"line\"></div><div class=\"line\">declare <span class=\"built_in\">module</span> <span class=\"string\">'prop-types'</span> &#123;</div><div class=\"line\">  declare <span class=\"keyword\">var</span> array: React$PropType$Primitive&lt;<span class=\"built_in\">Array</span>&lt;any&gt;&gt;;</div><div class=\"line\">  declare <span class=\"keyword\">var</span> bool: React$PropType$Primitive&lt;boolean&gt;;</div><div class=\"line\">  declare <span class=\"keyword\">var</span> func: React$PropType$Primitive&lt;<span class=\"built_in\">Function</span>&gt;;</div><div class=\"line\">  declare <span class=\"keyword\">var</span> number: React$PropType$Primitive&lt;number&gt;;</div><div class=\"line\">  declare <span class=\"keyword\">var</span> object: React$PropType$Primitive&lt;<span class=\"built_in\">Object</span>&gt;;</div><div class=\"line\">  declare <span class=\"keyword\">var</span> string: React$PropType$Primitive&lt;string&gt;;</div><div class=\"line\">  declare <span class=\"keyword\">var</span> any: React$PropType$Primitive&lt;any&gt;;</div><div class=\"line\">  declare <span class=\"keyword\">var</span> arrayOf: React$PropType$ArrayOf;</div><div class=\"line\">  declare <span class=\"keyword\">var</span> element: React$PropType$Primitive&lt;any&gt;; <span class=\"comment\">/* TODO */</span></div><div class=\"line\">  declare <span class=\"keyword\">var</span> instanceOf: React$PropType$InstanceOf;</div><div class=\"line\">  declare <span class=\"keyword\">var</span> node: React$PropType$Primitive&lt;any&gt;; <span class=\"comment\">/* TODO */</span></div><div class=\"line\">  declare <span class=\"keyword\">var</span> objectOf: React$PropType$ObjectOf;</div><div class=\"line\">  declare <span class=\"keyword\">var</span> oneOf: React$PropType$OneOf;</div><div class=\"line\">  declare <span class=\"keyword\">var</span> oneOfType: React$PropType$OneOfType;</div><div class=\"line\">  declare <span class=\"keyword\">var</span> shape: React$PropType$Shape;</div><div class=\"line\"></div><div class=\"line\">  declare <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkPropTypes</span>&lt;<span class=\"title\">V</span>&gt;(<span class=\"params\"></div><div class=\"line\">    propTypes: $Subtype&lt;&#123;[_: $Keys&lt;V&gt;]: $npm$propTypes$ReactPropsCheckType&#125;&gt;,</div><div class=\"line\">    values: V,</div><div class=\"line\">    location: string,</div><div class=\"line\">    componentName: string,</div><div class=\"line\">    getStack: ?(</span>) =&gt; ?<span class=\"title\">string</span>,</div><div class=\"line\">  ): <span class=\"title\">void</span>;</div><div class=\"line\">&#125;</span></div></pre></td></tr></table></figure>\n<p><a href=\"https://www.jb51.net/article/130879.htm\">参考</a></p>"},{"title":"ReactNative学习一","date":"2017-12-25T07:52:32.000Z","_content":"\nReactNative 学习一\n\n<!--more-->\n\n## 1，为什么学习ReactNative\n\n### 好处\n\n- 因为现在许多主流的应用都有React Native的影子，它对比原生开发更为灵活，对比H5体验更为高效，而且跨平台的支持特性。\n\n\n- 相对ionic这类PhoneGap，它效率更高，和原生之间的交互更方便。\n\n\n- 多个版本迭代后的今天，它已经拥有了丰富第三方插件支持。\n\n\n- React Native解决不了的，可以通过各位熟悉的原生来解决。\n\n\n- 更方便的热更新。\n\n### 坏处\n\n- 尽管是跨平台，但是不同平台Api的特性与显示并不一定一致。\n- 相对增大了app的体积。\n- 调试’相对‘麻烦。\n- Android上的兼容性问题。\n\n### 总的来说\n\nReact Native适合作为项目中的补充，而不是作为核心去开发APP。\n\n## 2，搭建开发环境\n\n- Webstrom（号称web开发神器，目前对前端的了解有限，因为和android stuido师出同门，所以不商量直接选用他，当然stom也试了试，但是快捷键不如Webstrom熟悉）\n\n- HomeBrew（Mac系统的包管理器，用于安装NodeJS和一些其他必需的工具软件\n\n- Node（基于 Chrome V8 引擎的 JavaScript 运行环境）\n\n- Androd Studio（安卓老本家没啥说的）\n\n- ReactNative的命令行工具（react-native-cli，React Native的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务\n\n  [详细搭建步骤查看ReactNative中文网](https://reactnative.cn/docs/0.31/getting-started.html#content)\n\n一步一步安装完毕后，没错，你已经起飞了；\n\n## 3，创建一个项目\n\n- 终端cd到你想初始化项目的文件夹\n\n- ```\n  react-native init FirstRNApp\n  ```\n\n\n- 然后会发现创建了一个FirstRNApp文件夹，这就是创建的第一个项目\n\n![](https://upload-images.jianshu.io/upload_images/3673902-0affa2b6b71fc650.jpeg?imageMogr2/auto-orient/)\n\n![项目目录](https://ws1.sinaimg.cn/large/006tNc79gy1foabtgnbqjj30bc0k20ua.jpg)\n\n## 几个关键的文件\n\n- **android**文件夹，就是一个可以用android studio打开的android项目。\n- **ios**文件夹，是一个可以用xcode打开的ios项目。\n- **index.android.js**，这是android的React Native入口文件。\n- **index.ios.js**，这是ios的React Native入口文件。\n- **package.json**，类似android studio的build.gradle，你依赖的库都写在里面。\n- **node_module**文件夹，你依赖的库下载下来都存放在里面，属于git的忽略文件，你要找的依赖库源码也在里面，包括React和React Native。\n- **jscode**文件夹，是自己创建的文件夹，用来存放自己写的js文件。\n\n### 需要注意的点\n\n**package.json**\n\n类似于android studio中的build.gradle添加远程依赖，不同的是，package.json大多数时候不需要我们手动添加，我们只需要在根目录通过命令行，`npm install xxxxxx --save` 就可以依赖一个库了。\n\n**install**之后，库的依赖信息，自动被写到package.json里面，对应的库也会被下载到node_module文件夹中，类似android studio依赖后把aar同步到本地。\n\n![package.json](https://ws2.sinaimg.cn/large/006tNc79gy1foabyhxltmj30xe0m6n04.jpg)\n\n------\n\n**node_module**\n\n**node_module**是一个忽略文件，提交的时候不需要提交到git上，类似android studio远程依赖下来的aar，也不会提交到git上。其他人在使用React Native项目时，只需要npm install，工程就会根据package.json，去同步下载各个依赖库到node_module。\n\n**注**：有时候还需要运行`react-native link` 或 `react-native link xxx`，这是因为有些第三方库是通过原生代码加React Native实现的，通过这个命令，可以自动把相关的配置代码，自动添加到android和ios工程中。\n\n------\n\n## 运行这个项目\n\n作为安卓端有两种方式，ios也同样有两种\n\n- cd到项目根目录\n\n- ```\n  react-native run-android【react-native run-ios】\n  ```\n\n\n- 或者用android stuido直接打开项目中的android文件夹（上面有说过，这是一个可以独立打开的安卓项目）\n\n### 遇到的小坑\n\n#### 1，**无法从资产的index.android.bundle中加载脚本。确保你的包被正确打包或者你正在运行一个packager服务器**\n\n![bundle无法加载报错](https://ws4.sinaimg.cn/large/006tNc79gy1foac7mc3cuj30re0zowmx.jpg)\n\n**搜索了一波，这个错误很常见，解决的办法也很常见，如下**\n\n- 打开自己的项目文件夹,在Android/app/src/main目录下创建一个空的assets文件夹\n- cd到项目根目录，执行\n\n```\nreact-native bundle --platform android --dev false --entry-file index.android.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res\n```\n\n- 事实证明并没有解决我的问题\n- 解决我的问题的是下面这行\n\n```\nreact-native bundle --platform android --dev false --entry-file index.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res\n```\n\n![两者的区别](https://ws4.sinaimg.cn/large/006tNc79gy1foacbagifbj31dc0b8wk6.jpg)\n\n**我们可以回头看上面创建完项目的截图，老版的是分别有index.android.js和index.ios.js**\n\n**而我创建的却没有这两个文件，只有一个index.js,修改完之后，我们创建的assets目录下会生成bundle的两个文件**\n\n## 运行成功（android端）\n\n![运行成功截图](https://ws1.sinaimg.cn/large/006tNc79gy1foacebj37wj30n014oqco.jpg)\n\n相关资料\n\n[恋猫月亮博客]https://www.jianshu.com/p/97692b1c451d)\n\n[中文网](https://reactnative.cn/docs/0.31/getting-started.html#content)\n\n[报错](http://blog.csdn.net/DavisCZ/article/details/79072062)\n\n本文仅作个人学习总结，如有出入不够严谨的地方，请联系更改。\n\n**ReactNative才刚刚起步学习，麻烦和坑后续还会经常碰到。但是，既然选择了学习，就要坚持下来！**\n\n","source":"_posts/ReactNative start.md","raw":"---\ntitle: ReactNative学习一\ndate: 2017-12-25 15:52:32\ntags: \n- Android\ncategories: Android\n---\n\nReactNative 学习一\n\n<!--more-->\n\n## 1，为什么学习ReactNative\n\n### 好处\n\n- 因为现在许多主流的应用都有React Native的影子，它对比原生开发更为灵活，对比H5体验更为高效，而且跨平台的支持特性。\n\n\n- 相对ionic这类PhoneGap，它效率更高，和原生之间的交互更方便。\n\n\n- 多个版本迭代后的今天，它已经拥有了丰富第三方插件支持。\n\n\n- React Native解决不了的，可以通过各位熟悉的原生来解决。\n\n\n- 更方便的热更新。\n\n### 坏处\n\n- 尽管是跨平台，但是不同平台Api的特性与显示并不一定一致。\n- 相对增大了app的体积。\n- 调试’相对‘麻烦。\n- Android上的兼容性问题。\n\n### 总的来说\n\nReact Native适合作为项目中的补充，而不是作为核心去开发APP。\n\n## 2，搭建开发环境\n\n- Webstrom（号称web开发神器，目前对前端的了解有限，因为和android stuido师出同门，所以不商量直接选用他，当然stom也试了试，但是快捷键不如Webstrom熟悉）\n\n- HomeBrew（Mac系统的包管理器，用于安装NodeJS和一些其他必需的工具软件\n\n- Node（基于 Chrome V8 引擎的 JavaScript 运行环境）\n\n- Androd Studio（安卓老本家没啥说的）\n\n- ReactNative的命令行工具（react-native-cli，React Native的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务\n\n  [详细搭建步骤查看ReactNative中文网](https://reactnative.cn/docs/0.31/getting-started.html#content)\n\n一步一步安装完毕后，没错，你已经起飞了；\n\n## 3，创建一个项目\n\n- 终端cd到你想初始化项目的文件夹\n\n- ```\n  react-native init FirstRNApp\n  ```\n\n\n- 然后会发现创建了一个FirstRNApp文件夹，这就是创建的第一个项目\n\n![](https://upload-images.jianshu.io/upload_images/3673902-0affa2b6b71fc650.jpeg?imageMogr2/auto-orient/)\n\n![项目目录](https://ws1.sinaimg.cn/large/006tNc79gy1foabtgnbqjj30bc0k20ua.jpg)\n\n## 几个关键的文件\n\n- **android**文件夹，就是一个可以用android studio打开的android项目。\n- **ios**文件夹，是一个可以用xcode打开的ios项目。\n- **index.android.js**，这是android的React Native入口文件。\n- **index.ios.js**，这是ios的React Native入口文件。\n- **package.json**，类似android studio的build.gradle，你依赖的库都写在里面。\n- **node_module**文件夹，你依赖的库下载下来都存放在里面，属于git的忽略文件，你要找的依赖库源码也在里面，包括React和React Native。\n- **jscode**文件夹，是自己创建的文件夹，用来存放自己写的js文件。\n\n### 需要注意的点\n\n**package.json**\n\n类似于android studio中的build.gradle添加远程依赖，不同的是，package.json大多数时候不需要我们手动添加，我们只需要在根目录通过命令行，`npm install xxxxxx --save` 就可以依赖一个库了。\n\n**install**之后，库的依赖信息，自动被写到package.json里面，对应的库也会被下载到node_module文件夹中，类似android studio依赖后把aar同步到本地。\n\n![package.json](https://ws2.sinaimg.cn/large/006tNc79gy1foabyhxltmj30xe0m6n04.jpg)\n\n------\n\n**node_module**\n\n**node_module**是一个忽略文件，提交的时候不需要提交到git上，类似android studio远程依赖下来的aar，也不会提交到git上。其他人在使用React Native项目时，只需要npm install，工程就会根据package.json，去同步下载各个依赖库到node_module。\n\n**注**：有时候还需要运行`react-native link` 或 `react-native link xxx`，这是因为有些第三方库是通过原生代码加React Native实现的，通过这个命令，可以自动把相关的配置代码，自动添加到android和ios工程中。\n\n------\n\n## 运行这个项目\n\n作为安卓端有两种方式，ios也同样有两种\n\n- cd到项目根目录\n\n- ```\n  react-native run-android【react-native run-ios】\n  ```\n\n\n- 或者用android stuido直接打开项目中的android文件夹（上面有说过，这是一个可以独立打开的安卓项目）\n\n### 遇到的小坑\n\n#### 1，**无法从资产的index.android.bundle中加载脚本。确保你的包被正确打包或者你正在运行一个packager服务器**\n\n![bundle无法加载报错](https://ws4.sinaimg.cn/large/006tNc79gy1foac7mc3cuj30re0zowmx.jpg)\n\n**搜索了一波，这个错误很常见，解决的办法也很常见，如下**\n\n- 打开自己的项目文件夹,在Android/app/src/main目录下创建一个空的assets文件夹\n- cd到项目根目录，执行\n\n```\nreact-native bundle --platform android --dev false --entry-file index.android.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res\n```\n\n- 事实证明并没有解决我的问题\n- 解决我的问题的是下面这行\n\n```\nreact-native bundle --platform android --dev false --entry-file index.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res\n```\n\n![两者的区别](https://ws4.sinaimg.cn/large/006tNc79gy1foacbagifbj31dc0b8wk6.jpg)\n\n**我们可以回头看上面创建完项目的截图，老版的是分别有index.android.js和index.ios.js**\n\n**而我创建的却没有这两个文件，只有一个index.js,修改完之后，我们创建的assets目录下会生成bundle的两个文件**\n\n## 运行成功（android端）\n\n![运行成功截图](https://ws1.sinaimg.cn/large/006tNc79gy1foacebj37wj30n014oqco.jpg)\n\n相关资料\n\n[恋猫月亮博客]https://www.jianshu.com/p/97692b1c451d)\n\n[中文网](https://reactnative.cn/docs/0.31/getting-started.html#content)\n\n[报错](http://blog.csdn.net/DavisCZ/article/details/79072062)\n\n本文仅作个人学习总结，如有出入不够严谨的地方，请联系更改。\n\n**ReactNative才刚刚起步学习，麻烦和坑后续还会经常碰到。但是，既然选择了学习，就要坚持下来！**\n\n","slug":"ReactNative start","published":1,"updated":"2018-07-19T02:14:05.738Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6mk000i1kygjr73uxg1","content":"<p>ReactNative 学习一</p>\n<a id=\"more\"></a>\n<h2 id=\"1，为什么学习ReactNative\"><a href=\"#1，为什么学习ReactNative\" class=\"headerlink\" title=\"1，为什么学习ReactNative\"></a>1，为什么学习ReactNative</h2><h3 id=\"好处\"><a href=\"#好处\" class=\"headerlink\" title=\"好处\"></a>好处</h3><ul>\n<li>因为现在许多主流的应用都有React Native的影子，它对比原生开发更为灵活，对比H5体验更为高效，而且跨平台的支持特性。</li>\n</ul>\n<ul>\n<li>相对ionic这类PhoneGap，它效率更高，和原生之间的交互更方便。</li>\n</ul>\n<ul>\n<li>多个版本迭代后的今天，它已经拥有了丰富第三方插件支持。</li>\n</ul>\n<ul>\n<li>React Native解决不了的，可以通过各位熟悉的原生来解决。</li>\n</ul>\n<ul>\n<li>更方便的热更新。</li>\n</ul>\n<h3 id=\"坏处\"><a href=\"#坏处\" class=\"headerlink\" title=\"坏处\"></a>坏处</h3><ul>\n<li>尽管是跨平台，但是不同平台Api的特性与显示并不一定一致。</li>\n<li>相对增大了app的体积。</li>\n<li>调试’相对‘麻烦。</li>\n<li>Android上的兼容性问题。</li>\n</ul>\n<h3 id=\"总的来说\"><a href=\"#总的来说\" class=\"headerlink\" title=\"总的来说\"></a>总的来说</h3><p>React Native适合作为项目中的补充，而不是作为核心去开发APP。</p>\n<h2 id=\"2，搭建开发环境\"><a href=\"#2，搭建开发环境\" class=\"headerlink\" title=\"2，搭建开发环境\"></a>2，搭建开发环境</h2><ul>\n<li><p>Webstrom（号称web开发神器，目前对前端的了解有限，因为和android stuido师出同门，所以不商量直接选用他，当然stom也试了试，但是快捷键不如Webstrom熟悉）</p>\n</li>\n<li><p>HomeBrew（Mac系统的包管理器，用于安装NodeJS和一些其他必需的工具软件</p>\n</li>\n<li><p>Node（基于 Chrome V8 引擎的 JavaScript 运行环境）</p>\n</li>\n<li><p>Androd Studio（安卓老本家没啥说的）</p>\n</li>\n<li><p>ReactNative的命令行工具（react-native-cli，React Native的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务</p>\n<p><a href=\"https://reactnative.cn/docs/0.31/getting-started.html#content\" target=\"_blank\" rel=\"external\">详细搭建步骤查看ReactNative中文网</a></p>\n</li>\n</ul>\n<p>一步一步安装完毕后，没错，你已经起飞了；</p>\n<h2 id=\"3，创建一个项目\"><a href=\"#3，创建一个项目\" class=\"headerlink\" title=\"3，创建一个项目\"></a>3，创建一个项目</h2><ul>\n<li><p>终端cd到你想初始化项目的文件夹</p>\n</li>\n<li><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">react-<span class=\"keyword\">native</span> init FirstRNApp</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后会发现创建了一个FirstRNApp文件夹，这就是创建的第一个项目</p>\n</li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3673902-0affa2b6b71fc650.jpeg?imageMogr2/auto-orient/\" alt=\"\"></p>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tNc79gy1foabtgnbqjj30bc0k20ua.jpg\" alt=\"项目目录\"></p>\n<h2 id=\"几个关键的文件\"><a href=\"#几个关键的文件\" class=\"headerlink\" title=\"几个关键的文件\"></a>几个关键的文件</h2><ul>\n<li><strong>android</strong>文件夹，就是一个可以用android studio打开的android项目。</li>\n<li><strong>ios</strong>文件夹，是一个可以用xcode打开的ios项目。</li>\n<li><strong>index.android.js</strong>，这是android的React Native入口文件。</li>\n<li><strong>index.ios.js</strong>，这是ios的React Native入口文件。</li>\n<li><strong>package.json</strong>，类似android studio的build.gradle，你依赖的库都写在里面。</li>\n<li><strong>node_module</strong>文件夹，你依赖的库下载下来都存放在里面，属于git的忽略文件，你要找的依赖库源码也在里面，包括React和React Native。</li>\n<li><strong>jscode</strong>文件夹，是自己创建的文件夹，用来存放自己写的js文件。</li>\n</ul>\n<h3 id=\"需要注意的点\"><a href=\"#需要注意的点\" class=\"headerlink\" title=\"需要注意的点\"></a>需要注意的点</h3><p><strong>package.json</strong></p>\n<p>类似于android studio中的build.gradle添加远程依赖，不同的是，package.json大多数时候不需要我们手动添加，我们只需要在根目录通过命令行，<code>npm install xxxxxx --save</code> 就可以依赖一个库了。</p>\n<p><strong>install</strong>之后，库的依赖信息，自动被写到package.json里面，对应的库也会被下载到node_module文件夹中，类似android studio依赖后把aar同步到本地。</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tNc79gy1foabyhxltmj30xe0m6n04.jpg\" alt=\"package.json\"></p>\n<hr>\n<p><strong>node_module</strong></p>\n<p><strong>node_module</strong>是一个忽略文件，提交的时候不需要提交到git上，类似android studio远程依赖下来的aar，也不会提交到git上。其他人在使用React Native项目时，只需要npm install，工程就会根据package.json，去同步下载各个依赖库到node_module。</p>\n<p><strong>注</strong>：有时候还需要运行<code>react-native link</code> 或 <code>react-native link xxx</code>，这是因为有些第三方库是通过原生代码加React Native实现的，通过这个命令，可以自动把相关的配置代码，自动添加到android和ios工程中。</p>\n<hr>\n<h2 id=\"运行这个项目\"><a href=\"#运行这个项目\" class=\"headerlink\" title=\"运行这个项目\"></a>运行这个项目</h2><p>作为安卓端有两种方式，ios也同样有两种</p>\n<ul>\n<li><p>cd到项目根目录</p>\n</li>\n<li><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">react-<span class=\"keyword\">native</span> run-android【react-<span class=\"keyword\">native</span> run-ios】</div></pre></td></tr></table></figure>\n</li>\n<li><p>或者用android stuido直接打开项目中的android文件夹（上面有说过，这是一个可以独立打开的安卓项目）</p>\n</li>\n</ul>\n<h3 id=\"遇到的小坑\"><a href=\"#遇到的小坑\" class=\"headerlink\" title=\"遇到的小坑\"></a>遇到的小坑</h3><h4 id=\"1，无法从资产的index-android-bundle中加载脚本。确保你的包被正确打包或者你正在运行一个packager服务器\"><a href=\"#1，无法从资产的index-android-bundle中加载脚本。确保你的包被正确打包或者你正在运行一个packager服务器\" class=\"headerlink\" title=\"1，无法从资产的index.android.bundle中加载脚本。确保你的包被正确打包或者你正在运行一个packager服务器\"></a>1，<strong>无法从资产的index.android.bundle中加载脚本。确保你的包被正确打包或者你正在运行一个packager服务器</strong></h4><p><img src=\"https://ws4.sinaimg.cn/large/006tNc79gy1foac7mc3cuj30re0zowmx.jpg\" alt=\"bundle无法加载报错\"></p>\n<p><strong>搜索了一波，这个错误很常见，解决的办法也很常见，如下</strong></p>\n<ul>\n<li>打开自己的项目文件夹,在Android/app/src/main目录下创建一个空的assets文件夹</li>\n<li>cd到项目根目录，执行</li>\n</ul>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">react-<span class=\"keyword\">native</span> bundle --platform android --dev <span class=\"keyword\">false</span> --entry-<span class=\"keyword\">file</span> index.android.js --bundle-output android<span class=\"regexp\">/app/</span>src<span class=\"regexp\">/main/</span>assets<span class=\"regexp\">/index.android.bundle --assets-dest android/</span>app<span class=\"regexp\">/src/m</span>ain<span class=\"regexp\">/res</span></div></pre></td></tr></table></figure>\n<ul>\n<li>事实证明并没有解决我的问题</li>\n<li>解决我的问题的是下面这行</li>\n</ul>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">react-<span class=\"keyword\">native</span> bundle --platform android --dev <span class=\"keyword\">false</span> --entry-<span class=\"keyword\">file</span> index.js --bundle-output android<span class=\"regexp\">/app/</span>src<span class=\"regexp\">/main/</span>assets<span class=\"regexp\">/index.android.bundle --assets-dest android/</span>app<span class=\"regexp\">/src/m</span>ain<span class=\"regexp\">/res</span></div></pre></td></tr></table></figure>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tNc79gy1foacbagifbj31dc0b8wk6.jpg\" alt=\"两者的区别\"></p>\n<p><strong>我们可以回头看上面创建完项目的截图，老版的是分别有index.android.js和index.ios.js</strong></p>\n<p><strong>而我创建的却没有这两个文件，只有一个index.js,修改完之后，我们创建的assets目录下会生成bundle的两个文件</strong></p>\n<h2 id=\"运行成功（android端）\"><a href=\"#运行成功（android端）\" class=\"headerlink\" title=\"运行成功（android端）\"></a>运行成功（android端）</h2><p><img src=\"https://ws1.sinaimg.cn/large/006tNc79gy1foacebj37wj30n014oqco.jpg\" alt=\"运行成功截图\"></p>\n<p>相关资料</p>\n<p>[恋猫月亮博客]<a href=\"https://www.jianshu.com/p/97692b1c451d\" target=\"_blank\" rel=\"external\">https://www.jianshu.com/p/97692b1c451d</a>)</p>\n<p><a href=\"https://reactnative.cn/docs/0.31/getting-started.html#content\" target=\"_blank\" rel=\"external\">中文网</a></p>\n<p><a href=\"http://blog.csdn.net/DavisCZ/article/details/79072062\" target=\"_blank\" rel=\"external\">报错</a></p>\n<p>本文仅作个人学习总结，如有出入不够严谨的地方，请联系更改。</p>\n<p><strong>ReactNative才刚刚起步学习，麻烦和坑后续还会经常碰到。但是，既然选择了学习，就要坚持下来！</strong></p>\n","excerpt":"<p>ReactNative 学习一</p>","more":"<h2 id=\"1，为什么学习ReactNative\"><a href=\"#1，为什么学习ReactNative\" class=\"headerlink\" title=\"1，为什么学习ReactNative\"></a>1，为什么学习ReactNative</h2><h3 id=\"好处\"><a href=\"#好处\" class=\"headerlink\" title=\"好处\"></a>好处</h3><ul>\n<li>因为现在许多主流的应用都有React Native的影子，它对比原生开发更为灵活，对比H5体验更为高效，而且跨平台的支持特性。</li>\n</ul>\n<ul>\n<li>相对ionic这类PhoneGap，它效率更高，和原生之间的交互更方便。</li>\n</ul>\n<ul>\n<li>多个版本迭代后的今天，它已经拥有了丰富第三方插件支持。</li>\n</ul>\n<ul>\n<li>React Native解决不了的，可以通过各位熟悉的原生来解决。</li>\n</ul>\n<ul>\n<li>更方便的热更新。</li>\n</ul>\n<h3 id=\"坏处\"><a href=\"#坏处\" class=\"headerlink\" title=\"坏处\"></a>坏处</h3><ul>\n<li>尽管是跨平台，但是不同平台Api的特性与显示并不一定一致。</li>\n<li>相对增大了app的体积。</li>\n<li>调试’相对‘麻烦。</li>\n<li>Android上的兼容性问题。</li>\n</ul>\n<h3 id=\"总的来说\"><a href=\"#总的来说\" class=\"headerlink\" title=\"总的来说\"></a>总的来说</h3><p>React Native适合作为项目中的补充，而不是作为核心去开发APP。</p>\n<h2 id=\"2，搭建开发环境\"><a href=\"#2，搭建开发环境\" class=\"headerlink\" title=\"2，搭建开发环境\"></a>2，搭建开发环境</h2><ul>\n<li><p>Webstrom（号称web开发神器，目前对前端的了解有限，因为和android stuido师出同门，所以不商量直接选用他，当然stom也试了试，但是快捷键不如Webstrom熟悉）</p>\n</li>\n<li><p>HomeBrew（Mac系统的包管理器，用于安装NodeJS和一些其他必需的工具软件</p>\n</li>\n<li><p>Node（基于 Chrome V8 引擎的 JavaScript 运行环境）</p>\n</li>\n<li><p>Androd Studio（安卓老本家没啥说的）</p>\n</li>\n<li><p>ReactNative的命令行工具（react-native-cli，React Native的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务</p>\n<p><a href=\"https://reactnative.cn/docs/0.31/getting-started.html#content\">详细搭建步骤查看ReactNative中文网</a></p>\n</li>\n</ul>\n<p>一步一步安装完毕后，没错，你已经起飞了；</p>\n<h2 id=\"3，创建一个项目\"><a href=\"#3，创建一个项目\" class=\"headerlink\" title=\"3，创建一个项目\"></a>3，创建一个项目</h2><ul>\n<li><p>终端cd到你想初始化项目的文件夹</p>\n</li>\n<li><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">react-<span class=\"keyword\">native</span> init FirstRNApp</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后会发现创建了一个FirstRNApp文件夹，这就是创建的第一个项目</p>\n</li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3673902-0affa2b6b71fc650.jpeg?imageMogr2/auto-orient/\" alt=\"\"></p>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tNc79gy1foabtgnbqjj30bc0k20ua.jpg\" alt=\"项目目录\"></p>\n<h2 id=\"几个关键的文件\"><a href=\"#几个关键的文件\" class=\"headerlink\" title=\"几个关键的文件\"></a>几个关键的文件</h2><ul>\n<li><strong>android</strong>文件夹，就是一个可以用android studio打开的android项目。</li>\n<li><strong>ios</strong>文件夹，是一个可以用xcode打开的ios项目。</li>\n<li><strong>index.android.js</strong>，这是android的React Native入口文件。</li>\n<li><strong>index.ios.js</strong>，这是ios的React Native入口文件。</li>\n<li><strong>package.json</strong>，类似android studio的build.gradle，你依赖的库都写在里面。</li>\n<li><strong>node_module</strong>文件夹，你依赖的库下载下来都存放在里面，属于git的忽略文件，你要找的依赖库源码也在里面，包括React和React Native。</li>\n<li><strong>jscode</strong>文件夹，是自己创建的文件夹，用来存放自己写的js文件。</li>\n</ul>\n<h3 id=\"需要注意的点\"><a href=\"#需要注意的点\" class=\"headerlink\" title=\"需要注意的点\"></a>需要注意的点</h3><p><strong>package.json</strong></p>\n<p>类似于android studio中的build.gradle添加远程依赖，不同的是，package.json大多数时候不需要我们手动添加，我们只需要在根目录通过命令行，<code>npm install xxxxxx --save</code> 就可以依赖一个库了。</p>\n<p><strong>install</strong>之后，库的依赖信息，自动被写到package.json里面，对应的库也会被下载到node_module文件夹中，类似android studio依赖后把aar同步到本地。</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tNc79gy1foabyhxltmj30xe0m6n04.jpg\" alt=\"package.json\"></p>\n<hr>\n<p><strong>node_module</strong></p>\n<p><strong>node_module</strong>是一个忽略文件，提交的时候不需要提交到git上，类似android studio远程依赖下来的aar，也不会提交到git上。其他人在使用React Native项目时，只需要npm install，工程就会根据package.json，去同步下载各个依赖库到node_module。</p>\n<p><strong>注</strong>：有时候还需要运行<code>react-native link</code> 或 <code>react-native link xxx</code>，这是因为有些第三方库是通过原生代码加React Native实现的，通过这个命令，可以自动把相关的配置代码，自动添加到android和ios工程中。</p>\n<hr>\n<h2 id=\"运行这个项目\"><a href=\"#运行这个项目\" class=\"headerlink\" title=\"运行这个项目\"></a>运行这个项目</h2><p>作为安卓端有两种方式，ios也同样有两种</p>\n<ul>\n<li><p>cd到项目根目录</p>\n</li>\n<li><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">react-<span class=\"keyword\">native</span> run-android【react-<span class=\"keyword\">native</span> run-ios】</div></pre></td></tr></table></figure>\n</li>\n<li><p>或者用android stuido直接打开项目中的android文件夹（上面有说过，这是一个可以独立打开的安卓项目）</p>\n</li>\n</ul>\n<h3 id=\"遇到的小坑\"><a href=\"#遇到的小坑\" class=\"headerlink\" title=\"遇到的小坑\"></a>遇到的小坑</h3><h4 id=\"1，无法从资产的index-android-bundle中加载脚本。确保你的包被正确打包或者你正在运行一个packager服务器\"><a href=\"#1，无法从资产的index-android-bundle中加载脚本。确保你的包被正确打包或者你正在运行一个packager服务器\" class=\"headerlink\" title=\"1，无法从资产的index.android.bundle中加载脚本。确保你的包被正确打包或者你正在运行一个packager服务器\"></a>1，<strong>无法从资产的index.android.bundle中加载脚本。确保你的包被正确打包或者你正在运行一个packager服务器</strong></h4><p><img src=\"https://ws4.sinaimg.cn/large/006tNc79gy1foac7mc3cuj30re0zowmx.jpg\" alt=\"bundle无法加载报错\"></p>\n<p><strong>搜索了一波，这个错误很常见，解决的办法也很常见，如下</strong></p>\n<ul>\n<li>打开自己的项目文件夹,在Android/app/src/main目录下创建一个空的assets文件夹</li>\n<li>cd到项目根目录，执行</li>\n</ul>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">react-<span class=\"keyword\">native</span> bundle --platform android --dev <span class=\"keyword\">false</span> --entry-<span class=\"keyword\">file</span> index.android.js --bundle-output android<span class=\"regexp\">/app/</span>src<span class=\"regexp\">/main/</span>assets<span class=\"regexp\">/index.android.bundle --assets-dest android/</span>app<span class=\"regexp\">/src/m</span>ain<span class=\"regexp\">/res</span></div></pre></td></tr></table></figure>\n<ul>\n<li>事实证明并没有解决我的问题</li>\n<li>解决我的问题的是下面这行</li>\n</ul>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">react-<span class=\"keyword\">native</span> bundle --platform android --dev <span class=\"keyword\">false</span> --entry-<span class=\"keyword\">file</span> index.js --bundle-output android<span class=\"regexp\">/app/</span>src<span class=\"regexp\">/main/</span>assets<span class=\"regexp\">/index.android.bundle --assets-dest android/</span>app<span class=\"regexp\">/src/m</span>ain<span class=\"regexp\">/res</span></div></pre></td></tr></table></figure>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tNc79gy1foacbagifbj31dc0b8wk6.jpg\" alt=\"两者的区别\"></p>\n<p><strong>我们可以回头看上面创建完项目的截图，老版的是分别有index.android.js和index.ios.js</strong></p>\n<p><strong>而我创建的却没有这两个文件，只有一个index.js,修改完之后，我们创建的assets目录下会生成bundle的两个文件</strong></p>\n<h2 id=\"运行成功（android端）\"><a href=\"#运行成功（android端）\" class=\"headerlink\" title=\"运行成功（android端）\"></a>运行成功（android端）</h2><p><img src=\"https://ws1.sinaimg.cn/large/006tNc79gy1foacebj37wj30n014oqco.jpg\" alt=\"运行成功截图\"></p>\n<p>相关资料</p>\n<p>[恋猫月亮博客]<a href=\"https://www.jianshu.com/p/97692b1c451d\">https://www.jianshu.com/p/97692b1c451d</a>)</p>\n<p><a href=\"https://reactnative.cn/docs/0.31/getting-started.html#content\">中文网</a></p>\n<p><a href=\"http://blog.csdn.net/DavisCZ/article/details/79072062\">报错</a></p>\n<p>本文仅作个人学习总结，如有出入不够严谨的地方，请联系更改。</p>\n<p><strong>ReactNative才刚刚起步学习，麻烦和坑后续还会经常碰到。但是，既然选择了学习，就要坚持下来！</strong></p>"},{"title":"ReactNative碎片整理之按妞交互","date":"2018-08-02T05:48:22.000Z","password":null,"_content":"\nReactNative的Button是一个简单的跨平台按钮组件，可以进行一些简单的定制，但是支持的props有限，一般我们会使用TouchableXXX一系列的组件来定制我们需要的按钮\n\n<!--more-->\n\n# Button\n\n```javascript\nrender() {\n    console.log('render')\n    return (\n        <View style={styles.content}>\n            <Button\n                //注意 没有style属性，设置无卵用\n                style={{\n                    backgroundColor:'#ffffff',\n                    color:\"#00aaaa\"\n                }}\n                onPress={() => Alert.alert('hello')}\n                // disabled={true}\n                title=\"click\"\n                color=\"#00a056\"\n            />\n        </View>\n    )\n}\n```\n\n查看Props\n\n| props                | 描述                           | 必填   |\n| -------------------- | ---------------------------- | ---- |\n| `onPress`            | 用户点击此按钮时所调用的处理函数             | 是    |\n| `title`              | 按钮内显示的文本                     | 是    |\n| `color`              | 文本的颜色(iOS)，或是按钮的背景色(Android) | 否    |\n| `disabled`           | 设置为 true 时此按钮将不可点击。          | 否    |\n| `accessibilityLabel` | 用于给残障人士显示的文本                 | 否    |\n| `testID`             | 用来在端到端测试中定位此视图。              | 否    |\n\n通过上面的属性表格，并没有style属性（可以外部包一层View来定制），可以知道这个Button的组件的样式是有局限的，并且color属性，两端并不统一（一个是文本颜色，一个是背景色），使用非常简单，不再代码演示了。\n\n# TouchableXXX系列组件\n\nTouchableXXX系列组件有以下四种：\n\n| 名称                       | 描述                                       |\n| ------------------------ | ---------------------------------------- |\n| TouchableWithoutFeedback | 响应用户的点击事件，如果你想在处理点击事件的同时不显示任何视觉反馈，使用它是个不错的选择 |\n| TouchableHighlight       | 在TouchableWithoutFeedback的基础上添加了当按下时背景会变暗的效果，可以指定按下抬起的颜色等。 |\n| TouchableOpacity         | 相比TouchableHighlight在按下去会使背景变暗的效果，TouchableOpacity会在用户手指按下时降低按钮的透明度，而不会改变背景的颜色。 |\n| TouchableNativeFeedback  | 在Android上还可以使用TouchableNativeFeedback，它会在用户手指按下时形成类似水波纹的视觉效果。**注意，此组件只支持Android。** |\n\n**四者的关系？**\n\n```javascript\n//TouchableHighlight\nvar TouchableHighlight = React.createClass({\n  propTypes: {\n    ...TouchableWithoutFeedback.propTypes,\n//TouchableOpacity\nvar TouchableOpacity = React.createClass({\n  mixins: [TimerMixin, Touchable.Mixin, NativeMethodsMixin],\n\n  propTypes: {\n    ...TouchableWithoutFeedback.propTypes,\n//TouchableNativeFeedback\nvar TouchableNativeFeedback = React.createClass({\n  propTypes: {\n    ...TouchableWithoutFeedback.propTypes,\n```\n\n> **可以看出：**\n\n因为TouchableWithoutFeedback有其它三个组件的共同属性，所以我们先来学习一下TouchableWithoutFeedback。\n\n接下来分别记录的具体使用\n\n> **注意一点：**\n\n无论是TouchableWithoutFeedback还是其他三种Touchable组件，都是在根节点都是只支持一个组件，如果你需要多个组件同时相应单击事件，可以用一个View将它们包裹着，它的这种根节点只支持一个组件的特性和ScrollView很类似。\n\n\n\n> TouchableWithoutFeedback一个Touchable系列组件中最基本的一个组价，只响应用户的点击事件不会做任何UI上的改变，在使用的过程中需要特别留意。\n\n## 使用详情\n\n[详情点击查看：中文网TouchableWithoutFeedback](https://reactnative.cn/docs/touchablewithoutfeedback.html)\n\n[React Native按钮详解|Touchable系列组件使用详解](http://www.devio.org/2017/01/10/React-Native%E6%8C%89%E9%92%AE%E8%AF%A6%E8%A7%A3-Touchable%E7%B3%BB%E5%88%97%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/)\n\n整体来说\n\nTouchableWithoutFeedback：无ui变化\n\nTouchableHighlight：定制程度较高，透明度，按下抬起颜色等\n\nTouchableOpacity：只有透明度反馈\n\nTouchableNativeFeedback：支持Android 5.0以上的Ripper效果，仅支持Android设备\n\n# 自定义Button\n\n[Github地址](https://github.com/itfengan/CustomButton)\n\n```\nimport React, {Component} from 'react'\nimport {\n    View,\n    Text,\n    StyleSheet,\n    TouchableHighlight,\n} from 'react-native'\n// default props\nconst backgroundColor = '#000000';\nconst pressBackgroundColor = backgroundColor;\nconst textColor = '#FFFFFF';\nconst pressTextColor = textColor;\n\nexport default class CommonButton extends Component {\n\n    // 构造\n    constructor(props) {\n        super(props);\n        // 初始状态\n        this.state = {\n            //默认文字\n            text: this.props.text,\n            //是否不可用\n            disabled: false,\n            //是否按下\n            pressed: false,\n        };\n        this._onPressIn = this._onPressIn.bind(this)\n        this._onPressOut = this._onPressOut.bind(this)\n    }\n\n\n    static defaultProps = {\n        //背景颜色\n        backgroundColor: backgroundColor,\n        //按下背景色\n        pressBackgroundColor: pressBackgroundColor,\n        //文字色\n        textColor: textColor,\n        //按下文字色\n        pressTextColor: pressTextColor,\n        //文字大小\n        fontSize: 17,\n        //圆角\n        radius: 0,\n        // onPress\n        onPressFunc: null,\n        //onLongPress\n        onLongPressFunc: null,\n        //padding\n        paddingLeft: 0,\n        paddingRight: 0,\n        paddingTop: 0,\n        paddingBottom: 0,\n        //text\n        text: '没有设定',\n        width: undefined,\n        height: undefined\n    }\n\n    setDisabled(isDisabled) {\n        this.setState({\n            disabled: true,\n        })\n    }\n\n    setButtonText(newText) {\n        this.setState({\n            text: newText,\n        })\n    }\n\n    _onPressIn() {\n        this.setState({\n            pressed: true,\n        })\n    }\n\n    _onPressOut() {\n        this.setState({\n            pressed: false,\n        })\n    }\n\n    render() {\n        return (\n            <View>\n                <TouchableHighlight\n                    style={{\n                        width: this.props.width,\n                        height: this.props.height,\n                        justifyContent: 'center',\n                        alignItems: 'center',\n                        backgroundColor: this.props.backgroundColor,\n                        paddingLeft: this.props.paddingLeft,\n                        paddingRight: this.props.paddingRight,\n                        paddingTop: this.props.paddingTop,\n                        paddingBottom: this.props.paddingBottom,\n                        borderRadius: 8,\n                    }}\n                    activeOpacity={1}\n                    // 底层的颜色被隐藏的时候调用。\n                    onHideUnderlay={null}\n                    //当底层的颜色被显示的时候调用。\n                    onShowUnderlay={null}\n                    // 有触摸操作时显示出来的底层的颜色。\n                    underlayColor={this.props.pressBackgroundColor}\n                    //disable\n                    disabled={this.state.disabled}\n                    //onPressIn\n                    onPressIn={this._onPressIn}\n                    //onPressOut\n                    onPressOut={this._onPressOut}\n                    //onPress\n                    onPress={this.props.onPressFunc}\n                    //onLongPress\n                    onLongPress={this.props.onLongPressFunc}\n                >\n                    <View>\n                        <Text style={{\n                            //文字颜色\n                            color: this.state.pressed ? this.props.pressTextColor : this.props.textColor,\n                            fontSize: this.props.fontSize\n                        }}>\n                            {this.state.text}\n                        </Text>\n                    </View>\n                </TouchableHighlight>\n            </View>\n        )\n    }\n}\n\nconst styls = StyleSheet.create({\n    content: {}\n})\n\n```\n\n嘻嘻(o^^o)","source":"_posts/ReactNative碎片整理之按妞交互.md","raw":"---\ntitle: ReactNative碎片整理之按妞交互\ndate: 2018-08-02 13:48:22\ntags:\n- RN\ncategories: RN\npassword:\n---\n\nReactNative的Button是一个简单的跨平台按钮组件，可以进行一些简单的定制，但是支持的props有限，一般我们会使用TouchableXXX一系列的组件来定制我们需要的按钮\n\n<!--more-->\n\n# Button\n\n```javascript\nrender() {\n    console.log('render')\n    return (\n        <View style={styles.content}>\n            <Button\n                //注意 没有style属性，设置无卵用\n                style={{\n                    backgroundColor:'#ffffff',\n                    color:\"#00aaaa\"\n                }}\n                onPress={() => Alert.alert('hello')}\n                // disabled={true}\n                title=\"click\"\n                color=\"#00a056\"\n            />\n        </View>\n    )\n}\n```\n\n查看Props\n\n| props                | 描述                           | 必填   |\n| -------------------- | ---------------------------- | ---- |\n| `onPress`            | 用户点击此按钮时所调用的处理函数             | 是    |\n| `title`              | 按钮内显示的文本                     | 是    |\n| `color`              | 文本的颜色(iOS)，或是按钮的背景色(Android) | 否    |\n| `disabled`           | 设置为 true 时此按钮将不可点击。          | 否    |\n| `accessibilityLabel` | 用于给残障人士显示的文本                 | 否    |\n| `testID`             | 用来在端到端测试中定位此视图。              | 否    |\n\n通过上面的属性表格，并没有style属性（可以外部包一层View来定制），可以知道这个Button的组件的样式是有局限的，并且color属性，两端并不统一（一个是文本颜色，一个是背景色），使用非常简单，不再代码演示了。\n\n# TouchableXXX系列组件\n\nTouchableXXX系列组件有以下四种：\n\n| 名称                       | 描述                                       |\n| ------------------------ | ---------------------------------------- |\n| TouchableWithoutFeedback | 响应用户的点击事件，如果你想在处理点击事件的同时不显示任何视觉反馈，使用它是个不错的选择 |\n| TouchableHighlight       | 在TouchableWithoutFeedback的基础上添加了当按下时背景会变暗的效果，可以指定按下抬起的颜色等。 |\n| TouchableOpacity         | 相比TouchableHighlight在按下去会使背景变暗的效果，TouchableOpacity会在用户手指按下时降低按钮的透明度，而不会改变背景的颜色。 |\n| TouchableNativeFeedback  | 在Android上还可以使用TouchableNativeFeedback，它会在用户手指按下时形成类似水波纹的视觉效果。**注意，此组件只支持Android。** |\n\n**四者的关系？**\n\n```javascript\n//TouchableHighlight\nvar TouchableHighlight = React.createClass({\n  propTypes: {\n    ...TouchableWithoutFeedback.propTypes,\n//TouchableOpacity\nvar TouchableOpacity = React.createClass({\n  mixins: [TimerMixin, Touchable.Mixin, NativeMethodsMixin],\n\n  propTypes: {\n    ...TouchableWithoutFeedback.propTypes,\n//TouchableNativeFeedback\nvar TouchableNativeFeedback = React.createClass({\n  propTypes: {\n    ...TouchableWithoutFeedback.propTypes,\n```\n\n> **可以看出：**\n\n因为TouchableWithoutFeedback有其它三个组件的共同属性，所以我们先来学习一下TouchableWithoutFeedback。\n\n接下来分别记录的具体使用\n\n> **注意一点：**\n\n无论是TouchableWithoutFeedback还是其他三种Touchable组件，都是在根节点都是只支持一个组件，如果你需要多个组件同时相应单击事件，可以用一个View将它们包裹着，它的这种根节点只支持一个组件的特性和ScrollView很类似。\n\n\n\n> TouchableWithoutFeedback一个Touchable系列组件中最基本的一个组价，只响应用户的点击事件不会做任何UI上的改变，在使用的过程中需要特别留意。\n\n## 使用详情\n\n[详情点击查看：中文网TouchableWithoutFeedback](https://reactnative.cn/docs/touchablewithoutfeedback.html)\n\n[React Native按钮详解|Touchable系列组件使用详解](http://www.devio.org/2017/01/10/React-Native%E6%8C%89%E9%92%AE%E8%AF%A6%E8%A7%A3-Touchable%E7%B3%BB%E5%88%97%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/)\n\n整体来说\n\nTouchableWithoutFeedback：无ui变化\n\nTouchableHighlight：定制程度较高，透明度，按下抬起颜色等\n\nTouchableOpacity：只有透明度反馈\n\nTouchableNativeFeedback：支持Android 5.0以上的Ripper效果，仅支持Android设备\n\n# 自定义Button\n\n[Github地址](https://github.com/itfengan/CustomButton)\n\n```\nimport React, {Component} from 'react'\nimport {\n    View,\n    Text,\n    StyleSheet,\n    TouchableHighlight,\n} from 'react-native'\n// default props\nconst backgroundColor = '#000000';\nconst pressBackgroundColor = backgroundColor;\nconst textColor = '#FFFFFF';\nconst pressTextColor = textColor;\n\nexport default class CommonButton extends Component {\n\n    // 构造\n    constructor(props) {\n        super(props);\n        // 初始状态\n        this.state = {\n            //默认文字\n            text: this.props.text,\n            //是否不可用\n            disabled: false,\n            //是否按下\n            pressed: false,\n        };\n        this._onPressIn = this._onPressIn.bind(this)\n        this._onPressOut = this._onPressOut.bind(this)\n    }\n\n\n    static defaultProps = {\n        //背景颜色\n        backgroundColor: backgroundColor,\n        //按下背景色\n        pressBackgroundColor: pressBackgroundColor,\n        //文字色\n        textColor: textColor,\n        //按下文字色\n        pressTextColor: pressTextColor,\n        //文字大小\n        fontSize: 17,\n        //圆角\n        radius: 0,\n        // onPress\n        onPressFunc: null,\n        //onLongPress\n        onLongPressFunc: null,\n        //padding\n        paddingLeft: 0,\n        paddingRight: 0,\n        paddingTop: 0,\n        paddingBottom: 0,\n        //text\n        text: '没有设定',\n        width: undefined,\n        height: undefined\n    }\n\n    setDisabled(isDisabled) {\n        this.setState({\n            disabled: true,\n        })\n    }\n\n    setButtonText(newText) {\n        this.setState({\n            text: newText,\n        })\n    }\n\n    _onPressIn() {\n        this.setState({\n            pressed: true,\n        })\n    }\n\n    _onPressOut() {\n        this.setState({\n            pressed: false,\n        })\n    }\n\n    render() {\n        return (\n            <View>\n                <TouchableHighlight\n                    style={{\n                        width: this.props.width,\n                        height: this.props.height,\n                        justifyContent: 'center',\n                        alignItems: 'center',\n                        backgroundColor: this.props.backgroundColor,\n                        paddingLeft: this.props.paddingLeft,\n                        paddingRight: this.props.paddingRight,\n                        paddingTop: this.props.paddingTop,\n                        paddingBottom: this.props.paddingBottom,\n                        borderRadius: 8,\n                    }}\n                    activeOpacity={1}\n                    // 底层的颜色被隐藏的时候调用。\n                    onHideUnderlay={null}\n                    //当底层的颜色被显示的时候调用。\n                    onShowUnderlay={null}\n                    // 有触摸操作时显示出来的底层的颜色。\n                    underlayColor={this.props.pressBackgroundColor}\n                    //disable\n                    disabled={this.state.disabled}\n                    //onPressIn\n                    onPressIn={this._onPressIn}\n                    //onPressOut\n                    onPressOut={this._onPressOut}\n                    //onPress\n                    onPress={this.props.onPressFunc}\n                    //onLongPress\n                    onLongPress={this.props.onLongPressFunc}\n                >\n                    <View>\n                        <Text style={{\n                            //文字颜色\n                            color: this.state.pressed ? this.props.pressTextColor : this.props.textColor,\n                            fontSize: this.props.fontSize\n                        }}>\n                            {this.state.text}\n                        </Text>\n                    </View>\n                </TouchableHighlight>\n            </View>\n        )\n    }\n}\n\nconst styls = StyleSheet.create({\n    content: {}\n})\n\n```\n\n嘻嘻(o^^o)","slug":"ReactNative碎片整理之按妞交互","published":1,"updated":"2018-08-02T11:07:02.492Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6ml000l1kyg3qq3n9n0","content":"<p>ReactNative的Button是一个简单的跨平台按钮组件，可以进行一些简单的定制，但是支持的props有限，一般我们会使用TouchableXXX一系列的组件来定制我们需要的按钮</p>\n<a id=\"more\"></a>\n<h1 id=\"Button\"><a href=\"#Button\" class=\"headerlink\" title=\"Button\"></a>Button</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">render() &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'render'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.content&#125;</span>&gt;</span></span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\">                //注意 没有<span class=\"attr\">style</span>属性，设置无卵用</div><div class=\"line\">                <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span></div><div class=\"line\">                    <span class=\"attr\">backgroundColor:</span>'#<span class=\"attr\">ffffff</span>',</div><div class=\"line\">                    <span class=\"attr\">color:</span>\"#<span class=\"attr\">00aaaa</span>\"</div><div class=\"line\">                &#125;&#125;</div><div class=\"line\">                <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;()</span> =&gt; Alert.alert('hello')&#125;</div><div class=\"line\">                // disabled=&#123;true&#125;</div><div class=\"line\">                title=\"click\"</div><div class=\"line\">                color=\"#00a056\"</div><div class=\"line\">            /&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></div><div class=\"line\">    )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>查看Props</p>\n<table>\n<thead>\n<tr>\n<th>props</th>\n<th>描述</th>\n<th>必填</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>onPress</code></td>\n<td>用户点击此按钮时所调用的处理函数</td>\n<td>是</td>\n</tr>\n<tr>\n<td><code>title</code></td>\n<td>按钮内显示的文本</td>\n<td>是</td>\n</tr>\n<tr>\n<td><code>color</code></td>\n<td>文本的颜色(iOS)，或是按钮的背景色(Android)</td>\n<td>否</td>\n</tr>\n<tr>\n<td><code>disabled</code></td>\n<td>设置为 true 时此按钮将不可点击。</td>\n<td>否</td>\n</tr>\n<tr>\n<td><code>accessibilityLabel</code></td>\n<td>用于给残障人士显示的文本</td>\n<td>否</td>\n</tr>\n<tr>\n<td><code>testID</code></td>\n<td>用来在端到端测试中定位此视图。</td>\n<td>否</td>\n</tr>\n</tbody>\n</table>\n<p>通过上面的属性表格，并没有style属性（可以外部包一层View来定制），可以知道这个Button的组件的样式是有局限的，并且color属性，两端并不统一（一个是文本颜色，一个是背景色），使用非常简单，不再代码演示了。</p>\n<h1 id=\"TouchableXXX系列组件\"><a href=\"#TouchableXXX系列组件\" class=\"headerlink\" title=\"TouchableXXX系列组件\"></a>TouchableXXX系列组件</h1><p>TouchableXXX系列组件有以下四种：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>TouchableWithoutFeedback</td>\n<td>响应用户的点击事件，如果你想在处理点击事件的同时不显示任何视觉反馈，使用它是个不错的选择</td>\n</tr>\n<tr>\n<td>TouchableHighlight</td>\n<td>在TouchableWithoutFeedback的基础上添加了当按下时背景会变暗的效果，可以指定按下抬起的颜色等。</td>\n</tr>\n<tr>\n<td>TouchableOpacity</td>\n<td>相比TouchableHighlight在按下去会使背景变暗的效果，TouchableOpacity会在用户手指按下时降低按钮的透明度，而不会改变背景的颜色。</td>\n</tr>\n<tr>\n<td>TouchableNativeFeedback</td>\n<td>在Android上还可以使用TouchableNativeFeedback，它会在用户手指按下时形成类似水波纹的视觉效果。<strong>注意，此组件只支持Android。</strong></td>\n</tr>\n</tbody>\n</table>\n<p><strong>四者的关系？</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//TouchableHighlight</span></div><div class=\"line\"><span class=\"keyword\">var</span> TouchableHighlight = React.createClass(&#123;</div><div class=\"line\">  <span class=\"attr\">propTypes</span>: &#123;</div><div class=\"line\">    ...TouchableWithoutFeedback.propTypes,</div><div class=\"line\"><span class=\"comment\">//TouchableOpacity</span></div><div class=\"line\"><span class=\"keyword\">var</span> TouchableOpacity = React.createClass(&#123;</div><div class=\"line\">  <span class=\"attr\">mixins</span>: [TimerMixin, Touchable.Mixin, NativeMethodsMixin],</div><div class=\"line\"></div><div class=\"line\">  <span class=\"attr\">propTypes</span>: &#123;</div><div class=\"line\">    ...TouchableWithoutFeedback.propTypes,</div><div class=\"line\"><span class=\"comment\">//TouchableNativeFeedback</span></div><div class=\"line\"><span class=\"keyword\">var</span> TouchableNativeFeedback = React.createClass(&#123;</div><div class=\"line\">  <span class=\"attr\">propTypes</span>: &#123;</div><div class=\"line\">    ...TouchableWithoutFeedback.propTypes,</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>可以看出：</strong></p>\n</blockquote>\n<p>因为TouchableWithoutFeedback有其它三个组件的共同属性，所以我们先来学习一下TouchableWithoutFeedback。</p>\n<p>接下来分别记录的具体使用</p>\n<blockquote>\n<p><strong>注意一点：</strong></p>\n</blockquote>\n<p>无论是TouchableWithoutFeedback还是其他三种Touchable组件，都是在根节点都是只支持一个组件，如果你需要多个组件同时相应单击事件，可以用一个View将它们包裹着，它的这种根节点只支持一个组件的特性和ScrollView很类似。</p>\n<blockquote>\n<p>TouchableWithoutFeedback一个Touchable系列组件中最基本的一个组价，只响应用户的点击事件不会做任何UI上的改变，在使用的过程中需要特别留意。</p>\n</blockquote>\n<h2 id=\"使用详情\"><a href=\"#使用详情\" class=\"headerlink\" title=\"使用详情\"></a>使用详情</h2><p><a href=\"https://reactnative.cn/docs/touchablewithoutfeedback.html\" target=\"_blank\" rel=\"external\">详情点击查看：中文网TouchableWithoutFeedback</a></p>\n<p><a href=\"http://www.devio.org/2017/01/10/React-Native%E6%8C%89%E9%92%AE%E8%AF%A6%E8%A7%A3-Touchable%E7%B3%BB%E5%88%97%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/\" target=\"_blank\" rel=\"external\">React Native按钮详解|Touchable系列组件使用详解</a></p>\n<p>整体来说</p>\n<p>TouchableWithoutFeedback：无ui变化</p>\n<p>TouchableHighlight：定制程度较高，透明度，按下抬起颜色等</p>\n<p>TouchableOpacity：只有透明度反馈</p>\n<p>TouchableNativeFeedback：支持Android 5.0以上的Ripper效果，仅支持Android设备</p>\n<h1 id=\"自定义Button\"><a href=\"#自定义Button\" class=\"headerlink\" title=\"自定义Button\"></a>自定义Button</h1><p><a href=\"https://github.com/itfengan/CustomButton\" target=\"_blank\" rel=\"external\">Github地址</a></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; from <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;</div><div class=\"line\">    View,</div><div class=\"line\">    Text,</div><div class=\"line\">    StyleSheet,</div><div class=\"line\">    TouchableHighlight,</div><div class=\"line\">&#125; from <span class=\"string\">'react-native'</span></div><div class=\"line\"><span class=\"comment\">// default props</span></div><div class=\"line\">const backgroundColor = <span class=\"string\">'#000000'</span>;</div><div class=\"line\">const pressBackgroundColor = backgroundColor;</div><div class=\"line\">const textColor = <span class=\"string\">'#FFFFFF'</span>;</div><div class=\"line\">const pressTextColor = textColor;</div><div class=\"line\"></div><div class=\"line\">export <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommonButton</span> <span class=\"title\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 构造</span></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props);</div><div class=\"line\">        <span class=\"comment\">// 初始状态</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.state = &#123;</div><div class=\"line\">            <span class=\"comment\">//默认文字</span></div><div class=\"line\">            text: <span class=\"keyword\">this</span>.props.text,</div><div class=\"line\">            <span class=\"comment\">//是否不可用</span></div><div class=\"line\">            disabled: <span class=\"literal\">false</span>,</div><div class=\"line\">            <span class=\"comment\">//是否按下</span></div><div class=\"line\">            pressed: <span class=\"literal\">false</span>,</div><div class=\"line\">        &#125;;</div><div class=\"line\">        <span class=\"keyword\">this</span>._onPressIn = <span class=\"keyword\">this</span>._onPressIn.bind(<span class=\"keyword\">this</span>)</div><div class=\"line\">        <span class=\"keyword\">this</span>._onPressOut = <span class=\"keyword\">this</span>._onPressOut.bind(<span class=\"keyword\">this</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    static defaultProps = &#123;</div><div class=\"line\">        <span class=\"comment\">//背景颜色</span></div><div class=\"line\">        backgroundColor: backgroundColor,</div><div class=\"line\">        <span class=\"comment\">//按下背景色</span></div><div class=\"line\">        pressBackgroundColor: pressBackgroundColor,</div><div class=\"line\">        <span class=\"comment\">//文字色</span></div><div class=\"line\">        textColor: textColor,</div><div class=\"line\">        <span class=\"comment\">//按下文字色</span></div><div class=\"line\">        pressTextColor: pressTextColor,</div><div class=\"line\">        <span class=\"comment\">//文字大小</span></div><div class=\"line\">        fontSize: <span class=\"number\">17</span>,</div><div class=\"line\">        <span class=\"comment\">//圆角</span></div><div class=\"line\">        radius: <span class=\"number\">0</span>,</div><div class=\"line\">        <span class=\"comment\">// onPress</span></div><div class=\"line\">        onPressFunc: <span class=\"literal\">null</span>,</div><div class=\"line\">        <span class=\"comment\">//onLongPress</span></div><div class=\"line\">        onLongPressFunc: <span class=\"literal\">null</span>,</div><div class=\"line\">        <span class=\"comment\">//padding</span></div><div class=\"line\">        paddingLeft: <span class=\"number\">0</span>,</div><div class=\"line\">        paddingRight: <span class=\"number\">0</span>,</div><div class=\"line\">        paddingTop: <span class=\"number\">0</span>,</div><div class=\"line\">        paddingBottom: <span class=\"number\">0</span>,</div><div class=\"line\">        <span class=\"comment\">//text</span></div><div class=\"line\">        text: <span class=\"string\">'没有设定'</span>,</div><div class=\"line\">        width: undefined,</div><div class=\"line\">        height: undefined</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setDisabled(isDisabled) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">            disabled: <span class=\"literal\">true</span>,</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setButtonText(newText) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">            text: newText,</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    _onPressIn() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">            pressed: <span class=\"literal\">true</span>,</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    _onPressOut() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">            pressed: <span class=\"literal\">false</span>,</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            &lt;View&gt;</div><div class=\"line\">                &lt;TouchableHighlight</div><div class=\"line\">                    style=&#123;&#123;</div><div class=\"line\">                        width: <span class=\"keyword\">this</span>.props.width,</div><div class=\"line\">                        height: <span class=\"keyword\">this</span>.props.height,</div><div class=\"line\">                        justifyContent: <span class=\"string\">'center'</span>,</div><div class=\"line\">                        alignItems: <span class=\"string\">'center'</span>,</div><div class=\"line\">                        backgroundColor: <span class=\"keyword\">this</span>.props.backgroundColor,</div><div class=\"line\">                        paddingLeft: <span class=\"keyword\">this</span>.props.paddingLeft,</div><div class=\"line\">                        paddingRight: <span class=\"keyword\">this</span>.props.paddingRight,</div><div class=\"line\">                        paddingTop: <span class=\"keyword\">this</span>.props.paddingTop,</div><div class=\"line\">                        paddingBottom: <span class=\"keyword\">this</span>.props.paddingBottom,</div><div class=\"line\">                        borderRadius: <span class=\"number\">8</span>,</div><div class=\"line\">                    &#125;&#125;</div><div class=\"line\">                    activeOpacity=&#123;<span class=\"number\">1</span>&#125;</div><div class=\"line\">                    <span class=\"comment\">// 底层的颜色被隐藏的时候调用。</span></div><div class=\"line\">                    onHideUnderlay=&#123;<span class=\"literal\">null</span>&#125;</div><div class=\"line\">                    <span class=\"comment\">//当底层的颜色被显示的时候调用。</span></div><div class=\"line\">                    onShowUnderlay=&#123;<span class=\"literal\">null</span>&#125;</div><div class=\"line\">                    <span class=\"comment\">// 有触摸操作时显示出来的底层的颜色。</span></div><div class=\"line\">                    underlayColor=&#123;<span class=\"keyword\">this</span>.props.pressBackgroundColor&#125;</div><div class=\"line\">                    <span class=\"comment\">//disable</span></div><div class=\"line\">                    disabled=&#123;<span class=\"keyword\">this</span>.state.disabled&#125;</div><div class=\"line\">                    <span class=\"comment\">//onPressIn</span></div><div class=\"line\">                    onPressIn=&#123;<span class=\"keyword\">this</span>._onPressIn&#125;</div><div class=\"line\">                    <span class=\"comment\">//onPressOut</span></div><div class=\"line\">                    onPressOut=&#123;<span class=\"keyword\">this</span>._onPressOut&#125;</div><div class=\"line\">                    <span class=\"comment\">//onPress</span></div><div class=\"line\">                    onPress=&#123;<span class=\"keyword\">this</span>.props.onPressFunc&#125;</div><div class=\"line\">                    <span class=\"comment\">//onLongPress</span></div><div class=\"line\">                    onLongPress=&#123;<span class=\"keyword\">this</span>.props.onLongPressFunc&#125;</div><div class=\"line\">                &gt;</div><div class=\"line\">                    &lt;View&gt;</div><div class=\"line\">                        &lt;Text style=&#123;&#123;</div><div class=\"line\">                            <span class=\"comment\">//文字颜色</span></div><div class=\"line\">                            color: <span class=\"keyword\">this</span>.state.pressed ? <span class=\"keyword\">this</span>.props.pressTextColor : <span class=\"keyword\">this</span>.props.textColor,</div><div class=\"line\">                            fontSize: <span class=\"keyword\">this</span>.props.fontSize</div><div class=\"line\">                        &#125;&#125;&gt;</div><div class=\"line\">                            &#123;<span class=\"keyword\">this</span>.state.text&#125;</div><div class=\"line\">                        &lt;/Text&gt;</div><div class=\"line\">                    &lt;/View&gt;</div><div class=\"line\">                &lt;/TouchableHighlight&gt;</div><div class=\"line\">            &lt;/View&gt;</div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">const styls = StyleSheet.create(&#123;</div><div class=\"line\">    content: &#123;&#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>嘻嘻(o^^o)</p>\n","excerpt":"<p>ReactNative的Button是一个简单的跨平台按钮组件，可以进行一些简单的定制，但是支持的props有限，一般我们会使用TouchableXXX一系列的组件来定制我们需要的按钮</p>","more":"<h1 id=\"Button\"><a href=\"#Button\" class=\"headerlink\" title=\"Button\"></a>Button</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">render() &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'render'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.content&#125;</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Button</span></div><div class=\"line\">                //注意 没有<span class=\"attr\">style</span>属性，设置无卵用</div><div class=\"line\">                <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span></div><div class=\"line\">                    <span class=\"attr\">backgroundColor:</span>'#<span class=\"attr\">ffffff</span>',</div><div class=\"line\">                    <span class=\"attr\">color:</span>\"#<span class=\"attr\">00aaaa</span>\"</div><div class=\"line\">                &#125;&#125;</div><div class=\"line\">                <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;()</span> =&gt;</span> Alert.alert('hello')&#125;</div><div class=\"line\">                // disabled=&#123;true&#125;</div><div class=\"line\">                title=\"click\"</div><div class=\"line\">                color=\"#00a056\"</div><div class=\"line\">            /&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></div><div class=\"line\">    )</div><div class=\"line\">&#125;</span></div></pre></td></tr></table></figure>\n<p>查看Props</p>\n<table>\n<thead>\n<tr>\n<th>props</th>\n<th>描述</th>\n<th>必填</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>onPress</code></td>\n<td>用户点击此按钮时所调用的处理函数</td>\n<td>是</td>\n</tr>\n<tr>\n<td><code>title</code></td>\n<td>按钮内显示的文本</td>\n<td>是</td>\n</tr>\n<tr>\n<td><code>color</code></td>\n<td>文本的颜色(iOS)，或是按钮的背景色(Android)</td>\n<td>否</td>\n</tr>\n<tr>\n<td><code>disabled</code></td>\n<td>设置为 true 时此按钮将不可点击。</td>\n<td>否</td>\n</tr>\n<tr>\n<td><code>accessibilityLabel</code></td>\n<td>用于给残障人士显示的文本</td>\n<td>否</td>\n</tr>\n<tr>\n<td><code>testID</code></td>\n<td>用来在端到端测试中定位此视图。</td>\n<td>否</td>\n</tr>\n</tbody>\n</table>\n<p>通过上面的属性表格，并没有style属性（可以外部包一层View来定制），可以知道这个Button的组件的样式是有局限的，并且color属性，两端并不统一（一个是文本颜色，一个是背景色），使用非常简单，不再代码演示了。</p>\n<h1 id=\"TouchableXXX系列组件\"><a href=\"#TouchableXXX系列组件\" class=\"headerlink\" title=\"TouchableXXX系列组件\"></a>TouchableXXX系列组件</h1><p>TouchableXXX系列组件有以下四种：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>TouchableWithoutFeedback</td>\n<td>响应用户的点击事件，如果你想在处理点击事件的同时不显示任何视觉反馈，使用它是个不错的选择</td>\n</tr>\n<tr>\n<td>TouchableHighlight</td>\n<td>在TouchableWithoutFeedback的基础上添加了当按下时背景会变暗的效果，可以指定按下抬起的颜色等。</td>\n</tr>\n<tr>\n<td>TouchableOpacity</td>\n<td>相比TouchableHighlight在按下去会使背景变暗的效果，TouchableOpacity会在用户手指按下时降低按钮的透明度，而不会改变背景的颜色。</td>\n</tr>\n<tr>\n<td>TouchableNativeFeedback</td>\n<td>在Android上还可以使用TouchableNativeFeedback，它会在用户手指按下时形成类似水波纹的视觉效果。<strong>注意，此组件只支持Android。</strong></td>\n</tr>\n</tbody>\n</table>\n<p><strong>四者的关系？</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//TouchableHighlight</span></div><div class=\"line\"><span class=\"keyword\">var</span> TouchableHighlight = React.createClass(&#123;</div><div class=\"line\">  <span class=\"attr\">propTypes</span>: &#123;</div><div class=\"line\">    ...TouchableWithoutFeedback.propTypes,</div><div class=\"line\"><span class=\"comment\">//TouchableOpacity</span></div><div class=\"line\"><span class=\"keyword\">var</span> TouchableOpacity = React.createClass(&#123;</div><div class=\"line\">  <span class=\"attr\">mixins</span>: [TimerMixin, Touchable.Mixin, NativeMethodsMixin],</div><div class=\"line\"></div><div class=\"line\">  <span class=\"attr\">propTypes</span>: &#123;</div><div class=\"line\">    ...TouchableWithoutFeedback.propTypes,</div><div class=\"line\"><span class=\"comment\">//TouchableNativeFeedback</span></div><div class=\"line\"><span class=\"keyword\">var</span> TouchableNativeFeedback = React.createClass(&#123;</div><div class=\"line\">  <span class=\"attr\">propTypes</span>: &#123;</div><div class=\"line\">    ...TouchableWithoutFeedback.propTypes,</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>可以看出：</strong></p>\n</blockquote>\n<p>因为TouchableWithoutFeedback有其它三个组件的共同属性，所以我们先来学习一下TouchableWithoutFeedback。</p>\n<p>接下来分别记录的具体使用</p>\n<blockquote>\n<p><strong>注意一点：</strong></p>\n</blockquote>\n<p>无论是TouchableWithoutFeedback还是其他三种Touchable组件，都是在根节点都是只支持一个组件，如果你需要多个组件同时相应单击事件，可以用一个View将它们包裹着，它的这种根节点只支持一个组件的特性和ScrollView很类似。</p>\n<blockquote>\n<p>TouchableWithoutFeedback一个Touchable系列组件中最基本的一个组价，只响应用户的点击事件不会做任何UI上的改变，在使用的过程中需要特别留意。</p>\n</blockquote>\n<h2 id=\"使用详情\"><a href=\"#使用详情\" class=\"headerlink\" title=\"使用详情\"></a>使用详情</h2><p><a href=\"https://reactnative.cn/docs/touchablewithoutfeedback.html\">详情点击查看：中文网TouchableWithoutFeedback</a></p>\n<p><a href=\"http://www.devio.org/2017/01/10/React-Native%E6%8C%89%E9%92%AE%E8%AF%A6%E8%A7%A3-Touchable%E7%B3%BB%E5%88%97%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/\">React Native按钮详解|Touchable系列组件使用详解</a></p>\n<p>整体来说</p>\n<p>TouchableWithoutFeedback：无ui变化</p>\n<p>TouchableHighlight：定制程度较高，透明度，按下抬起颜色等</p>\n<p>TouchableOpacity：只有透明度反馈</p>\n<p>TouchableNativeFeedback：支持Android 5.0以上的Ripper效果，仅支持Android设备</p>\n<h1 id=\"自定义Button\"><a href=\"#自定义Button\" class=\"headerlink\" title=\"自定义Button\"></a>自定义Button</h1><p><a href=\"https://github.com/itfengan/CustomButton\">Github地址</a></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; from <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;</div><div class=\"line\">    View,</div><div class=\"line\">    Text,</div><div class=\"line\">    StyleSheet,</div><div class=\"line\">    TouchableHighlight,</div><div class=\"line\">&#125; from <span class=\"string\">'react-native'</span></div><div class=\"line\"><span class=\"comment\">// default props</span></div><div class=\"line\">const backgroundColor = <span class=\"string\">'#000000'</span>;</div><div class=\"line\">const pressBackgroundColor = backgroundColor;</div><div class=\"line\">const textColor = <span class=\"string\">'#FFFFFF'</span>;</div><div class=\"line\">const pressTextColor = textColor;</div><div class=\"line\"></div><div class=\"line\">export <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommonButton</span> <span class=\"title\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 构造</span></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props);</div><div class=\"line\">        <span class=\"comment\">// 初始状态</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.state = &#123;</div><div class=\"line\">            <span class=\"comment\">//默认文字</span></div><div class=\"line\">            text: <span class=\"keyword\">this</span>.props.text,</div><div class=\"line\">            <span class=\"comment\">//是否不可用</span></div><div class=\"line\">            disabled: <span class=\"literal\">false</span>,</div><div class=\"line\">            <span class=\"comment\">//是否按下</span></div><div class=\"line\">            pressed: <span class=\"literal\">false</span>,</div><div class=\"line\">        &#125;;</div><div class=\"line\">        <span class=\"keyword\">this</span>._onPressIn = <span class=\"keyword\">this</span>._onPressIn.bind(<span class=\"keyword\">this</span>)</div><div class=\"line\">        <span class=\"keyword\">this</span>._onPressOut = <span class=\"keyword\">this</span>._onPressOut.bind(<span class=\"keyword\">this</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    static defaultProps = &#123;</div><div class=\"line\">        <span class=\"comment\">//背景颜色</span></div><div class=\"line\">        backgroundColor: backgroundColor,</div><div class=\"line\">        <span class=\"comment\">//按下背景色</span></div><div class=\"line\">        pressBackgroundColor: pressBackgroundColor,</div><div class=\"line\">        <span class=\"comment\">//文字色</span></div><div class=\"line\">        textColor: textColor,</div><div class=\"line\">        <span class=\"comment\">//按下文字色</span></div><div class=\"line\">        pressTextColor: pressTextColor,</div><div class=\"line\">        <span class=\"comment\">//文字大小</span></div><div class=\"line\">        fontSize: <span class=\"number\">17</span>,</div><div class=\"line\">        <span class=\"comment\">//圆角</span></div><div class=\"line\">        radius: <span class=\"number\">0</span>,</div><div class=\"line\">        <span class=\"comment\">// onPress</span></div><div class=\"line\">        onPressFunc: <span class=\"literal\">null</span>,</div><div class=\"line\">        <span class=\"comment\">//onLongPress</span></div><div class=\"line\">        onLongPressFunc: <span class=\"literal\">null</span>,</div><div class=\"line\">        <span class=\"comment\">//padding</span></div><div class=\"line\">        paddingLeft: <span class=\"number\">0</span>,</div><div class=\"line\">        paddingRight: <span class=\"number\">0</span>,</div><div class=\"line\">        paddingTop: <span class=\"number\">0</span>,</div><div class=\"line\">        paddingBottom: <span class=\"number\">0</span>,</div><div class=\"line\">        <span class=\"comment\">//text</span></div><div class=\"line\">        text: <span class=\"string\">'没有设定'</span>,</div><div class=\"line\">        width: undefined,</div><div class=\"line\">        height: undefined</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setDisabled(isDisabled) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">            disabled: <span class=\"literal\">true</span>,</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setButtonText(newText) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">            text: newText,</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    _onPressIn() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">            pressed: <span class=\"literal\">true</span>,</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    _onPressOut() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">            pressed: <span class=\"literal\">false</span>,</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            &lt;View&gt;</div><div class=\"line\">                &lt;TouchableHighlight</div><div class=\"line\">                    style=&#123;&#123;</div><div class=\"line\">                        width: <span class=\"keyword\">this</span>.props.width,</div><div class=\"line\">                        height: <span class=\"keyword\">this</span>.props.height,</div><div class=\"line\">                        justifyContent: <span class=\"string\">'center'</span>,</div><div class=\"line\">                        alignItems: <span class=\"string\">'center'</span>,</div><div class=\"line\">                        backgroundColor: <span class=\"keyword\">this</span>.props.backgroundColor,</div><div class=\"line\">                        paddingLeft: <span class=\"keyword\">this</span>.props.paddingLeft,</div><div class=\"line\">                        paddingRight: <span class=\"keyword\">this</span>.props.paddingRight,</div><div class=\"line\">                        paddingTop: <span class=\"keyword\">this</span>.props.paddingTop,</div><div class=\"line\">                        paddingBottom: <span class=\"keyword\">this</span>.props.paddingBottom,</div><div class=\"line\">                        borderRadius: <span class=\"number\">8</span>,</div><div class=\"line\">                    &#125;&#125;</div><div class=\"line\">                    activeOpacity=&#123;<span class=\"number\">1</span>&#125;</div><div class=\"line\">                    <span class=\"comment\">// 底层的颜色被隐藏的时候调用。</span></div><div class=\"line\">                    onHideUnderlay=&#123;<span class=\"literal\">null</span>&#125;</div><div class=\"line\">                    <span class=\"comment\">//当底层的颜色被显示的时候调用。</span></div><div class=\"line\">                    onShowUnderlay=&#123;<span class=\"literal\">null</span>&#125;</div><div class=\"line\">                    <span class=\"comment\">// 有触摸操作时显示出来的底层的颜色。</span></div><div class=\"line\">                    underlayColor=&#123;<span class=\"keyword\">this</span>.props.pressBackgroundColor&#125;</div><div class=\"line\">                    <span class=\"comment\">//disable</span></div><div class=\"line\">                    disabled=&#123;<span class=\"keyword\">this</span>.state.disabled&#125;</div><div class=\"line\">                    <span class=\"comment\">//onPressIn</span></div><div class=\"line\">                    onPressIn=&#123;<span class=\"keyword\">this</span>._onPressIn&#125;</div><div class=\"line\">                    <span class=\"comment\">//onPressOut</span></div><div class=\"line\">                    onPressOut=&#123;<span class=\"keyword\">this</span>._onPressOut&#125;</div><div class=\"line\">                    <span class=\"comment\">//onPress</span></div><div class=\"line\">                    onPress=&#123;<span class=\"keyword\">this</span>.props.onPressFunc&#125;</div><div class=\"line\">                    <span class=\"comment\">//onLongPress</span></div><div class=\"line\">                    onLongPress=&#123;<span class=\"keyword\">this</span>.props.onLongPressFunc&#125;</div><div class=\"line\">                &gt;</div><div class=\"line\">                    &lt;View&gt;</div><div class=\"line\">                        &lt;Text style=&#123;&#123;</div><div class=\"line\">                            <span class=\"comment\">//文字颜色</span></div><div class=\"line\">                            color: <span class=\"keyword\">this</span>.state.pressed ? <span class=\"keyword\">this</span>.props.pressTextColor : <span class=\"keyword\">this</span>.props.textColor,</div><div class=\"line\">                            fontSize: <span class=\"keyword\">this</span>.props.fontSize</div><div class=\"line\">                        &#125;&#125;&gt;</div><div class=\"line\">                            &#123;<span class=\"keyword\">this</span>.state.text&#125;</div><div class=\"line\">                        &lt;/Text&gt;</div><div class=\"line\">                    &lt;/View&gt;</div><div class=\"line\">                &lt;/TouchableHighlight&gt;</div><div class=\"line\">            &lt;/View&gt;</div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">const styls = StyleSheet.create(&#123;</div><div class=\"line\">    content: &#123;&#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>嘻嘻(o^^o)</p>"},{"title":"ReactNative碎片整理之Props","date":"2018-04-28T06:28:33.000Z","password":null,"_content":"\nprops的属性都是父组件传递的，所以无法修改它，但是我们可以指定默认prop；\n\n<!--more-->\n\n### 基本介绍\n\n大多数组件创建的时就可以使用各种参数来定制（可以理解为Android自定义View的传值）。但这是不准确的，props在RN中代表着属性，是为了描述一个组件的特征而存在，它是由父组件传递给子组件的（调用方传入）而且一经指定，在被指定的组件的生命周期则不在改变（这与state不同），所以要使用，我们首先在父组件中定义子组件的属性，但不可以添加默认属性（可以在子组件中添加默认属性），props除了传递属性值，还有约束作用...\n\n### 普通使用\n\n以常见的基础组件`Image`为例，在创建一个图片时，可以传入一个名为`source`的 prop 来指定要显示的图片的地址，以及使用名为`style`的 prop 来控制其尺寸。\n\n```javascript\nimport React, { Component } from 'react';\nimport { Image } from 'react-native';\n\nexport default class Bananas extends Component {\n  render() {\n    let pic = {\n      uri: 'https://upload.wikimedia.org/wikipedia/commons/d/de/Bananavarieties.jpg'\n    };\n    return (\n      <Image source={pic} style={{width: 193, height: 110}} />\n    );\n  }\n}\n\n```\n\n以上就是prop的最简单的理解，基础组件`Image`的`style`和`resource`都是它的`prop`属性\n\n### 自定义Props\n\n```javascript\nimport React, {Component} from 'react';\nimport {\n    View,\n    StyleSheet,\n    Alert,\n    TouchableOpacity,\n    Text,\n} from 'react-native';\nclass MyText extends Component {\n    // 构造\n    constructor(props) {\n        super(props);\n    }\n\n    //指定默认props\n    static defaultProps = {\n        myText: '默认值'\n    }\n\n    render() {\n        return (\n            <TouchableOpacity onPress={() => {\n                Alert.alert('Alert')\n            }}>\n                <Text style={styles.continer}>\n                    hello {this.props.myText}!\n                </Text>\n            </TouchableOpacity>\n        )\n    }\n}\n\nexport default class App extends Component<Props> {\n    render() {\n        return (\n            <View style={{alignItems: 'center'}}>\n                <MyText myText='测试'/>\n                <MyText myText='android'/>\n                <MyText myText='ios'/>\n                {/*传入未指定的pros*/}\n                <MyText test='hello'/>\n                {/*未传入pros*/}\n                <MyText />\n            </View>\n        )\n    }\n}\nconst styles = StyleSheet.create({\n    continer: {\n        color: '#ffffff',\n        fontSize: 17,\n        backgroundColor: '#00a056',\n        margin: 20,\n        padding: 10,\n        shadowColor: '#00a056',\n        shadowOffset: {width: 3, height: 3},\n        shadowOpacity: 0.5,\n        shadowRadius: 4\n    }\n})\n```\n\n<img src=\"https://ws3.sinaimg.cn/large/006tKfTcgy1ftpkp21prij30bc0m1q2z.jpg\" width='200'/>\n\n### props约束\n\n使用PropTypes 已经被取消了\n\n[react native关于 从react中引入PropTypes报错的问题](https://blog.csdn.net/allangold/article/details/78843333)\n\n### 方法中调用this.props的问题\n\n```javascript\nimport React, {Component} from 'react';\nimport {\n    View,\n    StyleSheet,\n    Alert,\n    TouchableOpacity,\n    Text,\n} from 'react-native';\n\nclass MyText extends Component {\n    // 构造\n    constructor(props) {\n        super(props);\n    }\n    //指定默认props\n    static defaultProps = {\n        name: '冯英俊',\n        age: 1,\n    }\n\n    //点击弹出传入的信息\n    _onClickEvent() {\n        Alert.alert(this.props.name, \"年纪\" + this.props.age)\n    }\n    render() {\n        return (\n            <TouchableOpacity onPress={this._onClickEvent}>\n                <Text style={styles.continer}>\n                    hello {this.props.name}你的年纪是{this.props.age}!\n                </Text>\n            </TouchableOpacity>\n        )\n    }\n}\n\nexport default class App extends Component<Props> {\n    render() {\n        return (\n            <View style={{alignItems: 'center'}}>\n                <MyText name='刘德华' age={20}/>\n                <MyText age={18}/>\n                <MyText name='刘德华' age={22}/>\n                <MyText name='刘德华' age={30}/>\n\n            </View>\n        )\n    }\n}\nconst styles = StyleSheet.create({\n    continer: {\n        color: '#ffffff',\n        fontSize: 17,\n        backgroundColor: '#00a056',\n        margin: 20,\n        padding: 10,\n        shadowColor: '#00a056',\n        shadowOffset: {width: 3, height: 3},\n        shadowOpacity: 0.5,\n        shadowRadius: 4\n    }\n})\n```\n\n<img src=\"https://ws3.sinaimg.cn/large/006tKfTcgy1ftplzf9renj30bc0m174y.jpg\" width='200'/>\n\n[React Native绑定this(bind(this))](https://www.jianshu.com/p/ce970791aba4)\n\n[【React Native】React Native的bind方法](https://blog.csdn.net/sinat_34693148/article/details/72631956)\n\n```javascript\n_onClickEvent() {\n    Alert.alert(this.props.name, \"年纪\" + this.props.age)\n}\n//修改为：\nrender() {\n    return (\n        <TouchableOpacity onPress={() => this._onClickEvent()}>\n            <Text style={styles.continer}>\n                hello {this.props.name}你的年纪是{this.props.age}!\n            </Text>\n        </TouchableOpacity>\n    )\n}\n//或者\nrender() {\n        return (\n            <TouchableOpacity onPress={() =>{\n                Alert.alert(this.props.name, \"年纪\" + this.props.age)\n            }}>\n                <Text style={styles.continer}>\n                    hello {this.props.name}你的年纪是{this.props.age}!\n                </Text>\n            </TouchableOpacity>\n        )\n    }\n//或者\nrender() {\n        return (\n            <TouchableOpacity onPress={this._onClickEvent.bind(this)}>\n                <Text style={styles.continer}>\n                    hello {this.props.name}你的年纪是{this.props.age}!\n                </Text>\n            </TouchableOpacity>\n        )\n    }\n//或者 箭头函数完成bind\n render() {\n        return (\n            <TouchableOpacity onPress={() => {\n                this._onClickEvent('hello')\n            }}>\n                <Text style={styles.continer}>\n                    hello {this.props.name}你的年纪是{this.props.age}!\n                </Text>\n            </TouchableOpacity>\n        )\n    }\n```\n\n**关于ReactNative的this更多内容后面会再整理**\n\n### 参考：\n\n[ReactNative中文网](https://reactnative.cn/docs/props.html)","source":"_posts/ReactNative碎片整理之Props.md","raw":"---\ntitle: ReactNative碎片整理之Props\ndate: 2018-04-28 14:28:33\ntags:\n- RN\ncategories: RN\npassword:\n---\n\nprops的属性都是父组件传递的，所以无法修改它，但是我们可以指定默认prop；\n\n<!--more-->\n\n### 基本介绍\n\n大多数组件创建的时就可以使用各种参数来定制（可以理解为Android自定义View的传值）。但这是不准确的，props在RN中代表着属性，是为了描述一个组件的特征而存在，它是由父组件传递给子组件的（调用方传入）而且一经指定，在被指定的组件的生命周期则不在改变（这与state不同），所以要使用，我们首先在父组件中定义子组件的属性，但不可以添加默认属性（可以在子组件中添加默认属性），props除了传递属性值，还有约束作用...\n\n### 普通使用\n\n以常见的基础组件`Image`为例，在创建一个图片时，可以传入一个名为`source`的 prop 来指定要显示的图片的地址，以及使用名为`style`的 prop 来控制其尺寸。\n\n```javascript\nimport React, { Component } from 'react';\nimport { Image } from 'react-native';\n\nexport default class Bananas extends Component {\n  render() {\n    let pic = {\n      uri: 'https://upload.wikimedia.org/wikipedia/commons/d/de/Bananavarieties.jpg'\n    };\n    return (\n      <Image source={pic} style={{width: 193, height: 110}} />\n    );\n  }\n}\n\n```\n\n以上就是prop的最简单的理解，基础组件`Image`的`style`和`resource`都是它的`prop`属性\n\n### 自定义Props\n\n```javascript\nimport React, {Component} from 'react';\nimport {\n    View,\n    StyleSheet,\n    Alert,\n    TouchableOpacity,\n    Text,\n} from 'react-native';\nclass MyText extends Component {\n    // 构造\n    constructor(props) {\n        super(props);\n    }\n\n    //指定默认props\n    static defaultProps = {\n        myText: '默认值'\n    }\n\n    render() {\n        return (\n            <TouchableOpacity onPress={() => {\n                Alert.alert('Alert')\n            }}>\n                <Text style={styles.continer}>\n                    hello {this.props.myText}!\n                </Text>\n            </TouchableOpacity>\n        )\n    }\n}\n\nexport default class App extends Component<Props> {\n    render() {\n        return (\n            <View style={{alignItems: 'center'}}>\n                <MyText myText='测试'/>\n                <MyText myText='android'/>\n                <MyText myText='ios'/>\n                {/*传入未指定的pros*/}\n                <MyText test='hello'/>\n                {/*未传入pros*/}\n                <MyText />\n            </View>\n        )\n    }\n}\nconst styles = StyleSheet.create({\n    continer: {\n        color: '#ffffff',\n        fontSize: 17,\n        backgroundColor: '#00a056',\n        margin: 20,\n        padding: 10,\n        shadowColor: '#00a056',\n        shadowOffset: {width: 3, height: 3},\n        shadowOpacity: 0.5,\n        shadowRadius: 4\n    }\n})\n```\n\n<img src=\"https://ws3.sinaimg.cn/large/006tKfTcgy1ftpkp21prij30bc0m1q2z.jpg\" width='200'/>\n\n### props约束\n\n使用PropTypes 已经被取消了\n\n[react native关于 从react中引入PropTypes报错的问题](https://blog.csdn.net/allangold/article/details/78843333)\n\n### 方法中调用this.props的问题\n\n```javascript\nimport React, {Component} from 'react';\nimport {\n    View,\n    StyleSheet,\n    Alert,\n    TouchableOpacity,\n    Text,\n} from 'react-native';\n\nclass MyText extends Component {\n    // 构造\n    constructor(props) {\n        super(props);\n    }\n    //指定默认props\n    static defaultProps = {\n        name: '冯英俊',\n        age: 1,\n    }\n\n    //点击弹出传入的信息\n    _onClickEvent() {\n        Alert.alert(this.props.name, \"年纪\" + this.props.age)\n    }\n    render() {\n        return (\n            <TouchableOpacity onPress={this._onClickEvent}>\n                <Text style={styles.continer}>\n                    hello {this.props.name}你的年纪是{this.props.age}!\n                </Text>\n            </TouchableOpacity>\n        )\n    }\n}\n\nexport default class App extends Component<Props> {\n    render() {\n        return (\n            <View style={{alignItems: 'center'}}>\n                <MyText name='刘德华' age={20}/>\n                <MyText age={18}/>\n                <MyText name='刘德华' age={22}/>\n                <MyText name='刘德华' age={30}/>\n\n            </View>\n        )\n    }\n}\nconst styles = StyleSheet.create({\n    continer: {\n        color: '#ffffff',\n        fontSize: 17,\n        backgroundColor: '#00a056',\n        margin: 20,\n        padding: 10,\n        shadowColor: '#00a056',\n        shadowOffset: {width: 3, height: 3},\n        shadowOpacity: 0.5,\n        shadowRadius: 4\n    }\n})\n```\n\n<img src=\"https://ws3.sinaimg.cn/large/006tKfTcgy1ftplzf9renj30bc0m174y.jpg\" width='200'/>\n\n[React Native绑定this(bind(this))](https://www.jianshu.com/p/ce970791aba4)\n\n[【React Native】React Native的bind方法](https://blog.csdn.net/sinat_34693148/article/details/72631956)\n\n```javascript\n_onClickEvent() {\n    Alert.alert(this.props.name, \"年纪\" + this.props.age)\n}\n//修改为：\nrender() {\n    return (\n        <TouchableOpacity onPress={() => this._onClickEvent()}>\n            <Text style={styles.continer}>\n                hello {this.props.name}你的年纪是{this.props.age}!\n            </Text>\n        </TouchableOpacity>\n    )\n}\n//或者\nrender() {\n        return (\n            <TouchableOpacity onPress={() =>{\n                Alert.alert(this.props.name, \"年纪\" + this.props.age)\n            }}>\n                <Text style={styles.continer}>\n                    hello {this.props.name}你的年纪是{this.props.age}!\n                </Text>\n            </TouchableOpacity>\n        )\n    }\n//或者\nrender() {\n        return (\n            <TouchableOpacity onPress={this._onClickEvent.bind(this)}>\n                <Text style={styles.continer}>\n                    hello {this.props.name}你的年纪是{this.props.age}!\n                </Text>\n            </TouchableOpacity>\n        )\n    }\n//或者 箭头函数完成bind\n render() {\n        return (\n            <TouchableOpacity onPress={() => {\n                this._onClickEvent('hello')\n            }}>\n                <Text style={styles.continer}>\n                    hello {this.props.name}你的年纪是{this.props.age}!\n                </Text>\n            </TouchableOpacity>\n        )\n    }\n```\n\n**关于ReactNative的this更多内容后面会再整理**\n\n### 参考：\n\n[ReactNative中文网](https://reactnative.cn/docs/props.html)","slug":"ReactNative碎片整理之Props","published":1,"updated":"2018-07-28T10:49:16.076Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6mm000q1kygvyukqpse","content":"<p>props的属性都是父组件传递的，所以无法修改它，但是我们可以指定默认prop；</p>\n<a id=\"more\"></a>\n<h3 id=\"基本介绍\"><a href=\"#基本介绍\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><p>大多数组件创建的时就可以使用各种参数来定制（可以理解为Android自定义View的传值）。但这是不准确的，props在RN中代表着属性，是为了描述一个组件的特征而存在，它是由父组件传递给子组件的（调用方传入）而且一经指定，在被指定的组件的生命周期则不在改变（这与state不同），所以要使用，我们首先在父组件中定义子组件的属性，但不可以添加默认属性（可以在子组件中添加默认属性），props除了传递属性值，还有约束作用…</p>\n<h3 id=\"普通使用\"><a href=\"#普通使用\" class=\"headerlink\" title=\"普通使用\"></a>普通使用</h3><p>以常见的基础组件<code>Image</code>为例，在创建一个图片时，可以传入一个名为<code>source</code>的 prop 来指定要显示的图片的地址，以及使用名为<code>style</code>的 prop 来控制其尺寸。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Image &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bananas</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> pic = &#123;</div><div class=\"line\">      <span class=\"attr\">uri</span>: <span class=\"string\">'https://upload.wikimedia.org/wikipedia/commons/d/de/Bananavarieties.jpg'</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">source</span>=<span class=\"string\">&#123;pic&#125;</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;width:</span> <span class=\"attr\">193</span>, <span class=\"attr\">height:</span> <span class=\"attr\">110</span>&#125;&#125; /&gt;</span></span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上就是prop的最简单的理解，基础组件<code>Image</code>的<code>style</code>和<code>resource</code>都是它的<code>prop</code>属性</p>\n<h3 id=\"自定义Props\"><a href=\"#自定义Props\" class=\"headerlink\" title=\"自定义Props\"></a>自定义Props</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;</div><div class=\"line\">    View,</div><div class=\"line\">    StyleSheet,</div><div class=\"line\">    Alert,</div><div class=\"line\">    TouchableOpacity,</div><div class=\"line\">    Text,</div><div class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span>;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyText</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 构造</span></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//指定默认props</span></div><div class=\"line\">    <span class=\"keyword\">static</span> defaultProps = &#123;</div><div class=\"line\">        <span class=\"attr\">myText</span>: <span class=\"string\">'默认值'</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">TouchableOpacity</span> <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></div><div class=\"line\">                Alert.alert('Alert')</div><div class=\"line\">            &#125;&#125;&gt;</div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.continer&#125;</span>&gt;</span></div><div class=\"line\">                    hello &#123;this.props.myText&#125;!</div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">TouchableOpacity</span>&gt;</span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>&gt; </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            &lt;View style=&#123;&#123;alignItems: 'center'&#125;&#125;&gt;</div><div class=\"line\">                &lt;MyText myText='测试'/&gt;</div><div class=\"line\">                &lt;MyText myText='android'/&gt;</div><div class=\"line\">                &lt;MyText myText='ios'/&gt;</div><div class=\"line\">                &#123;/*传入未指定的pros*/&#125;</div><div class=\"line\">                &lt;MyText test='hello'/&gt;</div><div class=\"line\">                &#123;/*未传入pros*/&#125;</div><div class=\"line\">                &lt;MyText /&gt;</div><div class=\"line\">            &lt;/View&gt;</div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">const styles = StyleSheet.create(&#123;</div><div class=\"line\">    continer: &#123;</div><div class=\"line\">        color: '#ffffff',</div><div class=\"line\">        fontSize: 17,</div><div class=\"line\">        backgroundColor: '#00a056',</div><div class=\"line\">        margin: 20,</div><div class=\"line\">        padding: 10,</div><div class=\"line\">        shadowColor: '#00a056',</div><div class=\"line\">        shadowOffset: &#123;width: 3, height: 3&#125;,</div><div class=\"line\">        shadowOpacity: 0.5,</div><div class=\"line\">        shadowRadius: 4</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tKfTcgy1ftpkp21prij30bc0m1q2z.jpg\" width=\"200\"></p>\n<h3 id=\"props约束\"><a href=\"#props约束\" class=\"headerlink\" title=\"props约束\"></a>props约束</h3><p>使用PropTypes 已经被取消了</p>\n<p><a href=\"https://blog.csdn.net/allangold/article/details/78843333\" target=\"_blank\" rel=\"external\">react native关于 从react中引入PropTypes报错的问题</a></p>\n<h3 id=\"方法中调用this-props的问题\"><a href=\"#方法中调用this-props的问题\" class=\"headerlink\" title=\"方法中调用this.props的问题\"></a>方法中调用this.props的问题</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;</div><div class=\"line\">    View,</div><div class=\"line\">    StyleSheet,</div><div class=\"line\">    Alert,</div><div class=\"line\">    TouchableOpacity,</div><div class=\"line\">    Text,</div><div class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyText</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 构造</span></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//指定默认props</span></div><div class=\"line\">    <span class=\"keyword\">static</span> defaultProps = &#123;</div><div class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">'冯英俊'</span>,</div><div class=\"line\">        <span class=\"attr\">age</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//点击弹出传入的信息</span></div><div class=\"line\">    _onClickEvent() &#123;</div><div class=\"line\">        Alert.alert(<span class=\"keyword\">this</span>.props.name, <span class=\"string\">\"年纪\"</span> + <span class=\"keyword\">this</span>.props.age)</div><div class=\"line\">    &#125;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">TouchableOpacity</span> <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;this._onClickEvent&#125;</span>&gt;</span></span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.continer&#125;</span>&gt;</span></div><div class=\"line\">                    hello &#123;this.props.name&#125;你的年纪是&#123;this.props.age&#125;!</div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">TouchableOpacity</span>&gt;</span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>&gt; </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            &lt;View style=&#123;&#123;alignItems: 'center'&#125;&#125;&gt;</div><div class=\"line\">                &lt;MyText name='刘德华' age=&#123;20&#125;/&gt;</div><div class=\"line\">                &lt;MyText age=&#123;18&#125;/&gt;</div><div class=\"line\">                &lt;MyText name='刘德华' age=&#123;22&#125;/&gt;</div><div class=\"line\">                &lt;MyText name='刘德华' age=&#123;30&#125;/&gt;</div><div class=\"line\"></div><div class=\"line\">            &lt;/View&gt;</div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">const styles = StyleSheet.create(&#123;</div><div class=\"line\">    continer: &#123;</div><div class=\"line\">        color: '#ffffff',</div><div class=\"line\">        fontSize: 17,</div><div class=\"line\">        backgroundColor: '#00a056',</div><div class=\"line\">        margin: 20,</div><div class=\"line\">        padding: 10,</div><div class=\"line\">        shadowColor: '#00a056',</div><div class=\"line\">        shadowOffset: &#123;width: 3, height: 3&#125;,</div><div class=\"line\">        shadowOpacity: 0.5,</div><div class=\"line\">        shadowRadius: 4</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tKfTcgy1ftplzf9renj30bc0m174y.jpg\" width=\"200\"></p>\n<p><a href=\"https://www.jianshu.com/p/ce970791aba4\" target=\"_blank\" rel=\"external\">React Native绑定this(bind(this))</a></p>\n<p><a href=\"https://blog.csdn.net/sinat_34693148/article/details/72631956\" target=\"_blank\" rel=\"external\">【React Native】React Native的bind方法</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">_onClickEvent() &#123;</div><div class=\"line\">    Alert.alert(<span class=\"keyword\">this</span>.props.name, <span class=\"string\">\"年纪\"</span> + <span class=\"keyword\">this</span>.props.age)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//修改为：</span></div><div class=\"line\">render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">TouchableOpacity</span> <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this._onClickEvent()&#125;&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.continer&#125;</span>&gt;</span></div><div class=\"line\">                hello &#123;this.props.name&#125;你的年纪是&#123;this.props.age&#125;!</div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">TouchableOpacity</span>&gt;</span></div><div class=\"line\">    )</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//或者</span></div><div class=\"line\">render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">TouchableOpacity</span> <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;()</span> =&gt;</span>&#123;</span></div><div class=\"line\">                Alert.alert(this.props.name, \"年纪\" + this.props.age)</div><div class=\"line\">            &#125;&#125;&gt;</div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.continer&#125;</span>&gt;</span></div><div class=\"line\">                    hello &#123;this.props.name&#125;你的年纪是&#123;this.props.age&#125;!</div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">TouchableOpacity</span>&gt;</span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"comment\">//或者</span></div><div class=\"line\">render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">TouchableOpacity</span> <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;this._onClickEvent.bind(this)&#125;</span>&gt;</span></span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.continer&#125;</span>&gt;</span></div><div class=\"line\">                    hello &#123;this.props.name&#125;你的年纪是&#123;this.props.age&#125;!</div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">TouchableOpacity</span>&gt;</span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"comment\">//或者 箭头函数完成bind</span></div><div class=\"line\"> render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">TouchableOpacity</span> <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></div><div class=\"line\">                this._onClickEvent('hello')</div><div class=\"line\">            &#125;&#125;&gt;</div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.continer&#125;</span>&gt;</span></div><div class=\"line\">                    hello &#123;this.props.name&#125;你的年纪是&#123;this.props.age&#125;!</div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">TouchableOpacity</span>&gt;</span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p><strong>关于ReactNative的this更多内容后面会再整理</strong></p>\n<h3 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h3><p><a href=\"https://reactnative.cn/docs/props.html\" target=\"_blank\" rel=\"external\">ReactNative中文网</a></p>\n","excerpt":"<p>props的属性都是父组件传递的，所以无法修改它，但是我们可以指定默认prop；</p>","more":"<h3 id=\"基本介绍\"><a href=\"#基本介绍\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><p>大多数组件创建的时就可以使用各种参数来定制（可以理解为Android自定义View的传值）。但这是不准确的，props在RN中代表着属性，是为了描述一个组件的特征而存在，它是由父组件传递给子组件的（调用方传入）而且一经指定，在被指定的组件的生命周期则不在改变（这与state不同），所以要使用，我们首先在父组件中定义子组件的属性，但不可以添加默认属性（可以在子组件中添加默认属性），props除了传递属性值，还有约束作用…</p>\n<h3 id=\"普通使用\"><a href=\"#普通使用\" class=\"headerlink\" title=\"普通使用\"></a>普通使用</h3><p>以常见的基础组件<code>Image</code>为例，在创建一个图片时，可以传入一个名为<code>source</code>的 prop 来指定要显示的图片的地址，以及使用名为<code>style</code>的 prop 来控制其尺寸。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Image &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bananas</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> pic = &#123;</div><div class=\"line\">      <span class=\"attr\">uri</span>: <span class=\"string\">'https://upload.wikimedia.org/wikipedia/commons/d/de/Bananavarieties.jpg'</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">source</span>=<span class=\"string\">&#123;pic&#125;</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;width:</span> <span class=\"attr\">193</span>, <span class=\"attr\">height:</span> <span class=\"attr\">110</span>&#125;&#125; /&gt;</span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</span></div></pre></td></tr></table></figure>\n<p>以上就是prop的最简单的理解，基础组件<code>Image</code>的<code>style</code>和<code>resource</code>都是它的<code>prop</code>属性</p>\n<h3 id=\"自定义Props\"><a href=\"#自定义Props\" class=\"headerlink\" title=\"自定义Props\"></a>自定义Props</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;</div><div class=\"line\">    View,</div><div class=\"line\">    StyleSheet,</div><div class=\"line\">    Alert,</div><div class=\"line\">    TouchableOpacity,</div><div class=\"line\">    Text,</div><div class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span>;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyText</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 构造</span></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//指定默认props</span></div><div class=\"line\">    <span class=\"keyword\">static</span> defaultProps = &#123;</div><div class=\"line\">        <span class=\"attr\">myText</span>: <span class=\"string\">'默认值'</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">TouchableOpacity</span> <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</div><div class=\"line\">                Alert.alert('Alert')</div><div class=\"line\">            &#125;&#125;&gt;</div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.continer&#125;</span>&gt;</span></div><div class=\"line\">                    hello &#123;this.props.myText&#125;!</div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">TouchableOpacity</span>&gt;</span></span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>&gt; </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            &lt;View style=&#123;&#123;alignItems: 'center'&#125;&#125;&gt;</div><div class=\"line\">                &lt;MyText myText='测试'/&gt;</div><div class=\"line\">                &lt;MyText myText='android'/&gt;</div><div class=\"line\">                &lt;MyText myText='ios'/&gt;</div><div class=\"line\">                &#123;/*传入未指定的pros*/&#125;</div><div class=\"line\">                &lt;MyText test='hello'/&gt;</div><div class=\"line\">                &#123;/*未传入pros*/&#125;</div><div class=\"line\">                &lt;MyText /&gt;</div><div class=\"line\">            &lt;/View&gt;</div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">const styles = StyleSheet.create(&#123;</div><div class=\"line\">    continer: &#123;</div><div class=\"line\">        color: '#ffffff',</div><div class=\"line\">        fontSize: 17,</div><div class=\"line\">        backgroundColor: '#00a056',</div><div class=\"line\">        margin: 20,</div><div class=\"line\">        padding: 10,</div><div class=\"line\">        shadowColor: '#00a056',</div><div class=\"line\">        shadowOffset: &#123;width: 3, height: 3&#125;,</div><div class=\"line\">        shadowOpacity: 0.5,</div><div class=\"line\">        shadowRadius: 4</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tKfTcgy1ftpkp21prij30bc0m1q2z.jpg\" width='200'/></p>\n<h3 id=\"props约束\"><a href=\"#props约束\" class=\"headerlink\" title=\"props约束\"></a>props约束</h3><p>使用PropTypes 已经被取消了</p>\n<p><a href=\"https://blog.csdn.net/allangold/article/details/78843333\">react native关于 从react中引入PropTypes报错的问题</a></p>\n<h3 id=\"方法中调用this-props的问题\"><a href=\"#方法中调用this-props的问题\" class=\"headerlink\" title=\"方法中调用this.props的问题\"></a>方法中调用this.props的问题</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;</div><div class=\"line\">    View,</div><div class=\"line\">    StyleSheet,</div><div class=\"line\">    Alert,</div><div class=\"line\">    TouchableOpacity,</div><div class=\"line\">    Text,</div><div class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyText</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 构造</span></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//指定默认props</span></div><div class=\"line\">    <span class=\"keyword\">static</span> defaultProps = &#123;</div><div class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">'冯英俊'</span>,</div><div class=\"line\">        <span class=\"attr\">age</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//点击弹出传入的信息</span></div><div class=\"line\">    _onClickEvent() &#123;</div><div class=\"line\">        Alert.alert(<span class=\"keyword\">this</span>.props.name, <span class=\"string\">\"年纪\"</span> + <span class=\"keyword\">this</span>.props.age)</div><div class=\"line\">    &#125;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">TouchableOpacity</span> <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;this._onClickEvent&#125;</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.continer&#125;</span>&gt;</span></div><div class=\"line\">                    hello &#123;this.props.name&#125;你的年纪是&#123;this.props.age&#125;!</div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">TouchableOpacity</span>&gt;</span></span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>&gt; </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            &lt;View style=&#123;&#123;alignItems: 'center'&#125;&#125;&gt;</div><div class=\"line\">                &lt;MyText name='刘德华' age=&#123;20&#125;/&gt;</div><div class=\"line\">                &lt;MyText age=&#123;18&#125;/&gt;</div><div class=\"line\">                &lt;MyText name='刘德华' age=&#123;22&#125;/&gt;</div><div class=\"line\">                &lt;MyText name='刘德华' age=&#123;30&#125;/&gt;</div><div class=\"line\"></div><div class=\"line\">            &lt;/View&gt;</div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">const styles = StyleSheet.create(&#123;</div><div class=\"line\">    continer: &#123;</div><div class=\"line\">        color: '#ffffff',</div><div class=\"line\">        fontSize: 17,</div><div class=\"line\">        backgroundColor: '#00a056',</div><div class=\"line\">        margin: 20,</div><div class=\"line\">        padding: 10,</div><div class=\"line\">        shadowColor: '#00a056',</div><div class=\"line\">        shadowOffset: &#123;width: 3, height: 3&#125;,</div><div class=\"line\">        shadowOpacity: 0.5,</div><div class=\"line\">        shadowRadius: 4</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tKfTcgy1ftplzf9renj30bc0m174y.jpg\" width='200'/></p>\n<p><a href=\"https://www.jianshu.com/p/ce970791aba4\">React Native绑定this(bind(this))</a></p>\n<p><a href=\"https://blog.csdn.net/sinat_34693148/article/details/72631956\">【React Native】React Native的bind方法</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">_onClickEvent() &#123;</div><div class=\"line\">    Alert.alert(<span class=\"keyword\">this</span>.props.name, <span class=\"string\">\"年纪\"</span> + <span class=\"keyword\">this</span>.props.age)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//修改为：</span></div><div class=\"line\">render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">TouchableOpacity</span> <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this._onClickEvent()&#125;&gt;</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.continer&#125;</span>&gt;</span></div><div class=\"line\">                hello &#123;this.props.name&#125;你的年纪是&#123;this.props.age&#125;!</div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">TouchableOpacity</span>&gt;</span></span></div><div class=\"line\">    )</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//或者</span></div><div class=\"line\">render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">TouchableOpacity</span> <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;()</span> =&gt;</span>&#123;</div><div class=\"line\">                Alert.alert(this.props.name, \"年纪\" + this.props.age)</div><div class=\"line\">            &#125;&#125;&gt;</div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.continer&#125;</span>&gt;</span></div><div class=\"line\">                    hello &#123;this.props.name&#125;你的年纪是&#123;this.props.age&#125;!</div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">TouchableOpacity</span>&gt;</span></span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"comment\">//或者</span></div><div class=\"line\">render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">TouchableOpacity</span> <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;this._onClickEvent.bind(this)&#125;</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.continer&#125;</span>&gt;</span></div><div class=\"line\">                    hello &#123;this.props.name&#125;你的年纪是&#123;this.props.age&#125;!</div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">TouchableOpacity</span>&gt;</span></span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"comment\">//或者 箭头函数完成bind</span></div><div class=\"line\"> render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">TouchableOpacity</span> <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</div><div class=\"line\">                this._onClickEvent('hello')</div><div class=\"line\">            &#125;&#125;&gt;</div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.continer&#125;</span>&gt;</span></div><div class=\"line\">                    hello &#123;this.props.name&#125;你的年纪是&#123;this.props.age&#125;!</div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">TouchableOpacity</span>&gt;</span></span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p><strong>关于ReactNative的this更多内容后面会再整理</strong></p>\n<h3 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h3><p><a href=\"https://reactnative.cn/docs/props.html\">ReactNative中文网</a></p>"},{"title":"ReactNative碎片整理之ref","date":"2018-08-01T02:11:32.000Z","password":null,"_content":"\n> 概述\n\nref属性是一个特殊的属性，可以把它挂载到任何组件\n\n它可以是一个回调函数（也可以是一个字符串，基本废弃这种用法）\n\n这个回调函数在组件被挂载后立即被执行，应用到的组件作为参数传递\n\n回调函数可以立即使用组件，也可以将参数的组件引用保存起来，后续使用（调用组件方法或者获取组件参数）\n\n<!--more-->\n\n# ref属性指定回调方法\n\n## 栗子：\n\n```javascript\nimport React, {Component} from 'react';\nimport {\n    View,\n    Text,\n    StyleSheet,\n} from 'react-native';\n\n\nexport default class App extends Component<Props> {\n    // 构造\n    constructor(props) {\n        super(props);\n        // 初始状态\n        this.state = {\n            result: '点击前'\n        };\n    }\n\n    render() {\n        return (\n            <View style={styles.content}>\n                <Text style={styles.button} onPress={\n                    () => {\n                        this._Test.print()\n                    }\n\t\t\t\t\t//() => {\n                    //    this.setState((prestate, props) => {\n                    //       console.warn(\"setState\")\n                    //        return {result: '点击了'}\n                    //    })\n                    }\n                }>{this.state.result}</Text>\n                <RefTest ref={\n                    //指定ref属性的回调函数\n                    (e) => {\n                        console.warn(\"ref的回调执行了！\")\n                        //参数e则为当前RefTest组件的引用\n                        this._Test = e;\n                    }\n                }>\n                </RefTest>\n            </View>\n        )\n    }\n}\n\nconst styles = StyleSheet.create({\n    content: {\n        flex: 1,\n        backgroundColor: '#00a056',\n        flexDirection: 'row'\n    },\n    button: {\n        padding: 30,\n        backgroundColor: '#ffffff',\n        fontSize: 17,\n        alignSelf: 'center'\n    },\n    text: {\n        padding: 30,\n        backgroundColor: '#ffffff',\n        fontSize: 30,\n    }\n})\n\nclass RefTest extends Component<Props> {\n\n    // 构造\n    constructor(props) {\n        super(props);\n        // 初始状态\n        this.state = {\n            data: 'old'\n        };\n    }\n\n    print() {\n        this.setState((preState, props) => {\n            return {\n                data: 'new'\n            }\n        })\n        console.warn(\"print方法执行了：\" + this.state.data)\n    }\n\n    render() {\n        return (\n            <View style={{\n                alignSelf: 'center',\n                left: 10,\n                backgroundColor: '#ffff00',\n            }}>\n                <Text style={styles.text}>\n                    当前数据：{this.state.data}\n                </Text>\n            </View>\n        );\n    }\n}\n```\n\n<img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/ref1.gif\" width=\"400\">\n\n可以看到：\n\n- 父组件拥有的子组件，子组件有ref属性\n- 首次进入的时候，组件初次绑定 ref的回调会执行一次，父组件保存该引用\n- 点击后，使用组件引用，调用组件方法print\n- 若点击后，父组件setState，则子组件 卸载后，重新调用子组件Rend（）方法，这个过程，子组件的ref回调会被调用两次（卸载一次，挂载一次）\n\n需要知道的：\n\n- 在父组件在子组件指定ref的回调中保存引用对子组件的\n- 这个回调在父组件每次setState（父Render（）调用）\n- 组件的render方法被调用时，ref才会被调用，组件才会返回ref\n- setState涉及先卸载，后挂载，ref回调执行两次\n\n","source":"_posts/ReactNative碎片整理之ref.md","raw":"---\ntitle: ReactNative碎片整理之ref\ndate: 2018-08-01 10:11:32\ntags:\n- RN\ncategories: RN\npassword:\n---\n\n> 概述\n\nref属性是一个特殊的属性，可以把它挂载到任何组件\n\n它可以是一个回调函数（也可以是一个字符串，基本废弃这种用法）\n\n这个回调函数在组件被挂载后立即被执行，应用到的组件作为参数传递\n\n回调函数可以立即使用组件，也可以将参数的组件引用保存起来，后续使用（调用组件方法或者获取组件参数）\n\n<!--more-->\n\n# ref属性指定回调方法\n\n## 栗子：\n\n```javascript\nimport React, {Component} from 'react';\nimport {\n    View,\n    Text,\n    StyleSheet,\n} from 'react-native';\n\n\nexport default class App extends Component<Props> {\n    // 构造\n    constructor(props) {\n        super(props);\n        // 初始状态\n        this.state = {\n            result: '点击前'\n        };\n    }\n\n    render() {\n        return (\n            <View style={styles.content}>\n                <Text style={styles.button} onPress={\n                    () => {\n                        this._Test.print()\n                    }\n\t\t\t\t\t//() => {\n                    //    this.setState((prestate, props) => {\n                    //       console.warn(\"setState\")\n                    //        return {result: '点击了'}\n                    //    })\n                    }\n                }>{this.state.result}</Text>\n                <RefTest ref={\n                    //指定ref属性的回调函数\n                    (e) => {\n                        console.warn(\"ref的回调执行了！\")\n                        //参数e则为当前RefTest组件的引用\n                        this._Test = e;\n                    }\n                }>\n                </RefTest>\n            </View>\n        )\n    }\n}\n\nconst styles = StyleSheet.create({\n    content: {\n        flex: 1,\n        backgroundColor: '#00a056',\n        flexDirection: 'row'\n    },\n    button: {\n        padding: 30,\n        backgroundColor: '#ffffff',\n        fontSize: 17,\n        alignSelf: 'center'\n    },\n    text: {\n        padding: 30,\n        backgroundColor: '#ffffff',\n        fontSize: 30,\n    }\n})\n\nclass RefTest extends Component<Props> {\n\n    // 构造\n    constructor(props) {\n        super(props);\n        // 初始状态\n        this.state = {\n            data: 'old'\n        };\n    }\n\n    print() {\n        this.setState((preState, props) => {\n            return {\n                data: 'new'\n            }\n        })\n        console.warn(\"print方法执行了：\" + this.state.data)\n    }\n\n    render() {\n        return (\n            <View style={{\n                alignSelf: 'center',\n                left: 10,\n                backgroundColor: '#ffff00',\n            }}>\n                <Text style={styles.text}>\n                    当前数据：{this.state.data}\n                </Text>\n            </View>\n        );\n    }\n}\n```\n\n<img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/ref1.gif\" width=\"400\">\n\n可以看到：\n\n- 父组件拥有的子组件，子组件有ref属性\n- 首次进入的时候，组件初次绑定 ref的回调会执行一次，父组件保存该引用\n- 点击后，使用组件引用，调用组件方法print\n- 若点击后，父组件setState，则子组件 卸载后，重新调用子组件Rend（）方法，这个过程，子组件的ref回调会被调用两次（卸载一次，挂载一次）\n\n需要知道的：\n\n- 在父组件在子组件指定ref的回调中保存引用对子组件的\n- 这个回调在父组件每次setState（父Render（）调用）\n- 组件的render方法被调用时，ref才会被调用，组件才会返回ref\n- setState涉及先卸载，后挂载，ref回调执行两次\n\n","slug":"ReactNative碎片整理之ref","published":1,"updated":"2018-08-02T06:11:20.716Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6mn000t1kygj7x1a8d1","content":"<blockquote>\n<p>概述</p>\n</blockquote>\n<p>ref属性是一个特殊的属性，可以把它挂载到任何组件</p>\n<p>它可以是一个回调函数（也可以是一个字符串，基本废弃这种用法）</p>\n<p>这个回调函数在组件被挂载后立即被执行，应用到的组件作为参数传递</p>\n<p>回调函数可以立即使用组件，也可以将参数的组件引用保存起来，后续使用（调用组件方法或者获取组件参数）</p>\n<a id=\"more\"></a>\n<h1 id=\"ref属性指定回调方法\"><a href=\"#ref属性指定回调方法\" class=\"headerlink\" title=\"ref属性指定回调方法\"></a>ref属性指定回调方法</h1><h2 id=\"栗子：\"><a href=\"#栗子：\" class=\"headerlink\" title=\"栗子：\"></a>栗子：</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;</div><div class=\"line\">    View,</div><div class=\"line\">    Text,</div><div class=\"line\">    StyleSheet,</div><div class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 构造</span></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props);</div><div class=\"line\">        <span class=\"comment\">// 初始状态</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.state = &#123;</div><div class=\"line\">            <span class=\"attr\">result</span>: <span class=\"string\">'点击前'</span></div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.content&#125;</span>&gt;</span></span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.button&#125;</span> <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;</span></span></div><div class=\"line\">                    () =&gt; &#123;</div><div class=\"line\">                        this._Test.print()</div><div class=\"line\">                    &#125;</div><div class=\"line\">\t\t\t\t\t//() =&gt; &#123;</div><div class=\"line\">                    //    this.setState((prestate, props) =&gt; &#123;</div><div class=\"line\">                    //       console.warn(\"setState\")</div><div class=\"line\">                    //        return &#123;result: '点击了'&#125;</div><div class=\"line\">                    //    &#125;)</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;&gt;&#123;this.state.result&#125;<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">RefTest</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;</span></span></div><div class=\"line\">                    //指定<span class=\"attr\">ref</span>属性的回调函数</div><div class=\"line\">                    (<span class=\"attr\">e</span>) =&gt; &#123;</div><div class=\"line\">                        console.warn(\"ref的回调执行了！\")</div><div class=\"line\">                        //参数e则为当前RefTest组件的引用</div><div class=\"line\">                        this._Test = e;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;&gt;</div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">RefTest</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> styles = StyleSheet.create(&#123;</div><div class=\"line\">    <span class=\"attr\">content</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">flex</span>: <span class=\"number\">1</span>,</div><div class=\"line\">        <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'#00a056'</span>,</div><div class=\"line\">        <span class=\"attr\">flexDirection</span>: <span class=\"string\">'row'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">button</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">padding</span>: <span class=\"number\">30</span>,</div><div class=\"line\">        <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'#ffffff'</span>,</div><div class=\"line\">        <span class=\"attr\">fontSize</span>: <span class=\"number\">17</span>,</div><div class=\"line\">        <span class=\"attr\">alignSelf</span>: <span class=\"string\">'center'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">text</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">padding</span>: <span class=\"number\">30</span>,</div><div class=\"line\">        <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'#ffffff'</span>,</div><div class=\"line\">        <span class=\"attr\">fontSize</span>: <span class=\"number\">30</span>,</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RefTest</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 构造</span></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props);</div><div class=\"line\">        <span class=\"comment\">// 初始状态</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.state = &#123;</div><div class=\"line\">            <span class=\"attr\">data</span>: <span class=\"string\">'old'</span></div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    print() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(<span class=\"function\">(<span class=\"params\">preState, props</span>) =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">                <span class=\"attr\">data</span>: <span class=\"string\">'new'</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;)</div><div class=\"line\">        <span class=\"built_in\">console</span>.warn(<span class=\"string\">\"print方法执行了：\"</span> + <span class=\"keyword\">this</span>.state.data)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span></span></span></div><div class=\"line\">                <span class=\"attr\">alignSelf:</span> '<span class=\"attr\">center</span>',</div><div class=\"line\">                <span class=\"attr\">left:</span> <span class=\"attr\">10</span>,</div><div class=\"line\">                <span class=\"attr\">backgroundColor:</span> '#<span class=\"attr\">ffff00</span>',</div><div class=\"line\">            &#125;&#125;&gt;</div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.text&#125;</span>&gt;</span></div><div class=\"line\">                    当前数据：&#123;this.state.data&#125;</div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/ref1.gif\" width=\"400\"></p>\n<p>可以看到：</p>\n<ul>\n<li>父组件拥有的子组件，子组件有ref属性</li>\n<li>首次进入的时候，组件初次绑定 ref的回调会执行一次，父组件保存该引用</li>\n<li>点击后，使用组件引用，调用组件方法print</li>\n<li>若点击后，父组件setState，则子组件 卸载后，重新调用子组件Rend（）方法，这个过程，子组件的ref回调会被调用两次（卸载一次，挂载一次）</li>\n</ul>\n<p>需要知道的：</p>\n<ul>\n<li>在父组件在子组件指定ref的回调中保存引用对子组件的</li>\n<li>这个回调在父组件每次setState（父Render（）调用）</li>\n<li>组件的render方法被调用时，ref才会被调用，组件才会返回ref</li>\n<li>setState涉及先卸载，后挂载，ref回调执行两次</li>\n</ul>\n","excerpt":"<blockquote>\n<p>概述</p>\n</blockquote>\n<p>ref属性是一个特殊的属性，可以把它挂载到任何组件</p>\n<p>它可以是一个回调函数（也可以是一个字符串，基本废弃这种用法）</p>\n<p>这个回调函数在组件被挂载后立即被执行，应用到的组件作为参数传递</p>\n<p>回调函数可以立即使用组件，也可以将参数的组件引用保存起来，后续使用（调用组件方法或者获取组件参数）</p>","more":"<h1 id=\"ref属性指定回调方法\"><a href=\"#ref属性指定回调方法\" class=\"headerlink\" title=\"ref属性指定回调方法\"></a>ref属性指定回调方法</h1><h2 id=\"栗子：\"><a href=\"#栗子：\" class=\"headerlink\" title=\"栗子：\"></a>栗子：</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;</div><div class=\"line\">    View,</div><div class=\"line\">    Text,</div><div class=\"line\">    StyleSheet,</div><div class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 构造</span></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props);</div><div class=\"line\">        <span class=\"comment\">// 初始状态</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.state = &#123;</div><div class=\"line\">            <span class=\"attr\">result</span>: <span class=\"string\">'点击前'</span></div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.content&#125;</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.button&#125;</span> <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;</span></div><div class=\"line\">                    () =&gt;</span> &#123;</div><div class=\"line\">                        this._Test.print()</div><div class=\"line\">                    &#125;</div><div class=\"line\">\t\t\t\t\t//() =&gt; &#123;</div><div class=\"line\">                    //    this.setState((prestate, props) =&gt; &#123;</div><div class=\"line\">                    //       console.warn(\"setState\")</div><div class=\"line\">                    //        return &#123;result: '点击了'&#125;</div><div class=\"line\">                    //    &#125;)</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;&gt;&#123;this.state.result&#125;<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">RefTest</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;</span></div><div class=\"line\">                    //指定<span class=\"attr\">ref</span>属性的回调函数</div><div class=\"line\">                    (<span class=\"attr\">e</span>) =&gt;</span> &#123;</div><div class=\"line\">                        console.warn(\"ref的回调执行了！\")</div><div class=\"line\">                        //参数e则为当前RefTest组件的引用</div><div class=\"line\">                        this._Test = e;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;&gt;</div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">RefTest</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> styles = StyleSheet.create(&#123;</div><div class=\"line\">    <span class=\"attr\">content</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">flex</span>: <span class=\"number\">1</span>,</div><div class=\"line\">        <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'#00a056'</span>,</div><div class=\"line\">        <span class=\"attr\">flexDirection</span>: <span class=\"string\">'row'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">button</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">padding</span>: <span class=\"number\">30</span>,</div><div class=\"line\">        <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'#ffffff'</span>,</div><div class=\"line\">        <span class=\"attr\">fontSize</span>: <span class=\"number\">17</span>,</div><div class=\"line\">        <span class=\"attr\">alignSelf</span>: <span class=\"string\">'center'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">text</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">padding</span>: <span class=\"number\">30</span>,</div><div class=\"line\">        <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'#ffffff'</span>,</div><div class=\"line\">        <span class=\"attr\">fontSize</span>: <span class=\"number\">30</span>,</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RefTest</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 构造</span></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props);</div><div class=\"line\">        <span class=\"comment\">// 初始状态</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.state = &#123;</div><div class=\"line\">            <span class=\"attr\">data</span>: <span class=\"string\">'old'</span></div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    print() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(<span class=\"function\">(<span class=\"params\">preState, props</span>) =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">                <span class=\"attr\">data</span>: <span class=\"string\">'new'</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;)</div><div class=\"line\">        <span class=\"built_in\">console</span>.warn(<span class=\"string\">\"print方法执行了：\"</span> + <span class=\"keyword\">this</span>.state.data)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span></div><div class=\"line\">                <span class=\"attr\">alignSelf:</span> '<span class=\"attr\">center</span>',</div><div class=\"line\">                <span class=\"attr\">left:</span> <span class=\"attr\">10</span>,</div><div class=\"line\">                <span class=\"attr\">backgroundColor:</span> '#<span class=\"attr\">ffff00</span>',</div><div class=\"line\">            &#125;&#125;&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.text&#125;</span>&gt;</span></div><div class=\"line\">                    当前数据：&#123;this.state.data&#125;</div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></span></div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/ref1.gif\" width=\"400\"></p>\n<p>可以看到：</p>\n<ul>\n<li>父组件拥有的子组件，子组件有ref属性</li>\n<li>首次进入的时候，组件初次绑定 ref的回调会执行一次，父组件保存该引用</li>\n<li>点击后，使用组件引用，调用组件方法print</li>\n<li>若点击后，父组件setState，则子组件 卸载后，重新调用子组件Rend（）方法，这个过程，子组件的ref回调会被调用两次（卸载一次，挂载一次）</li>\n</ul>\n<p>需要知道的：</p>\n<ul>\n<li>在父组件在子组件指定ref的回调中保存引用对子组件的</li>\n<li>这个回调在父组件每次setState（父Render（）调用）</li>\n<li>组件的render方法被调用时，ref才会被调用，组件才会返回ref</li>\n<li>setState涉及先卸载，后挂载，ref回调执行两次</li>\n</ul>"},{"title":"3.X的gradle依赖implementation","date":"2018-01-24T07:47:00.000Z","password":null,"_content":"\n依赖方式有很多，我们这里只弄清楚implementation和Compile的区别，就好了\n\n<!--more-->\n\n### implementation和Compile的区别\n\n先看下图\n\n![依赖区别](https://upload-images.jianshu.io/upload_images/2139461-fdab3438f31ddfe5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/361)\n\n假设：\n\n**LibraryA—--—--implementation———LibraryC**\n\nApp Module 无法使用LibraryC\n\n**LibraryB—--—--compile———LibraryD**\n\nApp Module 可以使用LibraryD\n\n### 好处\n\n- 可以加快编译速度\n- 隐藏对外不必要的接口\n\n为什么能够加快编译速度呢\n\n这对于大型项目含有多个`Moudle`模块的， 以上图为例，比如我们改动 `LibraryC` 接口的相关代码，这时候编译只需要单独编译`LibraryA`模块就行， 如果使用的是`api`或者旧时代的`compile`，由于`App Moudle` 也可以访问到 `LibraryC`,所以 `App Moudle`部分也需要重新编译。\n\n### 其他几种方式\n\n**首先是2.x版本的依赖方式：**\n\n1. Compile\n2. Provided\n3. APK\n4. Test compile\n5. Debug compile\n6. Release compile\n\n**再来看看3.0的**\n\n1. Implementation\n2. API\n3. Compile only\n4. Runtime only\n5. Unit Test implementation\n6. Test implementation\n7. Debug implementation\n8. Release implementation\n\n**2.x版本依赖的可以看看下面的说明，括号里对应的是3.0版本的依赖方式。**\n\n#### compile（api）\n\n这种是我们最常用的方式，使用该方式依赖的库将会**参与编译和打包**。 \n当我们依赖一些第三方的库时，可能会遇到com.android.support冲突的问题，就是因为开发者使用的compile依赖的com.android.support包，而他所依赖的包与我们本地所依赖的com.android.support包版本不一样，所以就会报All com.android.support libraries must use the exact same version specification (mixing versions can lead to runtime crashes这个错误。\n\n[support包冲突](https://blog.csdn.net/yuzhiqiang_1993/article/details/78214812)\n\n#### provided（compileOnly）\n\n**只在编译时有效，不会参与打包** \n可以在自己的moudle中使用该方式依赖一些比如com.android.support，gson这些使用者常用的库，避免冲突。\n\n#### apk（runtimeOnly）\n\n只在生成apk的时候参与打包，编译时不会参与，很少用。\n\n#### testCompile（testImplementation）\n\ntestCompile 只在单元测试代码的编译以及最终打包测试apk时有效。\n\n#### debugCompile（debugImplementation）\n\ndebugCompile 只在debug模式的编译和最终的debug apk打包时有效\n\n#### releaseCompile（releaseImplementation）\n\nRelease compile 仅仅针对Release 模式的编译和最终的Release apk打包。\n\n**参考：**\n\n[Android Studio3.x新的依赖方式（implementation、api、compileOnly）](https://blog.csdn.net/yuzhiqiang_1993/article/details/78366985?locationNum=6&fps=1)\n\n\n\n### ","source":"_posts/3-x的gradle依赖implementation.md","raw":"---\ntitle: 3.X的gradle依赖implementation\ndate: 2018-01-24 15:47:00\ntags:\n- Android\ncategories: Android\npassword:\n---\n\n依赖方式有很多，我们这里只弄清楚implementation和Compile的区别，就好了\n\n<!--more-->\n\n### implementation和Compile的区别\n\n先看下图\n\n![依赖区别](https://upload-images.jianshu.io/upload_images/2139461-fdab3438f31ddfe5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/361)\n\n假设：\n\n**LibraryA—--—--implementation———LibraryC**\n\nApp Module 无法使用LibraryC\n\n**LibraryB—--—--compile———LibraryD**\n\nApp Module 可以使用LibraryD\n\n### 好处\n\n- 可以加快编译速度\n- 隐藏对外不必要的接口\n\n为什么能够加快编译速度呢\n\n这对于大型项目含有多个`Moudle`模块的， 以上图为例，比如我们改动 `LibraryC` 接口的相关代码，这时候编译只需要单独编译`LibraryA`模块就行， 如果使用的是`api`或者旧时代的`compile`，由于`App Moudle` 也可以访问到 `LibraryC`,所以 `App Moudle`部分也需要重新编译。\n\n### 其他几种方式\n\n**首先是2.x版本的依赖方式：**\n\n1. Compile\n2. Provided\n3. APK\n4. Test compile\n5. Debug compile\n6. Release compile\n\n**再来看看3.0的**\n\n1. Implementation\n2. API\n3. Compile only\n4. Runtime only\n5. Unit Test implementation\n6. Test implementation\n7. Debug implementation\n8. Release implementation\n\n**2.x版本依赖的可以看看下面的说明，括号里对应的是3.0版本的依赖方式。**\n\n#### compile（api）\n\n这种是我们最常用的方式，使用该方式依赖的库将会**参与编译和打包**。 \n当我们依赖一些第三方的库时，可能会遇到com.android.support冲突的问题，就是因为开发者使用的compile依赖的com.android.support包，而他所依赖的包与我们本地所依赖的com.android.support包版本不一样，所以就会报All com.android.support libraries must use the exact same version specification (mixing versions can lead to runtime crashes这个错误。\n\n[support包冲突](https://blog.csdn.net/yuzhiqiang_1993/article/details/78214812)\n\n#### provided（compileOnly）\n\n**只在编译时有效，不会参与打包** \n可以在自己的moudle中使用该方式依赖一些比如com.android.support，gson这些使用者常用的库，避免冲突。\n\n#### apk（runtimeOnly）\n\n只在生成apk的时候参与打包，编译时不会参与，很少用。\n\n#### testCompile（testImplementation）\n\ntestCompile 只在单元测试代码的编译以及最终打包测试apk时有效。\n\n#### debugCompile（debugImplementation）\n\ndebugCompile 只在debug模式的编译和最终的debug apk打包时有效\n\n#### releaseCompile（releaseImplementation）\n\nRelease compile 仅仅针对Release 模式的编译和最终的Release apk打包。\n\n**参考：**\n\n[Android Studio3.x新的依赖方式（implementation、api、compileOnly）](https://blog.csdn.net/yuzhiqiang_1993/article/details/78366985?locationNum=6&fps=1)\n\n\n\n### ","slug":"3-x的gradle依赖implementation","published":1,"updated":"2018-07-24T08:16:48.712Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6mo000y1kyg4qctp6sc","content":"<p>依赖方式有很多，我们这里只弄清楚implementation和Compile的区别，就好了</p>\n<a id=\"more\"></a>\n<h3 id=\"implementation和Compile的区别\"><a href=\"#implementation和Compile的区别\" class=\"headerlink\" title=\"implementation和Compile的区别\"></a>implementation和Compile的区别</h3><p>先看下图</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2139461-fdab3438f31ddfe5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/361\" alt=\"依赖区别\"></p>\n<p>假设：</p>\n<p><strong>LibraryA—–—–implementation———LibraryC</strong></p>\n<p>App Module 无法使用LibraryC</p>\n<p><strong>LibraryB—–—–compile———LibraryD</strong></p>\n<p>App Module 可以使用LibraryD</p>\n<h3 id=\"好处\"><a href=\"#好处\" class=\"headerlink\" title=\"好处\"></a>好处</h3><ul>\n<li>可以加快编译速度</li>\n<li>隐藏对外不必要的接口</li>\n</ul>\n<p>为什么能够加快编译速度呢</p>\n<p>这对于大型项目含有多个<code>Moudle</code>模块的， 以上图为例，比如我们改动 <code>LibraryC</code> 接口的相关代码，这时候编译只需要单独编译<code>LibraryA</code>模块就行， 如果使用的是<code>api</code>或者旧时代的<code>compile</code>，由于<code>App Moudle</code> 也可以访问到 <code>LibraryC</code>,所以 <code>App Moudle</code>部分也需要重新编译。</p>\n<h3 id=\"其他几种方式\"><a href=\"#其他几种方式\" class=\"headerlink\" title=\"其他几种方式\"></a>其他几种方式</h3><p><strong>首先是2.x版本的依赖方式：</strong></p>\n<ol>\n<li>Compile</li>\n<li>Provided</li>\n<li>APK</li>\n<li>Test compile</li>\n<li>Debug compile</li>\n<li>Release compile</li>\n</ol>\n<p><strong>再来看看3.0的</strong></p>\n<ol>\n<li>Implementation</li>\n<li>API</li>\n<li>Compile only</li>\n<li>Runtime only</li>\n<li>Unit Test implementation</li>\n<li>Test implementation</li>\n<li>Debug implementation</li>\n<li>Release implementation</li>\n</ol>\n<p><strong>2.x版本依赖的可以看看下面的说明，括号里对应的是3.0版本的依赖方式。</strong></p>\n<h4 id=\"compile（api）\"><a href=\"#compile（api）\" class=\"headerlink\" title=\"compile（api）\"></a>compile（api）</h4><p>这种是我们最常用的方式，使用该方式依赖的库将会<strong>参与编译和打包</strong>。<br>当我们依赖一些第三方的库时，可能会遇到com.android.support冲突的问题，就是因为开发者使用的compile依赖的com.android.support包，而他所依赖的包与我们本地所依赖的com.android.support包版本不一样，所以就会报All com.android.support libraries must use the exact same version specification (mixing versions can lead to runtime crashes这个错误。</p>\n<p><a href=\"https://blog.csdn.net/yuzhiqiang_1993/article/details/78214812\" target=\"_blank\" rel=\"external\">support包冲突</a></p>\n<h4 id=\"provided（compileOnly）\"><a href=\"#provided（compileOnly）\" class=\"headerlink\" title=\"provided（compileOnly）\"></a>provided（compileOnly）</h4><p><strong>只在编译时有效，不会参与打包</strong><br>可以在自己的moudle中使用该方式依赖一些比如com.android.support，gson这些使用者常用的库，避免冲突。</p>\n<h4 id=\"apk（runtimeOnly）\"><a href=\"#apk（runtimeOnly）\" class=\"headerlink\" title=\"apk（runtimeOnly）\"></a>apk（runtimeOnly）</h4><p>只在生成apk的时候参与打包，编译时不会参与，很少用。</p>\n<h4 id=\"testCompile（testImplementation）\"><a href=\"#testCompile（testImplementation）\" class=\"headerlink\" title=\"testCompile（testImplementation）\"></a>testCompile（testImplementation）</h4><p>testCompile 只在单元测试代码的编译以及最终打包测试apk时有效。</p>\n<h4 id=\"debugCompile（debugImplementation）\"><a href=\"#debugCompile（debugImplementation）\" class=\"headerlink\" title=\"debugCompile（debugImplementation）\"></a>debugCompile（debugImplementation）</h4><p>debugCompile 只在debug模式的编译和最终的debug apk打包时有效</p>\n<h4 id=\"releaseCompile（releaseImplementation）\"><a href=\"#releaseCompile（releaseImplementation）\" class=\"headerlink\" title=\"releaseCompile（releaseImplementation）\"></a>releaseCompile（releaseImplementation）</h4><p>Release compile 仅仅针对Release 模式的编译和最终的Release apk打包。</p>\n<p><strong>参考：</strong></p>\n<p><a href=\"https://blog.csdn.net/yuzhiqiang_1993/article/details/78366985?locationNum=6&amp;fps=1\" target=\"_blank\" rel=\"external\">Android Studio3.x新的依赖方式（implementation、api、compileOnly）</a></p>\n<p>### </p>\n","excerpt":"<p>依赖方式有很多，我们这里只弄清楚implementation和Compile的区别，就好了</p>","more":"<h3 id=\"implementation和Compile的区别\"><a href=\"#implementation和Compile的区别\" class=\"headerlink\" title=\"implementation和Compile的区别\"></a>implementation和Compile的区别</h3><p>先看下图</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2139461-fdab3438f31ddfe5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/361\" alt=\"依赖区别\"></p>\n<p>假设：</p>\n<p><strong>LibraryA—–—–implementation———LibraryC</strong></p>\n<p>App Module 无法使用LibraryC</p>\n<p><strong>LibraryB—–—–compile———LibraryD</strong></p>\n<p>App Module 可以使用LibraryD</p>\n<h3 id=\"好处\"><a href=\"#好处\" class=\"headerlink\" title=\"好处\"></a>好处</h3><ul>\n<li>可以加快编译速度</li>\n<li>隐藏对外不必要的接口</li>\n</ul>\n<p>为什么能够加快编译速度呢</p>\n<p>这对于大型项目含有多个<code>Moudle</code>模块的， 以上图为例，比如我们改动 <code>LibraryC</code> 接口的相关代码，这时候编译只需要单独编译<code>LibraryA</code>模块就行， 如果使用的是<code>api</code>或者旧时代的<code>compile</code>，由于<code>App Moudle</code> 也可以访问到 <code>LibraryC</code>,所以 <code>App Moudle</code>部分也需要重新编译。</p>\n<h3 id=\"其他几种方式\"><a href=\"#其他几种方式\" class=\"headerlink\" title=\"其他几种方式\"></a>其他几种方式</h3><p><strong>首先是2.x版本的依赖方式：</strong></p>\n<ol>\n<li>Compile</li>\n<li>Provided</li>\n<li>APK</li>\n<li>Test compile</li>\n<li>Debug compile</li>\n<li>Release compile</li>\n</ol>\n<p><strong>再来看看3.0的</strong></p>\n<ol>\n<li>Implementation</li>\n<li>API</li>\n<li>Compile only</li>\n<li>Runtime only</li>\n<li>Unit Test implementation</li>\n<li>Test implementation</li>\n<li>Debug implementation</li>\n<li>Release implementation</li>\n</ol>\n<p><strong>2.x版本依赖的可以看看下面的说明，括号里对应的是3.0版本的依赖方式。</strong></p>\n<h4 id=\"compile（api）\"><a href=\"#compile（api）\" class=\"headerlink\" title=\"compile（api）\"></a>compile（api）</h4><p>这种是我们最常用的方式，使用该方式依赖的库将会<strong>参与编译和打包</strong>。<br>当我们依赖一些第三方的库时，可能会遇到com.android.support冲突的问题，就是因为开发者使用的compile依赖的com.android.support包，而他所依赖的包与我们本地所依赖的com.android.support包版本不一样，所以就会报All com.android.support libraries must use the exact same version specification (mixing versions can lead to runtime crashes这个错误。</p>\n<p><a href=\"https://blog.csdn.net/yuzhiqiang_1993/article/details/78214812\">support包冲突</a></p>\n<h4 id=\"provided（compileOnly）\"><a href=\"#provided（compileOnly）\" class=\"headerlink\" title=\"provided（compileOnly）\"></a>provided（compileOnly）</h4><p><strong>只在编译时有效，不会参与打包</strong><br>可以在自己的moudle中使用该方式依赖一些比如com.android.support，gson这些使用者常用的库，避免冲突。</p>\n<h4 id=\"apk（runtimeOnly）\"><a href=\"#apk（runtimeOnly）\" class=\"headerlink\" title=\"apk（runtimeOnly）\"></a>apk（runtimeOnly）</h4><p>只在生成apk的时候参与打包，编译时不会参与，很少用。</p>\n<h4 id=\"testCompile（testImplementation）\"><a href=\"#testCompile（testImplementation）\" class=\"headerlink\" title=\"testCompile（testImplementation）\"></a>testCompile（testImplementation）</h4><p>testCompile 只在单元测试代码的编译以及最终打包测试apk时有效。</p>\n<h4 id=\"debugCompile（debugImplementation）\"><a href=\"#debugCompile（debugImplementation）\" class=\"headerlink\" title=\"debugCompile（debugImplementation）\"></a>debugCompile（debugImplementation）</h4><p>debugCompile 只在debug模式的编译和最终的debug apk打包时有效</p>\n<h4 id=\"releaseCompile（releaseImplementation）\"><a href=\"#releaseCompile（releaseImplementation）\" class=\"headerlink\" title=\"releaseCompile（releaseImplementation）\"></a>releaseCompile（releaseImplementation）</h4><p>Release compile 仅仅针对Release 模式的编译和最终的Release apk打包。</p>\n<p><strong>参考：</strong></p>\n<p><a href=\"https://blog.csdn.net/yuzhiqiang_1993/article/details/78366985?locationNum=6&amp;fps=1\">Android Studio3.x新的依赖方式（implementation、api、compileOnly）</a></p>\n<p>### </p>"},{"title":"ReactNative碎片整理之样式","date":"2018-07-31T07:38:55.000Z","password":null,"_content":"\n本文整理React Native中的布局方式，FlexBox弹性布局的使用\n\n<!--more-->\n\n# 宽高\n\nRN中，尺寸是没有单位的，它已经代表了设备独立像素\n\n```\n<View style={ {width:100,height:100,margin:40,backgroundColor:'gray'}}>\n        <Text style={ {fontSize:16,margin:20}}>尺寸</Text>\n</View>\n```\n\n运行在Android上时，View的长和宽被解释成：100dp 100dp单位是dp，字体被解释成16sp 单位是sp，运行在iOS上时尺寸单位被解释称了pt，这些单位确保了布局在任何不同dpi的手机屏幕上显示不会发生改变；\n\n# RN和Web css上的FlexBox的区别\n\n- flexDirection: React Native中默认为`flexDirection:'column'`，在Web CSS中默认为`flex-direction:'row'`\n- alignItems: React Native中默认为`alignItems:'stretch'`，在Web CSS中默认`align-items:'flex-start'`\n- flex: 相比Web CSS的flex接受多参数，如:`flex: 2 2 10%;`，但在 React Native中flex只接受一个参数\n- 不支持属性：align-content，flex-basis，order，flex-basis，flex-flow，flex-grow，flex-shrink\n\n以上是React Native中的FlexBox 和Web CSSS上FlexBox的不同之处，记住这几点，你可以像在Web CSSS上使用FlexBox一样，在React Native中使用FlexBox。\n\n# Layout Props\n\n## 父视图属性（容器属性）：\n\n- flexDirection enum(‘**row**’, ‘**column**’,’**row-reverse**’,’**column-reverse**’)\n- flexWrap enum(‘**wrap**’, ‘**nowrap**’)\n- justifyContent enum(‘**flex-start**’, ‘**flex-end**’, ‘**center**’, ‘**space-between**’, ‘**space-around**’)\n- alignItems enum(‘**flex-start**’, ‘**flex-end’**, ‘**center**’, ‘**stretch**’)\n\n学习父容器属性之前，先学习下基本概念\n\n<img src=\"https://mdn.mozillademos.org/files/12998/flexbox.png\" width='400'>\n\n和Web的Css不同的是，RN的Flexbox默认的主轴是 竖直的（column）\n\n### flexDirection\n\n`flexDirection enum('row', 'column','row-reverse','column-reverse')`\n`flexDirection`属性定义了父视图中的子元素沿横轴或侧轴方片的排列方式。\n\n- row: 从左向右依次排列\n- row-reverse: 从右向左依次排列\n- column(default): 默认的排列方式，从上向下排列\n- column-reverse: 从下向上排列\n\n<img src=\"https://raw.githubusercontent.com/crazycodeboy/RNStudyNotes/develop/React%20Native%E5%B8%83%E5%B1%80/React%20Native%E5%B8%83%E5%B1%80%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/images/flexDirection.jpg\" width='400'/>\n\n### flexWrap\n\n`flexWrap enum('wrap', 'nowrap')`\n`flexWrap`属性定义了子元素在父视图内是否允许多行排列，默认为nowrap。\n\n- nowrap flex的元素只排列在一行上，可能导致溢出。\n- wrap flex的元素在一行排列不下时，就进行多行排列。\n\n<img src=\"https://raw.githubusercontent.com/crazycodeboy/RNStudyNotes/develop/React%20Native%E5%B8%83%E5%B1%80/React%20Native%E5%B8%83%E5%B1%80%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/images/flexWrap.jpg\" width='400'/>\n\n### justifyContent\n\n`justifyContent enum('flex-start', 'flex-end', 'center', 'space-between', 'space-around') `\n`justifyContent`属性定义了浏览器如何分配顺着父容器主轴的弹性（flex）元素之间及其周围的空间，默认为flex-start。\n\n- flex-start(default) 从行首开始排列。每行第一个弹性元素与行首对齐，同时所有后续的弹性元素与前一个对齐。\n- flex-end 从行尾开始排列。每行最后一个弹性元素与行尾对齐，其他元素将与后一个对齐。\n- center 伸缩元素向每行中点排列。每行第一个元素到行首的距离将与每行最后一个元素到行尾的距离相同。\n- space-between 在每行上均匀分配弹性元素。相邻元素间距离相同。每行第一个元素与行首对齐，每行最后一个元素与行尾对齐。\n- space-around 在每行上均匀分配弹性元素。相邻元素间距离相同。每行第一个元素到行首的距离和每行最后一个元素到行尾的距离将会是相邻元素之间距离的一半。\n\n<img src=\"https://raw.githubusercontent.com/crazycodeboy/RNStudyNotes/develop/React%20Native%E5%B8%83%E5%B1%80/React%20Native%E5%B8%83%E5%B1%80%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/images/justifyContent.jpg\" width='400'/>\n\n\n\n### alignItems\n\n`alignItems enum('flex-start', 'flex-end', 'center', 'stretch')`\n`alignItems`属性以与justify-content相同的方式在侧轴方向上将当前行上的弹性元素对齐，默认为stretch\n\n<img src=\"https://raw.githubusercontent.com/crazycodeboy/RNStudyNotes/develop/React%20Native%E5%B8%83%E5%B1%80/React%20Native%E5%B8%83%E5%B1%80%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/images/alignItems.jpg\" width='400'/>\n\n## 子视图属性（规范自己的）\n\n### alignSelf\n\n`alignSelf enum('auto', 'flex-start', 'flex-end', 'center', 'stretch')`\n`alignSelf`属性以属性定义了flex容器内被选中项目的对齐方式。注意：alignSelf 属性可重写灵活容器的 alignItems 属性。\n\n- **auto(default) 元素继承了它的父容器的 align-items 属性。如果没有父容器则为 “stretch”。**\n- stretch\t元素被拉伸以适应容器。\n- center\t元素位于容器的中心。\n- flex-start\t元素位于容器的开头。\n- flex-end\t元素位于容器的结尾。\n\n<img src=\"https://raw.githubusercontent.com/crazycodeboy/RNStudyNotes/develop/React%20Native%E5%B8%83%E5%B1%80/React%20Native%E5%B8%83%E5%B1%80%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/images/alignSelf.jpg\" width='400'/>\n\n### flex\n\n`flex number`\n`flex` 属性定义了一个可伸缩元素的能力，默认为0。\n\n<img src=\"https://raw.githubusercontent.com/crazycodeboy/RNStudyNotes/develop/React%20Native%E5%B8%83%E5%B1%80/React%20Native%E5%B8%83%E5%B1%80%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/images/flex.jpg\" width='400'/>\n\n\n\n# 其他属性\n\n以下属性是React Native所支持的除Flex以外的其它布局属性。\n\n## 视图边框\n\n## 尺寸\n\n## 内部边距\n\n## 外边距\n\n## 边缘\n\n## 定位(position)\n\nposition enum(‘absolute’, ‘relative’)属性设置元素的定位方式，为将要定位的元素定义定位规则。\n\n- absolute：生成绝对定位的元素，元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。(相对于父布局的位置)（注意：忽略父组件的padding，默认直接在父组件的左上角，除非设置当前组件的left，top，right，bottom,或者margin之类的）\n- relative：生成相对定位的元素，相对于其正常位置进行定位。因此，”left:20” 会向元素的 LEFT 位置添加 20 像素。（相对于自身本应该在的位置）\n\n**例子1:**\n\n```javascript\nrender() {\n        return (\n            <View style={{\n                flex: 1,\n                justifyContent: 'center',\n            }}>\n                <TouchableOpacity onPress={this.loadData}>\n                    <View style={styles.container}>\n                        <Image style={styles.header}/>\n                        <Text\n                            style={styles.name}>absolute</Text>\n                    </View>\n                </TouchableOpacity>\n            </View>\n        );\n    }    \nconst styles = StyleSheet.create({\n    container: {\n        flexDirection: 'row',\n        paddingLeft: 15,\n        paddingRight: 15,\n        paddingTop: 10,\n        paddingBottom: 10,\n        backgroundColor: '#999999'\n    },\n    header: {\n        width: 100,\n        height: 100,\n        backgroundColor: '#00a056'\n    },\n    name: {\n        position: 'relative',\n        // left: 15,\n        alignSelf: 'flex-start',\n        fontSize: 13,\n        backgroundColor: '#ffff00',\n        color: '#999999'\n    }\n});\n```\n\n<img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/position.png\" width=\"400\"/>\n\n# 参考：\n\n[React Native布局详细指南](http://www.devio.org/2016/08/01/Reac-Native%E5%B8%83%E5%B1%80%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/)\n\n\n\n","source":"_posts/ReactNative碎片整理之样式.md","raw":"---\ntitle: ReactNative碎片整理之样式\ndate: 2018-07-31 15:38:55\ntags:\n- RN\ncategories: RN\npassword:\n---\n\n本文整理React Native中的布局方式，FlexBox弹性布局的使用\n\n<!--more-->\n\n# 宽高\n\nRN中，尺寸是没有单位的，它已经代表了设备独立像素\n\n```\n<View style={ {width:100,height:100,margin:40,backgroundColor:'gray'}}>\n        <Text style={ {fontSize:16,margin:20}}>尺寸</Text>\n</View>\n```\n\n运行在Android上时，View的长和宽被解释成：100dp 100dp单位是dp，字体被解释成16sp 单位是sp，运行在iOS上时尺寸单位被解释称了pt，这些单位确保了布局在任何不同dpi的手机屏幕上显示不会发生改变；\n\n# RN和Web css上的FlexBox的区别\n\n- flexDirection: React Native中默认为`flexDirection:'column'`，在Web CSS中默认为`flex-direction:'row'`\n- alignItems: React Native中默认为`alignItems:'stretch'`，在Web CSS中默认`align-items:'flex-start'`\n- flex: 相比Web CSS的flex接受多参数，如:`flex: 2 2 10%;`，但在 React Native中flex只接受一个参数\n- 不支持属性：align-content，flex-basis，order，flex-basis，flex-flow，flex-grow，flex-shrink\n\n以上是React Native中的FlexBox 和Web CSSS上FlexBox的不同之处，记住这几点，你可以像在Web CSSS上使用FlexBox一样，在React Native中使用FlexBox。\n\n# Layout Props\n\n## 父视图属性（容器属性）：\n\n- flexDirection enum(‘**row**’, ‘**column**’,’**row-reverse**’,’**column-reverse**’)\n- flexWrap enum(‘**wrap**’, ‘**nowrap**’)\n- justifyContent enum(‘**flex-start**’, ‘**flex-end**’, ‘**center**’, ‘**space-between**’, ‘**space-around**’)\n- alignItems enum(‘**flex-start**’, ‘**flex-end’**, ‘**center**’, ‘**stretch**’)\n\n学习父容器属性之前，先学习下基本概念\n\n<img src=\"https://mdn.mozillademos.org/files/12998/flexbox.png\" width='400'>\n\n和Web的Css不同的是，RN的Flexbox默认的主轴是 竖直的（column）\n\n### flexDirection\n\n`flexDirection enum('row', 'column','row-reverse','column-reverse')`\n`flexDirection`属性定义了父视图中的子元素沿横轴或侧轴方片的排列方式。\n\n- row: 从左向右依次排列\n- row-reverse: 从右向左依次排列\n- column(default): 默认的排列方式，从上向下排列\n- column-reverse: 从下向上排列\n\n<img src=\"https://raw.githubusercontent.com/crazycodeboy/RNStudyNotes/develop/React%20Native%E5%B8%83%E5%B1%80/React%20Native%E5%B8%83%E5%B1%80%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/images/flexDirection.jpg\" width='400'/>\n\n### flexWrap\n\n`flexWrap enum('wrap', 'nowrap')`\n`flexWrap`属性定义了子元素在父视图内是否允许多行排列，默认为nowrap。\n\n- nowrap flex的元素只排列在一行上，可能导致溢出。\n- wrap flex的元素在一行排列不下时，就进行多行排列。\n\n<img src=\"https://raw.githubusercontent.com/crazycodeboy/RNStudyNotes/develop/React%20Native%E5%B8%83%E5%B1%80/React%20Native%E5%B8%83%E5%B1%80%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/images/flexWrap.jpg\" width='400'/>\n\n### justifyContent\n\n`justifyContent enum('flex-start', 'flex-end', 'center', 'space-between', 'space-around') `\n`justifyContent`属性定义了浏览器如何分配顺着父容器主轴的弹性（flex）元素之间及其周围的空间，默认为flex-start。\n\n- flex-start(default) 从行首开始排列。每行第一个弹性元素与行首对齐，同时所有后续的弹性元素与前一个对齐。\n- flex-end 从行尾开始排列。每行最后一个弹性元素与行尾对齐，其他元素将与后一个对齐。\n- center 伸缩元素向每行中点排列。每行第一个元素到行首的距离将与每行最后一个元素到行尾的距离相同。\n- space-between 在每行上均匀分配弹性元素。相邻元素间距离相同。每行第一个元素与行首对齐，每行最后一个元素与行尾对齐。\n- space-around 在每行上均匀分配弹性元素。相邻元素间距离相同。每行第一个元素到行首的距离和每行最后一个元素到行尾的距离将会是相邻元素之间距离的一半。\n\n<img src=\"https://raw.githubusercontent.com/crazycodeboy/RNStudyNotes/develop/React%20Native%E5%B8%83%E5%B1%80/React%20Native%E5%B8%83%E5%B1%80%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/images/justifyContent.jpg\" width='400'/>\n\n\n\n### alignItems\n\n`alignItems enum('flex-start', 'flex-end', 'center', 'stretch')`\n`alignItems`属性以与justify-content相同的方式在侧轴方向上将当前行上的弹性元素对齐，默认为stretch\n\n<img src=\"https://raw.githubusercontent.com/crazycodeboy/RNStudyNotes/develop/React%20Native%E5%B8%83%E5%B1%80/React%20Native%E5%B8%83%E5%B1%80%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/images/alignItems.jpg\" width='400'/>\n\n## 子视图属性（规范自己的）\n\n### alignSelf\n\n`alignSelf enum('auto', 'flex-start', 'flex-end', 'center', 'stretch')`\n`alignSelf`属性以属性定义了flex容器内被选中项目的对齐方式。注意：alignSelf 属性可重写灵活容器的 alignItems 属性。\n\n- **auto(default) 元素继承了它的父容器的 align-items 属性。如果没有父容器则为 “stretch”。**\n- stretch\t元素被拉伸以适应容器。\n- center\t元素位于容器的中心。\n- flex-start\t元素位于容器的开头。\n- flex-end\t元素位于容器的结尾。\n\n<img src=\"https://raw.githubusercontent.com/crazycodeboy/RNStudyNotes/develop/React%20Native%E5%B8%83%E5%B1%80/React%20Native%E5%B8%83%E5%B1%80%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/images/alignSelf.jpg\" width='400'/>\n\n### flex\n\n`flex number`\n`flex` 属性定义了一个可伸缩元素的能力，默认为0。\n\n<img src=\"https://raw.githubusercontent.com/crazycodeboy/RNStudyNotes/develop/React%20Native%E5%B8%83%E5%B1%80/React%20Native%E5%B8%83%E5%B1%80%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/images/flex.jpg\" width='400'/>\n\n\n\n# 其他属性\n\n以下属性是React Native所支持的除Flex以外的其它布局属性。\n\n## 视图边框\n\n## 尺寸\n\n## 内部边距\n\n## 外边距\n\n## 边缘\n\n## 定位(position)\n\nposition enum(‘absolute’, ‘relative’)属性设置元素的定位方式，为将要定位的元素定义定位规则。\n\n- absolute：生成绝对定位的元素，元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。(相对于父布局的位置)（注意：忽略父组件的padding，默认直接在父组件的左上角，除非设置当前组件的left，top，right，bottom,或者margin之类的）\n- relative：生成相对定位的元素，相对于其正常位置进行定位。因此，”left:20” 会向元素的 LEFT 位置添加 20 像素。（相对于自身本应该在的位置）\n\n**例子1:**\n\n```javascript\nrender() {\n        return (\n            <View style={{\n                flex: 1,\n                justifyContent: 'center',\n            }}>\n                <TouchableOpacity onPress={this.loadData}>\n                    <View style={styles.container}>\n                        <Image style={styles.header}/>\n                        <Text\n                            style={styles.name}>absolute</Text>\n                    </View>\n                </TouchableOpacity>\n            </View>\n        );\n    }    \nconst styles = StyleSheet.create({\n    container: {\n        flexDirection: 'row',\n        paddingLeft: 15,\n        paddingRight: 15,\n        paddingTop: 10,\n        paddingBottom: 10,\n        backgroundColor: '#999999'\n    },\n    header: {\n        width: 100,\n        height: 100,\n        backgroundColor: '#00a056'\n    },\n    name: {\n        position: 'relative',\n        // left: 15,\n        alignSelf: 'flex-start',\n        fontSize: 13,\n        backgroundColor: '#ffff00',\n        color: '#999999'\n    }\n});\n```\n\n<img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/position.png\" width=\"400\"/>\n\n# 参考：\n\n[React Native布局详细指南](http://www.devio.org/2016/08/01/Reac-Native%E5%B8%83%E5%B1%80%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/)\n\n\n\n","slug":"ReactNative碎片整理之样式","published":1,"updated":"2018-08-01T02:24:11.909Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6mp00111kyg28qhupw0","content":"<p>本文整理React Native中的布局方式，FlexBox弹性布局的使用</p>\n<a id=\"more\"></a>\n<h1 id=\"宽高\"><a href=\"#宽高\" class=\"headerlink\" title=\"宽高\"></a>宽高</h1><p>RN中，尺寸是没有单位的，它已经代表了设备独立像素</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;</span> &#123;<span class=\"attr\">width:100</span>,<span class=\"attr\">height:100</span>,<span class=\"attr\">margin:40</span>,<span class=\"attr\">backgroundColor:</span>'<span class=\"attr\">gray</span>'&#125;&#125;&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;</span> &#123;<span class=\"attr\">fontSize:16</span>,<span class=\"attr\">margin:20</span>&#125;&#125;&gt;</span>尺寸<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>运行在Android上时，View的长和宽被解释成：100dp 100dp单位是dp，字体被解释成16sp 单位是sp，运行在iOS上时尺寸单位被解释称了pt，这些单位确保了布局在任何不同dpi的手机屏幕上显示不会发生改变；</p>\n<h1 id=\"RN和Web-css上的FlexBox的区别\"><a href=\"#RN和Web-css上的FlexBox的区别\" class=\"headerlink\" title=\"RN和Web css上的FlexBox的区别\"></a>RN和Web css上的FlexBox的区别</h1><ul>\n<li>flexDirection: React Native中默认为<code>flexDirection:&#39;column&#39;</code>，在Web CSS中默认为<code>flex-direction:&#39;row&#39;</code></li>\n<li>alignItems: React Native中默认为<code>alignItems:&#39;stretch&#39;</code>，在Web CSS中默认<code>align-items:&#39;flex-start&#39;</code></li>\n<li>flex: 相比Web CSS的flex接受多参数，如:<code>flex: 2 2 10%;</code>，但在 React Native中flex只接受一个参数</li>\n<li>不支持属性：align-content，flex-basis，order，flex-basis，flex-flow，flex-grow，flex-shrink</li>\n</ul>\n<p>以上是React Native中的FlexBox 和Web CSSS上FlexBox的不同之处，记住这几点，你可以像在Web CSSS上使用FlexBox一样，在React Native中使用FlexBox。</p>\n<h1 id=\"Layout-Props\"><a href=\"#Layout-Props\" class=\"headerlink\" title=\"Layout Props\"></a>Layout Props</h1><h2 id=\"父视图属性（容器属性）：\"><a href=\"#父视图属性（容器属性）：\" class=\"headerlink\" title=\"父视图属性（容器属性）：\"></a>父视图属性（容器属性）：</h2><ul>\n<li>flexDirection enum(‘<strong>row</strong>’, ‘<strong>column</strong>’,’<strong>row-reverse</strong>’,’<strong>column-reverse</strong>’)</li>\n<li>flexWrap enum(‘<strong>wrap</strong>’, ‘<strong>nowrap</strong>’)</li>\n<li>justifyContent enum(‘<strong>flex-start</strong>’, ‘<strong>flex-end</strong>’, ‘<strong>center</strong>’, ‘<strong>space-between</strong>’, ‘<strong>space-around</strong>’)</li>\n<li>alignItems enum(‘<strong>flex-start</strong>’, ‘<strong>flex-end’</strong>, ‘<strong>center</strong>’, ‘<strong>stretch</strong>’)</li>\n</ul>\n<p>学习父容器属性之前，先学习下基本概念</p>\n<p><img src=\"https://mdn.mozillademos.org/files/12998/flexbox.png\" width=\"400\"></p>\n<p>和Web的Css不同的是，RN的Flexbox默认的主轴是 竖直的（column）</p>\n<h3 id=\"flexDirection\"><a href=\"#flexDirection\" class=\"headerlink\" title=\"flexDirection\"></a>flexDirection</h3><p><code>flexDirection enum(&#39;row&#39;, &#39;column&#39;,&#39;row-reverse&#39;,&#39;column-reverse&#39;)</code><br><code>flexDirection</code>属性定义了父视图中的子元素沿横轴或侧轴方片的排列方式。</p>\n<ul>\n<li>row: 从左向右依次排列</li>\n<li>row-reverse: 从右向左依次排列</li>\n<li>column(default): 默认的排列方式，从上向下排列</li>\n<li>column-reverse: 从下向上排列</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/crazycodeboy/RNStudyNotes/develop/React%20Native%E5%B8%83%E5%B1%80/React%20Native%E5%B8%83%E5%B1%80%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/images/flexDirection.jpg\" width=\"400\"></p>\n<h3 id=\"flexWrap\"><a href=\"#flexWrap\" class=\"headerlink\" title=\"flexWrap\"></a>flexWrap</h3><p><code>flexWrap enum(&#39;wrap&#39;, &#39;nowrap&#39;)</code><br><code>flexWrap</code>属性定义了子元素在父视图内是否允许多行排列，默认为nowrap。</p>\n<ul>\n<li>nowrap flex的元素只排列在一行上，可能导致溢出。</li>\n<li>wrap flex的元素在一行排列不下时，就进行多行排列。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/crazycodeboy/RNStudyNotes/develop/React%20Native%E5%B8%83%E5%B1%80/React%20Native%E5%B8%83%E5%B1%80%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/images/flexWrap.jpg\" width=\"400\"></p>\n<h3 id=\"justifyContent\"><a href=\"#justifyContent\" class=\"headerlink\" title=\"justifyContent\"></a>justifyContent</h3><p><code>justifyContent enum(&#39;flex-start&#39;, &#39;flex-end&#39;, &#39;center&#39;, &#39;space-between&#39;, &#39;space-around&#39;)</code><br><code>justifyContent</code>属性定义了浏览器如何分配顺着父容器主轴的弹性（flex）元素之间及其周围的空间，默认为flex-start。</p>\n<ul>\n<li>flex-start(default) 从行首开始排列。每行第一个弹性元素与行首对齐，同时所有后续的弹性元素与前一个对齐。</li>\n<li>flex-end 从行尾开始排列。每行最后一个弹性元素与行尾对齐，其他元素将与后一个对齐。</li>\n<li>center 伸缩元素向每行中点排列。每行第一个元素到行首的距离将与每行最后一个元素到行尾的距离相同。</li>\n<li>space-between 在每行上均匀分配弹性元素。相邻元素间距离相同。每行第一个元素与行首对齐，每行最后一个元素与行尾对齐。</li>\n<li>space-around 在每行上均匀分配弹性元素。相邻元素间距离相同。每行第一个元素到行首的距离和每行最后一个元素到行尾的距离将会是相邻元素之间距离的一半。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/crazycodeboy/RNStudyNotes/develop/React%20Native%E5%B8%83%E5%B1%80/React%20Native%E5%B8%83%E5%B1%80%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/images/justifyContent.jpg\" width=\"400\"></p>\n<h3 id=\"alignItems\"><a href=\"#alignItems\" class=\"headerlink\" title=\"alignItems\"></a>alignItems</h3><p><code>alignItems enum(&#39;flex-start&#39;, &#39;flex-end&#39;, &#39;center&#39;, &#39;stretch&#39;)</code><br><code>alignItems</code>属性以与justify-content相同的方式在侧轴方向上将当前行上的弹性元素对齐，默认为stretch</p>\n<p><img src=\"https://raw.githubusercontent.com/crazycodeboy/RNStudyNotes/develop/React%20Native%E5%B8%83%E5%B1%80/React%20Native%E5%B8%83%E5%B1%80%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/images/alignItems.jpg\" width=\"400\"></p>\n<h2 id=\"子视图属性（规范自己的）\"><a href=\"#子视图属性（规范自己的）\" class=\"headerlink\" title=\"子视图属性（规范自己的）\"></a>子视图属性（规范自己的）</h2><h3 id=\"alignSelf\"><a href=\"#alignSelf\" class=\"headerlink\" title=\"alignSelf\"></a>alignSelf</h3><p><code>alignSelf enum(&#39;auto&#39;, &#39;flex-start&#39;, &#39;flex-end&#39;, &#39;center&#39;, &#39;stretch&#39;)</code><br><code>alignSelf</code>属性以属性定义了flex容器内被选中项目的对齐方式。注意：alignSelf 属性可重写灵活容器的 alignItems 属性。</p>\n<ul>\n<li><strong>auto(default) 元素继承了它的父容器的 align-items 属性。如果没有父容器则为 “stretch”。</strong></li>\n<li>stretch    元素被拉伸以适应容器。</li>\n<li>center    元素位于容器的中心。</li>\n<li>flex-start    元素位于容器的开头。</li>\n<li>flex-end    元素位于容器的结尾。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/crazycodeboy/RNStudyNotes/develop/React%20Native%E5%B8%83%E5%B1%80/React%20Native%E5%B8%83%E5%B1%80%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/images/alignSelf.jpg\" width=\"400\"></p>\n<h3 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h3><p><code>flex number</code><br><code>flex</code> 属性定义了一个可伸缩元素的能力，默认为0。</p>\n<p><img src=\"https://raw.githubusercontent.com/crazycodeboy/RNStudyNotes/develop/React%20Native%E5%B8%83%E5%B1%80/React%20Native%E5%B8%83%E5%B1%80%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/images/flex.jpg\" width=\"400\"></p>\n<h1 id=\"其他属性\"><a href=\"#其他属性\" class=\"headerlink\" title=\"其他属性\"></a>其他属性</h1><p>以下属性是React Native所支持的除Flex以外的其它布局属性。</p>\n<h2 id=\"视图边框\"><a href=\"#视图边框\" class=\"headerlink\" title=\"视图边框\"></a>视图边框</h2><h2 id=\"尺寸\"><a href=\"#尺寸\" class=\"headerlink\" title=\"尺寸\"></a>尺寸</h2><h2 id=\"内部边距\"><a href=\"#内部边距\" class=\"headerlink\" title=\"内部边距\"></a>内部边距</h2><h2 id=\"外边距\"><a href=\"#外边距\" class=\"headerlink\" title=\"外边距\"></a>外边距</h2><h2 id=\"边缘\"><a href=\"#边缘\" class=\"headerlink\" title=\"边缘\"></a>边缘</h2><h2 id=\"定位-position\"><a href=\"#定位-position\" class=\"headerlink\" title=\"定位(position)\"></a>定位(position)</h2><p>position enum(‘absolute’, ‘relative’)属性设置元素的定位方式，为将要定位的元素定义定位规则。</p>\n<ul>\n<li>absolute：生成绝对定位的元素，元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。(相对于父布局的位置)（注意：忽略父组件的padding，默认直接在父组件的左上角，除非设置当前组件的left，top，right，bottom,或者margin之类的）</li>\n<li>relative：生成相对定位的元素，相对于其正常位置进行定位。因此，”left:20” 会向元素的 LEFT 位置添加 20 像素。（相对于自身本应该在的位置）</li>\n</ul>\n<p><strong>例子1:</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span></span></span></div><div class=\"line\">                <span class=\"attr\">flex:</span> <span class=\"attr\">1</span>,</div><div class=\"line\">                <span class=\"attr\">justifyContent:</span> '<span class=\"attr\">center</span>',</div><div class=\"line\">            &#125;&#125;&gt;</div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">TouchableOpacity</span> <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;this.loadData&#125;</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.container&#125;</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.header&#125;/</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Text</span></span></div><div class=\"line\">                            <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.name&#125;</span>&gt;absolute<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">TouchableOpacity</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></div><div class=\"line\">        );</div><div class=\"line\">    &#125;    </div><div class=\"line\">const styles = StyleSheet.create(&#123;</div><div class=\"line\">    container: &#123;</div><div class=\"line\">        flexDirection: 'row',</div><div class=\"line\">        paddingLeft: 15,</div><div class=\"line\">        paddingRight: 15,</div><div class=\"line\">        paddingTop: 10,</div><div class=\"line\">        paddingBottom: 10,</div><div class=\"line\">        backgroundColor: '#999999'</div><div class=\"line\">    &#125;,</div><div class=\"line\">    header: &#123;</div><div class=\"line\">        width: 100,</div><div class=\"line\">        height: 100,</div><div class=\"line\">        backgroundColor: '#00a056'</div><div class=\"line\">    &#125;,</div><div class=\"line\">    name: &#123;</div><div class=\"line\">        position: 'relative',</div><div class=\"line\">        // left: 15,</div><div class=\"line\">        alignSelf: 'flex-start',</div><div class=\"line\">        fontSize: 13,</div><div class=\"line\">        backgroundColor: '#ffff00',</div><div class=\"line\">        color: '#999999'</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/position.png\" width=\"400\"></p>\n<h1 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h1><p><a href=\"http://www.devio.org/2016/08/01/Reac-Native%E5%B8%83%E5%B1%80%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/\" target=\"_blank\" rel=\"external\">React Native布局详细指南</a></p>\n","excerpt":"<p>本文整理React Native中的布局方式，FlexBox弹性布局的使用</p>","more":"<h1 id=\"宽高\"><a href=\"#宽高\" class=\"headerlink\" title=\"宽高\"></a>宽高</h1><p>RN中，尺寸是没有单位的，它已经代表了设备独立像素</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;</span> &#123;<span class=\"attr\">width:100</span>,<span class=\"attr\">height:100</span>,<span class=\"attr\">margin:40</span>,<span class=\"attr\">backgroundColor:</span>'<span class=\"attr\">gray</span>'&#125;&#125;&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;</span> &#123;<span class=\"attr\">fontSize:16</span>,<span class=\"attr\">margin:20</span>&#125;&#125;&gt;</span>尺寸<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>运行在Android上时，View的长和宽被解释成：100dp 100dp单位是dp，字体被解释成16sp 单位是sp，运行在iOS上时尺寸单位被解释称了pt，这些单位确保了布局在任何不同dpi的手机屏幕上显示不会发生改变；</p>\n<h1 id=\"RN和Web-css上的FlexBox的区别\"><a href=\"#RN和Web-css上的FlexBox的区别\" class=\"headerlink\" title=\"RN和Web css上的FlexBox的区别\"></a>RN和Web css上的FlexBox的区别</h1><ul>\n<li>flexDirection: React Native中默认为<code>flexDirection:&#39;column&#39;</code>，在Web CSS中默认为<code>flex-direction:&#39;row&#39;</code></li>\n<li>alignItems: React Native中默认为<code>alignItems:&#39;stretch&#39;</code>，在Web CSS中默认<code>align-items:&#39;flex-start&#39;</code></li>\n<li>flex: 相比Web CSS的flex接受多参数，如:<code>flex: 2 2 10%;</code>，但在 React Native中flex只接受一个参数</li>\n<li>不支持属性：align-content，flex-basis，order，flex-basis，flex-flow，flex-grow，flex-shrink</li>\n</ul>\n<p>以上是React Native中的FlexBox 和Web CSSS上FlexBox的不同之处，记住这几点，你可以像在Web CSSS上使用FlexBox一样，在React Native中使用FlexBox。</p>\n<h1 id=\"Layout-Props\"><a href=\"#Layout-Props\" class=\"headerlink\" title=\"Layout Props\"></a>Layout Props</h1><h2 id=\"父视图属性（容器属性）：\"><a href=\"#父视图属性（容器属性）：\" class=\"headerlink\" title=\"父视图属性（容器属性）：\"></a>父视图属性（容器属性）：</h2><ul>\n<li>flexDirection enum(‘<strong>row</strong>’, ‘<strong>column</strong>’,’<strong>row-reverse</strong>’,’<strong>column-reverse</strong>’)</li>\n<li>flexWrap enum(‘<strong>wrap</strong>’, ‘<strong>nowrap</strong>’)</li>\n<li>justifyContent enum(‘<strong>flex-start</strong>’, ‘<strong>flex-end</strong>’, ‘<strong>center</strong>’, ‘<strong>space-between</strong>’, ‘<strong>space-around</strong>’)</li>\n<li>alignItems enum(‘<strong>flex-start</strong>’, ‘<strong>flex-end’</strong>, ‘<strong>center</strong>’, ‘<strong>stretch</strong>’)</li>\n</ul>\n<p>学习父容器属性之前，先学习下基本概念</p>\n<p><img src=\"https://mdn.mozillademos.org/files/12998/flexbox.png\" width='400'></p>\n<p>和Web的Css不同的是，RN的Flexbox默认的主轴是 竖直的（column）</p>\n<h3 id=\"flexDirection\"><a href=\"#flexDirection\" class=\"headerlink\" title=\"flexDirection\"></a>flexDirection</h3><p><code>flexDirection enum(&#39;row&#39;, &#39;column&#39;,&#39;row-reverse&#39;,&#39;column-reverse&#39;)</code><br><code>flexDirection</code>属性定义了父视图中的子元素沿横轴或侧轴方片的排列方式。</p>\n<ul>\n<li>row: 从左向右依次排列</li>\n<li>row-reverse: 从右向左依次排列</li>\n<li>column(default): 默认的排列方式，从上向下排列</li>\n<li>column-reverse: 从下向上排列</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/crazycodeboy/RNStudyNotes/develop/React%20Native%E5%B8%83%E5%B1%80/React%20Native%E5%B8%83%E5%B1%80%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/images/flexDirection.jpg\" width='400'/></p>\n<h3 id=\"flexWrap\"><a href=\"#flexWrap\" class=\"headerlink\" title=\"flexWrap\"></a>flexWrap</h3><p><code>flexWrap enum(&#39;wrap&#39;, &#39;nowrap&#39;)</code><br><code>flexWrap</code>属性定义了子元素在父视图内是否允许多行排列，默认为nowrap。</p>\n<ul>\n<li>nowrap flex的元素只排列在一行上，可能导致溢出。</li>\n<li>wrap flex的元素在一行排列不下时，就进行多行排列。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/crazycodeboy/RNStudyNotes/develop/React%20Native%E5%B8%83%E5%B1%80/React%20Native%E5%B8%83%E5%B1%80%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/images/flexWrap.jpg\" width='400'/></p>\n<h3 id=\"justifyContent\"><a href=\"#justifyContent\" class=\"headerlink\" title=\"justifyContent\"></a>justifyContent</h3><p><code>justifyContent enum(&#39;flex-start&#39;, &#39;flex-end&#39;, &#39;center&#39;, &#39;space-between&#39;, &#39;space-around&#39;)</code><br><code>justifyContent</code>属性定义了浏览器如何分配顺着父容器主轴的弹性（flex）元素之间及其周围的空间，默认为flex-start。</p>\n<ul>\n<li>flex-start(default) 从行首开始排列。每行第一个弹性元素与行首对齐，同时所有后续的弹性元素与前一个对齐。</li>\n<li>flex-end 从行尾开始排列。每行最后一个弹性元素与行尾对齐，其他元素将与后一个对齐。</li>\n<li>center 伸缩元素向每行中点排列。每行第一个元素到行首的距离将与每行最后一个元素到行尾的距离相同。</li>\n<li>space-between 在每行上均匀分配弹性元素。相邻元素间距离相同。每行第一个元素与行首对齐，每行最后一个元素与行尾对齐。</li>\n<li>space-around 在每行上均匀分配弹性元素。相邻元素间距离相同。每行第一个元素到行首的距离和每行最后一个元素到行尾的距离将会是相邻元素之间距离的一半。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/crazycodeboy/RNStudyNotes/develop/React%20Native%E5%B8%83%E5%B1%80/React%20Native%E5%B8%83%E5%B1%80%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/images/justifyContent.jpg\" width='400'/></p>\n<h3 id=\"alignItems\"><a href=\"#alignItems\" class=\"headerlink\" title=\"alignItems\"></a>alignItems</h3><p><code>alignItems enum(&#39;flex-start&#39;, &#39;flex-end&#39;, &#39;center&#39;, &#39;stretch&#39;)</code><br><code>alignItems</code>属性以与justify-content相同的方式在侧轴方向上将当前行上的弹性元素对齐，默认为stretch</p>\n<p><img src=\"https://raw.githubusercontent.com/crazycodeboy/RNStudyNotes/develop/React%20Native%E5%B8%83%E5%B1%80/React%20Native%E5%B8%83%E5%B1%80%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/images/alignItems.jpg\" width='400'/></p>\n<h2 id=\"子视图属性（规范自己的）\"><a href=\"#子视图属性（规范自己的）\" class=\"headerlink\" title=\"子视图属性（规范自己的）\"></a>子视图属性（规范自己的）</h2><h3 id=\"alignSelf\"><a href=\"#alignSelf\" class=\"headerlink\" title=\"alignSelf\"></a>alignSelf</h3><p><code>alignSelf enum(&#39;auto&#39;, &#39;flex-start&#39;, &#39;flex-end&#39;, &#39;center&#39;, &#39;stretch&#39;)</code><br><code>alignSelf</code>属性以属性定义了flex容器内被选中项目的对齐方式。注意：alignSelf 属性可重写灵活容器的 alignItems 属性。</p>\n<ul>\n<li><strong>auto(default) 元素继承了它的父容器的 align-items 属性。如果没有父容器则为 “stretch”。</strong></li>\n<li>stretch    元素被拉伸以适应容器。</li>\n<li>center    元素位于容器的中心。</li>\n<li>flex-start    元素位于容器的开头。</li>\n<li>flex-end    元素位于容器的结尾。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/crazycodeboy/RNStudyNotes/develop/React%20Native%E5%B8%83%E5%B1%80/React%20Native%E5%B8%83%E5%B1%80%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/images/alignSelf.jpg\" width='400'/></p>\n<h3 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h3><p><code>flex number</code><br><code>flex</code> 属性定义了一个可伸缩元素的能力，默认为0。</p>\n<p><img src=\"https://raw.githubusercontent.com/crazycodeboy/RNStudyNotes/develop/React%20Native%E5%B8%83%E5%B1%80/React%20Native%E5%B8%83%E5%B1%80%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/images/flex.jpg\" width='400'/></p>\n<h1 id=\"其他属性\"><a href=\"#其他属性\" class=\"headerlink\" title=\"其他属性\"></a>其他属性</h1><p>以下属性是React Native所支持的除Flex以外的其它布局属性。</p>\n<h2 id=\"视图边框\"><a href=\"#视图边框\" class=\"headerlink\" title=\"视图边框\"></a>视图边框</h2><h2 id=\"尺寸\"><a href=\"#尺寸\" class=\"headerlink\" title=\"尺寸\"></a>尺寸</h2><h2 id=\"内部边距\"><a href=\"#内部边距\" class=\"headerlink\" title=\"内部边距\"></a>内部边距</h2><h2 id=\"外边距\"><a href=\"#外边距\" class=\"headerlink\" title=\"外边距\"></a>外边距</h2><h2 id=\"边缘\"><a href=\"#边缘\" class=\"headerlink\" title=\"边缘\"></a>边缘</h2><h2 id=\"定位-position\"><a href=\"#定位-position\" class=\"headerlink\" title=\"定位(position)\"></a>定位(position)</h2><p>position enum(‘absolute’, ‘relative’)属性设置元素的定位方式，为将要定位的元素定义定位规则。</p>\n<ul>\n<li>absolute：生成绝对定位的元素，元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。(相对于父布局的位置)（注意：忽略父组件的padding，默认直接在父组件的左上角，除非设置当前组件的left，top，right，bottom,或者margin之类的）</li>\n<li>relative：生成相对定位的元素，相对于其正常位置进行定位。因此，”left:20” 会向元素的 LEFT 位置添加 20 像素。（相对于自身本应该在的位置）</li>\n</ul>\n<p><strong>例子1:</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span></div><div class=\"line\">                <span class=\"attr\">flex:</span> <span class=\"attr\">1</span>,</div><div class=\"line\">                <span class=\"attr\">justifyContent:</span> '<span class=\"attr\">center</span>',</div><div class=\"line\">            &#125;&#125;&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">TouchableOpacity</span> <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;this.loadData&#125;</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.container&#125;</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.header&#125;/</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Text</span></div><div class=\"line\">                            <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.name&#125;</span>&gt;</span>absolute<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">TouchableOpacity</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></div><div class=\"line\">        );</div><div class=\"line\">    &#125;    </div><div class=\"line\">const styles = StyleSheet.create(&#123;</div><div class=\"line\">    container: &#123;</div><div class=\"line\">        flexDirection: 'row',</div><div class=\"line\">        paddingLeft: 15,</div><div class=\"line\">        paddingRight: 15,</div><div class=\"line\">        paddingTop: 10,</div><div class=\"line\">        paddingBottom: 10,</div><div class=\"line\">        backgroundColor: '#999999'</div><div class=\"line\">    &#125;,</div><div class=\"line\">    header: &#123;</div><div class=\"line\">        width: 100,</div><div class=\"line\">        height: 100,</div><div class=\"line\">        backgroundColor: '#00a056'</div><div class=\"line\">    &#125;,</div><div class=\"line\">    name: &#123;</div><div class=\"line\">        position: 'relative',</div><div class=\"line\">        // left: 15,</div><div class=\"line\">        alignSelf: 'flex-start',</div><div class=\"line\">        fontSize: 13,</div><div class=\"line\">        backgroundColor: '#ffff00',</div><div class=\"line\">        color: '#999999'</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</span></div></pre></td></tr></table></figure>\n<p><img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/position.png\" width=\"400\"/></p>\n<h1 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h1><p><a href=\"http://www.devio.org/2016/08/01/Reac-Native%E5%B8%83%E5%B1%80%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/\">React Native布局详细指南</a></p>"},{"title":"ReactNative碎片整理之组件生命周期","date":"2018-08-01T09:27:52.000Z","password":null,"_content":"\n生命周期是一定要知道的，这样才知道整个组件的工作流程，知道哪些操作适合在哪个回调中进行……(o^^o)\n\n<!--more-->\n\n# 一个栗子\n\n```javascript\nimport React, {Component} from 'react';\nimport {\n    View,\n    Text,\n    StyleSheet,\n} from 'react-native';\n\n\nexport default class App extends Component<Props> {\n\n    /**\n     * 构造函数，初始化需要的state\n     * @param props\n     */\n    constructor(props) {\n        super(props);\n\n        console.log('constructor')\n\n        // 初始状态\n        this.state = {\n            result: '点击前',\n        };\n    }\n\n    /**\n     * 描述：控件渲染前触发\n     * 次数：一次\n     * 推荐：\n     */\n    componentWillMount() {\n        console.log('componentWillMount')\n    }\n\n    /**\n     * 描述：控件渲染后触发\n     * 次数：一次\n     * 推荐：\n     */\n    componentDidMount() {\n        console.log('componentDidMount')\n    }\n\n    /**\n     * 描述：组件接收到新的props时被调用\n     * 次数：多次\n     * 推荐：\n     */\n    componentWillReceiveProps() {\n        console.log('componentWillReceiveProps')\n    }\n\n    /**\n     * 描述：当组件接收到新的props和state时被调用\n     * 次数：多次\n     * 推荐：\n     */\n    shouldComponentUpdate() {\n        console.log('shouldComponentUpdate')\n        return true;\n    }\n\n    /**\n     * 描述：组件重新渲染完成后会调用此方法\n     * 次数：多次\n     * 推荐：\n     */\n    componentDidUpdate() {\n        console.log('componentDidUpdate')\n    }\n\n\n    /**\n     * 描述：控件渲染后触发\n     * 次数：1次\n     * 推荐：\n     */\n    componentDidMount() {\n        console.log('componentDidMount')\n    }\n\n\n    /**\n     * 描述：组件卸载和销毁之前被调用\n     * 次数：一次\n     * 推荐：用于清理一些无用的内容，比如：定时器清除\n     */\n    componentWillUnmount() {\n        console.log('componentWillUnmount')\n    }\n\n    componentWillUpdate() {\n        console.log('componentWillUpdate')\n    }\n    render() {\n        console.log('render')\n        return (\n            <View style={styles.content}>\n                <Text style={styles.text} onPress={\n                    () => {\n                        this.setState({\n                            result: '点击后'\n                        })\n                    }\n                }>\n                    {this.state.result}\n                </Text>\n            </View>\n        )\n    }\n}\n\nconst styles = StyleSheet.create({\n    content: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    text: {\n        padding: 50,\n        fontSize: 20,\n        color: '#ffffff',\n        backgroundColor: '#00a056'\n    }\n})\n```\n\n**console**\n\n```javascript\nconstructor\nApp.js:39 componentWillMount\nApp.js:103 render\nApp.js:86 componentDidMount\nApp.js:108 onPress call\nApp.js:66 shouldComponentUpdate\nApp.js:100 componentWillUpdate\nApp.js:103 render\nApp.js:76 componentDidUpdate\n```\n\n# 组件的生命周期\n\n通过上面的栗子，有灵性的小哥哥已经基本猜到大致的生命周期了\n\n下面再看看这张我偷来的帅图\n\n<img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/ReactNativeLifeCycle.png\" width=\"400\">\n\n再结合这张酷表\n\n| 生命周期                                     | 调用次数      | 能否使用 setSate() | 描述                                       |\n| ---------------------------------------- | --------- | -------------- | ---------------------------------------- |\n| getDefaultProps（es6:static defaultProps） | 1(全局调用一次) | 否              | 初始化默认属性                                  |\n| getInitialState(es6:constructor(props))  | 1         | 否              | 构造函数，初始化需要的state                         |\n| componentWillMount                       | 1         | 是              | 控件渲染前触发                                  |\n| render                                   | >=1       | 否              | 渲染控件的方法                                  |\n| componentDidMount                        | 1         | 是              | 控件渲染后触发                                  |\n| componentWillReceiveProps                | >=0       | 是              | 组件接收到新的props时被调用                         |\n| shouldComponentUpdate                    | >=0       | 否              | 当组件接收到新的props和state时被调用                  |\n| componentWillUpdate                      | >=0       | 否              | props或者state改变，并且此前的shouldComponentUpdate方法返回为 true会调用该方法 |\n| componentDidUpdate                       | >=0       | 否              | 组件重新渲染完成后会调用此方法                          |\n\n另外还有一个场景需要知道的，代码我就不贴了\n\n父组件中有一个子组件，点击父组件调用setState，那么父子组件的生命周期如何回调？\n\n```\n//加载过程\nconstructor\nApp.js:42 componentWillMount\nApp.js:107 render\nChildComponent.js:26 ChildComponent,constructor\nChildComponent.js:41 ChildComponent,componentWillMount\nChildComponent.js:106 ChildComponent,render\nChildComponent.js:88 ChildComponent,componentDidMount\nApp.js:89 componentDidMount\n//点击后，调用父组件的setState后\nshouldComponentUpdate\nApp.js:103 componentWillUpdate\nApp.js:107 render\nChildComponent.js:59 ChildComponent,componentWillReceiveProps\nChildComponent.js:68 ChildComponent,shouldComponentUpdate\nChildComponent.js:102 ChildComponent,componentWillUpdate\nChildComponent.js:106 ChildComponent,render\nChildComponent.js:78 ChildComponent,componentDidUpdate\nApp.js:79 componentDidUpdate\n```\n\n可以看到：\n\n- 组件的加载是从内到外一级一级的，这个和android类似\n- 修改父组件state，触发update整个流程，但是不再次触发子组件的constructor\n\n# 推荐的操作\n\n- constructor()方法里初始化state \n- static defaultProps指定默认属性\n- componentDidMount()：该方法在render()方法后自动调用，网络请求一般放在这个方法中\n- shouldComponentUpdate()：该方法返回一个boolean值，用来决定是否需要重新渲染组件，默认返回true，你可以自己重写此方法，通过条件判断来决定你是否需要更新组件\n- componentWillUnmount()：在组件被移除前调用，在该方法中，释放一些不需要的资源，比如停止定时器\n- **不要在 constructor 或者 render 里 setState()**\n- constructor 已含 this.state={} \n- render 里 setState 会造成setState -> render -> setState -> render \n- 能做的setState，只要是render前，就放在componentWillMount，render后，就放在 componentDidMount。這两个 function 是 react lifecycle 中，最常使用的两个\n- 更多以后再添加总结\n\n\n\n# 参考\n\n[React-Native生命周期的触发场景和一些小建议](https://blog.csdn.net/ddwhan0123/article/details/78490884)\n\n[React Native 中组件的生命周期](https://blog.csdn.net/sinat_30949835/article/details/79833721)\n\n[React Native之React速学教程(中)](http://www.devio.org/2016/08/10/React-Native%E4%B9%8BReact%E9%80%9F%E5%AD%A6%E6%95%99%E7%A8%8B-(%E4%B8%AD)/)\n\n","source":"_posts/ReactNative碎片整理之组件生命周期.md","raw":"---\ntitle: ReactNative碎片整理之组件生命周期\ndate: 2018-08-01 17:27:52\ntags:\n- RN\ncategories: RN\npassword:\n---\n\n生命周期是一定要知道的，这样才知道整个组件的工作流程，知道哪些操作适合在哪个回调中进行……(o^^o)\n\n<!--more-->\n\n# 一个栗子\n\n```javascript\nimport React, {Component} from 'react';\nimport {\n    View,\n    Text,\n    StyleSheet,\n} from 'react-native';\n\n\nexport default class App extends Component<Props> {\n\n    /**\n     * 构造函数，初始化需要的state\n     * @param props\n     */\n    constructor(props) {\n        super(props);\n\n        console.log('constructor')\n\n        // 初始状态\n        this.state = {\n            result: '点击前',\n        };\n    }\n\n    /**\n     * 描述：控件渲染前触发\n     * 次数：一次\n     * 推荐：\n     */\n    componentWillMount() {\n        console.log('componentWillMount')\n    }\n\n    /**\n     * 描述：控件渲染后触发\n     * 次数：一次\n     * 推荐：\n     */\n    componentDidMount() {\n        console.log('componentDidMount')\n    }\n\n    /**\n     * 描述：组件接收到新的props时被调用\n     * 次数：多次\n     * 推荐：\n     */\n    componentWillReceiveProps() {\n        console.log('componentWillReceiveProps')\n    }\n\n    /**\n     * 描述：当组件接收到新的props和state时被调用\n     * 次数：多次\n     * 推荐：\n     */\n    shouldComponentUpdate() {\n        console.log('shouldComponentUpdate')\n        return true;\n    }\n\n    /**\n     * 描述：组件重新渲染完成后会调用此方法\n     * 次数：多次\n     * 推荐：\n     */\n    componentDidUpdate() {\n        console.log('componentDidUpdate')\n    }\n\n\n    /**\n     * 描述：控件渲染后触发\n     * 次数：1次\n     * 推荐：\n     */\n    componentDidMount() {\n        console.log('componentDidMount')\n    }\n\n\n    /**\n     * 描述：组件卸载和销毁之前被调用\n     * 次数：一次\n     * 推荐：用于清理一些无用的内容，比如：定时器清除\n     */\n    componentWillUnmount() {\n        console.log('componentWillUnmount')\n    }\n\n    componentWillUpdate() {\n        console.log('componentWillUpdate')\n    }\n    render() {\n        console.log('render')\n        return (\n            <View style={styles.content}>\n                <Text style={styles.text} onPress={\n                    () => {\n                        this.setState({\n                            result: '点击后'\n                        })\n                    }\n                }>\n                    {this.state.result}\n                </Text>\n            </View>\n        )\n    }\n}\n\nconst styles = StyleSheet.create({\n    content: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    text: {\n        padding: 50,\n        fontSize: 20,\n        color: '#ffffff',\n        backgroundColor: '#00a056'\n    }\n})\n```\n\n**console**\n\n```javascript\nconstructor\nApp.js:39 componentWillMount\nApp.js:103 render\nApp.js:86 componentDidMount\nApp.js:108 onPress call\nApp.js:66 shouldComponentUpdate\nApp.js:100 componentWillUpdate\nApp.js:103 render\nApp.js:76 componentDidUpdate\n```\n\n# 组件的生命周期\n\n通过上面的栗子，有灵性的小哥哥已经基本猜到大致的生命周期了\n\n下面再看看这张我偷来的帅图\n\n<img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/ReactNativeLifeCycle.png\" width=\"400\">\n\n再结合这张酷表\n\n| 生命周期                                     | 调用次数      | 能否使用 setSate() | 描述                                       |\n| ---------------------------------------- | --------- | -------------- | ---------------------------------------- |\n| getDefaultProps（es6:static defaultProps） | 1(全局调用一次) | 否              | 初始化默认属性                                  |\n| getInitialState(es6:constructor(props))  | 1         | 否              | 构造函数，初始化需要的state                         |\n| componentWillMount                       | 1         | 是              | 控件渲染前触发                                  |\n| render                                   | >=1       | 否              | 渲染控件的方法                                  |\n| componentDidMount                        | 1         | 是              | 控件渲染后触发                                  |\n| componentWillReceiveProps                | >=0       | 是              | 组件接收到新的props时被调用                         |\n| shouldComponentUpdate                    | >=0       | 否              | 当组件接收到新的props和state时被调用                  |\n| componentWillUpdate                      | >=0       | 否              | props或者state改变，并且此前的shouldComponentUpdate方法返回为 true会调用该方法 |\n| componentDidUpdate                       | >=0       | 否              | 组件重新渲染完成后会调用此方法                          |\n\n另外还有一个场景需要知道的，代码我就不贴了\n\n父组件中有一个子组件，点击父组件调用setState，那么父子组件的生命周期如何回调？\n\n```\n//加载过程\nconstructor\nApp.js:42 componentWillMount\nApp.js:107 render\nChildComponent.js:26 ChildComponent,constructor\nChildComponent.js:41 ChildComponent,componentWillMount\nChildComponent.js:106 ChildComponent,render\nChildComponent.js:88 ChildComponent,componentDidMount\nApp.js:89 componentDidMount\n//点击后，调用父组件的setState后\nshouldComponentUpdate\nApp.js:103 componentWillUpdate\nApp.js:107 render\nChildComponent.js:59 ChildComponent,componentWillReceiveProps\nChildComponent.js:68 ChildComponent,shouldComponentUpdate\nChildComponent.js:102 ChildComponent,componentWillUpdate\nChildComponent.js:106 ChildComponent,render\nChildComponent.js:78 ChildComponent,componentDidUpdate\nApp.js:79 componentDidUpdate\n```\n\n可以看到：\n\n- 组件的加载是从内到外一级一级的，这个和android类似\n- 修改父组件state，触发update整个流程，但是不再次触发子组件的constructor\n\n# 推荐的操作\n\n- constructor()方法里初始化state \n- static defaultProps指定默认属性\n- componentDidMount()：该方法在render()方法后自动调用，网络请求一般放在这个方法中\n- shouldComponentUpdate()：该方法返回一个boolean值，用来决定是否需要重新渲染组件，默认返回true，你可以自己重写此方法，通过条件判断来决定你是否需要更新组件\n- componentWillUnmount()：在组件被移除前调用，在该方法中，释放一些不需要的资源，比如停止定时器\n- **不要在 constructor 或者 render 里 setState()**\n- constructor 已含 this.state={} \n- render 里 setState 会造成setState -> render -> setState -> render \n- 能做的setState，只要是render前，就放在componentWillMount，render后，就放在 componentDidMount。這两个 function 是 react lifecycle 中，最常使用的两个\n- 更多以后再添加总结\n\n\n\n# 参考\n\n[React-Native生命周期的触发场景和一些小建议](https://blog.csdn.net/ddwhan0123/article/details/78490884)\n\n[React Native 中组件的生命周期](https://blog.csdn.net/sinat_30949835/article/details/79833721)\n\n[React Native之React速学教程(中)](http://www.devio.org/2016/08/10/React-Native%E4%B9%8BReact%E9%80%9F%E5%AD%A6%E6%95%99%E7%A8%8B-(%E4%B8%AD)/)\n\n","slug":"ReactNative碎片整理之组件生命周期","published":1,"updated":"2018-08-02T02:13:56.772Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6mr00161kyga970j0ks","content":"<p>生命周期是一定要知道的，这样才知道整个组件的工作流程，知道哪些操作适合在哪个回调中进行……(o^^o)</p>\n<a id=\"more\"></a>\n<h1 id=\"一个栗子\"><a href=\"#一个栗子\" class=\"headerlink\" title=\"一个栗子\"></a>一个栗子</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;</div><div class=\"line\">    View,</div><div class=\"line\">    Text,</div><div class=\"line\">    StyleSheet,</div><div class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 构造函数，初始化需要的state</div><div class=\"line\">     * @param props</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'constructor'</span>)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 初始状态</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.state = &#123;</div><div class=\"line\">            <span class=\"attr\">result</span>: <span class=\"string\">'点击前'</span>,</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 描述：控件渲染前触发</div><div class=\"line\">     * 次数：一次</div><div class=\"line\">     * 推荐：</div><div class=\"line\">     */</div><div class=\"line\">    componentWillMount() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'componentWillMount'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 描述：控件渲染后触发</div><div class=\"line\">     * 次数：一次</div><div class=\"line\">     * 推荐：</div><div class=\"line\">     */</div><div class=\"line\">    componentDidMount() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'componentDidMount'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 描述：组件接收到新的props时被调用</div><div class=\"line\">     * 次数：多次</div><div class=\"line\">     * 推荐：</div><div class=\"line\">     */</div><div class=\"line\">    componentWillReceiveProps() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'componentWillReceiveProps'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 描述：当组件接收到新的props和state时被调用</div><div class=\"line\">     * 次数：多次</div><div class=\"line\">     * 推荐：</div><div class=\"line\">     */</div><div class=\"line\">    shouldComponentUpdate() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'shouldComponentUpdate'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 描述：组件重新渲染完成后会调用此方法</div><div class=\"line\">     * 次数：多次</div><div class=\"line\">     * 推荐：</div><div class=\"line\">     */</div><div class=\"line\">    componentDidUpdate() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'componentDidUpdate'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 描述：控件渲染后触发</div><div class=\"line\">     * 次数：1次</div><div class=\"line\">     * 推荐：</div><div class=\"line\">     */</div><div class=\"line\">    componentDidMount() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'componentDidMount'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 描述：组件卸载和销毁之前被调用</div><div class=\"line\">     * 次数：一次</div><div class=\"line\">     * 推荐：用于清理一些无用的内容，比如：定时器清除</div><div class=\"line\">     */</div><div class=\"line\">    componentWillUnmount() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'componentWillUnmount'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    componentWillUpdate() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'componentWillUpdate'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'render'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.content&#125;</span>&gt;</span></span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.text&#125;</span> <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;</span></span></div><div class=\"line\">                    () =&gt; &#123;</div><div class=\"line\">                        this.setState(&#123;</div><div class=\"line\">                            result: '点击后'</div><div class=\"line\">                        &#125;)</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;&gt;</div><div class=\"line\">                    &#123;this.state.result&#125;</div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> styles = StyleSheet.create(&#123;</div><div class=\"line\">    <span class=\"attr\">content</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">flex</span>: <span class=\"number\">1</span>,</div><div class=\"line\">        <span class=\"attr\">justifyContent</span>: <span class=\"string\">'center'</span>,</div><div class=\"line\">        <span class=\"attr\">alignItems</span>: <span class=\"string\">'center'</span>,</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">text</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">padding</span>: <span class=\"number\">50</span>,</div><div class=\"line\">        <span class=\"attr\">fontSize</span>: <span class=\"number\">20</span>,</div><div class=\"line\">        <span class=\"attr\">color</span>: <span class=\"string\">'#ffffff'</span>,</div><div class=\"line\">        <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'#00a056'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p><strong>console</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">constructor</span></div><div class=\"line\">App.js:39 componentWillMount</div><div class=\"line\">App.js:103 render</div><div class=\"line\">App.js:86 componentDidMount</div><div class=\"line\">App.js:108 onPress call</div><div class=\"line\">App.js:66 shouldComponentUpdate</div><div class=\"line\">App.js:100 componentWillUpdate</div><div class=\"line\">App.js:103 render</div><div class=\"line\">App.js:76 componentDidUpdate</div></pre></td></tr></table></figure>\n<h1 id=\"组件的生命周期\"><a href=\"#组件的生命周期\" class=\"headerlink\" title=\"组件的生命周期\"></a>组件的生命周期</h1><p>通过上面的栗子，有灵性的小哥哥已经基本猜到大致的生命周期了</p>\n<p>下面再看看这张我偷来的帅图</p>\n<p><img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/ReactNativeLifeCycle.png\" width=\"400\"></p>\n<p>再结合这张酷表</p>\n<table>\n<thead>\n<tr>\n<th>生命周期</th>\n<th>调用次数</th>\n<th>能否使用 setSate()</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>getDefaultProps（es6:static defaultProps）</td>\n<td>1(全局调用一次)</td>\n<td>否</td>\n<td>初始化默认属性</td>\n</tr>\n<tr>\n<td>getInitialState(es6:constructor(props))</td>\n<td>1</td>\n<td>否</td>\n<td>构造函数，初始化需要的state</td>\n</tr>\n<tr>\n<td>componentWillMount</td>\n<td>1</td>\n<td>是</td>\n<td>控件渲染前触发</td>\n</tr>\n<tr>\n<td>render</td>\n<td>&gt;=1</td>\n<td>否</td>\n<td>渲染控件的方法</td>\n</tr>\n<tr>\n<td>componentDidMount</td>\n<td>1</td>\n<td>是</td>\n<td>控件渲染后触发</td>\n</tr>\n<tr>\n<td>componentWillReceiveProps</td>\n<td>&gt;=0</td>\n<td>是</td>\n<td>组件接收到新的props时被调用</td>\n</tr>\n<tr>\n<td>shouldComponentUpdate</td>\n<td>&gt;=0</td>\n<td>否</td>\n<td>当组件接收到新的props和state时被调用</td>\n</tr>\n<tr>\n<td>componentWillUpdate</td>\n<td>&gt;=0</td>\n<td>否</td>\n<td>props或者state改变，并且此前的shouldComponentUpdate方法返回为 true会调用该方法</td>\n</tr>\n<tr>\n<td>componentDidUpdate</td>\n<td>&gt;=0</td>\n<td>否</td>\n<td>组件重新渲染完成后会调用此方法</td>\n</tr>\n</tbody>\n</table>\n<p>另外还有一个场景需要知道的，代码我就不贴了</p>\n<p>父组件中有一个子组件，点击父组件调用setState，那么父子组件的生命周期如何回调？</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//加载过程</span></div><div class=\"line\">constructor</div><div class=\"line\">App<span class=\"selector-class\">.js</span>:<span class=\"number\">42</span> componentWillMount</div><div class=\"line\">App<span class=\"selector-class\">.js</span>:<span class=\"number\">107</span> render</div><div class=\"line\">ChildComponent<span class=\"selector-class\">.js</span>:<span class=\"number\">26</span> ChildComponent,constructor</div><div class=\"line\">ChildComponent<span class=\"selector-class\">.js</span>:<span class=\"number\">41</span> ChildComponent,componentWillMount</div><div class=\"line\">ChildComponent<span class=\"selector-class\">.js</span>:<span class=\"number\">106</span> ChildComponent,render</div><div class=\"line\">ChildComponent<span class=\"selector-class\">.js</span>:<span class=\"number\">88</span> ChildComponent,componentDidMount</div><div class=\"line\">App<span class=\"selector-class\">.js</span>:<span class=\"number\">89</span> componentDidMount</div><div class=\"line\"><span class=\"comment\">//点击后，调用父组件的setState后</span></div><div class=\"line\">shouldComponentUpdate</div><div class=\"line\">App<span class=\"selector-class\">.js</span>:<span class=\"number\">103</span> componentWillUpdate</div><div class=\"line\">App<span class=\"selector-class\">.js</span>:<span class=\"number\">107</span> render</div><div class=\"line\">ChildComponent<span class=\"selector-class\">.js</span>:<span class=\"number\">59</span> ChildComponent,componentWillReceiveProps</div><div class=\"line\">ChildComponent<span class=\"selector-class\">.js</span>:<span class=\"number\">68</span> ChildComponent,shouldComponentUpdate</div><div class=\"line\">ChildComponent<span class=\"selector-class\">.js</span>:<span class=\"number\">102</span> ChildComponent,componentWillUpdate</div><div class=\"line\">ChildComponent<span class=\"selector-class\">.js</span>:<span class=\"number\">106</span> ChildComponent,render</div><div class=\"line\">ChildComponent<span class=\"selector-class\">.js</span>:<span class=\"number\">78</span> ChildComponent,componentDidUpdate</div><div class=\"line\">App<span class=\"selector-class\">.js</span>:<span class=\"number\">79</span> componentDidUpdate</div></pre></td></tr></table></figure>\n<p>可以看到：</p>\n<ul>\n<li>组件的加载是从内到外一级一级的，这个和android类似</li>\n<li>修改父组件state，触发update整个流程，但是不再次触发子组件的constructor</li>\n</ul>\n<h1 id=\"推荐的操作\"><a href=\"#推荐的操作\" class=\"headerlink\" title=\"推荐的操作\"></a>推荐的操作</h1><ul>\n<li>constructor()方法里初始化state </li>\n<li>static defaultProps指定默认属性</li>\n<li>componentDidMount()：该方法在render()方法后自动调用，网络请求一般放在这个方法中</li>\n<li>shouldComponentUpdate()：该方法返回一个boolean值，用来决定是否需要重新渲染组件，默认返回true，你可以自己重写此方法，通过条件判断来决定你是否需要更新组件</li>\n<li>componentWillUnmount()：在组件被移除前调用，在该方法中，释放一些不需要的资源，比如停止定时器</li>\n<li><strong>不要在 constructor 或者 render 里 setState()</strong></li>\n<li>constructor 已含 this.state={} </li>\n<li>render 里 setState 会造成setState -&gt; render -&gt; setState -&gt; render </li>\n<li>能做的setState，只要是render前，就放在componentWillMount，render后，就放在 componentDidMount。這两个 function 是 react lifecycle 中，最常使用的两个</li>\n<li>更多以后再添加总结</li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://blog.csdn.net/ddwhan0123/article/details/78490884\" target=\"_blank\" rel=\"external\">React-Native生命周期的触发场景和一些小建议</a></p>\n<p><a href=\"https://blog.csdn.net/sinat_30949835/article/details/79833721\" target=\"_blank\" rel=\"external\">React Native 中组件的生命周期</a></p>\n<p><a href=\"http://www.devio.org/2016/08/10/React-Native%E4%B9%8BReact%E9%80%9F%E5%AD%A6%E6%95%99%E7%A8%8B-(%E4%B8%AD\" target=\"_blank\" rel=\"external\">React Native之React速学教程(中)</a>/)</p>\n","excerpt":"<p>生命周期是一定要知道的，这样才知道整个组件的工作流程，知道哪些操作适合在哪个回调中进行……(o^^o)</p>","more":"<h1 id=\"一个栗子\"><a href=\"#一个栗子\" class=\"headerlink\" title=\"一个栗子\"></a>一个栗子</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;</div><div class=\"line\">    View,</div><div class=\"line\">    Text,</div><div class=\"line\">    StyleSheet,</div><div class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 构造函数，初始化需要的state</div><div class=\"line\">     * @param props</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'constructor'</span>)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 初始状态</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.state = &#123;</div><div class=\"line\">            <span class=\"attr\">result</span>: <span class=\"string\">'点击前'</span>,</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 描述：控件渲染前触发</div><div class=\"line\">     * 次数：一次</div><div class=\"line\">     * 推荐：</div><div class=\"line\">     */</span></div><div class=\"line\">    componentWillMount() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'componentWillMount'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 描述：控件渲染后触发</div><div class=\"line\">     * 次数：一次</div><div class=\"line\">     * 推荐：</div><div class=\"line\">     */</span></div><div class=\"line\">    componentDidMount() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'componentDidMount'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 描述：组件接收到新的props时被调用</div><div class=\"line\">     * 次数：多次</div><div class=\"line\">     * 推荐：</div><div class=\"line\">     */</span></div><div class=\"line\">    componentWillReceiveProps() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'componentWillReceiveProps'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 描述：当组件接收到新的props和state时被调用</div><div class=\"line\">     * 次数：多次</div><div class=\"line\">     * 推荐：</div><div class=\"line\">     */</span></div><div class=\"line\">    shouldComponentUpdate() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'shouldComponentUpdate'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 描述：组件重新渲染完成后会调用此方法</div><div class=\"line\">     * 次数：多次</div><div class=\"line\">     * 推荐：</div><div class=\"line\">     */</span></div><div class=\"line\">    componentDidUpdate() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'componentDidUpdate'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 描述：控件渲染后触发</div><div class=\"line\">     * 次数：1次</div><div class=\"line\">     * 推荐：</div><div class=\"line\">     */</span></div><div class=\"line\">    componentDidMount() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'componentDidMount'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 描述：组件卸载和销毁之前被调用</div><div class=\"line\">     * 次数：一次</div><div class=\"line\">     * 推荐：用于清理一些无用的内容，比如：定时器清除</div><div class=\"line\">     */</span></div><div class=\"line\">    componentWillUnmount() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'componentWillUnmount'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    componentWillUpdate() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'componentWillUpdate'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'render'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.content&#125;</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.text&#125;</span> <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;</span></div><div class=\"line\">                    () =&gt;</span> &#123;</div><div class=\"line\">                        this.setState(&#123;</div><div class=\"line\">                            result: '点击后'</div><div class=\"line\">                        &#125;)</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;&gt;</div><div class=\"line\">                    &#123;this.state.result&#125;</div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> styles = StyleSheet.create(&#123;</div><div class=\"line\">    <span class=\"attr\">content</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">flex</span>: <span class=\"number\">1</span>,</div><div class=\"line\">        <span class=\"attr\">justifyContent</span>: <span class=\"string\">'center'</span>,</div><div class=\"line\">        <span class=\"attr\">alignItems</span>: <span class=\"string\">'center'</span>,</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">text</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">padding</span>: <span class=\"number\">50</span>,</div><div class=\"line\">        <span class=\"attr\">fontSize</span>: <span class=\"number\">20</span>,</div><div class=\"line\">        <span class=\"attr\">color</span>: <span class=\"string\">'#ffffff'</span>,</div><div class=\"line\">        <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'#00a056'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p><strong>console</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">constructor</span></div><div class=\"line\">App.js:39 componentWillMount</div><div class=\"line\">App.js:103 render</div><div class=\"line\">App.js:86 componentDidMount</div><div class=\"line\">App.js:108 onPress call</div><div class=\"line\">App.js:66 shouldComponentUpdate</div><div class=\"line\">App.js:100 componentWillUpdate</div><div class=\"line\">App.js:103 render</div><div class=\"line\">App.js:76 componentDidUpdate</div></pre></td></tr></table></figure>\n<h1 id=\"组件的生命周期\"><a href=\"#组件的生命周期\" class=\"headerlink\" title=\"组件的生命周期\"></a>组件的生命周期</h1><p>通过上面的栗子，有灵性的小哥哥已经基本猜到大致的生命周期了</p>\n<p>下面再看看这张我偷来的帅图</p>\n<p><img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/ReactNativeLifeCycle.png\" width=\"400\"></p>\n<p>再结合这张酷表</p>\n<table>\n<thead>\n<tr>\n<th>生命周期</th>\n<th>调用次数</th>\n<th>能否使用 setSate()</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>getDefaultProps（es6:static defaultProps）</td>\n<td>1(全局调用一次)</td>\n<td>否</td>\n<td>初始化默认属性</td>\n</tr>\n<tr>\n<td>getInitialState(es6:constructor(props))</td>\n<td>1</td>\n<td>否</td>\n<td>构造函数，初始化需要的state</td>\n</tr>\n<tr>\n<td>componentWillMount</td>\n<td>1</td>\n<td>是</td>\n<td>控件渲染前触发</td>\n</tr>\n<tr>\n<td>render</td>\n<td>&gt;=1</td>\n<td>否</td>\n<td>渲染控件的方法</td>\n</tr>\n<tr>\n<td>componentDidMount</td>\n<td>1</td>\n<td>是</td>\n<td>控件渲染后触发</td>\n</tr>\n<tr>\n<td>componentWillReceiveProps</td>\n<td>&gt;=0</td>\n<td>是</td>\n<td>组件接收到新的props时被调用</td>\n</tr>\n<tr>\n<td>shouldComponentUpdate</td>\n<td>&gt;=0</td>\n<td>否</td>\n<td>当组件接收到新的props和state时被调用</td>\n</tr>\n<tr>\n<td>componentWillUpdate</td>\n<td>&gt;=0</td>\n<td>否</td>\n<td>props或者state改变，并且此前的shouldComponentUpdate方法返回为 true会调用该方法</td>\n</tr>\n<tr>\n<td>componentDidUpdate</td>\n<td>&gt;=0</td>\n<td>否</td>\n<td>组件重新渲染完成后会调用此方法</td>\n</tr>\n</tbody>\n</table>\n<p>另外还有一个场景需要知道的，代码我就不贴了</p>\n<p>父组件中有一个子组件，点击父组件调用setState，那么父子组件的生命周期如何回调？</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//加载过程</span></div><div class=\"line\">constructor</div><div class=\"line\">App<span class=\"selector-class\">.js</span>:<span class=\"number\">42</span> componentWillMount</div><div class=\"line\">App<span class=\"selector-class\">.js</span>:<span class=\"number\">107</span> render</div><div class=\"line\">ChildComponent<span class=\"selector-class\">.js</span>:<span class=\"number\">26</span> ChildComponent,constructor</div><div class=\"line\">ChildComponent<span class=\"selector-class\">.js</span>:<span class=\"number\">41</span> ChildComponent,componentWillMount</div><div class=\"line\">ChildComponent<span class=\"selector-class\">.js</span>:<span class=\"number\">106</span> ChildComponent,render</div><div class=\"line\">ChildComponent<span class=\"selector-class\">.js</span>:<span class=\"number\">88</span> ChildComponent,componentDidMount</div><div class=\"line\">App<span class=\"selector-class\">.js</span>:<span class=\"number\">89</span> componentDidMount</div><div class=\"line\"><span class=\"comment\">//点击后，调用父组件的setState后</span></div><div class=\"line\">shouldComponentUpdate</div><div class=\"line\">App<span class=\"selector-class\">.js</span>:<span class=\"number\">103</span> componentWillUpdate</div><div class=\"line\">App<span class=\"selector-class\">.js</span>:<span class=\"number\">107</span> render</div><div class=\"line\">ChildComponent<span class=\"selector-class\">.js</span>:<span class=\"number\">59</span> ChildComponent,componentWillReceiveProps</div><div class=\"line\">ChildComponent<span class=\"selector-class\">.js</span>:<span class=\"number\">68</span> ChildComponent,shouldComponentUpdate</div><div class=\"line\">ChildComponent<span class=\"selector-class\">.js</span>:<span class=\"number\">102</span> ChildComponent,componentWillUpdate</div><div class=\"line\">ChildComponent<span class=\"selector-class\">.js</span>:<span class=\"number\">106</span> ChildComponent,render</div><div class=\"line\">ChildComponent<span class=\"selector-class\">.js</span>:<span class=\"number\">78</span> ChildComponent,componentDidUpdate</div><div class=\"line\">App<span class=\"selector-class\">.js</span>:<span class=\"number\">79</span> componentDidUpdate</div></pre></td></tr></table></figure>\n<p>可以看到：</p>\n<ul>\n<li>组件的加载是从内到外一级一级的，这个和android类似</li>\n<li>修改父组件state，触发update整个流程，但是不再次触发子组件的constructor</li>\n</ul>\n<h1 id=\"推荐的操作\"><a href=\"#推荐的操作\" class=\"headerlink\" title=\"推荐的操作\"></a>推荐的操作</h1><ul>\n<li>constructor()方法里初始化state </li>\n<li>static defaultProps指定默认属性</li>\n<li>componentDidMount()：该方法在render()方法后自动调用，网络请求一般放在这个方法中</li>\n<li>shouldComponentUpdate()：该方法返回一个boolean值，用来决定是否需要重新渲染组件，默认返回true，你可以自己重写此方法，通过条件判断来决定你是否需要更新组件</li>\n<li>componentWillUnmount()：在组件被移除前调用，在该方法中，释放一些不需要的资源，比如停止定时器</li>\n<li><strong>不要在 constructor 或者 render 里 setState()</strong></li>\n<li>constructor 已含 this.state={} </li>\n<li>render 里 setState 会造成setState -&gt; render -&gt; setState -&gt; render </li>\n<li>能做的setState，只要是render前，就放在componentWillMount，render后，就放在 componentDidMount。這两个 function 是 react lifecycle 中，最常使用的两个</li>\n<li>更多以后再添加总结</li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://blog.csdn.net/ddwhan0123/article/details/78490884\">React-Native生命周期的触发场景和一些小建议</a></p>\n<p><a href=\"https://blog.csdn.net/sinat_30949835/article/details/79833721\">React Native 中组件的生命周期</a></p>\n<p><a href=\"http://www.devio.org/2016/08/10/React-Native%E4%B9%8BReact%E9%80%9F%E5%AD%A6%E6%95%99%E7%A8%8B-(%E4%B8%AD\">React Native之React速学教程(中)</a>/)</p>"},{"title":"Rxjava2.0-知识碎片（三）","date":"2018-07-24T01:47:45.000Z","password":null,"_content":"\n基于Rxjava2.0的操作符小结\n\n<!--more-->\n\n# 一：创建相关\n\n### creat操作符\n\n```\nObservable.create(new Observable.OnSubscribe<String>() {\n\n        @Override\n        public void call(Subscriber<? super String> subscriber) {\n\n            subscriber.onNext(\"item1\");\n            subscriber.onNext(\"item2\");\n            subscriber.onCompleted();\n        }\n    });\n\n```\n\n### just\n\n```\nObservable observable = Observable.just(\"Hello\", \"Hi\", \"Aloha\");\n// 将会依次调用：\n// onNext(\"Hello\");\n// onNext(\"Hi\");\n// onNext(\"Aloha\");\n// onCompleted();\n```\n\n### from\n\n```java\nString[] words = {\"Hello\", \"Hi\", \"Aloha\"};\nObservable observable = Observable.from(words);\n// 将会依次调用：\n// onNext(\"Hello\");\n// onNext(\"Hi\");\n// onNext(\"Aloha\");\n// onCompleted();\n```\n### interval操作符\n\n不多bb，看以下代码\n\n```java\npublic void rxJava() {\n        Observable.interval(1, TimeUnit.SECONDS)\n                .subscribe(new Consumer<Long>() {\n                    public Disposable mDisposable;\n\n                    @Override\n                    public void accept(Long aLong) {\n                        if (aLong == 10) {\n                            mDisposable.dispose();\n                        }\n                        System.out.println(\"计时器\" + aLong);\n                    }\n                }, throwable -> {\n\n                }, () -> {\n                    System.out.println(\"action\");\n                }, disposable -> mDisposable = disposable);\n    }\n//log\n07-24 11:24:52.718 12306-12332/com.fengandev.rxjavademo I/System.out: 计时器0\n07-24 11:24:53.718 12306-12332/com.fengandev.rxjavademo I/System.out: 计时器1\n07-24 11:24:54.718 12306-12332/com.fengandev.rxjavademo I/System.out: 计时器2\n07-24 11:24:55.718 12306-12332/com.fengandev.rxjavademo I/System.out: 计时器3\n07-24 11:24:56.718 12306-12332/com.fengandev.rxjavademo I/System.out: 计时器4\n07-24 11:24:57.718 12306-12332/com.fengandev.rxjavademo I/System.out: 计时器5\n07-24 11:24:58.718 12306-12332/com.fengandev.rxjavademo I/System.out: 计时器6\n07-24 11:24:59.718 12306-12332/com.fengandev.rxjavademo I/System.out: 计时器7\n07-24 11:25:00.718 12306-12332/com.fengandev.rxjavademo I/System.out: 计时器8\n07-24 11:25:01.718 12306-12332/com.fengandev.rxjavademo I/System.out: 计时器9\n```\n\n可以简易的封装，获取一个倒计时Observable\n\n```java\n/**\n     * 产生一个倒计时的 Observable\n     * @param time\n     * @return\n     */\n    public Observable<Long> countdown(final long time) {\n        return Observable.interval(1, TimeUnit.SECONDS)\n                .map(new Function<Long, Long>() {\n                    @Override\n                    public Long apply(@NonNull Long aLong) throws Exception {\n                        return time - aLong;\n                    }\n                }).take( time + 1 );\n    }\n\n//使用\n    public void rxJava() {\n        countdown(10).subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long aLong) throws Exception {\n                System.out.println(\"倒计时\"+aLong);\n            }\n        });\n    }\n```\n\n### range操作符\n\nrange 发射特定整数序列的 Observable\n\n- range( int start , int end ) //start :开始的值 ， end ：结束的值\n\n```java\n Observable.range(0,5)\n                .subscribe(integer -> System.out.println(integer));\n//log\n0\n1\n2\n3\n4\n```\n\n老规矩，包前不包后\n### empty和error和never\n\n**empty**\n\n`Observable observable1=Observable.empty();`//直接调用onCompleted。\n\n```java\n//Observable observable1=Observable.empty();//直接调用onCompleted。\n@Test\n    public void testRxJava() {\n        Observable<String> empty = Observable.empty();\n        empty.subscribe(new Observer<String>() {\n            @Override\n            public void onSubscribe(Disposable d) {\n                System.out.println(\"onSubscribe\");\n            }\n\n            @Override\n            public void onNext(String s) {\n                System.out.println(\"onNext\");\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                System.out.println(\"onError\");\n            }\n\n            @Override\n            public void onComplete() {\n                System.out.println(\"onComplete\");\n            }\n        });\n    }\n//log:\n//onSubscribe\n//onComplete\n```\n\n**never**\n\n`Observable observable3=Observable.never();`//啥都不做\n\n```java\n@Test\npublic void testRxJava() {\n    Observable<String> empty = Observable.never();\n    empty.subscribe(new Observer<String>() {\n        @Override\n        public void onSubscribe(Disposable d) {\n            System.out.println(\"onSubscribe\");\n        }\n\n        @Override\n        public void onNext(String s) {\n            System.out.println(\"onNext\");\n        }\n\n        @Override\n        public void onError(Throwable e) {\n            System.out.println(\"onError\");\n        }\n\n        @Override\n        public void onComplete() {\n            System.out.println(\"onComplete\");\n        }\n    });\n}\n//log\n//onSubscribe\n```\n\n**error**\n\n`Observable observable2=Observable.error(new RuntimeException());`//直接调用onError。这里可以自定义异常\n\n## 功能操作\n\n### map操作符\n\nmap操作符算是Rxjava中最简单的一个操作符了，在2.x中的用法和1.x差不多；它的作用就是对发射的每一个事件应用一个函数，每一个事件都按照map操作符指定的函数去变化转换，下面我们看一个栗子🌰\n\n```java\n@Test\n    public void rxJava() {\n        Observable.create(new ObservableOnSubscribe<Integer>() {\n            @Override\n            public void subscribe(ObservableEmitter<Integer> emitter) throws Exception {\n                emitter.onNext(1);\n                emitter.onNext(2);\n                emitter.onNext(3);\n                emitter.onComplete();\n            }\n        }).map(new Function<Integer, String>() {\n            @Override\n            public String apply(Integer integer) throws Exception {\n                Log.e(\"fengan\", \"apply---->\" + Thread.currentThread().getName());\n                return \"this is value = \" + integer;\n            }\n        }).subscribeOn(Schedulers.single())\n//                .observeOn(Schedulers.single())\n                .subscribe(new Consumer<String>() {\n                    @Override\n                    public void accept(String s) throws Exception {\n                        Log.e(\"fengan\", \"accept---->\" + Thread.currentThread().getName());\n                        Log.e(\"fengan\", \"accept---->\" + s);\n                        Log.e(\"fengan\",\"========\");\n\n                    }\n                });\n    }\n```\n\nlog\n\n```java\n    apply---->RxSingleScheduler-1\n    accept---->RxSingleScheduler-1\n    accept---->this is value = 1\n    ========\n    apply---->RxSingleScheduler-1\n    accept---->RxSingleScheduler-1\n    accept---->this is value = 2\n    ========\n    apply---->RxSingleScheduler-1\n    accept---->RxSingleScheduler-1\n    accept---->this is value = 3\n    ========\n\n```\n\n从这个例子，我们能看出\n\n- 我们发射的integer事件，被转换为String，继续进行\n- 我们也顺便验证了两个问题（在碎片化2整理的线程调度）\n  -  只指定`subscribeOn`未指定`observeOn`的情况下，观察者的事件的接受（下游）按照`subscribeOn`指定的线程进行\n  -  `Schedulers.single()`是在指定线程中按照队列的形式进行，先进先出（体现在：一个事件发布和接受完毕后，才发送第二个事件）\n\n\n### debounce操作符\n\n`debounce`：防抖；\n\nonly emit an item from an Observable if a particular time-span has passed without it emitting another item,\n\n当一个事件发送出来之后，在约定时间内没有再次发送这个事件，则发射这个事件，如果再次触发了，则重新计算时间。\n\n[参考链接](https://www.jianshu.com/p/ee1f0d21a856)\n\n```java\n Observable.create(new ObservableOnSubscribe<Integer>() {\n            @Override\n            public void subscribe(ObservableEmitter<Integer> emitter) throws Exception {\n                // send events with simulated time wait\n                emitter.onNext(1); // skip\n                Thread.sleep(400);\n                emitter.onNext(2); // deliver\n                Thread.sleep(505);\n                emitter.onNext(3); // skip\n                Thread.sleep(100);\n                emitter.onNext(4); // deliver\n                Thread.sleep(605);\n                emitter.onNext(5); // deliver\n                Thread.sleep(510);\n                emitter.onComplete();\n            }\n        }).debounce(500,TimeUnit.MILLISECONDS)\n            .subscribe(new Consumer<Integer>() {\n                @Override\n                public void accept(Integer integer) throws Exception {\n                    System.out.println(integer);\n                }\n            });\n\n//2\n//4\n//5\n```\n\n### onTerminateDetach操作符\n\n[Rxjava导致内存泄漏的问题](https://blog.csdn.net/johnny901114/article/details/67640594)\n\n[一张图搞定-RxJava2的线程切换原理和内存泄露问题](https://blog.csdn.net/johnny901114/article/details/67640594)\n\n看完这两个参考链接，基本也就知道了onTerminateDetach的使用方法和作用\n\n### defer操作符\n\n只有当订阅者订阅才创建Observable，为每个订阅创建一个新的Observable。\n\n```java\n@Test\npublic void rxjava() {\n    Observable.defer(new Callable<ObservableSource<Integer>>() {\n        @Override\n        public ObservableSource<Integer> call() throws Exception {\n            return Observable.just(1,2,3);\n        }\n    }).subscribe(new Consumer<Integer>() {\n        @Override\n        public void accept(Integer integer) throws Exception {\n            System.out.println(integer);\n        }\n    });\n}\n1\n2\n3\n```\n### flatMap操作符\n\n把一个发射器`Observable` 通过某种方法转换为多个`Observables`，然后再把这些分散的`Observables`装进一个单一的发射器`Observable`。但有个需要注意的是，`flatMap`并不能保证事件的顺序，如果需要保证，需要用到我们下面要讲的`ConcatMap`。\n\n```java\n@Test\npublic void rxJava() {\n    Observable.create(new ObservableOnSubscribe<Integer>() {\n        @Override\n        public void subscribe(ObservableEmitter<Integer> emitter) throws Exception {\n            emitter.onNext(1);\n            emitter.onNext(2);\n            emitter.onNext(3);\n            emitter.onComplete();\n        }\n    }).flatMap(new Function<Integer, ObservableSource<String>>() {\n        @Override\n        public ObservableSource<String> apply(Integer integer) throws Exception {\n            List<String> res = new ArrayList<>();\n            res.add(\"i am value =\" + integer);\n            Log.e(\"fengan\",\"flatMap size\"+res.size());\n            return Observable.fromIterable(res);\n        }\n    }).subscribe(new Consumer<String>() {\n        @Override\n        public void accept(String s) throws Exception {\n            Log.e(\"fengan\",\"accept=\"+s);\n        }\n    });\n}\n```\n\nlog\n\n```\n\tflatMap size1\n\taccept=i am value =1\n    flatMap size1\n    accept=i am value =2\n    flatMap size1\n    accept=i am value =3\n```\n\n**结论**\n\n- 验证了我之前的一个误区（size大小一直为1）：误以为所有事件发送完毕之后，在flatmap统一处理，其实不是，事件源每发射一个事件，`flatmap`就处理转换一个事件\n- `flatMap`的作用是，接受一个事件，作出处理完之后，重新发射一个新的事件\n\n刚才说到`flatMap`并不能保证事件的顺序，请看下面的例子就明白了\n\n### concatMap操作符\n\nflatMap操作符可以将一个`Observable`转换为另一个`Observable`发射出去,并且可以将多个事件转化为1个，但是最后输出的事件序列顺序是不确定的，如果想要最后输出的事件顺序和源数据的顺序一致只要换成`concatMap`就可以了。 \nflatMap和Map操作符的不同是map一次只能转换一个事件。\n\n先看一个`flatmap`的使用例子，如下\n\n```java\n Observable.create((ObservableOnSubscribe<Integer>) emitter -> {\n            emitter.onNext(1);\n            emitter.onNext(2);\n            emitter.onNext(3);\n            emitter.onComplete();\n        }).subscribeOn(Schedulers.io()).flatMap((Function<Integer, ObservableSource<String>>) integer -> {\n            List<String> res = new ArrayList<>();\n            for (int i = 0; i < 3; i++) {\n                res.add(\"I am value \" + integer);\n            }\n            int delayTime = (int) (1 + Math.random() * 10);\n            return Observable.fromIterable(res).delay(delayTime, TimeUnit.MILLISECONDS);\n        }).subscribe(s -> Log.e(\"fengan\", \"accept=\" + s));\n```\n\nlog\n\n```java\n    accept=I am value 3\n    accept=I am value 3\n    accept=I am value 2\n    accept=I am value 2\n    accept=I am value 2\n    accept=I am value 3\n    accept=I am value 1\n    accept=I am value 1\n    accept=I am value 1\n```\n\n可见不是按照源数据到顺序一致，若想一致使用`concatMap`就可以了\n\n\n### repeat操作符\n\nrepeat 重复地发射数据\n\n- repeat( ) //无限重复\n- repeat( int time ) //设定重复的次数\n\n```java\nObservable.just(1,2,3)\n                .repeat(3)\n                .subscribe(integer -> System.out.println(integer));\n1\n2\n3\n1\n2\n3\n1\n2\n3\n```\n\n### fromArray和fromIterble操作符\n\n一个是发射一个数组一个是发射一个集合\n\n### toList\n\n将数组转换为集合\n\n### delay操作符\n\n```java\npublic void rxJava() {\n        Observable.just(1, 2, 3)\n                .delay(3, TimeUnit.SECONDS)\n                .observeOn(Schedulers.io())\n                .subscribe(integer -> {\n                    int a = integer;\n                    System.out.println(a);\n                });\n    }\n//注意：延迟3秒钟，然后在发射数据\n//是延迟三秒，发送1，2，3数据\n//而不是--延迟3秒--发送1--延迟3秒---发送2\n```\n\n- 是延迟三秒，发送1，2，3数据\n- 而不是--延迟3秒--发送1--延迟3秒---发送2\n\n若想达到这种效果，可以类似这么做\n\n```java\npublic void rxJava() {\n        Observable.just(1, 2, 3)\n                .concatMap(new Function<Integer, ObservableSource<Integer>>() {\n                    @Override\n                    public ObservableSource<Integer> apply(Integer integer) throws Exception {\n                        return Observable.just(integer) .delay(3, TimeUnit.SECONDS);\n                        \n                    }\n                })\n                .subscribe(integer -> System.out.println(integer));\n    }\n//--延迟三秒---发送1---延迟三秒---发送2---延迟3秒---发送3\n```\n### doOnNext操作符\n\n```java\n@Test\npublic void testRxJava() {\n    Observable.create(new ObservableOnSubscribe<Integer>() {\n        @Override\n        public void subscribe(ObservableEmitter<Integer> emitter) throws Exception {\n            emitter.onNext(1);\n            emitter.onNext(2);\n        }\n    }).doOnNext(new Consumer<Integer>() {\n        @Override\n        public void accept(Integer integer) throws Exception {\n            System.out.println(\"前置操作\" + integer);\n            integer+=1;\n        }\n    })\n            .subscribe(System.out::println);\n}\n//log\n前置操作1\n1\n前置操作2\n2\n```\n\n在每次 OnNext() 方法被调用前执行\n\n使用场景：从网络请求数据，在数据被展示前，缓存到本地\n## 合并操作\n\n### concat操作符\n\n按顺序连接多个Observables。需要注意的是Observable.concat(a,b)等价于a.concatWith(b)。\n\n```java\nObservable<Integer> observable1=Observable.just(1,2,3,4);\n    Observable<Integer>  observable2=Observable.just(4,5,6);\n\n    Observable.concat(observable1,observable2)\n            .subscribe(item->Log.d(\"JG\",item.toString()));//1,2,3,4,4,5,6\n\n```\n\n### startWith操作符\n\n在数据序列的开头增加一项数据。startWith的内部也是调用了concat\n\n```java\n Observable.just(1,2,3,4,5)\n            .startWith(6,7,8)\n    .subscribe(item->Log.d(\"JG\",item.toString()));//6,7,8,1,2,3,4,5\n```\n\n### merge操作符\n\n合并被观察者\n\n```java\nfinal String[] aStrings = {\"A1\", \"A2\", \"A3\", \"A4\"};\n        final String[] bStrings = {\"B1\", \"B2\", \"B3\"};\n\n        final Observable<String> aObservable = Observable.fromArray(aStrings);\n        final Observable<String> bObservable = Observable.fromArray(bStrings);\n\n        Observable.merge(aObservable, bObservable)//使用merge操作符将两个被观察者合并\n                .subscribe(getObserver());//这里的观察者依然不重要\n//\"A1\", \"B1\", \"A2\", \"A3\", \"A4\", \"B2\", \"B3\" \n```\n\n操作符merge将两个被观察者合并,这里要注意merge之后的Observable是不能保证和原来的Observable发射顺序相同.\n\n### Zip操作符\n\nzip我们想到”压缩“，那么在这个操作符是什么意思呢，请看下面图片\n\n![Zip](https://upload-images.jianshu.io/upload_images/1931185-14134e499db9d0c4.png?imageMogr2/auto-orient/)\n\n```java\n@Test\n    public void rxJava() {\n        Observable.zip(Observable.just(\"A\", \"B\", \"C\"), Observable.just(1,2,3,4,5), new BiFunction<String, Integer, String>() {\n\n            @Override\n            public String apply(String s, Integer integer) throws Exception {\n                return s+integer;\n            }\n        }).subscribe(s -> System.out.println(\"value=\" + s));\n    }\n```\n\nlog\n\n```java\n    value=A1\n    value=B2\n    value=C3\n\n```\n\n结论：\n\n- zip 组合事件的过程就是分别从发射器A和发射器B各取出一个事件来组合，并且一个事件只能被使用一次，组合的顺序是严格按照事件发送的顺序来进行的，所以上面截图中，可以看到，1永远是和A 结合的，2永远是和B结合的。\n\n\n- 最终接收器收到的事件数量是和发送器发送事件最少的那个发送器的发送事件数目相同，所以代码中，4和5是没有配对的，所以也就无法发射合并事件\n\n### combineLatest操作符\n\n先看一张图，我想你应该已经大致明白意思了\n\n![combineLatest](https://upload-images.jianshu.io/upload_images/1931185-1e60a8bf25b31e91.png?imageMogr2/auto-orient/)\n\n[使用场景，表单验证](https://blog.csdn.net/jdsjlzx/article/details/53040293)\n\ncombineLatest是RxJava本身提供的一个常用的操作符，它接受两个或以上的Observable和一个FuncX闭包。当传入的Observable中任意的一个发射数据时，combineLatest将每个Observable的最近值(Lastest)联合起来（combine）传给FuncX闭包进行处理。要点在于：\n\n1. combineLatest是会存储每个Observable的最近的值的\n2. 任意一个Observable发射新值时都会触发操作->“combine all the Observable’s lastest value together and send to Function”\n\n看一个例子，可以说明\n\n```java\n@Test\n    public void testRxJava() {\n        final String[] aStrings = {\"A1\", \"A2\", \"A3\", \"A4\"};\n        final String[] bStrings = {\"B1\", \"B2\", \"B3\"};\n\n        final Observable<String> aObservable = Observable.fromArray(aStrings).delay(1,TimeUnit.MILLISECONDS);\n        final Observable<String> bObservable = Observable.fromArray(bStrings);\n\n        Observable.combineLatest(aObservable, bObservable, new BiFunction<String, String, String>() {\n            @Override\n            public String apply(String s1, String s2) throws Exception {\n                return s1+s2;\n            }\n        }).subscribe(new Consumer<String>() {\n            @Override\n            public void accept(String s) throws Exception {\n                System.out.println(s);\n            }\n        });\n    }\n//log\n//A1B3\n//A2B3\n//A3B3\n//A4B3\n可见，发送A1的时候B1 B2 B3都已经发射完毕\n所以，存储每个Observable的最近的值的，也就是B3\n当B1，B2，B3发射的 A被观察者一个都没发射，所以得至少两个才会合并，这个看图可以解释\n```\n\n##过滤操作\n### take等操作符\n\n```java\n//take 取前n个数据\nObservable.just(1, 2, 3,4,5,6,7)\n        .take(3)\n       .subscribe(System.out::println);\n//log\n1\n2\n3\n//takelast 取后n个数据\n Observable.just(1, 2, 3, 4, 5, 6, 7)\n                .takeLast(3)\n                .subscribe(System.out::println);\n//log\n5\n6\n7\n//first 只发送第一个数据  \n//last 只发送最后一个数据\n//skip() 跳过前n个数据发送后面的数据\n//skipLast() 跳过最后n个数据，发送前面的数据  \n```\n\n### filter操作符\n\n顾名思义，过滤发送的事件\n\n```java\n @Test\n    public void testRxJava() {\n        Observable.just(1, 2, 3)\n                .filter(integer -> {\n                    if (integer==2) {\n                        return false;\n                    }\n                    return true;\n                }).subscribe(System.out::println);\n    }\n//log\n1\n3\n```\n\n### ofType\n\n过滤指定类型的数据，与filter类似，\n\n```java\n@Test\npublic void rxjava() {\n    Observable.just(1,\"1\",-1)\n            .ofType(Integer.class)\n            .subscribe(new Consumer<Integer>() {\n                @Override\n                public void accept(Integer integer) throws Exception {\n                    System.out.println(integer);\n                }\n//log\n1\n-1\n\n```\n\n### first和last\n\n```\nObservable.just(1, 2, 3)\n        .first(2)\n        .subscribe(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer integer) throws Exception {\n                System.out.println(integer);\n            }\n        });\n//1\n Observable.just(1, 2, 3)\n                .last(2)\n                .subscribe(new Consumer<Integer>() {\n                    @Override\n                    public void accept(Integer integer) throws Exception {\n                        System.out.println(integer);\n                    }\n                });\n//3                \n```\n\n## 未完待续\n\n## 参考：\n\n[手把手教你使用 RxJava 2.0（一）](https://www.jianshu.com/p/d149043d103a)\n\n[RxJava combineLatest操作符处理复杂表单验证问题](https://blog.csdn.net/jdsjlzx/article/details/53040293)\n\n[Android - RxJava2.0 操作符整理归纳](https://www.jianshu.com/p/b30de498c3cc)","source":"_posts/Rxjava2-0-知识碎片（三）.md","raw":"---\ntitle: Rxjava2.0-知识碎片（三）\ndate: 2018-07-24 09:47:45\ntags:\n- Rxjava\ncategories: Rxjava\npassword:\n---\n\n基于Rxjava2.0的操作符小结\n\n<!--more-->\n\n# 一：创建相关\n\n### creat操作符\n\n```\nObservable.create(new Observable.OnSubscribe<String>() {\n\n        @Override\n        public void call(Subscriber<? super String> subscriber) {\n\n            subscriber.onNext(\"item1\");\n            subscriber.onNext(\"item2\");\n            subscriber.onCompleted();\n        }\n    });\n\n```\n\n### just\n\n```\nObservable observable = Observable.just(\"Hello\", \"Hi\", \"Aloha\");\n// 将会依次调用：\n// onNext(\"Hello\");\n// onNext(\"Hi\");\n// onNext(\"Aloha\");\n// onCompleted();\n```\n\n### from\n\n```java\nString[] words = {\"Hello\", \"Hi\", \"Aloha\"};\nObservable observable = Observable.from(words);\n// 将会依次调用：\n// onNext(\"Hello\");\n// onNext(\"Hi\");\n// onNext(\"Aloha\");\n// onCompleted();\n```\n### interval操作符\n\n不多bb，看以下代码\n\n```java\npublic void rxJava() {\n        Observable.interval(1, TimeUnit.SECONDS)\n                .subscribe(new Consumer<Long>() {\n                    public Disposable mDisposable;\n\n                    @Override\n                    public void accept(Long aLong) {\n                        if (aLong == 10) {\n                            mDisposable.dispose();\n                        }\n                        System.out.println(\"计时器\" + aLong);\n                    }\n                }, throwable -> {\n\n                }, () -> {\n                    System.out.println(\"action\");\n                }, disposable -> mDisposable = disposable);\n    }\n//log\n07-24 11:24:52.718 12306-12332/com.fengandev.rxjavademo I/System.out: 计时器0\n07-24 11:24:53.718 12306-12332/com.fengandev.rxjavademo I/System.out: 计时器1\n07-24 11:24:54.718 12306-12332/com.fengandev.rxjavademo I/System.out: 计时器2\n07-24 11:24:55.718 12306-12332/com.fengandev.rxjavademo I/System.out: 计时器3\n07-24 11:24:56.718 12306-12332/com.fengandev.rxjavademo I/System.out: 计时器4\n07-24 11:24:57.718 12306-12332/com.fengandev.rxjavademo I/System.out: 计时器5\n07-24 11:24:58.718 12306-12332/com.fengandev.rxjavademo I/System.out: 计时器6\n07-24 11:24:59.718 12306-12332/com.fengandev.rxjavademo I/System.out: 计时器7\n07-24 11:25:00.718 12306-12332/com.fengandev.rxjavademo I/System.out: 计时器8\n07-24 11:25:01.718 12306-12332/com.fengandev.rxjavademo I/System.out: 计时器9\n```\n\n可以简易的封装，获取一个倒计时Observable\n\n```java\n/**\n     * 产生一个倒计时的 Observable\n     * @param time\n     * @return\n     */\n    public Observable<Long> countdown(final long time) {\n        return Observable.interval(1, TimeUnit.SECONDS)\n                .map(new Function<Long, Long>() {\n                    @Override\n                    public Long apply(@NonNull Long aLong) throws Exception {\n                        return time - aLong;\n                    }\n                }).take( time + 1 );\n    }\n\n//使用\n    public void rxJava() {\n        countdown(10).subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long aLong) throws Exception {\n                System.out.println(\"倒计时\"+aLong);\n            }\n        });\n    }\n```\n\n### range操作符\n\nrange 发射特定整数序列的 Observable\n\n- range( int start , int end ) //start :开始的值 ， end ：结束的值\n\n```java\n Observable.range(0,5)\n                .subscribe(integer -> System.out.println(integer));\n//log\n0\n1\n2\n3\n4\n```\n\n老规矩，包前不包后\n### empty和error和never\n\n**empty**\n\n`Observable observable1=Observable.empty();`//直接调用onCompleted。\n\n```java\n//Observable observable1=Observable.empty();//直接调用onCompleted。\n@Test\n    public void testRxJava() {\n        Observable<String> empty = Observable.empty();\n        empty.subscribe(new Observer<String>() {\n            @Override\n            public void onSubscribe(Disposable d) {\n                System.out.println(\"onSubscribe\");\n            }\n\n            @Override\n            public void onNext(String s) {\n                System.out.println(\"onNext\");\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                System.out.println(\"onError\");\n            }\n\n            @Override\n            public void onComplete() {\n                System.out.println(\"onComplete\");\n            }\n        });\n    }\n//log:\n//onSubscribe\n//onComplete\n```\n\n**never**\n\n`Observable observable3=Observable.never();`//啥都不做\n\n```java\n@Test\npublic void testRxJava() {\n    Observable<String> empty = Observable.never();\n    empty.subscribe(new Observer<String>() {\n        @Override\n        public void onSubscribe(Disposable d) {\n            System.out.println(\"onSubscribe\");\n        }\n\n        @Override\n        public void onNext(String s) {\n            System.out.println(\"onNext\");\n        }\n\n        @Override\n        public void onError(Throwable e) {\n            System.out.println(\"onError\");\n        }\n\n        @Override\n        public void onComplete() {\n            System.out.println(\"onComplete\");\n        }\n    });\n}\n//log\n//onSubscribe\n```\n\n**error**\n\n`Observable observable2=Observable.error(new RuntimeException());`//直接调用onError。这里可以自定义异常\n\n## 功能操作\n\n### map操作符\n\nmap操作符算是Rxjava中最简单的一个操作符了，在2.x中的用法和1.x差不多；它的作用就是对发射的每一个事件应用一个函数，每一个事件都按照map操作符指定的函数去变化转换，下面我们看一个栗子🌰\n\n```java\n@Test\n    public void rxJava() {\n        Observable.create(new ObservableOnSubscribe<Integer>() {\n            @Override\n            public void subscribe(ObservableEmitter<Integer> emitter) throws Exception {\n                emitter.onNext(1);\n                emitter.onNext(2);\n                emitter.onNext(3);\n                emitter.onComplete();\n            }\n        }).map(new Function<Integer, String>() {\n            @Override\n            public String apply(Integer integer) throws Exception {\n                Log.e(\"fengan\", \"apply---->\" + Thread.currentThread().getName());\n                return \"this is value = \" + integer;\n            }\n        }).subscribeOn(Schedulers.single())\n//                .observeOn(Schedulers.single())\n                .subscribe(new Consumer<String>() {\n                    @Override\n                    public void accept(String s) throws Exception {\n                        Log.e(\"fengan\", \"accept---->\" + Thread.currentThread().getName());\n                        Log.e(\"fengan\", \"accept---->\" + s);\n                        Log.e(\"fengan\",\"========\");\n\n                    }\n                });\n    }\n```\n\nlog\n\n```java\n    apply---->RxSingleScheduler-1\n    accept---->RxSingleScheduler-1\n    accept---->this is value = 1\n    ========\n    apply---->RxSingleScheduler-1\n    accept---->RxSingleScheduler-1\n    accept---->this is value = 2\n    ========\n    apply---->RxSingleScheduler-1\n    accept---->RxSingleScheduler-1\n    accept---->this is value = 3\n    ========\n\n```\n\n从这个例子，我们能看出\n\n- 我们发射的integer事件，被转换为String，继续进行\n- 我们也顺便验证了两个问题（在碎片化2整理的线程调度）\n  -  只指定`subscribeOn`未指定`observeOn`的情况下，观察者的事件的接受（下游）按照`subscribeOn`指定的线程进行\n  -  `Schedulers.single()`是在指定线程中按照队列的形式进行，先进先出（体现在：一个事件发布和接受完毕后，才发送第二个事件）\n\n\n### debounce操作符\n\n`debounce`：防抖；\n\nonly emit an item from an Observable if a particular time-span has passed without it emitting another item,\n\n当一个事件发送出来之后，在约定时间内没有再次发送这个事件，则发射这个事件，如果再次触发了，则重新计算时间。\n\n[参考链接](https://www.jianshu.com/p/ee1f0d21a856)\n\n```java\n Observable.create(new ObservableOnSubscribe<Integer>() {\n            @Override\n            public void subscribe(ObservableEmitter<Integer> emitter) throws Exception {\n                // send events with simulated time wait\n                emitter.onNext(1); // skip\n                Thread.sleep(400);\n                emitter.onNext(2); // deliver\n                Thread.sleep(505);\n                emitter.onNext(3); // skip\n                Thread.sleep(100);\n                emitter.onNext(4); // deliver\n                Thread.sleep(605);\n                emitter.onNext(5); // deliver\n                Thread.sleep(510);\n                emitter.onComplete();\n            }\n        }).debounce(500,TimeUnit.MILLISECONDS)\n            .subscribe(new Consumer<Integer>() {\n                @Override\n                public void accept(Integer integer) throws Exception {\n                    System.out.println(integer);\n                }\n            });\n\n//2\n//4\n//5\n```\n\n### onTerminateDetach操作符\n\n[Rxjava导致内存泄漏的问题](https://blog.csdn.net/johnny901114/article/details/67640594)\n\n[一张图搞定-RxJava2的线程切换原理和内存泄露问题](https://blog.csdn.net/johnny901114/article/details/67640594)\n\n看完这两个参考链接，基本也就知道了onTerminateDetach的使用方法和作用\n\n### defer操作符\n\n只有当订阅者订阅才创建Observable，为每个订阅创建一个新的Observable。\n\n```java\n@Test\npublic void rxjava() {\n    Observable.defer(new Callable<ObservableSource<Integer>>() {\n        @Override\n        public ObservableSource<Integer> call() throws Exception {\n            return Observable.just(1,2,3);\n        }\n    }).subscribe(new Consumer<Integer>() {\n        @Override\n        public void accept(Integer integer) throws Exception {\n            System.out.println(integer);\n        }\n    });\n}\n1\n2\n3\n```\n### flatMap操作符\n\n把一个发射器`Observable` 通过某种方法转换为多个`Observables`，然后再把这些分散的`Observables`装进一个单一的发射器`Observable`。但有个需要注意的是，`flatMap`并不能保证事件的顺序，如果需要保证，需要用到我们下面要讲的`ConcatMap`。\n\n```java\n@Test\npublic void rxJava() {\n    Observable.create(new ObservableOnSubscribe<Integer>() {\n        @Override\n        public void subscribe(ObservableEmitter<Integer> emitter) throws Exception {\n            emitter.onNext(1);\n            emitter.onNext(2);\n            emitter.onNext(3);\n            emitter.onComplete();\n        }\n    }).flatMap(new Function<Integer, ObservableSource<String>>() {\n        @Override\n        public ObservableSource<String> apply(Integer integer) throws Exception {\n            List<String> res = new ArrayList<>();\n            res.add(\"i am value =\" + integer);\n            Log.e(\"fengan\",\"flatMap size\"+res.size());\n            return Observable.fromIterable(res);\n        }\n    }).subscribe(new Consumer<String>() {\n        @Override\n        public void accept(String s) throws Exception {\n            Log.e(\"fengan\",\"accept=\"+s);\n        }\n    });\n}\n```\n\nlog\n\n```\n\tflatMap size1\n\taccept=i am value =1\n    flatMap size1\n    accept=i am value =2\n    flatMap size1\n    accept=i am value =3\n```\n\n**结论**\n\n- 验证了我之前的一个误区（size大小一直为1）：误以为所有事件发送完毕之后，在flatmap统一处理，其实不是，事件源每发射一个事件，`flatmap`就处理转换一个事件\n- `flatMap`的作用是，接受一个事件，作出处理完之后，重新发射一个新的事件\n\n刚才说到`flatMap`并不能保证事件的顺序，请看下面的例子就明白了\n\n### concatMap操作符\n\nflatMap操作符可以将一个`Observable`转换为另一个`Observable`发射出去,并且可以将多个事件转化为1个，但是最后输出的事件序列顺序是不确定的，如果想要最后输出的事件顺序和源数据的顺序一致只要换成`concatMap`就可以了。 \nflatMap和Map操作符的不同是map一次只能转换一个事件。\n\n先看一个`flatmap`的使用例子，如下\n\n```java\n Observable.create((ObservableOnSubscribe<Integer>) emitter -> {\n            emitter.onNext(1);\n            emitter.onNext(2);\n            emitter.onNext(3);\n            emitter.onComplete();\n        }).subscribeOn(Schedulers.io()).flatMap((Function<Integer, ObservableSource<String>>) integer -> {\n            List<String> res = new ArrayList<>();\n            for (int i = 0; i < 3; i++) {\n                res.add(\"I am value \" + integer);\n            }\n            int delayTime = (int) (1 + Math.random() * 10);\n            return Observable.fromIterable(res).delay(delayTime, TimeUnit.MILLISECONDS);\n        }).subscribe(s -> Log.e(\"fengan\", \"accept=\" + s));\n```\n\nlog\n\n```java\n    accept=I am value 3\n    accept=I am value 3\n    accept=I am value 2\n    accept=I am value 2\n    accept=I am value 2\n    accept=I am value 3\n    accept=I am value 1\n    accept=I am value 1\n    accept=I am value 1\n```\n\n可见不是按照源数据到顺序一致，若想一致使用`concatMap`就可以了\n\n\n### repeat操作符\n\nrepeat 重复地发射数据\n\n- repeat( ) //无限重复\n- repeat( int time ) //设定重复的次数\n\n```java\nObservable.just(1,2,3)\n                .repeat(3)\n                .subscribe(integer -> System.out.println(integer));\n1\n2\n3\n1\n2\n3\n1\n2\n3\n```\n\n### fromArray和fromIterble操作符\n\n一个是发射一个数组一个是发射一个集合\n\n### toList\n\n将数组转换为集合\n\n### delay操作符\n\n```java\npublic void rxJava() {\n        Observable.just(1, 2, 3)\n                .delay(3, TimeUnit.SECONDS)\n                .observeOn(Schedulers.io())\n                .subscribe(integer -> {\n                    int a = integer;\n                    System.out.println(a);\n                });\n    }\n//注意：延迟3秒钟，然后在发射数据\n//是延迟三秒，发送1，2，3数据\n//而不是--延迟3秒--发送1--延迟3秒---发送2\n```\n\n- 是延迟三秒，发送1，2，3数据\n- 而不是--延迟3秒--发送1--延迟3秒---发送2\n\n若想达到这种效果，可以类似这么做\n\n```java\npublic void rxJava() {\n        Observable.just(1, 2, 3)\n                .concatMap(new Function<Integer, ObservableSource<Integer>>() {\n                    @Override\n                    public ObservableSource<Integer> apply(Integer integer) throws Exception {\n                        return Observable.just(integer) .delay(3, TimeUnit.SECONDS);\n                        \n                    }\n                })\n                .subscribe(integer -> System.out.println(integer));\n    }\n//--延迟三秒---发送1---延迟三秒---发送2---延迟3秒---发送3\n```\n### doOnNext操作符\n\n```java\n@Test\npublic void testRxJava() {\n    Observable.create(new ObservableOnSubscribe<Integer>() {\n        @Override\n        public void subscribe(ObservableEmitter<Integer> emitter) throws Exception {\n            emitter.onNext(1);\n            emitter.onNext(2);\n        }\n    }).doOnNext(new Consumer<Integer>() {\n        @Override\n        public void accept(Integer integer) throws Exception {\n            System.out.println(\"前置操作\" + integer);\n            integer+=1;\n        }\n    })\n            .subscribe(System.out::println);\n}\n//log\n前置操作1\n1\n前置操作2\n2\n```\n\n在每次 OnNext() 方法被调用前执行\n\n使用场景：从网络请求数据，在数据被展示前，缓存到本地\n## 合并操作\n\n### concat操作符\n\n按顺序连接多个Observables。需要注意的是Observable.concat(a,b)等价于a.concatWith(b)。\n\n```java\nObservable<Integer> observable1=Observable.just(1,2,3,4);\n    Observable<Integer>  observable2=Observable.just(4,5,6);\n\n    Observable.concat(observable1,observable2)\n            .subscribe(item->Log.d(\"JG\",item.toString()));//1,2,3,4,4,5,6\n\n```\n\n### startWith操作符\n\n在数据序列的开头增加一项数据。startWith的内部也是调用了concat\n\n```java\n Observable.just(1,2,3,4,5)\n            .startWith(6,7,8)\n    .subscribe(item->Log.d(\"JG\",item.toString()));//6,7,8,1,2,3,4,5\n```\n\n### merge操作符\n\n合并被观察者\n\n```java\nfinal String[] aStrings = {\"A1\", \"A2\", \"A3\", \"A4\"};\n        final String[] bStrings = {\"B1\", \"B2\", \"B3\"};\n\n        final Observable<String> aObservable = Observable.fromArray(aStrings);\n        final Observable<String> bObservable = Observable.fromArray(bStrings);\n\n        Observable.merge(aObservable, bObservable)//使用merge操作符将两个被观察者合并\n                .subscribe(getObserver());//这里的观察者依然不重要\n//\"A1\", \"B1\", \"A2\", \"A3\", \"A4\", \"B2\", \"B3\" \n```\n\n操作符merge将两个被观察者合并,这里要注意merge之后的Observable是不能保证和原来的Observable发射顺序相同.\n\n### Zip操作符\n\nzip我们想到”压缩“，那么在这个操作符是什么意思呢，请看下面图片\n\n![Zip](https://upload-images.jianshu.io/upload_images/1931185-14134e499db9d0c4.png?imageMogr2/auto-orient/)\n\n```java\n@Test\n    public void rxJava() {\n        Observable.zip(Observable.just(\"A\", \"B\", \"C\"), Observable.just(1,2,3,4,5), new BiFunction<String, Integer, String>() {\n\n            @Override\n            public String apply(String s, Integer integer) throws Exception {\n                return s+integer;\n            }\n        }).subscribe(s -> System.out.println(\"value=\" + s));\n    }\n```\n\nlog\n\n```java\n    value=A1\n    value=B2\n    value=C3\n\n```\n\n结论：\n\n- zip 组合事件的过程就是分别从发射器A和发射器B各取出一个事件来组合，并且一个事件只能被使用一次，组合的顺序是严格按照事件发送的顺序来进行的，所以上面截图中，可以看到，1永远是和A 结合的，2永远是和B结合的。\n\n\n- 最终接收器收到的事件数量是和发送器发送事件最少的那个发送器的发送事件数目相同，所以代码中，4和5是没有配对的，所以也就无法发射合并事件\n\n### combineLatest操作符\n\n先看一张图，我想你应该已经大致明白意思了\n\n![combineLatest](https://upload-images.jianshu.io/upload_images/1931185-1e60a8bf25b31e91.png?imageMogr2/auto-orient/)\n\n[使用场景，表单验证](https://blog.csdn.net/jdsjlzx/article/details/53040293)\n\ncombineLatest是RxJava本身提供的一个常用的操作符，它接受两个或以上的Observable和一个FuncX闭包。当传入的Observable中任意的一个发射数据时，combineLatest将每个Observable的最近值(Lastest)联合起来（combine）传给FuncX闭包进行处理。要点在于：\n\n1. combineLatest是会存储每个Observable的最近的值的\n2. 任意一个Observable发射新值时都会触发操作->“combine all the Observable’s lastest value together and send to Function”\n\n看一个例子，可以说明\n\n```java\n@Test\n    public void testRxJava() {\n        final String[] aStrings = {\"A1\", \"A2\", \"A3\", \"A4\"};\n        final String[] bStrings = {\"B1\", \"B2\", \"B3\"};\n\n        final Observable<String> aObservable = Observable.fromArray(aStrings).delay(1,TimeUnit.MILLISECONDS);\n        final Observable<String> bObservable = Observable.fromArray(bStrings);\n\n        Observable.combineLatest(aObservable, bObservable, new BiFunction<String, String, String>() {\n            @Override\n            public String apply(String s1, String s2) throws Exception {\n                return s1+s2;\n            }\n        }).subscribe(new Consumer<String>() {\n            @Override\n            public void accept(String s) throws Exception {\n                System.out.println(s);\n            }\n        });\n    }\n//log\n//A1B3\n//A2B3\n//A3B3\n//A4B3\n可见，发送A1的时候B1 B2 B3都已经发射完毕\n所以，存储每个Observable的最近的值的，也就是B3\n当B1，B2，B3发射的 A被观察者一个都没发射，所以得至少两个才会合并，这个看图可以解释\n```\n\n##过滤操作\n### take等操作符\n\n```java\n//take 取前n个数据\nObservable.just(1, 2, 3,4,5,6,7)\n        .take(3)\n       .subscribe(System.out::println);\n//log\n1\n2\n3\n//takelast 取后n个数据\n Observable.just(1, 2, 3, 4, 5, 6, 7)\n                .takeLast(3)\n                .subscribe(System.out::println);\n//log\n5\n6\n7\n//first 只发送第一个数据  \n//last 只发送最后一个数据\n//skip() 跳过前n个数据发送后面的数据\n//skipLast() 跳过最后n个数据，发送前面的数据  \n```\n\n### filter操作符\n\n顾名思义，过滤发送的事件\n\n```java\n @Test\n    public void testRxJava() {\n        Observable.just(1, 2, 3)\n                .filter(integer -> {\n                    if (integer==2) {\n                        return false;\n                    }\n                    return true;\n                }).subscribe(System.out::println);\n    }\n//log\n1\n3\n```\n\n### ofType\n\n过滤指定类型的数据，与filter类似，\n\n```java\n@Test\npublic void rxjava() {\n    Observable.just(1,\"1\",-1)\n            .ofType(Integer.class)\n            .subscribe(new Consumer<Integer>() {\n                @Override\n                public void accept(Integer integer) throws Exception {\n                    System.out.println(integer);\n                }\n//log\n1\n-1\n\n```\n\n### first和last\n\n```\nObservable.just(1, 2, 3)\n        .first(2)\n        .subscribe(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer integer) throws Exception {\n                System.out.println(integer);\n            }\n        });\n//1\n Observable.just(1, 2, 3)\n                .last(2)\n                .subscribe(new Consumer<Integer>() {\n                    @Override\n                    public void accept(Integer integer) throws Exception {\n                        System.out.println(integer);\n                    }\n                });\n//3                \n```\n\n## 未完待续\n\n## 参考：\n\n[手把手教你使用 RxJava 2.0（一）](https://www.jianshu.com/p/d149043d103a)\n\n[RxJava combineLatest操作符处理复杂表单验证问题](https://blog.csdn.net/jdsjlzx/article/details/53040293)\n\n[Android - RxJava2.0 操作符整理归纳](https://www.jianshu.com/p/b30de498c3cc)","slug":"Rxjava2-0-知识碎片（三）","published":1,"updated":"2018-07-24T07:13:59.867Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6ms00191kygas1uyb9x","content":"<p>基于Rxjava2.0的操作符小结</p>\n<a id=\"more\"></a>\n<h1 id=\"一：创建相关\"><a href=\"#一：创建相关\" class=\"headerlink\" title=\"一：创建相关\"></a>一：创建相关</h1><h3 id=\"creat操作符\"><a href=\"#creat操作符\" class=\"headerlink\" title=\"creat操作符\"></a>creat操作符</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable.create(<span class=\"keyword\">new</span> Observable.OnSubscribe&lt;<span class=\"built_in\">String</span>&gt;() &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">void</span> call(Subscriber&lt;? <span class=\"keyword\">super</span> <span class=\"built_in\">String</span>&gt; subscriber) &#123;</div><div class=\"line\"></div><div class=\"line\">            subscriber.onNext(<span class=\"string\">\"item1\"</span>);</div><div class=\"line\">            subscriber.onNext(<span class=\"string\">\"item2\"</span>);</div><div class=\"line\">            subscriber.onCompleted();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"just\"><a href=\"#just\" class=\"headerlink\" title=\"just\"></a>just</h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable observable = Observable.just(<span class=\"string\">\"Hello\"</span>, <span class=\"string\">\"Hi\"</span>, <span class=\"string\">\"Aloha\"</span>);</div><div class=\"line\"><span class=\"regexp\">//</span> 将会依次调用：</div><div class=\"line\"><span class=\"regexp\">//</span> onNext(<span class=\"string\">\"Hello\"</span>);</div><div class=\"line\"><span class=\"regexp\">//</span> onNext(<span class=\"string\">\"Hi\"</span>);</div><div class=\"line\"><span class=\"regexp\">//</span> onNext(<span class=\"string\">\"Aloha\"</span>);</div><div class=\"line\"><span class=\"regexp\">//</span> onCompleted();</div></pre></td></tr></table></figure>\n<h3 id=\"from\"><a href=\"#from\" class=\"headerlink\" title=\"from\"></a>from</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">String[] words = &#123;<span class=\"string\">\"Hello\"</span>, <span class=\"string\">\"Hi\"</span>, <span class=\"string\">\"Aloha\"</span>&#125;;</div><div class=\"line\">Observable observable = Observable.from(words);</div><div class=\"line\"><span class=\"comment\">// 将会依次调用：</span></div><div class=\"line\"><span class=\"comment\">// onNext(\"Hello\");</span></div><div class=\"line\"><span class=\"comment\">// onNext(\"Hi\");</span></div><div class=\"line\"><span class=\"comment\">// onNext(\"Aloha\");</span></div><div class=\"line\"><span class=\"comment\">// onCompleted();</span></div></pre></td></tr></table></figure>\n<h3 id=\"interval操作符\"><a href=\"#interval操作符\" class=\"headerlink\" title=\"interval操作符\"></a>interval操作符</h3><p>不多bb，看以下代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rxJava</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Observable.interval(<span class=\"number\">1</span>, TimeUnit.SECONDS)</div><div class=\"line\">                .subscribe(<span class=\"keyword\">new</span> Consumer&lt;Long&gt;() &#123;</div><div class=\"line\">                    <span class=\"keyword\">public</span> Disposable mDisposable;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"meta\">@Override</span></div><div class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Long aLong)</span> </span>&#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (aLong == <span class=\"number\">10</span>) &#123;</div><div class=\"line\">                            mDisposable.dispose();</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        System.out.println(<span class=\"string\">\"计时器\"</span> + aLong);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;, throwable -&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">                &#125;, () -&gt; &#123;</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"action\"</span>);</div><div class=\"line\">                &#125;, disposable -&gt; mDisposable = disposable);</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"comment\">//log</span></div><div class=\"line\"><span class=\"number\">07</span>-<span class=\"number\">24</span> <span class=\"number\">11</span>:<span class=\"number\">24</span>:<span class=\"number\">52.718</span> <span class=\"number\">12306</span>-<span class=\"number\">12332</span>/com.fengandev.rxjavademo I/System.out: 计时器<span class=\"number\">0</span></div><div class=\"line\"><span class=\"number\">07</span>-<span class=\"number\">24</span> <span class=\"number\">11</span>:<span class=\"number\">24</span>:<span class=\"number\">53.718</span> <span class=\"number\">12306</span>-<span class=\"number\">12332</span>/com.fengandev.rxjavademo I/System.out: 计时器<span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">07</span>-<span class=\"number\">24</span> <span class=\"number\">11</span>:<span class=\"number\">24</span>:<span class=\"number\">54.718</span> <span class=\"number\">12306</span>-<span class=\"number\">12332</span>/com.fengandev.rxjavademo I/System.out: 计时器<span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">07</span>-<span class=\"number\">24</span> <span class=\"number\">11</span>:<span class=\"number\">24</span>:<span class=\"number\">55.718</span> <span class=\"number\">12306</span>-<span class=\"number\">12332</span>/com.fengandev.rxjavademo I/System.out: 计时器<span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">07</span>-<span class=\"number\">24</span> <span class=\"number\">11</span>:<span class=\"number\">24</span>:<span class=\"number\">56.718</span> <span class=\"number\">12306</span>-<span class=\"number\">12332</span>/com.fengandev.rxjavademo I/System.out: 计时器<span class=\"number\">4</span></div><div class=\"line\"><span class=\"number\">07</span>-<span class=\"number\">24</span> <span class=\"number\">11</span>:<span class=\"number\">24</span>:<span class=\"number\">57.718</span> <span class=\"number\">12306</span>-<span class=\"number\">12332</span>/com.fengandev.rxjavademo I/System.out: 计时器<span class=\"number\">5</span></div><div class=\"line\"><span class=\"number\">07</span>-<span class=\"number\">24</span> <span class=\"number\">11</span>:<span class=\"number\">24</span>:<span class=\"number\">58.718</span> <span class=\"number\">12306</span>-<span class=\"number\">12332</span>/com.fengandev.rxjavademo I/System.out: 计时器<span class=\"number\">6</span></div><div class=\"line\"><span class=\"number\">07</span>-<span class=\"number\">24</span> <span class=\"number\">11</span>:<span class=\"number\">24</span>:<span class=\"number\">59.718</span> <span class=\"number\">12306</span>-<span class=\"number\">12332</span>/com.fengandev.rxjavademo I/System.out: 计时器<span class=\"number\">7</span></div><div class=\"line\"><span class=\"number\">07</span>-<span class=\"number\">24</span> <span class=\"number\">11</span>:<span class=\"number\">25</span>:<span class=\"number\">00.718</span> <span class=\"number\">12306</span>-<span class=\"number\">12332</span>/com.fengandev.rxjavademo I/System.out: 计时器<span class=\"number\">8</span></div><div class=\"line\"><span class=\"number\">07</span>-<span class=\"number\">24</span> <span class=\"number\">11</span>:<span class=\"number\">25</span>:<span class=\"number\">01.718</span> <span class=\"number\">12306</span>-<span class=\"number\">12332</span>/com.fengandev.rxjavademo I/System.out: 计时器<span class=\"number\">9</span></div></pre></td></tr></table></figure>\n<p>可以简易的封装，获取一个倒计时Observable</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">     * 产生一个倒计时的 Observable</div><div class=\"line\">     * <span class=\"doctag\">@param</span> time</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Observable&lt;Long&gt; <span class=\"title\">countdown</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">long</span> time)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Observable.interval(<span class=\"number\">1</span>, TimeUnit.SECONDS)</div><div class=\"line\">                .map(<span class=\"keyword\">new</span> Function&lt;Long, Long&gt;() &#123;</div><div class=\"line\">                    <span class=\"meta\">@Override</span></div><div class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">apply</span><span class=\"params\">(@NonNull Long aLong)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">                        <span class=\"keyword\">return</span> time - aLong;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;).take( time + <span class=\"number\">1</span> );</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//使用</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rxJava</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        countdown(<span class=\"number\">10</span>).subscribe(<span class=\"keyword\">new</span> Consumer&lt;Long&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Long aLong)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"倒计时\"</span>+aLong);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"range操作符\"><a href=\"#range操作符\" class=\"headerlink\" title=\"range操作符\"></a>range操作符</h3><p>range 发射特定整数序列的 Observable</p>\n<ul>\n<li>range( int start , int end ) //start :开始的值 ， end ：结束的值</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"> Observable.range(<span class=\"number\">0</span>,<span class=\"number\">5</span>)</div><div class=\"line\">                .subscribe(integer -&gt; System.out.println(integer));</div><div class=\"line\"><span class=\"comment\">//log</span></div><div class=\"line\"><span class=\"number\">0</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">4</span></div></pre></td></tr></table></figure>\n<p>老规矩，包前不包后</p>\n<h3 id=\"empty和error和never\"><a href=\"#empty和error和never\" class=\"headerlink\" title=\"empty和error和never\"></a>empty和error和never</h3><p><strong>empty</strong></p>\n<p><code>Observable observable1=Observable.empty();</code>//直接调用onCompleted。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Observable observable1=Observable.empty();//直接调用onCompleted。</span></div><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testRxJava</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Observable&lt;String&gt; empty = Observable.empty();</div><div class=\"line\">        empty.subscribe(<span class=\"keyword\">new</span> Observer&lt;String&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSubscribe</span><span class=\"params\">(Disposable d)</span> </span>&#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"onSubscribe\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"onNext\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"onError\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onComplete</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"onComplete\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"comment\">//log:</span></div><div class=\"line\"><span class=\"comment\">//onSubscribe</span></div><div class=\"line\"><span class=\"comment\">//onComplete</span></div></pre></td></tr></table></figure>\n<p><strong>never</strong></p>\n<p><code>Observable observable3=Observable.never();</code>//啥都不做</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testRxJava</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Observable&lt;String&gt; empty = Observable.never();</div><div class=\"line\">    empty.subscribe(<span class=\"keyword\">new</span> Observer&lt;String&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSubscribe</span><span class=\"params\">(Disposable d)</span> </span>&#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"onSubscribe\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"onNext\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"onError\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onComplete</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"onComplete\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//log</span></div><div class=\"line\"><span class=\"comment\">//onSubscribe</span></div></pre></td></tr></table></figure>\n<p><strong>error</strong></p>\n<p><code>Observable observable2=Observable.error(new RuntimeException());</code>//直接调用onError。这里可以自定义异常</p>\n<h2 id=\"功能操作\"><a href=\"#功能操作\" class=\"headerlink\" title=\"功能操作\"></a>功能操作</h2><h3 id=\"map操作符\"><a href=\"#map操作符\" class=\"headerlink\" title=\"map操作符\"></a>map操作符</h3><p>map操作符算是Rxjava中最简单的一个操作符了，在2.x中的用法和1.x差不多；它的作用就是对发射的每一个事件应用一个函数，每一个事件都按照map操作符指定的函数去变化转换，下面我们看一个栗子🌰</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rxJava</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Observable.create(<span class=\"keyword\">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subscribe</span><span class=\"params\">(ObservableEmitter&lt;Integer&gt; emitter)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">                emitter.onNext(<span class=\"number\">1</span>);</div><div class=\"line\">                emitter.onNext(<span class=\"number\">2</span>);</div><div class=\"line\">                emitter.onNext(<span class=\"number\">3</span>);</div><div class=\"line\">                emitter.onComplete();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).map(<span class=\"keyword\">new</span> Function&lt;Integer, String&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">apply</span><span class=\"params\">(Integer integer)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">                Log.e(<span class=\"string\">\"fengan\"</span>, <span class=\"string\">\"apply----&gt;\"</span> + Thread.currentThread().getName());</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"this is value = \"</span> + integer;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).subscribeOn(Schedulers.single())</div><div class=\"line\"><span class=\"comment\">//                .observeOn(Schedulers.single())</span></div><div class=\"line\">                .subscribe(<span class=\"keyword\">new</span> Consumer&lt;String&gt;() &#123;</div><div class=\"line\">                    <span class=\"meta\">@Override</span></div><div class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(String s)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">                        Log.e(<span class=\"string\">\"fengan\"</span>, <span class=\"string\">\"accept----&gt;\"</span> + Thread.currentThread().getName());</div><div class=\"line\">                        Log.e(<span class=\"string\">\"fengan\"</span>, <span class=\"string\">\"accept----&gt;\"</span> + s);</div><div class=\"line\">                        Log.e(<span class=\"string\">\"fengan\"</span>,<span class=\"string\">\"========\"</span>);</div><div class=\"line\"></div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>log</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">apply----&gt;RxSingleScheduler-<span class=\"number\">1</span></div><div class=\"line\">accept----&gt;RxSingleScheduler-<span class=\"number\">1</span></div><div class=\"line\">accept----&gt;<span class=\"keyword\">this</span> is value = <span class=\"number\">1</span></div><div class=\"line\">========</div><div class=\"line\">apply----&gt;RxSingleScheduler-<span class=\"number\">1</span></div><div class=\"line\">accept----&gt;RxSingleScheduler-<span class=\"number\">1</span></div><div class=\"line\">accept----&gt;<span class=\"keyword\">this</span> is value = <span class=\"number\">2</span></div><div class=\"line\">========</div><div class=\"line\">apply----&gt;RxSingleScheduler-<span class=\"number\">1</span></div><div class=\"line\">accept----&gt;RxSingleScheduler-<span class=\"number\">1</span></div><div class=\"line\">accept----&gt;<span class=\"keyword\">this</span> is value = <span class=\"number\">3</span></div><div class=\"line\">========</div></pre></td></tr></table></figure>\n<p>从这个例子，我们能看出</p>\n<ul>\n<li>我们发射的integer事件，被转换为String，继续进行</li>\n<li>我们也顺便验证了两个问题（在碎片化2整理的线程调度）<ul>\n<li>只指定<code>subscribeOn</code>未指定<code>observeOn</code>的情况下，观察者的事件的接受（下游）按照<code>subscribeOn</code>指定的线程进行</li>\n<li><code>Schedulers.single()</code>是在指定线程中按照队列的形式进行，先进先出（体现在：一个事件发布和接受完毕后，才发送第二个事件）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"debounce操作符\"><a href=\"#debounce操作符\" class=\"headerlink\" title=\"debounce操作符\"></a>debounce操作符</h3><p><code>debounce</code>：防抖；</p>\n<p>only emit an item from an Observable if a particular time-span has passed without it emitting another item,</p>\n<p>当一个事件发送出来之后，在约定时间内没有再次发送这个事件，则发射这个事件，如果再次触发了，则重新计算时间。</p>\n<p><a href=\"https://www.jianshu.com/p/ee1f0d21a856\" target=\"_blank\" rel=\"external\">参考链接</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"> Observable.create(<span class=\"keyword\">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subscribe</span><span class=\"params\">(ObservableEmitter&lt;Integer&gt; emitter)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">                <span class=\"comment\">// send events with simulated time wait</span></div><div class=\"line\">                emitter.onNext(<span class=\"number\">1</span>); <span class=\"comment\">// skip</span></div><div class=\"line\">                Thread.sleep(<span class=\"number\">400</span>);</div><div class=\"line\">                emitter.onNext(<span class=\"number\">2</span>); <span class=\"comment\">// deliver</span></div><div class=\"line\">                Thread.sleep(<span class=\"number\">505</span>);</div><div class=\"line\">                emitter.onNext(<span class=\"number\">3</span>); <span class=\"comment\">// skip</span></div><div class=\"line\">                Thread.sleep(<span class=\"number\">100</span>);</div><div class=\"line\">                emitter.onNext(<span class=\"number\">4</span>); <span class=\"comment\">// deliver</span></div><div class=\"line\">                Thread.sleep(<span class=\"number\">605</span>);</div><div class=\"line\">                emitter.onNext(<span class=\"number\">5</span>); <span class=\"comment\">// deliver</span></div><div class=\"line\">                Thread.sleep(<span class=\"number\">510</span>);</div><div class=\"line\">                emitter.onComplete();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).debounce(<span class=\"number\">500</span>,TimeUnit.MILLISECONDS)</div><div class=\"line\">            .subscribe(<span class=\"keyword\">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Integer integer)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">                    System.out.println(integer);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//2</span></div><div class=\"line\"><span class=\"comment\">//4</span></div><div class=\"line\"><span class=\"comment\">//5</span></div></pre></td></tr></table></figure>\n<h3 id=\"onTerminateDetach操作符\"><a href=\"#onTerminateDetach操作符\" class=\"headerlink\" title=\"onTerminateDetach操作符\"></a>onTerminateDetach操作符</h3><p><a href=\"https://blog.csdn.net/johnny901114/article/details/67640594\" target=\"_blank\" rel=\"external\">Rxjava导致内存泄漏的问题</a></p>\n<p><a href=\"https://blog.csdn.net/johnny901114/article/details/67640594\" target=\"_blank\" rel=\"external\">一张图搞定-RxJava2的线程切换原理和内存泄露问题</a></p>\n<p>看完这两个参考链接，基本也就知道了onTerminateDetach的使用方法和作用</p>\n<h3 id=\"defer操作符\"><a href=\"#defer操作符\" class=\"headerlink\" title=\"defer操作符\"></a>defer操作符</h3><p>只有当订阅者订阅才创建Observable，为每个订阅创建一个新的Observable。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rxjava</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Observable.defer(<span class=\"keyword\">new</span> Callable&lt;ObservableSource&lt;Integer&gt;&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> ObservableSource&lt;Integer&gt; <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> Observable.just(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;).subscribe(<span class=\"keyword\">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Integer integer)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">            System.out.println(integer);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div></pre></td></tr></table></figure>\n<h3 id=\"flatMap操作符\"><a href=\"#flatMap操作符\" class=\"headerlink\" title=\"flatMap操作符\"></a>flatMap操作符</h3><p>把一个发射器<code>Observable</code> 通过某种方法转换为多个<code>Observables</code>，然后再把这些分散的<code>Observables</code>装进一个单一的发射器<code>Observable</code>。但有个需要注意的是，<code>flatMap</code>并不能保证事件的顺序，如果需要保证，需要用到我们下面要讲的<code>ConcatMap</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rxJava</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Observable.create(<span class=\"keyword\">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subscribe</span><span class=\"params\">(ObservableEmitter&lt;Integer&gt; emitter)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">            emitter.onNext(<span class=\"number\">1</span>);</div><div class=\"line\">            emitter.onNext(<span class=\"number\">2</span>);</div><div class=\"line\">            emitter.onNext(<span class=\"number\">3</span>);</div><div class=\"line\">            emitter.onComplete();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;).flatMap(<span class=\"keyword\">new</span> Function&lt;Integer, ObservableSource&lt;String&gt;&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> ObservableSource&lt;String&gt; <span class=\"title\">apply</span><span class=\"params\">(Integer integer)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">            List&lt;String&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">            res.add(<span class=\"string\">\"i am value =\"</span> + integer);</div><div class=\"line\">            Log.e(<span class=\"string\">\"fengan\"</span>,<span class=\"string\">\"flatMap size\"</span>+res.size());</div><div class=\"line\">            <span class=\"keyword\">return</span> Observable.fromIterable(res);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;).subscribe(<span class=\"keyword\">new</span> Consumer&lt;String&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(String s)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">            Log.e(<span class=\"string\">\"fengan\"</span>,<span class=\"string\">\"accept=\"</span>+s);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>log</p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">flatMap size1</div><div class=\"line\"><span class=\"attr\">accept=i</span> am <span class=\"attr\">value</span> =<span class=\"number\">1</span></div><div class=\"line\">   flatMap size1</div><div class=\"line\">   <span class=\"attr\">accept=i</span> am <span class=\"attr\">value</span> =<span class=\"number\">2</span></div><div class=\"line\">   flatMap size1</div><div class=\"line\">   <span class=\"attr\">accept=i</span> am <span class=\"attr\">value</span> =<span class=\"number\">3</span></div></pre></td></tr></table></figure>\n<p><strong>结论</strong></p>\n<ul>\n<li>验证了我之前的一个误区（size大小一直为1）：误以为所有事件发送完毕之后，在flatmap统一处理，其实不是，事件源每发射一个事件，<code>flatmap</code>就处理转换一个事件</li>\n<li><code>flatMap</code>的作用是，接受一个事件，作出处理完之后，重新发射一个新的事件</li>\n</ul>\n<p>刚才说到<code>flatMap</code>并不能保证事件的顺序，请看下面的例子就明白了</p>\n<h3 id=\"concatMap操作符\"><a href=\"#concatMap操作符\" class=\"headerlink\" title=\"concatMap操作符\"></a>concatMap操作符</h3><p>flatMap操作符可以将一个<code>Observable</code>转换为另一个<code>Observable</code>发射出去,并且可以将多个事件转化为1个，但是最后输出的事件序列顺序是不确定的，如果想要最后输出的事件顺序和源数据的顺序一致只要换成<code>concatMap</code>就可以了。<br>flatMap和Map操作符的不同是map一次只能转换一个事件。</p>\n<p>先看一个<code>flatmap</code>的使用例子，如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable.create((ObservableOnSubscribe&lt;Integer&gt;) emitter -&gt; &#123;</div><div class=\"line\">           emitter.onNext(<span class=\"number\">1</span>);</div><div class=\"line\">           emitter.onNext(<span class=\"number\">2</span>);</div><div class=\"line\">           emitter.onNext(<span class=\"number\">3</span>);</div><div class=\"line\">           emitter.onComplete();</div><div class=\"line\">       &#125;).subscribeOn(Schedulers.io()).flatMap((Function&lt;Integer, ObservableSource&lt;String&gt;&gt;) integer -&gt; &#123;</div><div class=\"line\">           List&lt;String&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">               res.add(<span class=\"string\">\"I am value \"</span> + integer);</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">int</span> delayTime = (<span class=\"keyword\">int</span>) (<span class=\"number\">1</span> + Math.random() * <span class=\"number\">10</span>);</div><div class=\"line\">           <span class=\"keyword\">return</span> Observable.fromIterable(res).delay(delayTime, TimeUnit.MILLISECONDS);</div><div class=\"line\">       &#125;).subscribe(s -&gt; Log.e(<span class=\"string\">\"fengan\"</span>, <span class=\"string\">\"accept=\"</span> + s));</div></pre></td></tr></table></figure>\n<p>log</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">accept=I am value <span class=\"number\">3</span></div><div class=\"line\">accept=I am value <span class=\"number\">3</span></div><div class=\"line\">accept=I am value <span class=\"number\">2</span></div><div class=\"line\">accept=I am value <span class=\"number\">2</span></div><div class=\"line\">accept=I am value <span class=\"number\">2</span></div><div class=\"line\">accept=I am value <span class=\"number\">3</span></div><div class=\"line\">accept=I am value <span class=\"number\">1</span></div><div class=\"line\">accept=I am value <span class=\"number\">1</span></div><div class=\"line\">accept=I am value <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<p>可见不是按照源数据到顺序一致，若想一致使用<code>concatMap</code>就可以了</p>\n<h3 id=\"repeat操作符\"><a href=\"#repeat操作符\" class=\"headerlink\" title=\"repeat操作符\"></a>repeat操作符</h3><p>repeat 重复地发射数据</p>\n<ul>\n<li>repeat( ) //无限重复</li>\n<li>repeat( int time ) //设定重复的次数</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable.just(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</div><div class=\"line\">                .repeat(<span class=\"number\">3</span>)</div><div class=\"line\">                .subscribe(integer -&gt; System.out.println(integer));</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div></pre></td></tr></table></figure>\n<h3 id=\"fromArray和fromIterble操作符\"><a href=\"#fromArray和fromIterble操作符\" class=\"headerlink\" title=\"fromArray和fromIterble操作符\"></a>fromArray和fromIterble操作符</h3><p>一个是发射一个数组一个是发射一个集合</p>\n<h3 id=\"toList\"><a href=\"#toList\" class=\"headerlink\" title=\"toList\"></a>toList</h3><p>将数组转换为集合</p>\n<h3 id=\"delay操作符\"><a href=\"#delay操作符\" class=\"headerlink\" title=\"delay操作符\"></a>delay操作符</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rxJava</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Observable.just(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\">                .delay(<span class=\"number\">3</span>, TimeUnit.SECONDS)</div><div class=\"line\">                .observeOn(Schedulers.io())</div><div class=\"line\">                .subscribe(integer -&gt; &#123;</div><div class=\"line\">                    <span class=\"keyword\">int</span> a = integer;</div><div class=\"line\">                    System.out.println(a);</div><div class=\"line\">                &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"comment\">//注意：延迟3秒钟，然后在发射数据</span></div><div class=\"line\"><span class=\"comment\">//是延迟三秒，发送1，2，3数据</span></div><div class=\"line\"><span class=\"comment\">//而不是--延迟3秒--发送1--延迟3秒---发送2</span></div></pre></td></tr></table></figure>\n<ul>\n<li>是延迟三秒，发送1，2，3数据</li>\n<li>而不是–延迟3秒–发送1–延迟3秒—发送2</li>\n</ul>\n<p>若想达到这种效果，可以类似这么做</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rxJava</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Observable.just(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\">                .concatMap(<span class=\"keyword\">new</span> Function&lt;Integer, ObservableSource&lt;Integer&gt;&gt;() &#123;</div><div class=\"line\">                    <span class=\"meta\">@Override</span></div><div class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> ObservableSource&lt;Integer&gt; <span class=\"title\">apply</span><span class=\"params\">(Integer integer)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">                        <span class=\"keyword\">return</span> Observable.just(integer) .delay(<span class=\"number\">3</span>, TimeUnit.SECONDS);</div><div class=\"line\">                        </div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;)</div><div class=\"line\">                .subscribe(integer -&gt; System.out.println(integer));</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"comment\">//--延迟三秒---发送1---延迟三秒---发送2---延迟3秒---发送3</span></div></pre></td></tr></table></figure>\n<h3 id=\"doOnNext操作符\"><a href=\"#doOnNext操作符\" class=\"headerlink\" title=\"doOnNext操作符\"></a>doOnNext操作符</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testRxJava</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Observable.create(<span class=\"keyword\">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subscribe</span><span class=\"params\">(ObservableEmitter&lt;Integer&gt; emitter)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">            emitter.onNext(<span class=\"number\">1</span>);</div><div class=\"line\">            emitter.onNext(<span class=\"number\">2</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;).doOnNext(<span class=\"keyword\">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Integer integer)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"前置操作\"</span> + integer);</div><div class=\"line\">            integer+=<span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">            .subscribe(System.out::println);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//log</span></div><div class=\"line\">前置操作<span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\">前置操作<span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">2</span></div></pre></td></tr></table></figure>\n<p>在每次 OnNext() 方法被调用前执行</p>\n<p>使用场景：从网络请求数据，在数据被展示前，缓存到本地</p>\n<h2 id=\"合并操作\"><a href=\"#合并操作\" class=\"headerlink\" title=\"合并操作\"></a>合并操作</h2><h3 id=\"concat操作符\"><a href=\"#concat操作符\" class=\"headerlink\" title=\"concat操作符\"></a>concat操作符</h3><p>按顺序连接多个Observables。需要注意的是Observable.concat(a,b)等价于a.concatWith(b)。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable&lt;Integer&gt; observable1=Observable.just(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>);</div><div class=\"line\">    Observable&lt;Integer&gt;  observable2=Observable.just(<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>);</div><div class=\"line\"></div><div class=\"line\">    Observable.concat(observable1,observable2)</div><div class=\"line\">            .subscribe(item-&gt;Log.d(<span class=\"string\">\"JG\"</span>,item.toString()));<span class=\"comment\">//1,2,3,4,4,5,6</span></div></pre></td></tr></table></figure>\n<h3 id=\"startWith操作符\"><a href=\"#startWith操作符\" class=\"headerlink\" title=\"startWith操作符\"></a>startWith操作符</h3><p>在数据序列的开头增加一项数据。startWith的内部也是调用了concat</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable.just(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>)</div><div class=\"line\">           .startWith(<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>)</div><div class=\"line\">   .subscribe(item-&gt;Log.d(<span class=\"string\">\"JG\"</span>,item.toString()));<span class=\"comment\">//6,7,8,1,2,3,4,5</span></div></pre></td></tr></table></figure>\n<h3 id=\"merge操作符\"><a href=\"#merge操作符\" class=\"headerlink\" title=\"merge操作符\"></a>merge操作符</h3><p>合并被观察者</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> String[] aStrings = &#123;<span class=\"string\">\"A1\"</span>, <span class=\"string\">\"A2\"</span>, <span class=\"string\">\"A3\"</span>, <span class=\"string\">\"A4\"</span>&#125;;</div><div class=\"line\">        <span class=\"keyword\">final</span> String[] bStrings = &#123;<span class=\"string\">\"B1\"</span>, <span class=\"string\">\"B2\"</span>, <span class=\"string\">\"B3\"</span>&#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> Observable&lt;String&gt; aObservable = Observable.fromArray(aStrings);</div><div class=\"line\">        <span class=\"keyword\">final</span> Observable&lt;String&gt; bObservable = Observable.fromArray(bStrings);</div><div class=\"line\"></div><div class=\"line\">        Observable.merge(aObservable, bObservable)<span class=\"comment\">//使用merge操作符将两个被观察者合并</span></div><div class=\"line\">                .subscribe(getObserver());<span class=\"comment\">//这里的观察者依然不重要</span></div><div class=\"line\"><span class=\"comment\">//\"A1\", \"B1\", \"A2\", \"A3\", \"A4\", \"B2\", \"B3\"</span></div></pre></td></tr></table></figure>\n<p>操作符merge将两个被观察者合并,这里要注意merge之后的Observable是不能保证和原来的Observable发射顺序相同.</p>\n<h3 id=\"Zip操作符\"><a href=\"#Zip操作符\" class=\"headerlink\" title=\"Zip操作符\"></a>Zip操作符</h3><p>zip我们想到”压缩“，那么在这个操作符是什么意思呢，请看下面图片</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1931185-14134e499db9d0c4.png?imageMogr2/auto-orient/\" alt=\"Zip\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rxJava</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Observable.zip(Observable.just(<span class=\"string\">\"A\"</span>, <span class=\"string\">\"B\"</span>, <span class=\"string\">\"C\"</span>), Observable.just(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>), <span class=\"keyword\">new</span> BiFunction&lt;String, Integer, String&gt;() &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">apply</span><span class=\"params\">(String s, Integer integer)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> s+integer;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).subscribe(s -&gt; System.out.println(<span class=\"string\">\"value=\"</span> + s));</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>log</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">value=A1</div><div class=\"line\">value=B2</div><div class=\"line\">value=C3</div></pre></td></tr></table></figure>\n<p>结论：</p>\n<ul>\n<li>zip 组合事件的过程就是分别从发射器A和发射器B各取出一个事件来组合，并且一个事件只能被使用一次，组合的顺序是严格按照事件发送的顺序来进行的，所以上面截图中，可以看到，1永远是和A 结合的，2永远是和B结合的。</li>\n</ul>\n<ul>\n<li>最终接收器收到的事件数量是和发送器发送事件最少的那个发送器的发送事件数目相同，所以代码中，4和5是没有配对的，所以也就无法发射合并事件</li>\n</ul>\n<h3 id=\"combineLatest操作符\"><a href=\"#combineLatest操作符\" class=\"headerlink\" title=\"combineLatest操作符\"></a>combineLatest操作符</h3><p>先看一张图，我想你应该已经大致明白意思了</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1931185-1e60a8bf25b31e91.png?imageMogr2/auto-orient/\" alt=\"combineLatest\"></p>\n<p><a href=\"https://blog.csdn.net/jdsjlzx/article/details/53040293\" target=\"_blank\" rel=\"external\">使用场景，表单验证</a></p>\n<p>combineLatest是RxJava本身提供的一个常用的操作符，它接受两个或以上的Observable和一个FuncX闭包。当传入的Observable中任意的一个发射数据时，combineLatest将每个Observable的最近值(Lastest)联合起来（combine）传给FuncX闭包进行处理。要点在于：</p>\n<ol>\n<li>combineLatest是会存储每个Observable的最近的值的</li>\n<li>任意一个Observable发射新值时都会触发操作-&gt;“combine all the Observable’s lastest value together and send to Function”</li>\n</ol>\n<p>看一个例子，可以说明</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testRxJava</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> String[] aStrings = &#123;<span class=\"string\">\"A1\"</span>, <span class=\"string\">\"A2\"</span>, <span class=\"string\">\"A3\"</span>, <span class=\"string\">\"A4\"</span>&#125;;</div><div class=\"line\">        <span class=\"keyword\">final</span> String[] bStrings = &#123;<span class=\"string\">\"B1\"</span>, <span class=\"string\">\"B2\"</span>, <span class=\"string\">\"B3\"</span>&#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> Observable&lt;String&gt; aObservable = Observable.fromArray(aStrings).delay(<span class=\"number\">1</span>,TimeUnit.MILLISECONDS);</div><div class=\"line\">        <span class=\"keyword\">final</span> Observable&lt;String&gt; bObservable = Observable.fromArray(bStrings);</div><div class=\"line\"></div><div class=\"line\">        Observable.combineLatest(aObservable, bObservable, <span class=\"keyword\">new</span> BiFunction&lt;String, String, String&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">apply</span><span class=\"params\">(String s1, String s2)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> s1+s2;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).subscribe(<span class=\"keyword\">new</span> Consumer&lt;String&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(String s)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">                System.out.println(s);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"comment\">//log</span></div><div class=\"line\"><span class=\"comment\">//A1B3</span></div><div class=\"line\"><span class=\"comment\">//A2B3</span></div><div class=\"line\"><span class=\"comment\">//A3B3</span></div><div class=\"line\"><span class=\"comment\">//A4B3</span></div><div class=\"line\">可见，发送A1的时候B1 B2 B3都已经发射完毕</div><div class=\"line\">所以，存储每个Observable的最近的值的，也就是B3</div><div class=\"line\">当B1，B2，B3发射的 A被观察者一个都没发射，所以得至少两个才会合并，这个看图可以解释</div></pre></td></tr></table></figure>\n<p>##过滤操作</p>\n<h3 id=\"take等操作符\"><a href=\"#take等操作符\" class=\"headerlink\" title=\"take等操作符\"></a>take等操作符</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//take 取前n个数据</span></div><div class=\"line\">Observable.just(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>)</div><div class=\"line\">        .take(<span class=\"number\">3</span>)</div><div class=\"line\">       .subscribe(System.out::println);</div><div class=\"line\"><span class=\"comment\">//log</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"comment\">//takelast 取后n个数据</span></div><div class=\"line\"> Observable.just(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>)</div><div class=\"line\">                .takeLast(<span class=\"number\">3</span>)</div><div class=\"line\">                .subscribe(System.out::println);</div><div class=\"line\"><span class=\"comment\">//log</span></div><div class=\"line\"><span class=\"number\">5</span></div><div class=\"line\"><span class=\"number\">6</span></div><div class=\"line\"><span class=\"number\">7</span></div><div class=\"line\"><span class=\"comment\">//first 只发送第一个数据  </span></div><div class=\"line\"><span class=\"comment\">//last 只发送最后一个数据</span></div><div class=\"line\"><span class=\"comment\">//skip() 跳过前n个数据发送后面的数据</span></div><div class=\"line\"><span class=\"comment\">//skipLast() 跳过最后n个数据，发送前面的数据</span></div></pre></td></tr></table></figure>\n<h3 id=\"filter操作符\"><a href=\"#filter操作符\" class=\"headerlink\" title=\"filter操作符\"></a>filter操作符</h3><p>顾名思义，过滤发送的事件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testRxJava</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Observable.just(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\">                .filter(integer -&gt; &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (integer==<span class=\"number\">2</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;).subscribe(System.out::println);</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"comment\">//log</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">3</span></div></pre></td></tr></table></figure>\n<h3 id=\"ofType\"><a href=\"#ofType\" class=\"headerlink\" title=\"ofType\"></a>ofType</h3><p>过滤指定类型的数据，与filter类似，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rxjava</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Observable.just(<span class=\"number\">1</span>,<span class=\"string\">\"1\"</span>,-<span class=\"number\">1</span>)</div><div class=\"line\">            .ofType(Integer.class)</div><div class=\"line\">            .subscribe(<span class=\"keyword\">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Integer integer)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">                    System.out.println(integer);</div><div class=\"line\">                &#125;</div><div class=\"line\"><span class=\"comment\">//log</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\">-<span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<h3 id=\"first和last\"><a href=\"#first和last\" class=\"headerlink\" title=\"first和last\"></a>first和last</h3><figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable.just(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\">        .first(<span class=\"number\">2</span>)</div><div class=\"line\">        .subscribe(<span class=\"literal\">new</span> Consumer&lt;<span class=\"built_in\">Integer</span>&gt;() &#123;</div><div class=\"line\">            @Override</div><div class=\"line\">            <span class=\"keyword\">public</span> <span class=\"literal\">void</span> accept(<span class=\"built_in\">Integer</span> <span class=\"built_in\">integer</span>) throws Exception &#123;</div><div class=\"line\">                System.out.println(<span class=\"built_in\">integer</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"><span class=\"comment\">//1</span></div><div class=\"line\"> Observable.just(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\">                .last(<span class=\"number\">2</span>)</div><div class=\"line\">                .subscribe(<span class=\"literal\">new</span> Consumer&lt;<span class=\"built_in\">Integer</span>&gt;() &#123;</div><div class=\"line\">                    @Override</div><div class=\"line\">                    <span class=\"keyword\">public</span> <span class=\"literal\">void</span> accept(<span class=\"built_in\">Integer</span> <span class=\"built_in\">integer</span>) throws Exception &#123;</div><div class=\"line\">                        System.out.println(<span class=\"built_in\">integer</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\"><span class=\"comment\">//3</span></div></pre></td></tr></table></figure>\n<h2 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h2><h2 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h2><p><a href=\"https://www.jianshu.com/p/d149043d103a\" target=\"_blank\" rel=\"external\">手把手教你使用 RxJava 2.0（一）</a></p>\n<p><a href=\"https://blog.csdn.net/jdsjlzx/article/details/53040293\" target=\"_blank\" rel=\"external\">RxJava combineLatest操作符处理复杂表单验证问题</a></p>\n<p><a href=\"https://www.jianshu.com/p/b30de498c3cc\" target=\"_blank\" rel=\"external\">Android - RxJava2.0 操作符整理归纳</a></p>\n","excerpt":"<p>基于Rxjava2.0的操作符小结</p>","more":"<h1 id=\"一：创建相关\"><a href=\"#一：创建相关\" class=\"headerlink\" title=\"一：创建相关\"></a>一：创建相关</h1><h3 id=\"creat操作符\"><a href=\"#creat操作符\" class=\"headerlink\" title=\"creat操作符\"></a>creat操作符</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable.create(<span class=\"keyword\">new</span> Observable.OnSubscribe&lt;<span class=\"built_in\">String</span>&gt;() &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">void</span> call(Subscriber&lt;? <span class=\"keyword\">super</span> <span class=\"built_in\">String</span>&gt; subscriber) &#123;</div><div class=\"line\"></div><div class=\"line\">            subscriber.onNext(<span class=\"string\">\"item1\"</span>);</div><div class=\"line\">            subscriber.onNext(<span class=\"string\">\"item2\"</span>);</div><div class=\"line\">            subscriber.onCompleted();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"just\"><a href=\"#just\" class=\"headerlink\" title=\"just\"></a>just</h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable observable = Observable.just(<span class=\"string\">\"Hello\"</span>, <span class=\"string\">\"Hi\"</span>, <span class=\"string\">\"Aloha\"</span>);</div><div class=\"line\"><span class=\"regexp\">//</span> 将会依次调用：</div><div class=\"line\"><span class=\"regexp\">//</span> onNext(<span class=\"string\">\"Hello\"</span>);</div><div class=\"line\"><span class=\"regexp\">//</span> onNext(<span class=\"string\">\"Hi\"</span>);</div><div class=\"line\"><span class=\"regexp\">//</span> onNext(<span class=\"string\">\"Aloha\"</span>);</div><div class=\"line\"><span class=\"regexp\">//</span> onCompleted();</div></pre></td></tr></table></figure>\n<h3 id=\"from\"><a href=\"#from\" class=\"headerlink\" title=\"from\"></a>from</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">String[] words = &#123;<span class=\"string\">\"Hello\"</span>, <span class=\"string\">\"Hi\"</span>, <span class=\"string\">\"Aloha\"</span>&#125;;</div><div class=\"line\">Observable observable = Observable.from(words);</div><div class=\"line\"><span class=\"comment\">// 将会依次调用：</span></div><div class=\"line\"><span class=\"comment\">// onNext(\"Hello\");</span></div><div class=\"line\"><span class=\"comment\">// onNext(\"Hi\");</span></div><div class=\"line\"><span class=\"comment\">// onNext(\"Aloha\");</span></div><div class=\"line\"><span class=\"comment\">// onCompleted();</span></div></pre></td></tr></table></figure>\n<h3 id=\"interval操作符\"><a href=\"#interval操作符\" class=\"headerlink\" title=\"interval操作符\"></a>interval操作符</h3><p>不多bb，看以下代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rxJava</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Observable.interval(<span class=\"number\">1</span>, TimeUnit.SECONDS)</div><div class=\"line\">                .subscribe(<span class=\"keyword\">new</span> Consumer&lt;Long&gt;() &#123;</div><div class=\"line\">                    <span class=\"keyword\">public</span> Disposable mDisposable;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"meta\">@Override</span></div><div class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Long aLong)</span> </span>&#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (aLong == <span class=\"number\">10</span>) &#123;</div><div class=\"line\">                            mDisposable.dispose();</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        System.out.println(<span class=\"string\">\"计时器\"</span> + aLong);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;, throwable -&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">                &#125;, () -&gt; &#123;</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"action\"</span>);</div><div class=\"line\">                &#125;, disposable -&gt; mDisposable = disposable);</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"comment\">//log</span></div><div class=\"line\"><span class=\"number\">07</span>-<span class=\"number\">24</span> <span class=\"number\">11</span>:<span class=\"number\">24</span>:<span class=\"number\">52.718</span> <span class=\"number\">12306</span>-<span class=\"number\">12332</span>/com.fengandev.rxjavademo I/System.out: 计时器<span class=\"number\">0</span></div><div class=\"line\"><span class=\"number\">07</span>-<span class=\"number\">24</span> <span class=\"number\">11</span>:<span class=\"number\">24</span>:<span class=\"number\">53.718</span> <span class=\"number\">12306</span>-<span class=\"number\">12332</span>/com.fengandev.rxjavademo I/System.out: 计时器<span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">07</span>-<span class=\"number\">24</span> <span class=\"number\">11</span>:<span class=\"number\">24</span>:<span class=\"number\">54.718</span> <span class=\"number\">12306</span>-<span class=\"number\">12332</span>/com.fengandev.rxjavademo I/System.out: 计时器<span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">07</span>-<span class=\"number\">24</span> <span class=\"number\">11</span>:<span class=\"number\">24</span>:<span class=\"number\">55.718</span> <span class=\"number\">12306</span>-<span class=\"number\">12332</span>/com.fengandev.rxjavademo I/System.out: 计时器<span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">07</span>-<span class=\"number\">24</span> <span class=\"number\">11</span>:<span class=\"number\">24</span>:<span class=\"number\">56.718</span> <span class=\"number\">12306</span>-<span class=\"number\">12332</span>/com.fengandev.rxjavademo I/System.out: 计时器<span class=\"number\">4</span></div><div class=\"line\"><span class=\"number\">07</span>-<span class=\"number\">24</span> <span class=\"number\">11</span>:<span class=\"number\">24</span>:<span class=\"number\">57.718</span> <span class=\"number\">12306</span>-<span class=\"number\">12332</span>/com.fengandev.rxjavademo I/System.out: 计时器<span class=\"number\">5</span></div><div class=\"line\"><span class=\"number\">07</span>-<span class=\"number\">24</span> <span class=\"number\">11</span>:<span class=\"number\">24</span>:<span class=\"number\">58.718</span> <span class=\"number\">12306</span>-<span class=\"number\">12332</span>/com.fengandev.rxjavademo I/System.out: 计时器<span class=\"number\">6</span></div><div class=\"line\"><span class=\"number\">07</span>-<span class=\"number\">24</span> <span class=\"number\">11</span>:<span class=\"number\">24</span>:<span class=\"number\">59.718</span> <span class=\"number\">12306</span>-<span class=\"number\">12332</span>/com.fengandev.rxjavademo I/System.out: 计时器<span class=\"number\">7</span></div><div class=\"line\"><span class=\"number\">07</span>-<span class=\"number\">24</span> <span class=\"number\">11</span>:<span class=\"number\">25</span>:<span class=\"number\">00.718</span> <span class=\"number\">12306</span>-<span class=\"number\">12332</span>/com.fengandev.rxjavademo I/System.out: 计时器<span class=\"number\">8</span></div><div class=\"line\"><span class=\"number\">07</span>-<span class=\"number\">24</span> <span class=\"number\">11</span>:<span class=\"number\">25</span>:<span class=\"number\">01.718</span> <span class=\"number\">12306</span>-<span class=\"number\">12332</span>/com.fengandev.rxjavademo I/System.out: 计时器<span class=\"number\">9</span></div></pre></td></tr></table></figure>\n<p>可以简易的封装，获取一个倒计时Observable</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">     * 产生一个倒计时的 Observable</div><div class=\"line\">     * <span class=\"doctag\">@param</span> time</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Observable&lt;Long&gt; <span class=\"title\">countdown</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">long</span> time)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Observable.interval(<span class=\"number\">1</span>, TimeUnit.SECONDS)</div><div class=\"line\">                .map(<span class=\"keyword\">new</span> Function&lt;Long, Long&gt;() &#123;</div><div class=\"line\">                    <span class=\"meta\">@Override</span></div><div class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">apply</span><span class=\"params\">(@NonNull Long aLong)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">                        <span class=\"keyword\">return</span> time - aLong;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;).take( time + <span class=\"number\">1</span> );</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//使用</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rxJava</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        countdown(<span class=\"number\">10</span>).subscribe(<span class=\"keyword\">new</span> Consumer&lt;Long&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Long aLong)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"倒计时\"</span>+aLong);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"range操作符\"><a href=\"#range操作符\" class=\"headerlink\" title=\"range操作符\"></a>range操作符</h3><p>range 发射特定整数序列的 Observable</p>\n<ul>\n<li>range( int start , int end ) //start :开始的值 ， end ：结束的值</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"> Observable.range(<span class=\"number\">0</span>,<span class=\"number\">5</span>)</div><div class=\"line\">                .subscribe(integer -&gt; System.out.println(integer));</div><div class=\"line\"><span class=\"comment\">//log</span></div><div class=\"line\"><span class=\"number\">0</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">4</span></div></pre></td></tr></table></figure>\n<p>老规矩，包前不包后</p>\n<h3 id=\"empty和error和never\"><a href=\"#empty和error和never\" class=\"headerlink\" title=\"empty和error和never\"></a>empty和error和never</h3><p><strong>empty</strong></p>\n<p><code>Observable observable1=Observable.empty();</code>//直接调用onCompleted。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Observable observable1=Observable.empty();//直接调用onCompleted。</span></div><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testRxJava</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Observable&lt;String&gt; empty = Observable.empty();</div><div class=\"line\">        empty.subscribe(<span class=\"keyword\">new</span> Observer&lt;String&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSubscribe</span><span class=\"params\">(Disposable d)</span> </span>&#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"onSubscribe\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"onNext\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"onError\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onComplete</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"onComplete\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"comment\">//log:</span></div><div class=\"line\"><span class=\"comment\">//onSubscribe</span></div><div class=\"line\"><span class=\"comment\">//onComplete</span></div></pre></td></tr></table></figure>\n<p><strong>never</strong></p>\n<p><code>Observable observable3=Observable.never();</code>//啥都不做</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testRxJava</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Observable&lt;String&gt; empty = Observable.never();</div><div class=\"line\">    empty.subscribe(<span class=\"keyword\">new</span> Observer&lt;String&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSubscribe</span><span class=\"params\">(Disposable d)</span> </span>&#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"onSubscribe\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"onNext\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"onError\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onComplete</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"onComplete\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//log</span></div><div class=\"line\"><span class=\"comment\">//onSubscribe</span></div></pre></td></tr></table></figure>\n<p><strong>error</strong></p>\n<p><code>Observable observable2=Observable.error(new RuntimeException());</code>//直接调用onError。这里可以自定义异常</p>\n<h2 id=\"功能操作\"><a href=\"#功能操作\" class=\"headerlink\" title=\"功能操作\"></a>功能操作</h2><h3 id=\"map操作符\"><a href=\"#map操作符\" class=\"headerlink\" title=\"map操作符\"></a>map操作符</h3><p>map操作符算是Rxjava中最简单的一个操作符了，在2.x中的用法和1.x差不多；它的作用就是对发射的每一个事件应用一个函数，每一个事件都按照map操作符指定的函数去变化转换，下面我们看一个栗子🌰</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rxJava</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Observable.create(<span class=\"keyword\">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subscribe</span><span class=\"params\">(ObservableEmitter&lt;Integer&gt; emitter)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">                emitter.onNext(<span class=\"number\">1</span>);</div><div class=\"line\">                emitter.onNext(<span class=\"number\">2</span>);</div><div class=\"line\">                emitter.onNext(<span class=\"number\">3</span>);</div><div class=\"line\">                emitter.onComplete();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).map(<span class=\"keyword\">new</span> Function&lt;Integer, String&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">apply</span><span class=\"params\">(Integer integer)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">                Log.e(<span class=\"string\">\"fengan\"</span>, <span class=\"string\">\"apply----&gt;\"</span> + Thread.currentThread().getName());</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"this is value = \"</span> + integer;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).subscribeOn(Schedulers.single())</div><div class=\"line\"><span class=\"comment\">//                .observeOn(Schedulers.single())</span></div><div class=\"line\">                .subscribe(<span class=\"keyword\">new</span> Consumer&lt;String&gt;() &#123;</div><div class=\"line\">                    <span class=\"meta\">@Override</span></div><div class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(String s)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">                        Log.e(<span class=\"string\">\"fengan\"</span>, <span class=\"string\">\"accept----&gt;\"</span> + Thread.currentThread().getName());</div><div class=\"line\">                        Log.e(<span class=\"string\">\"fengan\"</span>, <span class=\"string\">\"accept----&gt;\"</span> + s);</div><div class=\"line\">                        Log.e(<span class=\"string\">\"fengan\"</span>,<span class=\"string\">\"========\"</span>);</div><div class=\"line\"></div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>log</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">apply----&gt;RxSingleScheduler-<span class=\"number\">1</span></div><div class=\"line\">accept----&gt;RxSingleScheduler-<span class=\"number\">1</span></div><div class=\"line\">accept----&gt;<span class=\"keyword\">this</span> is value = <span class=\"number\">1</span></div><div class=\"line\">========</div><div class=\"line\">apply----&gt;RxSingleScheduler-<span class=\"number\">1</span></div><div class=\"line\">accept----&gt;RxSingleScheduler-<span class=\"number\">1</span></div><div class=\"line\">accept----&gt;<span class=\"keyword\">this</span> is value = <span class=\"number\">2</span></div><div class=\"line\">========</div><div class=\"line\">apply----&gt;RxSingleScheduler-<span class=\"number\">1</span></div><div class=\"line\">accept----&gt;RxSingleScheduler-<span class=\"number\">1</span></div><div class=\"line\">accept----&gt;<span class=\"keyword\">this</span> is value = <span class=\"number\">3</span></div><div class=\"line\">========</div></pre></td></tr></table></figure>\n<p>从这个例子，我们能看出</p>\n<ul>\n<li>我们发射的integer事件，被转换为String，继续进行</li>\n<li>我们也顺便验证了两个问题（在碎片化2整理的线程调度）<ul>\n<li>只指定<code>subscribeOn</code>未指定<code>observeOn</code>的情况下，观察者的事件的接受（下游）按照<code>subscribeOn</code>指定的线程进行</li>\n<li><code>Schedulers.single()</code>是在指定线程中按照队列的形式进行，先进先出（体现在：一个事件发布和接受完毕后，才发送第二个事件）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"debounce操作符\"><a href=\"#debounce操作符\" class=\"headerlink\" title=\"debounce操作符\"></a>debounce操作符</h3><p><code>debounce</code>：防抖；</p>\n<p>only emit an item from an Observable if a particular time-span has passed without it emitting another item,</p>\n<p>当一个事件发送出来之后，在约定时间内没有再次发送这个事件，则发射这个事件，如果再次触发了，则重新计算时间。</p>\n<p><a href=\"https://www.jianshu.com/p/ee1f0d21a856\">参考链接</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"> Observable.create(<span class=\"keyword\">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subscribe</span><span class=\"params\">(ObservableEmitter&lt;Integer&gt; emitter)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">                <span class=\"comment\">// send events with simulated time wait</span></div><div class=\"line\">                emitter.onNext(<span class=\"number\">1</span>); <span class=\"comment\">// skip</span></div><div class=\"line\">                Thread.sleep(<span class=\"number\">400</span>);</div><div class=\"line\">                emitter.onNext(<span class=\"number\">2</span>); <span class=\"comment\">// deliver</span></div><div class=\"line\">                Thread.sleep(<span class=\"number\">505</span>);</div><div class=\"line\">                emitter.onNext(<span class=\"number\">3</span>); <span class=\"comment\">// skip</span></div><div class=\"line\">                Thread.sleep(<span class=\"number\">100</span>);</div><div class=\"line\">                emitter.onNext(<span class=\"number\">4</span>); <span class=\"comment\">// deliver</span></div><div class=\"line\">                Thread.sleep(<span class=\"number\">605</span>);</div><div class=\"line\">                emitter.onNext(<span class=\"number\">5</span>); <span class=\"comment\">// deliver</span></div><div class=\"line\">                Thread.sleep(<span class=\"number\">510</span>);</div><div class=\"line\">                emitter.onComplete();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).debounce(<span class=\"number\">500</span>,TimeUnit.MILLISECONDS)</div><div class=\"line\">            .subscribe(<span class=\"keyword\">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Integer integer)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">                    System.out.println(integer);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//2</span></div><div class=\"line\"><span class=\"comment\">//4</span></div><div class=\"line\"><span class=\"comment\">//5</span></div></pre></td></tr></table></figure>\n<h3 id=\"onTerminateDetach操作符\"><a href=\"#onTerminateDetach操作符\" class=\"headerlink\" title=\"onTerminateDetach操作符\"></a>onTerminateDetach操作符</h3><p><a href=\"https://blog.csdn.net/johnny901114/article/details/67640594\">Rxjava导致内存泄漏的问题</a></p>\n<p><a href=\"https://blog.csdn.net/johnny901114/article/details/67640594\">一张图搞定-RxJava2的线程切换原理和内存泄露问题</a></p>\n<p>看完这两个参考链接，基本也就知道了onTerminateDetach的使用方法和作用</p>\n<h3 id=\"defer操作符\"><a href=\"#defer操作符\" class=\"headerlink\" title=\"defer操作符\"></a>defer操作符</h3><p>只有当订阅者订阅才创建Observable，为每个订阅创建一个新的Observable。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rxjava</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Observable.defer(<span class=\"keyword\">new</span> Callable&lt;ObservableSource&lt;Integer&gt;&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> ObservableSource&lt;Integer&gt; <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> Observable.just(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;).subscribe(<span class=\"keyword\">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Integer integer)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">            System.out.println(integer);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div></pre></td></tr></table></figure>\n<h3 id=\"flatMap操作符\"><a href=\"#flatMap操作符\" class=\"headerlink\" title=\"flatMap操作符\"></a>flatMap操作符</h3><p>把一个发射器<code>Observable</code> 通过某种方法转换为多个<code>Observables</code>，然后再把这些分散的<code>Observables</code>装进一个单一的发射器<code>Observable</code>。但有个需要注意的是，<code>flatMap</code>并不能保证事件的顺序，如果需要保证，需要用到我们下面要讲的<code>ConcatMap</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rxJava</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Observable.create(<span class=\"keyword\">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subscribe</span><span class=\"params\">(ObservableEmitter&lt;Integer&gt; emitter)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">            emitter.onNext(<span class=\"number\">1</span>);</div><div class=\"line\">            emitter.onNext(<span class=\"number\">2</span>);</div><div class=\"line\">            emitter.onNext(<span class=\"number\">3</span>);</div><div class=\"line\">            emitter.onComplete();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;).flatMap(<span class=\"keyword\">new</span> Function&lt;Integer, ObservableSource&lt;String&gt;&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> ObservableSource&lt;String&gt; <span class=\"title\">apply</span><span class=\"params\">(Integer integer)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">            List&lt;String&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">            res.add(<span class=\"string\">\"i am value =\"</span> + integer);</div><div class=\"line\">            Log.e(<span class=\"string\">\"fengan\"</span>,<span class=\"string\">\"flatMap size\"</span>+res.size());</div><div class=\"line\">            <span class=\"keyword\">return</span> Observable.fromIterable(res);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;).subscribe(<span class=\"keyword\">new</span> Consumer&lt;String&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(String s)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">            Log.e(<span class=\"string\">\"fengan\"</span>,<span class=\"string\">\"accept=\"</span>+s);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>log</p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">flatMap size1</div><div class=\"line\"><span class=\"attr\">accept=i</span> am <span class=\"attr\">value</span> =<span class=\"number\">1</span></div><div class=\"line\">   flatMap size1</div><div class=\"line\">   <span class=\"attr\">accept=i</span> am <span class=\"attr\">value</span> =<span class=\"number\">2</span></div><div class=\"line\">   flatMap size1</div><div class=\"line\">   <span class=\"attr\">accept=i</span> am <span class=\"attr\">value</span> =<span class=\"number\">3</span></div></pre></td></tr></table></figure>\n<p><strong>结论</strong></p>\n<ul>\n<li>验证了我之前的一个误区（size大小一直为1）：误以为所有事件发送完毕之后，在flatmap统一处理，其实不是，事件源每发射一个事件，<code>flatmap</code>就处理转换一个事件</li>\n<li><code>flatMap</code>的作用是，接受一个事件，作出处理完之后，重新发射一个新的事件</li>\n</ul>\n<p>刚才说到<code>flatMap</code>并不能保证事件的顺序，请看下面的例子就明白了</p>\n<h3 id=\"concatMap操作符\"><a href=\"#concatMap操作符\" class=\"headerlink\" title=\"concatMap操作符\"></a>concatMap操作符</h3><p>flatMap操作符可以将一个<code>Observable</code>转换为另一个<code>Observable</code>发射出去,并且可以将多个事件转化为1个，但是最后输出的事件序列顺序是不确定的，如果想要最后输出的事件顺序和源数据的顺序一致只要换成<code>concatMap</code>就可以了。<br>flatMap和Map操作符的不同是map一次只能转换一个事件。</p>\n<p>先看一个<code>flatmap</code>的使用例子，如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable.create((ObservableOnSubscribe&lt;Integer&gt;) emitter -&gt; &#123;</div><div class=\"line\">           emitter.onNext(<span class=\"number\">1</span>);</div><div class=\"line\">           emitter.onNext(<span class=\"number\">2</span>);</div><div class=\"line\">           emitter.onNext(<span class=\"number\">3</span>);</div><div class=\"line\">           emitter.onComplete();</div><div class=\"line\">       &#125;).subscribeOn(Schedulers.io()).flatMap((Function&lt;Integer, ObservableSource&lt;String&gt;&gt;) integer -&gt; &#123;</div><div class=\"line\">           List&lt;String&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">               res.add(<span class=\"string\">\"I am value \"</span> + integer);</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">int</span> delayTime = (<span class=\"keyword\">int</span>) (<span class=\"number\">1</span> + Math.random() * <span class=\"number\">10</span>);</div><div class=\"line\">           <span class=\"keyword\">return</span> Observable.fromIterable(res).delay(delayTime, TimeUnit.MILLISECONDS);</div><div class=\"line\">       &#125;).subscribe(s -&gt; Log.e(<span class=\"string\">\"fengan\"</span>, <span class=\"string\">\"accept=\"</span> + s));</div></pre></td></tr></table></figure>\n<p>log</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">accept=I am value <span class=\"number\">3</span></div><div class=\"line\">accept=I am value <span class=\"number\">3</span></div><div class=\"line\">accept=I am value <span class=\"number\">2</span></div><div class=\"line\">accept=I am value <span class=\"number\">2</span></div><div class=\"line\">accept=I am value <span class=\"number\">2</span></div><div class=\"line\">accept=I am value <span class=\"number\">3</span></div><div class=\"line\">accept=I am value <span class=\"number\">1</span></div><div class=\"line\">accept=I am value <span class=\"number\">1</span></div><div class=\"line\">accept=I am value <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<p>可见不是按照源数据到顺序一致，若想一致使用<code>concatMap</code>就可以了</p>\n<h3 id=\"repeat操作符\"><a href=\"#repeat操作符\" class=\"headerlink\" title=\"repeat操作符\"></a>repeat操作符</h3><p>repeat 重复地发射数据</p>\n<ul>\n<li>repeat( ) //无限重复</li>\n<li>repeat( int time ) //设定重复的次数</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable.just(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</div><div class=\"line\">                .repeat(<span class=\"number\">3</span>)</div><div class=\"line\">                .subscribe(integer -&gt; System.out.println(integer));</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div></pre></td></tr></table></figure>\n<h3 id=\"fromArray和fromIterble操作符\"><a href=\"#fromArray和fromIterble操作符\" class=\"headerlink\" title=\"fromArray和fromIterble操作符\"></a>fromArray和fromIterble操作符</h3><p>一个是发射一个数组一个是发射一个集合</p>\n<h3 id=\"toList\"><a href=\"#toList\" class=\"headerlink\" title=\"toList\"></a>toList</h3><p>将数组转换为集合</p>\n<h3 id=\"delay操作符\"><a href=\"#delay操作符\" class=\"headerlink\" title=\"delay操作符\"></a>delay操作符</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rxJava</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Observable.just(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\">                .delay(<span class=\"number\">3</span>, TimeUnit.SECONDS)</div><div class=\"line\">                .observeOn(Schedulers.io())</div><div class=\"line\">                .subscribe(integer -&gt; &#123;</div><div class=\"line\">                    <span class=\"keyword\">int</span> a = integer;</div><div class=\"line\">                    System.out.println(a);</div><div class=\"line\">                &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"comment\">//注意：延迟3秒钟，然后在发射数据</span></div><div class=\"line\"><span class=\"comment\">//是延迟三秒，发送1，2，3数据</span></div><div class=\"line\"><span class=\"comment\">//而不是--延迟3秒--发送1--延迟3秒---发送2</span></div></pre></td></tr></table></figure>\n<ul>\n<li>是延迟三秒，发送1，2，3数据</li>\n<li>而不是–延迟3秒–发送1–延迟3秒—发送2</li>\n</ul>\n<p>若想达到这种效果，可以类似这么做</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rxJava</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Observable.just(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\">                .concatMap(<span class=\"keyword\">new</span> Function&lt;Integer, ObservableSource&lt;Integer&gt;&gt;() &#123;</div><div class=\"line\">                    <span class=\"meta\">@Override</span></div><div class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> ObservableSource&lt;Integer&gt; <span class=\"title\">apply</span><span class=\"params\">(Integer integer)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">                        <span class=\"keyword\">return</span> Observable.just(integer) .delay(<span class=\"number\">3</span>, TimeUnit.SECONDS);</div><div class=\"line\">                        </div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;)</div><div class=\"line\">                .subscribe(integer -&gt; System.out.println(integer));</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"comment\">//--延迟三秒---发送1---延迟三秒---发送2---延迟3秒---发送3</span></div></pre></td></tr></table></figure>\n<h3 id=\"doOnNext操作符\"><a href=\"#doOnNext操作符\" class=\"headerlink\" title=\"doOnNext操作符\"></a>doOnNext操作符</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testRxJava</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Observable.create(<span class=\"keyword\">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subscribe</span><span class=\"params\">(ObservableEmitter&lt;Integer&gt; emitter)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">            emitter.onNext(<span class=\"number\">1</span>);</div><div class=\"line\">            emitter.onNext(<span class=\"number\">2</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;).doOnNext(<span class=\"keyword\">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Integer integer)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"前置操作\"</span> + integer);</div><div class=\"line\">            integer+=<span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">            .subscribe(System.out::println);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//log</span></div><div class=\"line\">前置操作<span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\">前置操作<span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">2</span></div></pre></td></tr></table></figure>\n<p>在每次 OnNext() 方法被调用前执行</p>\n<p>使用场景：从网络请求数据，在数据被展示前，缓存到本地</p>\n<h2 id=\"合并操作\"><a href=\"#合并操作\" class=\"headerlink\" title=\"合并操作\"></a>合并操作</h2><h3 id=\"concat操作符\"><a href=\"#concat操作符\" class=\"headerlink\" title=\"concat操作符\"></a>concat操作符</h3><p>按顺序连接多个Observables。需要注意的是Observable.concat(a,b)等价于a.concatWith(b)。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable&lt;Integer&gt; observable1=Observable.just(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>);</div><div class=\"line\">    Observable&lt;Integer&gt;  observable2=Observable.just(<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>);</div><div class=\"line\"></div><div class=\"line\">    Observable.concat(observable1,observable2)</div><div class=\"line\">            .subscribe(item-&gt;Log.d(<span class=\"string\">\"JG\"</span>,item.toString()));<span class=\"comment\">//1,2,3,4,4,5,6</span></div></pre></td></tr></table></figure>\n<h3 id=\"startWith操作符\"><a href=\"#startWith操作符\" class=\"headerlink\" title=\"startWith操作符\"></a>startWith操作符</h3><p>在数据序列的开头增加一项数据。startWith的内部也是调用了concat</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable.just(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>)</div><div class=\"line\">           .startWith(<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>)</div><div class=\"line\">   .subscribe(item-&gt;Log.d(<span class=\"string\">\"JG\"</span>,item.toString()));<span class=\"comment\">//6,7,8,1,2,3,4,5</span></div></pre></td></tr></table></figure>\n<h3 id=\"merge操作符\"><a href=\"#merge操作符\" class=\"headerlink\" title=\"merge操作符\"></a>merge操作符</h3><p>合并被观察者</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> String[] aStrings = &#123;<span class=\"string\">\"A1\"</span>, <span class=\"string\">\"A2\"</span>, <span class=\"string\">\"A3\"</span>, <span class=\"string\">\"A4\"</span>&#125;;</div><div class=\"line\">        <span class=\"keyword\">final</span> String[] bStrings = &#123;<span class=\"string\">\"B1\"</span>, <span class=\"string\">\"B2\"</span>, <span class=\"string\">\"B3\"</span>&#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> Observable&lt;String&gt; aObservable = Observable.fromArray(aStrings);</div><div class=\"line\">        <span class=\"keyword\">final</span> Observable&lt;String&gt; bObservable = Observable.fromArray(bStrings);</div><div class=\"line\"></div><div class=\"line\">        Observable.merge(aObservable, bObservable)<span class=\"comment\">//使用merge操作符将两个被观察者合并</span></div><div class=\"line\">                .subscribe(getObserver());<span class=\"comment\">//这里的观察者依然不重要</span></div><div class=\"line\"><span class=\"comment\">//\"A1\", \"B1\", \"A2\", \"A3\", \"A4\", \"B2\", \"B3\"</span></div></pre></td></tr></table></figure>\n<p>操作符merge将两个被观察者合并,这里要注意merge之后的Observable是不能保证和原来的Observable发射顺序相同.</p>\n<h3 id=\"Zip操作符\"><a href=\"#Zip操作符\" class=\"headerlink\" title=\"Zip操作符\"></a>Zip操作符</h3><p>zip我们想到”压缩“，那么在这个操作符是什么意思呢，请看下面图片</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1931185-14134e499db9d0c4.png?imageMogr2/auto-orient/\" alt=\"Zip\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rxJava</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Observable.zip(Observable.just(<span class=\"string\">\"A\"</span>, <span class=\"string\">\"B\"</span>, <span class=\"string\">\"C\"</span>), Observable.just(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>), <span class=\"keyword\">new</span> BiFunction&lt;String, Integer, String&gt;() &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">apply</span><span class=\"params\">(String s, Integer integer)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> s+integer;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).subscribe(s -&gt; System.out.println(<span class=\"string\">\"value=\"</span> + s));</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>log</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">value=A1</div><div class=\"line\">value=B2</div><div class=\"line\">value=C3</div></pre></td></tr></table></figure>\n<p>结论：</p>\n<ul>\n<li>zip 组合事件的过程就是分别从发射器A和发射器B各取出一个事件来组合，并且一个事件只能被使用一次，组合的顺序是严格按照事件发送的顺序来进行的，所以上面截图中，可以看到，1永远是和A 结合的，2永远是和B结合的。</li>\n</ul>\n<ul>\n<li>最终接收器收到的事件数量是和发送器发送事件最少的那个发送器的发送事件数目相同，所以代码中，4和5是没有配对的，所以也就无法发射合并事件</li>\n</ul>\n<h3 id=\"combineLatest操作符\"><a href=\"#combineLatest操作符\" class=\"headerlink\" title=\"combineLatest操作符\"></a>combineLatest操作符</h3><p>先看一张图，我想你应该已经大致明白意思了</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1931185-1e60a8bf25b31e91.png?imageMogr2/auto-orient/\" alt=\"combineLatest\"></p>\n<p><a href=\"https://blog.csdn.net/jdsjlzx/article/details/53040293\">使用场景，表单验证</a></p>\n<p>combineLatest是RxJava本身提供的一个常用的操作符，它接受两个或以上的Observable和一个FuncX闭包。当传入的Observable中任意的一个发射数据时，combineLatest将每个Observable的最近值(Lastest)联合起来（combine）传给FuncX闭包进行处理。要点在于：</p>\n<ol>\n<li>combineLatest是会存储每个Observable的最近的值的</li>\n<li>任意一个Observable发射新值时都会触发操作-&gt;“combine all the Observable’s lastest value together and send to Function”</li>\n</ol>\n<p>看一个例子，可以说明</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testRxJava</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> String[] aStrings = &#123;<span class=\"string\">\"A1\"</span>, <span class=\"string\">\"A2\"</span>, <span class=\"string\">\"A3\"</span>, <span class=\"string\">\"A4\"</span>&#125;;</div><div class=\"line\">        <span class=\"keyword\">final</span> String[] bStrings = &#123;<span class=\"string\">\"B1\"</span>, <span class=\"string\">\"B2\"</span>, <span class=\"string\">\"B3\"</span>&#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> Observable&lt;String&gt; aObservable = Observable.fromArray(aStrings).delay(<span class=\"number\">1</span>,TimeUnit.MILLISECONDS);</div><div class=\"line\">        <span class=\"keyword\">final</span> Observable&lt;String&gt; bObservable = Observable.fromArray(bStrings);</div><div class=\"line\"></div><div class=\"line\">        Observable.combineLatest(aObservable, bObservable, <span class=\"keyword\">new</span> BiFunction&lt;String, String, String&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">apply</span><span class=\"params\">(String s1, String s2)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> s1+s2;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).subscribe(<span class=\"keyword\">new</span> Consumer&lt;String&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(String s)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">                System.out.println(s);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"comment\">//log</span></div><div class=\"line\"><span class=\"comment\">//A1B3</span></div><div class=\"line\"><span class=\"comment\">//A2B3</span></div><div class=\"line\"><span class=\"comment\">//A3B3</span></div><div class=\"line\"><span class=\"comment\">//A4B3</span></div><div class=\"line\">可见，发送A1的时候B1 B2 B3都已经发射完毕</div><div class=\"line\">所以，存储每个Observable的最近的值的，也就是B3</div><div class=\"line\">当B1，B2，B3发射的 A被观察者一个都没发射，所以得至少两个才会合并，这个看图可以解释</div></pre></td></tr></table></figure>\n<p>##过滤操作</p>\n<h3 id=\"take等操作符\"><a href=\"#take等操作符\" class=\"headerlink\" title=\"take等操作符\"></a>take等操作符</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//take 取前n个数据</span></div><div class=\"line\">Observable.just(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>)</div><div class=\"line\">        .take(<span class=\"number\">3</span>)</div><div class=\"line\">       .subscribe(System.out::println);</div><div class=\"line\"><span class=\"comment\">//log</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"comment\">//takelast 取后n个数据</span></div><div class=\"line\"> Observable.just(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>)</div><div class=\"line\">                .takeLast(<span class=\"number\">3</span>)</div><div class=\"line\">                .subscribe(System.out::println);</div><div class=\"line\"><span class=\"comment\">//log</span></div><div class=\"line\"><span class=\"number\">5</span></div><div class=\"line\"><span class=\"number\">6</span></div><div class=\"line\"><span class=\"number\">7</span></div><div class=\"line\"><span class=\"comment\">//first 只发送第一个数据  </span></div><div class=\"line\"><span class=\"comment\">//last 只发送最后一个数据</span></div><div class=\"line\"><span class=\"comment\">//skip() 跳过前n个数据发送后面的数据</span></div><div class=\"line\"><span class=\"comment\">//skipLast() 跳过最后n个数据，发送前面的数据</span></div></pre></td></tr></table></figure>\n<h3 id=\"filter操作符\"><a href=\"#filter操作符\" class=\"headerlink\" title=\"filter操作符\"></a>filter操作符</h3><p>顾名思义，过滤发送的事件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testRxJava</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Observable.just(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\">                .filter(integer -&gt; &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (integer==<span class=\"number\">2</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;).subscribe(System.out::println);</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"comment\">//log</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">3</span></div></pre></td></tr></table></figure>\n<h3 id=\"ofType\"><a href=\"#ofType\" class=\"headerlink\" title=\"ofType\"></a>ofType</h3><p>过滤指定类型的数据，与filter类似，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rxjava</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Observable.just(<span class=\"number\">1</span>,<span class=\"string\">\"1\"</span>,-<span class=\"number\">1</span>)</div><div class=\"line\">            .ofType(Integer.class)</div><div class=\"line\">            .subscribe(<span class=\"keyword\">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Integer integer)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">                    System.out.println(integer);</div><div class=\"line\">                &#125;</div><div class=\"line\"><span class=\"comment\">//log</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\">-<span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<h3 id=\"first和last\"><a href=\"#first和last\" class=\"headerlink\" title=\"first和last\"></a>first和last</h3><figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable.just(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\">        .first(<span class=\"number\">2</span>)</div><div class=\"line\">        .subscribe(<span class=\"literal\">new</span> Consumer&lt;<span class=\"built_in\">Integer</span>&gt;() &#123;</div><div class=\"line\">            @Override</div><div class=\"line\">            <span class=\"keyword\">public</span> <span class=\"literal\">void</span> accept(<span class=\"built_in\">Integer</span> <span class=\"built_in\">integer</span>) throws Exception &#123;</div><div class=\"line\">                System.out.println(<span class=\"built_in\">integer</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"><span class=\"comment\">//1</span></div><div class=\"line\"> Observable.just(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\">                .last(<span class=\"number\">2</span>)</div><div class=\"line\">                .subscribe(<span class=\"literal\">new</span> Consumer&lt;<span class=\"built_in\">Integer</span>&gt;() &#123;</div><div class=\"line\">                    @Override</div><div class=\"line\">                    <span class=\"keyword\">public</span> <span class=\"literal\">void</span> accept(<span class=\"built_in\">Integer</span> <span class=\"built_in\">integer</span>) throws Exception &#123;</div><div class=\"line\">                        System.out.println(<span class=\"built_in\">integer</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\"><span class=\"comment\">//3</span></div></pre></td></tr></table></figure>\n<h2 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h2><h2 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h2><p><a href=\"https://www.jianshu.com/p/d149043d103a\">手把手教你使用 RxJava 2.0（一）</a></p>\n<p><a href=\"https://blog.csdn.net/jdsjlzx/article/details/53040293\">RxJava combineLatest操作符处理复杂表单验证问题</a></p>\n<p><a href=\"https://www.jianshu.com/p/b30de498c3cc\">Android - RxJava2.0 操作符整理归纳</a></p>"},{"title":"AS中看不到源码问题解决","date":"2017-03-13T08:38:47.000Z","password":123456,"_content":"\n在Android Studio翻源码多时候，明明下载了对应的SDK，却点进去都是.class看不到源码，本文记录一下解决办法\n\n<!--more-->\n\n**首先确保下载了对应的SDK**\n\n- 找到以下路径，并打开文件\n\n~/Library/Preferences/AndroidStudioXXX/options/jdk.table.xml\n\n- 修改前\n\n![](http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/w3eyx.png)\n\n- 修改后\n\n![](http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/ehg3w.png)\n\n- 重启AS\n\n","source":"_posts/Sources-for-‘Android-API-xx-Platform’-not-found.md","raw":"---\ntitle: AS中看不到源码问题解决\ndate: 2017-03-13 16:38:47\ntags: \n- Android\ncategories: Android\npassword: 123456\n---\n\n在Android Studio翻源码多时候，明明下载了对应的SDK，却点进去都是.class看不到源码，本文记录一下解决办法\n\n<!--more-->\n\n**首先确保下载了对应的SDK**\n\n- 找到以下路径，并打开文件\n\n~/Library/Preferences/AndroidStudioXXX/options/jdk.table.xml\n\n- 修改前\n\n![](http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/w3eyx.png)\n\n- 修改后\n\n![](http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/ehg3w.png)\n\n- 重启AS\n\n","slug":"Sources-for-‘Android-API-xx-Platform’-not-found","published":1,"updated":"2018-07-19T02:21:14.808Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6mt001c1kygo1dxvjh4","content":"<p>在Android Studio翻源码多时候，明明下载了对应的SDK，却点进去都是.class看不到源码，本文记录一下解决办法</p>\n<a id=\"more\"></a>\n<p><strong>首先确保下载了对应的SDK</strong></p>\n<ul>\n<li>找到以下路径，并打开文件</li>\n</ul>\n<p>~/Library/Preferences/AndroidStudioXXX/options/jdk.table.xml</p>\n<ul>\n<li>修改前</li>\n</ul>\n<p><img src=\"http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/w3eyx.png\" alt=\"\"></p>\n<ul>\n<li>修改后</li>\n</ul>\n<p><img src=\"http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/ehg3w.png\" alt=\"\"></p>\n<ul>\n<li>重启AS</li>\n</ul>\n","excerpt":"<p>在Android Studio翻源码多时候，明明下载了对应的SDK，却点进去都是.class看不到源码，本文记录一下解决办法</p>","more":"<p><strong>首先确保下载了对应的SDK</strong></p>\n<ul>\n<li>找到以下路径，并打开文件</li>\n</ul>\n<p>~/Library/Preferences/AndroidStudioXXX/options/jdk.table.xml</p>\n<ul>\n<li>修改前</li>\n</ul>\n<p><img src=\"http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/w3eyx.png\" alt=\"\"></p>\n<ul>\n<li>修改后</li>\n</ul>\n<p><img src=\"http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/ehg3w.png\" alt=\"\"></p>\n<ul>\n<li>重启AS</li>\n</ul>"},{"title":"Rxjava2.0-知识碎片(二)","date":"2018-07-23T08:51:40.000Z","password":null,"_content":"\nRxjava2.0中的线程调度小节\n\n<!--more-->\n\n# Scheduler的种类\n\n<img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/schedulers.png\" width=\"25%\" height=\"25%\" />\n\n- Schedulers.io( )：\n\n  用于IO密集型的操作，例如读写SD卡文件，查询数据库，访问网络等，具有线程缓存机制，在此调度器接收到任务后，先检查线程缓存池中，是否有空闲的线程，如果有，则复用，如果没有则创建新的线程，并加入到线程池中，如果每次都没有空闲线程使用，可以无上限的创建新线程。\n\n- Schedulers.newThread( )：\n\n\n在每执行一个任务时创建一个新的线程，不具有线程缓存机制，因为创建一个新的线程比复用一个线程更耗时耗力，虽然使用Schedulers.io( )的地方，都可以使用Schedulers.newThread( )，但是，Schedulers.newThread( )的效率没有Schedulers.io( )高。\n\n- Schedulers.computation()：\n\n\n用于CPU 密集型计算任务，即不会被 I/O 等操作限制性能的耗时操作，例如xml,json文件的解析，Bitmap图片的压缩取样等，具有固定的线程池，大小为CPU的核数。不可以用于I/O操作，因为I/O操作的等待时间会浪费CPU。\n\n- Schedulers.trampoline()：\n\n\n在**当前线程**立即执行任务，如果当前线程有任务在执行，则会将其暂停，**等插入进来的任务执行完之后，再将未完成的任务接着执行。**\n\n- Schedulers.single()：\n\n\n拥有一个线程单例(**注意是子线程**)，所有的任务都在这一个线程中执行，当此线程中有任务执行时，其他任务将会按照先进先出的顺序依次执行。\n\n- Scheduler.from(@NonNull Executor executor)：\n\n\n指定一个线程调度器，由此调度器来控制任务的执行策略。\n\n- AndroidSchedulers.mainThread()：\n\n\n在Android UI线程中执行任务.需要添加RxAndroid依赖\n\n> 注意\n\n| 方式                                       | 子线程  | 主线程  |      备注       |\n| :--------------------------------------- | :--: | :--: | :-----------: |\n| Schedulers.io()                          | yes  |  --  |      线程池      |\n| Schedulers.newThread()                   | yes  |  --  |     创建新的      |\n| Schedulers.computation()                 | yes  |  --  | 占用CPU，不要i/o耗时 |\n| Schedulers.trampoline()                  | yes  | yes  |     当前线程      |\n| Schedulers.single()                      | yes  |  --  |    固定一个子线程    |\n| Scheduler.from(@NonNull Executor executor) | yes  | yes  |     指定线程      |\n| AndroidSchedulers.mainThread()           |  --  | yes  | 主线程，RxAndroid |\n\n- 在RxJava2中，废弃了RxJava1中的Schedulers.immediate( )\n\n\n- 在RxJava1中，Schedulers.immediate( )的作用为在当前线程立即执行任务，功能等同于RxJava2中的Schedulers.trampoline( )，不同的是，Schedulers.trampoline( )是停下当前的任务，先执行插入进来的任务，等执行完后，再将暂停的任务继续执行下去。\n\n- Schedulers.trampoline( )在RxJava1中的作用是当其它排队的任务完成后，在当前线程排队开始执行接到的任务，有点像RxJava2中的Schedulers.single()，但也不完全相同，因为Schedulers.single()不是在当前线程而是在一个线程单例中排队执行任务.\n\n  ​\n\n  ​\n\n# subscribeOn和observeOn\n\n\n  ## 介绍\n\n### **subscribeOn**\n\n`Observable<T> subscribeOn(Scheduler scheduler)`\n\n  subscribeOn通过接收一个Scheduler参数，来指定对数据的处理运行在特定的线程调度器Scheduler上。\n  若多次设定，则只有一次起作用。\n\n### **observeOn**\n\n`Observable<T> observeOn(Scheduler scheduler)`\n\nobserveOn同样接收一个Scheduler参数，来指定下游操作运行在特定的线程调度器Scheduler上。\n若多次设定，每次均起作用。\n\n### 使用实例\n\n#### 实例一：\n\n```java\n@Test\npublic void rxjavaThreadScheuler(){\n    Integer [] nums = {1,2,3};\n    Observable.fromArray(nums)\n            .observeOn(Schedulers.single())\n            .subscribeOn(Schedulers.io())\n            .map(new Function<Integer, String>() {\n                @Override\n                public String apply(Integer integer) throws Exception {\n\n                    System.out.println(\"mapA\"+\"Thread=\"+Thread.currentThread().getName()+\"\\r\\n\"+\"integer=\"+integer);\n                    return \"num\"+integer;\n                }\n            })\n            .map(new Function<String, Integer>() {\n                @Override\n                public Integer apply(String s) throws Exception {\n                    System.out.println(\"mapB\"+\"Thread=\"+Thread.currentThread().getName()+\"\\r\\n\"+\"String=\"+s);\n                    return Integer.parseInt(s.substring(3,s.length()));\n                }\n            })\n            .subscribe(new Consumer<Integer>() {\n                @Override\n                public void accept(Integer integer) throws Exception {\n                    System.out.println(\"subscribe\"+\"Thread=\"+Thread.currentThread().getName()+\"\\r\\n\"+\"integer=\"+integer);\n                    System.out.println(\"========\");\n                }\n            });\n}\n```\n\n```\nmapAThread=RxSingleScheduler-1\ninteger=1\nmapBThread=RxSingleScheduler-1\nString=num1\nsubscribeThread=RxSingleScheduler-1\ninteger=1\n========\nmapAThread=RxSingleScheduler-1\ninteger=2\nmapBThread=RxSingleScheduler-1\nString=num2\nsubscribeThread=RxSingleScheduler-1\ninteger=2\n========\nmapAThread=RxSingleScheduler-1\ninteger=3\nmapBThread=RxSingleScheduler-1\nString=num3\nsubscribeThread=RxSingleScheduler-1\ninteger=3\n========\n```\n\n结论：\n\n打印的所有线程均在`Schedulers.single() `中执行，  `subscribeOn(Schedulers.io())`貌似没有生效，其实\n\n`Observable.fromArray(nums)`的执行线程，是在`Schedulers.io()`线程中执行，我们通过实例二验证\n\n#### 实例二：\n\n```java\n@Test\npublic void rxjavaThreadScheuler() {\n    Integer[] nums = {1, 2, 3};\n    Observable.create((ObservableOnSubscribe<Integer>) emitter -> {\n        for (Integer integer : nums) {\n            emitter.onNext(integer);\n            System.out.println(\"emitter.onNext()\" + \"Thread=\" + Thread.currentThread().getName() + \"\\r\\n\" + \"integer=\" + integer);\n        }\n    })\n            .observeOn(Schedulers.single())\n            .subscribeOn(Schedulers.io())\n            .map(integer -> {\n                System.out.println(\"mapA\" + \"Thread=\" + Thread.currentThread().getName() + \"\\r\\n\" + \"integer=\" + integer);\n                return \"num\" + integer;\n            })\n            .map(s -> {\n                System.out.println(\"mapB\" + \"Thread=\" + Thread.currentThread().getName() + \"\\r\\n\" + \"String=\" + s);\n                return Integer.parseInt(s.substring(3, s.length()));\n            })\n            .subscribe(integer -> {\n                System.out.println(\"subscribe\" + \"Thread=\" + Thread.currentThread().getName() + \"\\r\\n\" + \"integer=\" + integer);\n                System.out.println(\"========\");\n            });\n}\n```\n\n  logcat\n\n```java\n//可见，事件的发布，是在.subscribeOn(Schedulers.io())指定的io线程\nemitter.onNext()Thread=RxCachedThreadScheduler-1\ninteger=1\nemitter.onNext()Thread=RxCachedThreadScheduler-1\ninteger=2\nemitter.onNext()Thread=RxCachedThreadScheduler-1\ninteger=3\n//其他均在.observeOn(Schedulers.single())指定的Single线程\nmapAThread=RxSingleScheduler-1\ninteger=1\nmapBThread=RxSingleScheduler-1\nString=num1\nsubscribeThread=RxSingleScheduler-1\ninteger=1\n========\nmapAThread=RxSingleScheduler-1\ninteger=2\nmapBThread=RxSingleScheduler-1\nString=num2\nsubscribeThread=RxSingleScheduler-1\ninteger=2\n========\nmapAThread=RxSingleScheduler-1\ninteger=3\nmapBThread=RxSingleScheduler-1\nString=num3\nsubscribeThread=RxSingleScheduler-1\ninteger=3\n========\n```\n\n  结论：\n\nsubscribeOn()指定的是事件的发布执行的线程，observeOn()指定的是各种操作符和subscribe的onNext，onError，onComplete执行等线程，那么调用多次subscribeOn()或者多次observeOn()，会以哪次为准呢，请看实例三\n\n#### 实例三：多次切换场景\n\n```java\npublic void rxjavaThreadScheuler() {\n        Integer[] nums = {1, 2, 3};\n        Observable.create((ObservableOnSubscribe<Integer>) emitter -> {\n            for (Integer integer : nums) {\n                emitter.onNext(integer);\n                Log.e(\"rxjava\", \"emitter.onNext()--->\" + Thread.currentThread().getName());\n            }\n            emitter.onComplete();\n        })\n                .subscribeOn(AndroidSchedulers.mainThread())//指定主线程发布事件\n                .observeOn(Schedulers.single())//切换mapA\n                .map(integer -> {\n                    Log.e(\"rxjava\", \"mapA--->\" + Thread.currentThread().getName());\n                    return \"num\" + integer;\n                })\n                .observeOn(AndroidSchedulers.mainThread())//切换mapB\n                .map(s -> {\n                    Log.e(\"rxjava\", \"mapB线程--->\" + Thread.currentThread().getName());\n                    return Integer.parseInt(s.substring(3, s.length()));\n                })\n                .observeOn(Schedulers.computation())//切换Observer执行线程\n                .subscribeOn(Schedulers.io())//再此指定发布线程为io\n                .subscribe(new Observer<Integer>() {\n                    @Override\n                    public void onSubscribe(Disposable d) {\n                        Log.e(\"rxjava\", \"onSubscribe--->\" + \t\t\tThread.currentThread().getName());\n                    }\n\n                    @Override\n                    public void onNext(Integer integer) {\n                        Log.e(\"rxjava\", \"onNext--->\" + Thread.currentThread().getName());\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                        Log.e(\"rxjava\", \"onError--->\" + Thread.currentThread().getName());\n                    }\n\n                    @Override\n                    public void onComplete() {\n                        Log.e(\"rxjava\", \"onComplete--->\" + Thread.currentThread().getName());\n                    }\n                });\n    }\n```\n\n  logcat\n\n```java\n\nrxjava: onSubscribe--->main//Observer的onSubscribe回调和发布事件的线程一致，也就是第一次subscribeOn()，若未指定，则在\nrxjava: emitter.onNext()--->main//第一次subscribeOn()\nrxjava: emitter.onNext()--->main\nrxjava: mapA--->RxSingleScheduler-1//最近一次observeOn（）指定线程，若未指定，默认和subscribeOn的一致，若subscribeOn也未指定，默认是Schedulers.trampoline()\nrxjava: emitter.onNext()--->main\nrxjava: mapA--->RxSingleScheduler-1\nrxjava: mapA--->RxSingleScheduler-1\nrxjava: mapB线程--->main//最近一次observeOn（）指定线程\nrxjava: mapB线程--->main\nrxjava: mapB线程--->main\nrxjava: onNext--->RxComputationThreadPool-1//Observer的onNext，由最近一次的observeOn（）指定\nrxjava: onNext--->RxComputationThreadPool-1\nrxjava: onNext--->RxComputationThreadPool-1\nrxjava: onComplete--->RxComputationThreadPool-1//Observer的onComplete，由最近一次的observeOn（）\n```\n\n 结论：\n\n- 多个subscribeOn()以第一个为主\n- 多个observeOn（）指定以下操作执行线程\n- 若不指定observeOn（），默认按subscribeOn()指定的线程一致\n- 若不指定subscribeOn()，默认是Schedulers.trampoline()（在当前线程，停下之前任务，先执行本次任务）\n- 注意：Observer的onSubscribe(Disposable d)回调，以subscribeOn()为主，而不是以observeOn（）为主\n\n其他三个回调onNext，onError，onComplete以observeOn（）为主\n\n#### 实例四Schedulers.trampoline()：\n\n![](https://upload-images.jianshu.io/upload_images/6773051-6d40d0cbdb0bd590.jpg?imageMogr2/auto-orient/)\n\nlog\n\n```java\nSystem.out: 发射线程:RxCachedThreadScheduler-1---->发射:0\nSystem.out: 接收线程:RxCachedThreadScheduler-1---->接收:0\nSystem.out: 发射线程:RxCachedThreadScheduler-1---->发射:1\nSystem.out: 接收线程:RxCachedThreadScheduler-1---->接收:1\nSystem.out: 发射线程:RxCachedThreadScheduler-1---->发射:2\nSystem.out: 接收线程:RxCachedThreadScheduler-1---->接收:2\nSystem.out: 发射线程:RxCachedThreadScheduler-1---->发射:3\nSystem.out: 接收线程:RxCachedThreadScheduler-1---->接收:3\nSystem.out: 发射线程:RxCachedThreadScheduler-1---->发射:4\nSystem.out: 接收线程:RxCachedThreadScheduler-1---->接收:4\n//可以看到\n//Schedulers.trampoline()指定Consumer回调执行线程和发布事件线程一样\n//Schedulers.trampoline()的作用在当前线程立即执行任务，如果当前线程有任务在执行，则会将其暂停，等插入进来的任务执行完之后，再将未完成的任务接着执行。\n```\n\n结论：\n\nSchedulers.trampoline()的作用在当前线程立即执行任务，如果当前线程有任务在执行，则会将其暂停，等插入进来的任务执行完之后，再将未完成的任务接着执行。【本实例的体现：当observe接受的时候，事件停止了发送】\n\n#### 实例五Schedulers.single()\n\n![](https://upload-images.jianshu.io/upload_images/6773051-7691bdd048bdcaad.jpg?imageMogr2/auto-orient/)\n\nlog\n\n```java\nSystem.out: 发射线程:RxSingleScheduler-1---->发射:0\nSystem.out: 发射线程:RxSingleScheduler-1---->发射:1\nSystem.out: 发射线程:RxSingleScheduler-1---->发射:2\n\nSystem.out: 处理线程:RxSingleScheduler-1---->处理:0\nSystem.out: 处理线程:RxSingleScheduler-1---->处理:1\nSystem.out: 处理线程:RxSingleScheduler-1---->处理:2\n\nSystem.out: 接收线程:RxSingleScheduler-1---->接收:0\nSystem.out: 接收线程:RxSingleScheduler-1---->接收:1\nSystem.out: 接收线程:RxSingleScheduler-1---->接收:2\n//发布和接受都是single线程\n//接收在Schedulers.single()的线程单例中排队执行，当此线程中有任务执行时，其他任务将会按照先进先出的顺序依次执行  \n//所以可以达到。 完全发射---完全处理---完全接受的流程  \n```\n\n[参考连接](https://www.jianshu.com/p/12638513424f)","source":"_posts/Rxjava2-0-知识碎片（二）.md","raw":"---\ntitle: Rxjava2.0-知识碎片(二)\ndate: 2018-07-23 16:51:40\ntags:\n- Rxjava\ncategories: Rxjava\npassword:\n---\n\nRxjava2.0中的线程调度小节\n\n<!--more-->\n\n# Scheduler的种类\n\n<img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/schedulers.png\" width=\"25%\" height=\"25%\" />\n\n- Schedulers.io( )：\n\n  用于IO密集型的操作，例如读写SD卡文件，查询数据库，访问网络等，具有线程缓存机制，在此调度器接收到任务后，先检查线程缓存池中，是否有空闲的线程，如果有，则复用，如果没有则创建新的线程，并加入到线程池中，如果每次都没有空闲线程使用，可以无上限的创建新线程。\n\n- Schedulers.newThread( )：\n\n\n在每执行一个任务时创建一个新的线程，不具有线程缓存机制，因为创建一个新的线程比复用一个线程更耗时耗力，虽然使用Schedulers.io( )的地方，都可以使用Schedulers.newThread( )，但是，Schedulers.newThread( )的效率没有Schedulers.io( )高。\n\n- Schedulers.computation()：\n\n\n用于CPU 密集型计算任务，即不会被 I/O 等操作限制性能的耗时操作，例如xml,json文件的解析，Bitmap图片的压缩取样等，具有固定的线程池，大小为CPU的核数。不可以用于I/O操作，因为I/O操作的等待时间会浪费CPU。\n\n- Schedulers.trampoline()：\n\n\n在**当前线程**立即执行任务，如果当前线程有任务在执行，则会将其暂停，**等插入进来的任务执行完之后，再将未完成的任务接着执行。**\n\n- Schedulers.single()：\n\n\n拥有一个线程单例(**注意是子线程**)，所有的任务都在这一个线程中执行，当此线程中有任务执行时，其他任务将会按照先进先出的顺序依次执行。\n\n- Scheduler.from(@NonNull Executor executor)：\n\n\n指定一个线程调度器，由此调度器来控制任务的执行策略。\n\n- AndroidSchedulers.mainThread()：\n\n\n在Android UI线程中执行任务.需要添加RxAndroid依赖\n\n> 注意\n\n| 方式                                       | 子线程  | 主线程  |      备注       |\n| :--------------------------------------- | :--: | :--: | :-----------: |\n| Schedulers.io()                          | yes  |  --  |      线程池      |\n| Schedulers.newThread()                   | yes  |  --  |     创建新的      |\n| Schedulers.computation()                 | yes  |  --  | 占用CPU，不要i/o耗时 |\n| Schedulers.trampoline()                  | yes  | yes  |     当前线程      |\n| Schedulers.single()                      | yes  |  --  |    固定一个子线程    |\n| Scheduler.from(@NonNull Executor executor) | yes  | yes  |     指定线程      |\n| AndroidSchedulers.mainThread()           |  --  | yes  | 主线程，RxAndroid |\n\n- 在RxJava2中，废弃了RxJava1中的Schedulers.immediate( )\n\n\n- 在RxJava1中，Schedulers.immediate( )的作用为在当前线程立即执行任务，功能等同于RxJava2中的Schedulers.trampoline( )，不同的是，Schedulers.trampoline( )是停下当前的任务，先执行插入进来的任务，等执行完后，再将暂停的任务继续执行下去。\n\n- Schedulers.trampoline( )在RxJava1中的作用是当其它排队的任务完成后，在当前线程排队开始执行接到的任务，有点像RxJava2中的Schedulers.single()，但也不完全相同，因为Schedulers.single()不是在当前线程而是在一个线程单例中排队执行任务.\n\n  ​\n\n  ​\n\n# subscribeOn和observeOn\n\n\n  ## 介绍\n\n### **subscribeOn**\n\n`Observable<T> subscribeOn(Scheduler scheduler)`\n\n  subscribeOn通过接收一个Scheduler参数，来指定对数据的处理运行在特定的线程调度器Scheduler上。\n  若多次设定，则只有一次起作用。\n\n### **observeOn**\n\n`Observable<T> observeOn(Scheduler scheduler)`\n\nobserveOn同样接收一个Scheduler参数，来指定下游操作运行在特定的线程调度器Scheduler上。\n若多次设定，每次均起作用。\n\n### 使用实例\n\n#### 实例一：\n\n```java\n@Test\npublic void rxjavaThreadScheuler(){\n    Integer [] nums = {1,2,3};\n    Observable.fromArray(nums)\n            .observeOn(Schedulers.single())\n            .subscribeOn(Schedulers.io())\n            .map(new Function<Integer, String>() {\n                @Override\n                public String apply(Integer integer) throws Exception {\n\n                    System.out.println(\"mapA\"+\"Thread=\"+Thread.currentThread().getName()+\"\\r\\n\"+\"integer=\"+integer);\n                    return \"num\"+integer;\n                }\n            })\n            .map(new Function<String, Integer>() {\n                @Override\n                public Integer apply(String s) throws Exception {\n                    System.out.println(\"mapB\"+\"Thread=\"+Thread.currentThread().getName()+\"\\r\\n\"+\"String=\"+s);\n                    return Integer.parseInt(s.substring(3,s.length()));\n                }\n            })\n            .subscribe(new Consumer<Integer>() {\n                @Override\n                public void accept(Integer integer) throws Exception {\n                    System.out.println(\"subscribe\"+\"Thread=\"+Thread.currentThread().getName()+\"\\r\\n\"+\"integer=\"+integer);\n                    System.out.println(\"========\");\n                }\n            });\n}\n```\n\n```\nmapAThread=RxSingleScheduler-1\ninteger=1\nmapBThread=RxSingleScheduler-1\nString=num1\nsubscribeThread=RxSingleScheduler-1\ninteger=1\n========\nmapAThread=RxSingleScheduler-1\ninteger=2\nmapBThread=RxSingleScheduler-1\nString=num2\nsubscribeThread=RxSingleScheduler-1\ninteger=2\n========\nmapAThread=RxSingleScheduler-1\ninteger=3\nmapBThread=RxSingleScheduler-1\nString=num3\nsubscribeThread=RxSingleScheduler-1\ninteger=3\n========\n```\n\n结论：\n\n打印的所有线程均在`Schedulers.single() `中执行，  `subscribeOn(Schedulers.io())`貌似没有生效，其实\n\n`Observable.fromArray(nums)`的执行线程，是在`Schedulers.io()`线程中执行，我们通过实例二验证\n\n#### 实例二：\n\n```java\n@Test\npublic void rxjavaThreadScheuler() {\n    Integer[] nums = {1, 2, 3};\n    Observable.create((ObservableOnSubscribe<Integer>) emitter -> {\n        for (Integer integer : nums) {\n            emitter.onNext(integer);\n            System.out.println(\"emitter.onNext()\" + \"Thread=\" + Thread.currentThread().getName() + \"\\r\\n\" + \"integer=\" + integer);\n        }\n    })\n            .observeOn(Schedulers.single())\n            .subscribeOn(Schedulers.io())\n            .map(integer -> {\n                System.out.println(\"mapA\" + \"Thread=\" + Thread.currentThread().getName() + \"\\r\\n\" + \"integer=\" + integer);\n                return \"num\" + integer;\n            })\n            .map(s -> {\n                System.out.println(\"mapB\" + \"Thread=\" + Thread.currentThread().getName() + \"\\r\\n\" + \"String=\" + s);\n                return Integer.parseInt(s.substring(3, s.length()));\n            })\n            .subscribe(integer -> {\n                System.out.println(\"subscribe\" + \"Thread=\" + Thread.currentThread().getName() + \"\\r\\n\" + \"integer=\" + integer);\n                System.out.println(\"========\");\n            });\n}\n```\n\n  logcat\n\n```java\n//可见，事件的发布，是在.subscribeOn(Schedulers.io())指定的io线程\nemitter.onNext()Thread=RxCachedThreadScheduler-1\ninteger=1\nemitter.onNext()Thread=RxCachedThreadScheduler-1\ninteger=2\nemitter.onNext()Thread=RxCachedThreadScheduler-1\ninteger=3\n//其他均在.observeOn(Schedulers.single())指定的Single线程\nmapAThread=RxSingleScheduler-1\ninteger=1\nmapBThread=RxSingleScheduler-1\nString=num1\nsubscribeThread=RxSingleScheduler-1\ninteger=1\n========\nmapAThread=RxSingleScheduler-1\ninteger=2\nmapBThread=RxSingleScheduler-1\nString=num2\nsubscribeThread=RxSingleScheduler-1\ninteger=2\n========\nmapAThread=RxSingleScheduler-1\ninteger=3\nmapBThread=RxSingleScheduler-1\nString=num3\nsubscribeThread=RxSingleScheduler-1\ninteger=3\n========\n```\n\n  结论：\n\nsubscribeOn()指定的是事件的发布执行的线程，observeOn()指定的是各种操作符和subscribe的onNext，onError，onComplete执行等线程，那么调用多次subscribeOn()或者多次observeOn()，会以哪次为准呢，请看实例三\n\n#### 实例三：多次切换场景\n\n```java\npublic void rxjavaThreadScheuler() {\n        Integer[] nums = {1, 2, 3};\n        Observable.create((ObservableOnSubscribe<Integer>) emitter -> {\n            for (Integer integer : nums) {\n                emitter.onNext(integer);\n                Log.e(\"rxjava\", \"emitter.onNext()--->\" + Thread.currentThread().getName());\n            }\n            emitter.onComplete();\n        })\n                .subscribeOn(AndroidSchedulers.mainThread())//指定主线程发布事件\n                .observeOn(Schedulers.single())//切换mapA\n                .map(integer -> {\n                    Log.e(\"rxjava\", \"mapA--->\" + Thread.currentThread().getName());\n                    return \"num\" + integer;\n                })\n                .observeOn(AndroidSchedulers.mainThread())//切换mapB\n                .map(s -> {\n                    Log.e(\"rxjava\", \"mapB线程--->\" + Thread.currentThread().getName());\n                    return Integer.parseInt(s.substring(3, s.length()));\n                })\n                .observeOn(Schedulers.computation())//切换Observer执行线程\n                .subscribeOn(Schedulers.io())//再此指定发布线程为io\n                .subscribe(new Observer<Integer>() {\n                    @Override\n                    public void onSubscribe(Disposable d) {\n                        Log.e(\"rxjava\", \"onSubscribe--->\" + \t\t\tThread.currentThread().getName());\n                    }\n\n                    @Override\n                    public void onNext(Integer integer) {\n                        Log.e(\"rxjava\", \"onNext--->\" + Thread.currentThread().getName());\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                        Log.e(\"rxjava\", \"onError--->\" + Thread.currentThread().getName());\n                    }\n\n                    @Override\n                    public void onComplete() {\n                        Log.e(\"rxjava\", \"onComplete--->\" + Thread.currentThread().getName());\n                    }\n                });\n    }\n```\n\n  logcat\n\n```java\n\nrxjava: onSubscribe--->main//Observer的onSubscribe回调和发布事件的线程一致，也就是第一次subscribeOn()，若未指定，则在\nrxjava: emitter.onNext()--->main//第一次subscribeOn()\nrxjava: emitter.onNext()--->main\nrxjava: mapA--->RxSingleScheduler-1//最近一次observeOn（）指定线程，若未指定，默认和subscribeOn的一致，若subscribeOn也未指定，默认是Schedulers.trampoline()\nrxjava: emitter.onNext()--->main\nrxjava: mapA--->RxSingleScheduler-1\nrxjava: mapA--->RxSingleScheduler-1\nrxjava: mapB线程--->main//最近一次observeOn（）指定线程\nrxjava: mapB线程--->main\nrxjava: mapB线程--->main\nrxjava: onNext--->RxComputationThreadPool-1//Observer的onNext，由最近一次的observeOn（）指定\nrxjava: onNext--->RxComputationThreadPool-1\nrxjava: onNext--->RxComputationThreadPool-1\nrxjava: onComplete--->RxComputationThreadPool-1//Observer的onComplete，由最近一次的observeOn（）\n```\n\n 结论：\n\n- 多个subscribeOn()以第一个为主\n- 多个observeOn（）指定以下操作执行线程\n- 若不指定observeOn（），默认按subscribeOn()指定的线程一致\n- 若不指定subscribeOn()，默认是Schedulers.trampoline()（在当前线程，停下之前任务，先执行本次任务）\n- 注意：Observer的onSubscribe(Disposable d)回调，以subscribeOn()为主，而不是以observeOn（）为主\n\n其他三个回调onNext，onError，onComplete以observeOn（）为主\n\n#### 实例四Schedulers.trampoline()：\n\n![](https://upload-images.jianshu.io/upload_images/6773051-6d40d0cbdb0bd590.jpg?imageMogr2/auto-orient/)\n\nlog\n\n```java\nSystem.out: 发射线程:RxCachedThreadScheduler-1---->发射:0\nSystem.out: 接收线程:RxCachedThreadScheduler-1---->接收:0\nSystem.out: 发射线程:RxCachedThreadScheduler-1---->发射:1\nSystem.out: 接收线程:RxCachedThreadScheduler-1---->接收:1\nSystem.out: 发射线程:RxCachedThreadScheduler-1---->发射:2\nSystem.out: 接收线程:RxCachedThreadScheduler-1---->接收:2\nSystem.out: 发射线程:RxCachedThreadScheduler-1---->发射:3\nSystem.out: 接收线程:RxCachedThreadScheduler-1---->接收:3\nSystem.out: 发射线程:RxCachedThreadScheduler-1---->发射:4\nSystem.out: 接收线程:RxCachedThreadScheduler-1---->接收:4\n//可以看到\n//Schedulers.trampoline()指定Consumer回调执行线程和发布事件线程一样\n//Schedulers.trampoline()的作用在当前线程立即执行任务，如果当前线程有任务在执行，则会将其暂停，等插入进来的任务执行完之后，再将未完成的任务接着执行。\n```\n\n结论：\n\nSchedulers.trampoline()的作用在当前线程立即执行任务，如果当前线程有任务在执行，则会将其暂停，等插入进来的任务执行完之后，再将未完成的任务接着执行。【本实例的体现：当observe接受的时候，事件停止了发送】\n\n#### 实例五Schedulers.single()\n\n![](https://upload-images.jianshu.io/upload_images/6773051-7691bdd048bdcaad.jpg?imageMogr2/auto-orient/)\n\nlog\n\n```java\nSystem.out: 发射线程:RxSingleScheduler-1---->发射:0\nSystem.out: 发射线程:RxSingleScheduler-1---->发射:1\nSystem.out: 发射线程:RxSingleScheduler-1---->发射:2\n\nSystem.out: 处理线程:RxSingleScheduler-1---->处理:0\nSystem.out: 处理线程:RxSingleScheduler-1---->处理:1\nSystem.out: 处理线程:RxSingleScheduler-1---->处理:2\n\nSystem.out: 接收线程:RxSingleScheduler-1---->接收:0\nSystem.out: 接收线程:RxSingleScheduler-1---->接收:1\nSystem.out: 接收线程:RxSingleScheduler-1---->接收:2\n//发布和接受都是single线程\n//接收在Schedulers.single()的线程单例中排队执行，当此线程中有任务执行时，其他任务将会按照先进先出的顺序依次执行  \n//所以可以达到。 完全发射---完全处理---完全接受的流程  \n```\n\n[参考连接](https://www.jianshu.com/p/12638513424f)","slug":"Rxjava2-0-知识碎片（二）","published":1,"updated":"2018-07-23T15:40:33.675Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6mu001h1kyg1bymqj7s","content":"<p>Rxjava2.0中的线程调度小节</p>\n<a id=\"more\"></a>\n<h1 id=\"Scheduler的种类\"><a href=\"#Scheduler的种类\" class=\"headerlink\" title=\"Scheduler的种类\"></a>Scheduler的种类</h1><p><img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/schedulers.png\" width=\"25%\" height=\"25%\"></p>\n<ul>\n<li><p>Schedulers.io( )：</p>\n<p>用于IO密集型的操作，例如读写SD卡文件，查询数据库，访问网络等，具有线程缓存机制，在此调度器接收到任务后，先检查线程缓存池中，是否有空闲的线程，如果有，则复用，如果没有则创建新的线程，并加入到线程池中，如果每次都没有空闲线程使用，可以无上限的创建新线程。</p>\n</li>\n<li><p>Schedulers.newThread( )：</p>\n</li>\n</ul>\n<p>在每执行一个任务时创建一个新的线程，不具有线程缓存机制，因为创建一个新的线程比复用一个线程更耗时耗力，虽然使用Schedulers.io( )的地方，都可以使用Schedulers.newThread( )，但是，Schedulers.newThread( )的效率没有Schedulers.io( )高。</p>\n<ul>\n<li>Schedulers.computation()：</li>\n</ul>\n<p>用于CPU 密集型计算任务，即不会被 I/O 等操作限制性能的耗时操作，例如xml,json文件的解析，Bitmap图片的压缩取样等，具有固定的线程池，大小为CPU的核数。不可以用于I/O操作，因为I/O操作的等待时间会浪费CPU。</p>\n<ul>\n<li>Schedulers.trampoline()：</li>\n</ul>\n<p>在<strong>当前线程</strong>立即执行任务，如果当前线程有任务在执行，则会将其暂停，<strong>等插入进来的任务执行完之后，再将未完成的任务接着执行。</strong></p>\n<ul>\n<li>Schedulers.single()：</li>\n</ul>\n<p>拥有一个线程单例(<strong>注意是子线程</strong>)，所有的任务都在这一个线程中执行，当此线程中有任务执行时，其他任务将会按照先进先出的顺序依次执行。</p>\n<ul>\n<li>Scheduler.from(@NonNull Executor executor)：</li>\n</ul>\n<p>指定一个线程调度器，由此调度器来控制任务的执行策略。</p>\n<ul>\n<li>AndroidSchedulers.mainThread()：</li>\n</ul>\n<p>在Android UI线程中执行任务.需要添加RxAndroid依赖</p>\n<blockquote>\n<p>注意</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方式</th>\n<th style=\"text-align:center\">子线程</th>\n<th style=\"text-align:center\">主线程</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Schedulers.io()</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">–</td>\n<td style=\"text-align:center\">线程池</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Schedulers.newThread()</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">–</td>\n<td style=\"text-align:center\">创建新的</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Schedulers.computation()</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">–</td>\n<td style=\"text-align:center\">占用CPU，不要i/o耗时</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Schedulers.trampoline()</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">当前线程</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Schedulers.single()</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">–</td>\n<td style=\"text-align:center\">固定一个子线程</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Scheduler.from(@NonNull Executor executor)</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">指定线程</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AndroidSchedulers.mainThread()</td>\n<td style=\"text-align:center\">–</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">主线程，RxAndroid</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>在RxJava2中，废弃了RxJava1中的Schedulers.immediate( )</li>\n</ul>\n<ul>\n<li><p>在RxJava1中，Schedulers.immediate( )的作用为在当前线程立即执行任务，功能等同于RxJava2中的Schedulers.trampoline( )，不同的是，Schedulers.trampoline( )是停下当前的任务，先执行插入进来的任务，等执行完后，再将暂停的任务继续执行下去。</p>\n</li>\n<li><p>Schedulers.trampoline( )在RxJava1中的作用是当其它排队的任务完成后，在当前线程排队开始执行接到的任务，有点像RxJava2中的Schedulers.single()，但也不完全相同，因为Schedulers.single()不是在当前线程而是在一个线程单例中排队执行任务.</p>\n<p>​</p>\n<p>​</p>\n</li>\n</ul>\n<h1 id=\"subscribeOn和observeOn\"><a href=\"#subscribeOn和observeOn\" class=\"headerlink\" title=\"subscribeOn和observeOn\"></a>subscribeOn和observeOn</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><h3 id=\"subscribeOn\"><a href=\"#subscribeOn\" class=\"headerlink\" title=\"subscribeOn\"></a><strong>subscribeOn</strong></h3><p><code>Observable&lt;T&gt; subscribeOn(Scheduler scheduler)</code></p>\n<p>  subscribeOn通过接收一个Scheduler参数，来指定对数据的处理运行在特定的线程调度器Scheduler上。<br>  若多次设定，则只有一次起作用。</p>\n<h3 id=\"observeOn\"><a href=\"#observeOn\" class=\"headerlink\" title=\"observeOn\"></a><strong>observeOn</strong></h3><p><code>Observable&lt;T&gt; observeOn(Scheduler scheduler)</code></p>\n<p>observeOn同样接收一个Scheduler参数，来指定下游操作运行在特定的线程调度器Scheduler上。<br>若多次设定，每次均起作用。</p>\n<h3 id=\"使用实例\"><a href=\"#使用实例\" class=\"headerlink\" title=\"使用实例\"></a>使用实例</h3><h4 id=\"实例一：\"><a href=\"#实例一：\" class=\"headerlink\" title=\"实例一：\"></a>实例一：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rxjavaThreadScheuler</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    Integer [] nums = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</div><div class=\"line\">    Observable.fromArray(nums)</div><div class=\"line\">            .observeOn(Schedulers.single())</div><div class=\"line\">            .subscribeOn(Schedulers.io())</div><div class=\"line\">            .map(<span class=\"keyword\">new</span> Function&lt;Integer, String&gt;() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">apply</span><span class=\"params\">(Integer integer)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\"></div><div class=\"line\">                    System.out.println(<span class=\"string\">\"mapA\"</span>+<span class=\"string\">\"Thread=\"</span>+Thread.currentThread().getName()+<span class=\"string\">\"\\r\\n\"</span>+<span class=\"string\">\"integer=\"</span>+integer);</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">\"num\"</span>+integer;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .map(<span class=\"keyword\">new</span> Function&lt;String, Integer&gt;() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">apply</span><span class=\"params\">(String s)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"mapB\"</span>+<span class=\"string\">\"Thread=\"</span>+Thread.currentThread().getName()+<span class=\"string\">\"\\r\\n\"</span>+<span class=\"string\">\"String=\"</span>+s);</div><div class=\"line\">                    <span class=\"keyword\">return</span> Integer.parseInt(s.substring(<span class=\"number\">3</span>,s.length()));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .subscribe(<span class=\"keyword\">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Integer integer)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"subscribe\"</span>+<span class=\"string\">\"Thread=\"</span>+Thread.currentThread().getName()+<span class=\"string\">\"\\r\\n\"</span>+<span class=\"string\">\"integer=\"</span>+integer);</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"========\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">mapAThread=RxSingleScheduler-1</div><div class=\"line\">integer=1</div><div class=\"line\">mapBThread=RxSingleScheduler-1</div><div class=\"line\">String=num1</div><div class=\"line\">subscribeThread=RxSingleScheduler-1</div><div class=\"line\"><span class=\"section\">integer=1</span></div><div class=\"line\">========</div><div class=\"line\">mapAThread=RxSingleScheduler-1</div><div class=\"line\">integer=2</div><div class=\"line\">mapBThread=RxSingleScheduler-1</div><div class=\"line\">String=num2</div><div class=\"line\">subscribeThread=RxSingleScheduler-1</div><div class=\"line\"><span class=\"section\">integer=2</span></div><div class=\"line\">========</div><div class=\"line\">mapAThread=RxSingleScheduler-1</div><div class=\"line\">integer=3</div><div class=\"line\">mapBThread=RxSingleScheduler-1</div><div class=\"line\">String=num3</div><div class=\"line\">subscribeThread=RxSingleScheduler-1</div><div class=\"line\"><span class=\"section\">integer=3</span></div><div class=\"line\">========</div></pre></td></tr></table></figure>\n<p>结论：</p>\n<p>打印的所有线程均在<code>Schedulers.single()</code>中执行，  <code>subscribeOn(Schedulers.io())</code>貌似没有生效，其实</p>\n<p><code>Observable.fromArray(nums)</code>的执行线程，是在<code>Schedulers.io()</code>线程中执行，我们通过实例二验证</p>\n<h4 id=\"实例二：\"><a href=\"#实例二：\" class=\"headerlink\" title=\"实例二：\"></a>实例二：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rxjavaThreadScheuler</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Integer[] nums = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</div><div class=\"line\">    Observable.create((ObservableOnSubscribe&lt;Integer&gt;) emitter -&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (Integer integer : nums) &#123;</div><div class=\"line\">            emitter.onNext(integer);</div><div class=\"line\">            System.out.println(<span class=\"string\">\"emitter.onNext()\"</span> + <span class=\"string\">\"Thread=\"</span> + Thread.currentThread().getName() + <span class=\"string\">\"\\r\\n\"</span> + <span class=\"string\">\"integer=\"</span> + integer);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">            .observeOn(Schedulers.single())</div><div class=\"line\">            .subscribeOn(Schedulers.io())</div><div class=\"line\">            .map(integer -&gt; &#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"mapA\"</span> + <span class=\"string\">\"Thread=\"</span> + Thread.currentThread().getName() + <span class=\"string\">\"\\r\\n\"</span> + <span class=\"string\">\"integer=\"</span> + integer);</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"num\"</span> + integer;</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .map(s -&gt; &#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"mapB\"</span> + <span class=\"string\">\"Thread=\"</span> + Thread.currentThread().getName() + <span class=\"string\">\"\\r\\n\"</span> + <span class=\"string\">\"String=\"</span> + s);</div><div class=\"line\">                <span class=\"keyword\">return</span> Integer.parseInt(s.substring(<span class=\"number\">3</span>, s.length()));</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .subscribe(integer -&gt; &#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"subscribe\"</span> + <span class=\"string\">\"Thread=\"</span> + Thread.currentThread().getName() + <span class=\"string\">\"\\r\\n\"</span> + <span class=\"string\">\"integer=\"</span> + integer);</div><div class=\"line\">                System.out.println(<span class=\"string\">\"========\"</span>);</div><div class=\"line\">            &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  logcat</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//可见，事件的发布，是在.subscribeOn(Schedulers.io())指定的io线程</span></div><div class=\"line\">emitter.onNext()Thread=RxCachedThreadScheduler-<span class=\"number\">1</span></div><div class=\"line\">integer=<span class=\"number\">1</span></div><div class=\"line\">emitter.onNext()Thread=RxCachedThreadScheduler-<span class=\"number\">1</span></div><div class=\"line\">integer=<span class=\"number\">2</span></div><div class=\"line\">emitter.onNext()Thread=RxCachedThreadScheduler-<span class=\"number\">1</span></div><div class=\"line\">integer=<span class=\"number\">3</span></div><div class=\"line\"><span class=\"comment\">//其他均在.observeOn(Schedulers.single())指定的Single线程</span></div><div class=\"line\">mapAThread=RxSingleScheduler-<span class=\"number\">1</span></div><div class=\"line\">integer=<span class=\"number\">1</span></div><div class=\"line\">mapBThread=RxSingleScheduler-<span class=\"number\">1</span></div><div class=\"line\">String=num1</div><div class=\"line\">subscribeThread=RxSingleScheduler-<span class=\"number\">1</span></div><div class=\"line\">integer=<span class=\"number\">1</span></div><div class=\"line\">========</div><div class=\"line\">mapAThread=RxSingleScheduler-<span class=\"number\">1</span></div><div class=\"line\">integer=<span class=\"number\">2</span></div><div class=\"line\">mapBThread=RxSingleScheduler-<span class=\"number\">1</span></div><div class=\"line\">String=num2</div><div class=\"line\">subscribeThread=RxSingleScheduler-<span class=\"number\">1</span></div><div class=\"line\">integer=<span class=\"number\">2</span></div><div class=\"line\">========</div><div class=\"line\">mapAThread=RxSingleScheduler-<span class=\"number\">1</span></div><div class=\"line\">integer=<span class=\"number\">3</span></div><div class=\"line\">mapBThread=RxSingleScheduler-<span class=\"number\">1</span></div><div class=\"line\">String=num3</div><div class=\"line\">subscribeThread=RxSingleScheduler-<span class=\"number\">1</span></div><div class=\"line\">integer=<span class=\"number\">3</span></div><div class=\"line\">========</div></pre></td></tr></table></figure>\n<p>  结论：</p>\n<p>subscribeOn()指定的是事件的发布执行的线程，observeOn()指定的是各种操作符和subscribe的onNext，onError，onComplete执行等线程，那么调用多次subscribeOn()或者多次observeOn()，会以哪次为准呢，请看实例三</p>\n<h4 id=\"实例三：多次切换场景\"><a href=\"#实例三：多次切换场景\" class=\"headerlink\" title=\"实例三：多次切换场景\"></a>实例三：多次切换场景</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rxjavaThreadScheuler</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Integer[] nums = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</div><div class=\"line\">        Observable.create((ObservableOnSubscribe&lt;Integer&gt;) emitter -&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Integer integer : nums) &#123;</div><div class=\"line\">                emitter.onNext(integer);</div><div class=\"line\">                Log.e(<span class=\"string\">\"rxjava\"</span>, <span class=\"string\">\"emitter.onNext()---&gt;\"</span> + Thread.currentThread().getName());</div><div class=\"line\">            &#125;</div><div class=\"line\">            emitter.onComplete();</div><div class=\"line\">        &#125;)</div><div class=\"line\">                .subscribeOn(AndroidSchedulers.mainThread())<span class=\"comment\">//指定主线程发布事件</span></div><div class=\"line\">                .observeOn(Schedulers.single())<span class=\"comment\">//切换mapA</span></div><div class=\"line\">                .map(integer -&gt; &#123;</div><div class=\"line\">                    Log.e(<span class=\"string\">\"rxjava\"</span>, <span class=\"string\">\"mapA---&gt;\"</span> + Thread.currentThread().getName());</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">\"num\"</span> + integer;</div><div class=\"line\">                &#125;)</div><div class=\"line\">                .observeOn(AndroidSchedulers.mainThread())<span class=\"comment\">//切换mapB</span></div><div class=\"line\">                .map(s -&gt; &#123;</div><div class=\"line\">                    Log.e(<span class=\"string\">\"rxjava\"</span>, <span class=\"string\">\"mapB线程---&gt;\"</span> + Thread.currentThread().getName());</div><div class=\"line\">                    <span class=\"keyword\">return</span> Integer.parseInt(s.substring(<span class=\"number\">3</span>, s.length()));</div><div class=\"line\">                &#125;)</div><div class=\"line\">                .observeOn(Schedulers.computation())<span class=\"comment\">//切换Observer执行线程</span></div><div class=\"line\">                .subscribeOn(Schedulers.io())<span class=\"comment\">//再此指定发布线程为io</span></div><div class=\"line\">                .subscribe(<span class=\"keyword\">new</span> Observer&lt;Integer&gt;() &#123;</div><div class=\"line\">                    <span class=\"meta\">@Override</span></div><div class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSubscribe</span><span class=\"params\">(Disposable d)</span> </span>&#123;</div><div class=\"line\">                        Log.e(<span class=\"string\">\"rxjava\"</span>, <span class=\"string\">\"onSubscribe---&gt;\"</span> + \t\t\tThread.currentThread().getName());</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"meta\">@Override</span></div><div class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(Integer integer)</span> </span>&#123;</div><div class=\"line\">                        Log.e(<span class=\"string\">\"rxjava\"</span>, <span class=\"string\">\"onNext---&gt;\"</span> + Thread.currentThread().getName());</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"meta\">@Override</span></div><div class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</div><div class=\"line\">                        Log.e(<span class=\"string\">\"rxjava\"</span>, <span class=\"string\">\"onError---&gt;\"</span> + Thread.currentThread().getName());</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"meta\">@Override</span></div><div class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onComplete</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                        Log.e(<span class=\"string\">\"rxjava\"</span>, <span class=\"string\">\"onComplete---&gt;\"</span> + Thread.currentThread().getName());</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>  logcat</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">rxjava: onSubscribe---&gt;main<span class=\"comment\">//Observer的onSubscribe回调和发布事件的线程一致，也就是第一次subscribeOn()，若未指定，则在</span></div><div class=\"line\">rxjava: emitter.onNext()---&gt;main<span class=\"comment\">//第一次subscribeOn()</span></div><div class=\"line\">rxjava: emitter.onNext()---&gt;main</div><div class=\"line\">rxjava: mapA---&gt;RxSingleScheduler-<span class=\"number\">1</span><span class=\"comment\">//最近一次observeOn（）指定线程，若未指定，默认和subscribeOn的一致，若subscribeOn也未指定，默认是Schedulers.trampoline()</span></div><div class=\"line\">rxjava: emitter.onNext()---&gt;main</div><div class=\"line\">rxjava: mapA---&gt;RxSingleScheduler-<span class=\"number\">1</span></div><div class=\"line\">rxjava: mapA---&gt;RxSingleScheduler-<span class=\"number\">1</span></div><div class=\"line\">rxjava: mapB线程---&gt;main<span class=\"comment\">//最近一次observeOn（）指定线程</span></div><div class=\"line\">rxjava: mapB线程---&gt;main</div><div class=\"line\">rxjava: mapB线程---&gt;main</div><div class=\"line\">rxjava: onNext---&gt;RxComputationThreadPool-<span class=\"number\">1</span><span class=\"comment\">//Observer的onNext，由最近一次的observeOn（）指定</span></div><div class=\"line\">rxjava: onNext---&gt;RxComputationThreadPool-<span class=\"number\">1</span></div><div class=\"line\">rxjava: onNext---&gt;RxComputationThreadPool-<span class=\"number\">1</span></div><div class=\"line\">rxjava: onComplete---&gt;RxComputationThreadPool-<span class=\"number\">1</span><span class=\"comment\">//Observer的onComplete，由最近一次的observeOn（）</span></div></pre></td></tr></table></figure>\n<p> 结论：</p>\n<ul>\n<li>多个subscribeOn()以第一个为主</li>\n<li>多个observeOn（）指定以下操作执行线程</li>\n<li>若不指定observeOn（），默认按subscribeOn()指定的线程一致</li>\n<li>若不指定subscribeOn()，默认是Schedulers.trampoline()（在当前线程，停下之前任务，先执行本次任务）</li>\n<li>注意：Observer的onSubscribe(Disposable d)回调，以subscribeOn()为主，而不是以observeOn（）为主</li>\n</ul>\n<p>其他三个回调onNext，onError，onComplete以observeOn（）为主</p>\n<h4 id=\"实例四Schedulers-trampoline-：\"><a href=\"#实例四Schedulers-trampoline-：\" class=\"headerlink\" title=\"实例四Schedulers.trampoline()：\"></a>实例四Schedulers.trampoline()：</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/6773051-6d40d0cbdb0bd590.jpg?imageMogr2/auto-orient/\" alt=\"\"></p>\n<p>log</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.out: 发射线程:RxCachedThreadScheduler-<span class=\"number\">1</span>----&gt;发射:<span class=\"number\">0</span></div><div class=\"line\">System.out: 接收线程:RxCachedThreadScheduler-<span class=\"number\">1</span>----&gt;接收:<span class=\"number\">0</span></div><div class=\"line\">System.out: 发射线程:RxCachedThreadScheduler-<span class=\"number\">1</span>----&gt;发射:<span class=\"number\">1</span></div><div class=\"line\">System.out: 接收线程:RxCachedThreadScheduler-<span class=\"number\">1</span>----&gt;接收:<span class=\"number\">1</span></div><div class=\"line\">System.out: 发射线程:RxCachedThreadScheduler-<span class=\"number\">1</span>----&gt;发射:<span class=\"number\">2</span></div><div class=\"line\">System.out: 接收线程:RxCachedThreadScheduler-<span class=\"number\">1</span>----&gt;接收:<span class=\"number\">2</span></div><div class=\"line\">System.out: 发射线程:RxCachedThreadScheduler-<span class=\"number\">1</span>----&gt;发射:<span class=\"number\">3</span></div><div class=\"line\">System.out: 接收线程:RxCachedThreadScheduler-<span class=\"number\">1</span>----&gt;接收:<span class=\"number\">3</span></div><div class=\"line\">System.out: 发射线程:RxCachedThreadScheduler-<span class=\"number\">1</span>----&gt;发射:<span class=\"number\">4</span></div><div class=\"line\">System.out: 接收线程:RxCachedThreadScheduler-<span class=\"number\">1</span>----&gt;接收:<span class=\"number\">4</span></div><div class=\"line\"><span class=\"comment\">//可以看到</span></div><div class=\"line\"><span class=\"comment\">//Schedulers.trampoline()指定Consumer回调执行线程和发布事件线程一样</span></div><div class=\"line\"><span class=\"comment\">//Schedulers.trampoline()的作用在当前线程立即执行任务，如果当前线程有任务在执行，则会将其暂停，等插入进来的任务执行完之后，再将未完成的任务接着执行。</span></div></pre></td></tr></table></figure>\n<p>结论：</p>\n<p>Schedulers.trampoline()的作用在当前线程立即执行任务，如果当前线程有任务在执行，则会将其暂停，等插入进来的任务执行完之后，再将未完成的任务接着执行。【本实例的体现：当observe接受的时候，事件停止了发送】</p>\n<h4 id=\"实例五Schedulers-single\"><a href=\"#实例五Schedulers-single\" class=\"headerlink\" title=\"实例五Schedulers.single()\"></a>实例五Schedulers.single()</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/6773051-7691bdd048bdcaad.jpg?imageMogr2/auto-orient/\" alt=\"\"></p>\n<p>log</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.out: 发射线程:RxSingleScheduler-<span class=\"number\">1</span>----&gt;发射:<span class=\"number\">0</span></div><div class=\"line\">System.out: 发射线程:RxSingleScheduler-<span class=\"number\">1</span>----&gt;发射:<span class=\"number\">1</span></div><div class=\"line\">System.out: 发射线程:RxSingleScheduler-<span class=\"number\">1</span>----&gt;发射:<span class=\"number\">2</span></div><div class=\"line\"></div><div class=\"line\">System.out: 处理线程:RxSingleScheduler-<span class=\"number\">1</span>----&gt;处理:<span class=\"number\">0</span></div><div class=\"line\">System.out: 处理线程:RxSingleScheduler-<span class=\"number\">1</span>----&gt;处理:<span class=\"number\">1</span></div><div class=\"line\">System.out: 处理线程:RxSingleScheduler-<span class=\"number\">1</span>----&gt;处理:<span class=\"number\">2</span></div><div class=\"line\"></div><div class=\"line\">System.out: 接收线程:RxSingleScheduler-<span class=\"number\">1</span>----&gt;接收:<span class=\"number\">0</span></div><div class=\"line\">System.out: 接收线程:RxSingleScheduler-<span class=\"number\">1</span>----&gt;接收:<span class=\"number\">1</span></div><div class=\"line\">System.out: 接收线程:RxSingleScheduler-<span class=\"number\">1</span>----&gt;接收:<span class=\"number\">2</span></div><div class=\"line\"><span class=\"comment\">//发布和接受都是single线程</span></div><div class=\"line\"><span class=\"comment\">//接收在Schedulers.single()的线程单例中排队执行，当此线程中有任务执行时，其他任务将会按照先进先出的顺序依次执行  </span></div><div class=\"line\"><span class=\"comment\">//所以可以达到。 完全发射---完全处理---完全接受的流程</span></div></pre></td></tr></table></figure>\n<p><a href=\"https://www.jianshu.com/p/12638513424f\" target=\"_blank\" rel=\"external\">参考连接</a></p>\n","excerpt":"<p>Rxjava2.0中的线程调度小节</p>","more":"<h1 id=\"Scheduler的种类\"><a href=\"#Scheduler的种类\" class=\"headerlink\" title=\"Scheduler的种类\"></a>Scheduler的种类</h1><p><img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/schedulers.png\" width=\"25%\" height=\"25%\" /></p>\n<ul>\n<li><p>Schedulers.io( )：</p>\n<p>用于IO密集型的操作，例如读写SD卡文件，查询数据库，访问网络等，具有线程缓存机制，在此调度器接收到任务后，先检查线程缓存池中，是否有空闲的线程，如果有，则复用，如果没有则创建新的线程，并加入到线程池中，如果每次都没有空闲线程使用，可以无上限的创建新线程。</p>\n</li>\n<li><p>Schedulers.newThread( )：</p>\n</li>\n</ul>\n<p>在每执行一个任务时创建一个新的线程，不具有线程缓存机制，因为创建一个新的线程比复用一个线程更耗时耗力，虽然使用Schedulers.io( )的地方，都可以使用Schedulers.newThread( )，但是，Schedulers.newThread( )的效率没有Schedulers.io( )高。</p>\n<ul>\n<li>Schedulers.computation()：</li>\n</ul>\n<p>用于CPU 密集型计算任务，即不会被 I/O 等操作限制性能的耗时操作，例如xml,json文件的解析，Bitmap图片的压缩取样等，具有固定的线程池，大小为CPU的核数。不可以用于I/O操作，因为I/O操作的等待时间会浪费CPU。</p>\n<ul>\n<li>Schedulers.trampoline()：</li>\n</ul>\n<p>在<strong>当前线程</strong>立即执行任务，如果当前线程有任务在执行，则会将其暂停，<strong>等插入进来的任务执行完之后，再将未完成的任务接着执行。</strong></p>\n<ul>\n<li>Schedulers.single()：</li>\n</ul>\n<p>拥有一个线程单例(<strong>注意是子线程</strong>)，所有的任务都在这一个线程中执行，当此线程中有任务执行时，其他任务将会按照先进先出的顺序依次执行。</p>\n<ul>\n<li>Scheduler.from(@NonNull Executor executor)：</li>\n</ul>\n<p>指定一个线程调度器，由此调度器来控制任务的执行策略。</p>\n<ul>\n<li>AndroidSchedulers.mainThread()：</li>\n</ul>\n<p>在Android UI线程中执行任务.需要添加RxAndroid依赖</p>\n<blockquote>\n<p>注意</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方式</th>\n<th style=\"text-align:center\">子线程</th>\n<th style=\"text-align:center\">主线程</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Schedulers.io()</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">–</td>\n<td style=\"text-align:center\">线程池</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Schedulers.newThread()</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">–</td>\n<td style=\"text-align:center\">创建新的</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Schedulers.computation()</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">–</td>\n<td style=\"text-align:center\">占用CPU，不要i/o耗时</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Schedulers.trampoline()</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">当前线程</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Schedulers.single()</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">–</td>\n<td style=\"text-align:center\">固定一个子线程</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Scheduler.from(@NonNull Executor executor)</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">指定线程</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AndroidSchedulers.mainThread()</td>\n<td style=\"text-align:center\">–</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">主线程，RxAndroid</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>在RxJava2中，废弃了RxJava1中的Schedulers.immediate( )</li>\n</ul>\n<ul>\n<li><p>在RxJava1中，Schedulers.immediate( )的作用为在当前线程立即执行任务，功能等同于RxJava2中的Schedulers.trampoline( )，不同的是，Schedulers.trampoline( )是停下当前的任务，先执行插入进来的任务，等执行完后，再将暂停的任务继续执行下去。</p>\n</li>\n<li><p>Schedulers.trampoline( )在RxJava1中的作用是当其它排队的任务完成后，在当前线程排队开始执行接到的任务，有点像RxJava2中的Schedulers.single()，但也不完全相同，因为Schedulers.single()不是在当前线程而是在一个线程单例中排队执行任务.</p>\n<p>​</p>\n<p>​</p>\n</li>\n</ul>\n<h1 id=\"subscribeOn和observeOn\"><a href=\"#subscribeOn和observeOn\" class=\"headerlink\" title=\"subscribeOn和observeOn\"></a>subscribeOn和observeOn</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><h3 id=\"subscribeOn\"><a href=\"#subscribeOn\" class=\"headerlink\" title=\"subscribeOn\"></a><strong>subscribeOn</strong></h3><p><code>Observable&lt;T&gt; subscribeOn(Scheduler scheduler)</code></p>\n<p>  subscribeOn通过接收一个Scheduler参数，来指定对数据的处理运行在特定的线程调度器Scheduler上。<br>  若多次设定，则只有一次起作用。</p>\n<h3 id=\"observeOn\"><a href=\"#observeOn\" class=\"headerlink\" title=\"observeOn\"></a><strong>observeOn</strong></h3><p><code>Observable&lt;T&gt; observeOn(Scheduler scheduler)</code></p>\n<p>observeOn同样接收一个Scheduler参数，来指定下游操作运行在特定的线程调度器Scheduler上。<br>若多次设定，每次均起作用。</p>\n<h3 id=\"使用实例\"><a href=\"#使用实例\" class=\"headerlink\" title=\"使用实例\"></a>使用实例</h3><h4 id=\"实例一：\"><a href=\"#实例一：\" class=\"headerlink\" title=\"实例一：\"></a>实例一：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rxjavaThreadScheuler</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    Integer [] nums = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</div><div class=\"line\">    Observable.fromArray(nums)</div><div class=\"line\">            .observeOn(Schedulers.single())</div><div class=\"line\">            .subscribeOn(Schedulers.io())</div><div class=\"line\">            .map(<span class=\"keyword\">new</span> Function&lt;Integer, String&gt;() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">apply</span><span class=\"params\">(Integer integer)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\"></div><div class=\"line\">                    System.out.println(<span class=\"string\">\"mapA\"</span>+<span class=\"string\">\"Thread=\"</span>+Thread.currentThread().getName()+<span class=\"string\">\"\\r\\n\"</span>+<span class=\"string\">\"integer=\"</span>+integer);</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">\"num\"</span>+integer;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .map(<span class=\"keyword\">new</span> Function&lt;String, Integer&gt;() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">apply</span><span class=\"params\">(String s)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"mapB\"</span>+<span class=\"string\">\"Thread=\"</span>+Thread.currentThread().getName()+<span class=\"string\">\"\\r\\n\"</span>+<span class=\"string\">\"String=\"</span>+s);</div><div class=\"line\">                    <span class=\"keyword\">return</span> Integer.parseInt(s.substring(<span class=\"number\">3</span>,s.length()));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .subscribe(<span class=\"keyword\">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Integer integer)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"subscribe\"</span>+<span class=\"string\">\"Thread=\"</span>+Thread.currentThread().getName()+<span class=\"string\">\"\\r\\n\"</span>+<span class=\"string\">\"integer=\"</span>+integer);</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"========\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">mapAThread=RxSingleScheduler-1</div><div class=\"line\">integer=1</div><div class=\"line\">mapBThread=RxSingleScheduler-1</div><div class=\"line\">String=num1</div><div class=\"line\">subscribeThread=RxSingleScheduler-1</div><div class=\"line\"><span class=\"section\">integer=1</div><div class=\"line\">========</span></div><div class=\"line\">mapAThread=RxSingleScheduler-1</div><div class=\"line\">integer=2</div><div class=\"line\">mapBThread=RxSingleScheduler-1</div><div class=\"line\">String=num2</div><div class=\"line\">subscribeThread=RxSingleScheduler-1</div><div class=\"line\"><span class=\"section\">integer=2</div><div class=\"line\">========</span></div><div class=\"line\">mapAThread=RxSingleScheduler-1</div><div class=\"line\">integer=3</div><div class=\"line\">mapBThread=RxSingleScheduler-1</div><div class=\"line\">String=num3</div><div class=\"line\">subscribeThread=RxSingleScheduler-1</div><div class=\"line\"><span class=\"section\">integer=3</div><div class=\"line\">========</span></div></pre></td></tr></table></figure>\n<p>结论：</p>\n<p>打印的所有线程均在<code>Schedulers.single()</code>中执行，  <code>subscribeOn(Schedulers.io())</code>貌似没有生效，其实</p>\n<p><code>Observable.fromArray(nums)</code>的执行线程，是在<code>Schedulers.io()</code>线程中执行，我们通过实例二验证</p>\n<h4 id=\"实例二：\"><a href=\"#实例二：\" class=\"headerlink\" title=\"实例二：\"></a>实例二：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rxjavaThreadScheuler</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Integer[] nums = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</div><div class=\"line\">    Observable.create((ObservableOnSubscribe&lt;Integer&gt;) emitter -&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (Integer integer : nums) &#123;</div><div class=\"line\">            emitter.onNext(integer);</div><div class=\"line\">            System.out.println(<span class=\"string\">\"emitter.onNext()\"</span> + <span class=\"string\">\"Thread=\"</span> + Thread.currentThread().getName() + <span class=\"string\">\"\\r\\n\"</span> + <span class=\"string\">\"integer=\"</span> + integer);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">            .observeOn(Schedulers.single())</div><div class=\"line\">            .subscribeOn(Schedulers.io())</div><div class=\"line\">            .map(integer -&gt; &#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"mapA\"</span> + <span class=\"string\">\"Thread=\"</span> + Thread.currentThread().getName() + <span class=\"string\">\"\\r\\n\"</span> + <span class=\"string\">\"integer=\"</span> + integer);</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"num\"</span> + integer;</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .map(s -&gt; &#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"mapB\"</span> + <span class=\"string\">\"Thread=\"</span> + Thread.currentThread().getName() + <span class=\"string\">\"\\r\\n\"</span> + <span class=\"string\">\"String=\"</span> + s);</div><div class=\"line\">                <span class=\"keyword\">return</span> Integer.parseInt(s.substring(<span class=\"number\">3</span>, s.length()));</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .subscribe(integer -&gt; &#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"subscribe\"</span> + <span class=\"string\">\"Thread=\"</span> + Thread.currentThread().getName() + <span class=\"string\">\"\\r\\n\"</span> + <span class=\"string\">\"integer=\"</span> + integer);</div><div class=\"line\">                System.out.println(<span class=\"string\">\"========\"</span>);</div><div class=\"line\">            &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  logcat</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//可见，事件的发布，是在.subscribeOn(Schedulers.io())指定的io线程</span></div><div class=\"line\">emitter.onNext()Thread=RxCachedThreadScheduler-<span class=\"number\">1</span></div><div class=\"line\">integer=<span class=\"number\">1</span></div><div class=\"line\">emitter.onNext()Thread=RxCachedThreadScheduler-<span class=\"number\">1</span></div><div class=\"line\">integer=<span class=\"number\">2</span></div><div class=\"line\">emitter.onNext()Thread=RxCachedThreadScheduler-<span class=\"number\">1</span></div><div class=\"line\">integer=<span class=\"number\">3</span></div><div class=\"line\"><span class=\"comment\">//其他均在.observeOn(Schedulers.single())指定的Single线程</span></div><div class=\"line\">mapAThread=RxSingleScheduler-<span class=\"number\">1</span></div><div class=\"line\">integer=<span class=\"number\">1</span></div><div class=\"line\">mapBThread=RxSingleScheduler-<span class=\"number\">1</span></div><div class=\"line\">String=num1</div><div class=\"line\">subscribeThread=RxSingleScheduler-<span class=\"number\">1</span></div><div class=\"line\">integer=<span class=\"number\">1</span></div><div class=\"line\">========</div><div class=\"line\">mapAThread=RxSingleScheduler-<span class=\"number\">1</span></div><div class=\"line\">integer=<span class=\"number\">2</span></div><div class=\"line\">mapBThread=RxSingleScheduler-<span class=\"number\">1</span></div><div class=\"line\">String=num2</div><div class=\"line\">subscribeThread=RxSingleScheduler-<span class=\"number\">1</span></div><div class=\"line\">integer=<span class=\"number\">2</span></div><div class=\"line\">========</div><div class=\"line\">mapAThread=RxSingleScheduler-<span class=\"number\">1</span></div><div class=\"line\">integer=<span class=\"number\">3</span></div><div class=\"line\">mapBThread=RxSingleScheduler-<span class=\"number\">1</span></div><div class=\"line\">String=num3</div><div class=\"line\">subscribeThread=RxSingleScheduler-<span class=\"number\">1</span></div><div class=\"line\">integer=<span class=\"number\">3</span></div><div class=\"line\">========</div></pre></td></tr></table></figure>\n<p>  结论：</p>\n<p>subscribeOn()指定的是事件的发布执行的线程，observeOn()指定的是各种操作符和subscribe的onNext，onError，onComplete执行等线程，那么调用多次subscribeOn()或者多次observeOn()，会以哪次为准呢，请看实例三</p>\n<h4 id=\"实例三：多次切换场景\"><a href=\"#实例三：多次切换场景\" class=\"headerlink\" title=\"实例三：多次切换场景\"></a>实例三：多次切换场景</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rxjavaThreadScheuler</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Integer[] nums = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</div><div class=\"line\">        Observable.create((ObservableOnSubscribe&lt;Integer&gt;) emitter -&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Integer integer : nums) &#123;</div><div class=\"line\">                emitter.onNext(integer);</div><div class=\"line\">                Log.e(<span class=\"string\">\"rxjava\"</span>, <span class=\"string\">\"emitter.onNext()---&gt;\"</span> + Thread.currentThread().getName());</div><div class=\"line\">            &#125;</div><div class=\"line\">            emitter.onComplete();</div><div class=\"line\">        &#125;)</div><div class=\"line\">                .subscribeOn(AndroidSchedulers.mainThread())<span class=\"comment\">//指定主线程发布事件</span></div><div class=\"line\">                .observeOn(Schedulers.single())<span class=\"comment\">//切换mapA</span></div><div class=\"line\">                .map(integer -&gt; &#123;</div><div class=\"line\">                    Log.e(<span class=\"string\">\"rxjava\"</span>, <span class=\"string\">\"mapA---&gt;\"</span> + Thread.currentThread().getName());</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">\"num\"</span> + integer;</div><div class=\"line\">                &#125;)</div><div class=\"line\">                .observeOn(AndroidSchedulers.mainThread())<span class=\"comment\">//切换mapB</span></div><div class=\"line\">                .map(s -&gt; &#123;</div><div class=\"line\">                    Log.e(<span class=\"string\">\"rxjava\"</span>, <span class=\"string\">\"mapB线程---&gt;\"</span> + Thread.currentThread().getName());</div><div class=\"line\">                    <span class=\"keyword\">return</span> Integer.parseInt(s.substring(<span class=\"number\">3</span>, s.length()));</div><div class=\"line\">                &#125;)</div><div class=\"line\">                .observeOn(Schedulers.computation())<span class=\"comment\">//切换Observer执行线程</span></div><div class=\"line\">                .subscribeOn(Schedulers.io())<span class=\"comment\">//再此指定发布线程为io</span></div><div class=\"line\">                .subscribe(<span class=\"keyword\">new</span> Observer&lt;Integer&gt;() &#123;</div><div class=\"line\">                    <span class=\"meta\">@Override</span></div><div class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSubscribe</span><span class=\"params\">(Disposable d)</span> </span>&#123;</div><div class=\"line\">                        Log.e(<span class=\"string\">\"rxjava\"</span>, <span class=\"string\">\"onSubscribe---&gt;\"</span> + \t\t\tThread.currentThread().getName());</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"meta\">@Override</span></div><div class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(Integer integer)</span> </span>&#123;</div><div class=\"line\">                        Log.e(<span class=\"string\">\"rxjava\"</span>, <span class=\"string\">\"onNext---&gt;\"</span> + Thread.currentThread().getName());</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"meta\">@Override</span></div><div class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</div><div class=\"line\">                        Log.e(<span class=\"string\">\"rxjava\"</span>, <span class=\"string\">\"onError---&gt;\"</span> + Thread.currentThread().getName());</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"meta\">@Override</span></div><div class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onComplete</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                        Log.e(<span class=\"string\">\"rxjava\"</span>, <span class=\"string\">\"onComplete---&gt;\"</span> + Thread.currentThread().getName());</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>  logcat</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">rxjava: onSubscribe---&gt;main<span class=\"comment\">//Observer的onSubscribe回调和发布事件的线程一致，也就是第一次subscribeOn()，若未指定，则在</span></div><div class=\"line\">rxjava: emitter.onNext()---&gt;main<span class=\"comment\">//第一次subscribeOn()</span></div><div class=\"line\">rxjava: emitter.onNext()---&gt;main</div><div class=\"line\">rxjava: mapA---&gt;RxSingleScheduler-<span class=\"number\">1</span><span class=\"comment\">//最近一次observeOn（）指定线程，若未指定，默认和subscribeOn的一致，若subscribeOn也未指定，默认是Schedulers.trampoline()</span></div><div class=\"line\">rxjava: emitter.onNext()---&gt;main</div><div class=\"line\">rxjava: mapA---&gt;RxSingleScheduler-<span class=\"number\">1</span></div><div class=\"line\">rxjava: mapA---&gt;RxSingleScheduler-<span class=\"number\">1</span></div><div class=\"line\">rxjava: mapB线程---&gt;main<span class=\"comment\">//最近一次observeOn（）指定线程</span></div><div class=\"line\">rxjava: mapB线程---&gt;main</div><div class=\"line\">rxjava: mapB线程---&gt;main</div><div class=\"line\">rxjava: onNext---&gt;RxComputationThreadPool-<span class=\"number\">1</span><span class=\"comment\">//Observer的onNext，由最近一次的observeOn（）指定</span></div><div class=\"line\">rxjava: onNext---&gt;RxComputationThreadPool-<span class=\"number\">1</span></div><div class=\"line\">rxjava: onNext---&gt;RxComputationThreadPool-<span class=\"number\">1</span></div><div class=\"line\">rxjava: onComplete---&gt;RxComputationThreadPool-<span class=\"number\">1</span><span class=\"comment\">//Observer的onComplete，由最近一次的observeOn（）</span></div></pre></td></tr></table></figure>\n<p> 结论：</p>\n<ul>\n<li>多个subscribeOn()以第一个为主</li>\n<li>多个observeOn（）指定以下操作执行线程</li>\n<li>若不指定observeOn（），默认按subscribeOn()指定的线程一致</li>\n<li>若不指定subscribeOn()，默认是Schedulers.trampoline()（在当前线程，停下之前任务，先执行本次任务）</li>\n<li>注意：Observer的onSubscribe(Disposable d)回调，以subscribeOn()为主，而不是以observeOn（）为主</li>\n</ul>\n<p>其他三个回调onNext，onError，onComplete以observeOn（）为主</p>\n<h4 id=\"实例四Schedulers-trampoline-：\"><a href=\"#实例四Schedulers-trampoline-：\" class=\"headerlink\" title=\"实例四Schedulers.trampoline()：\"></a>实例四Schedulers.trampoline()：</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/6773051-6d40d0cbdb0bd590.jpg?imageMogr2/auto-orient/\" alt=\"\"></p>\n<p>log</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.out: 发射线程:RxCachedThreadScheduler-<span class=\"number\">1</span>----&gt;发射:<span class=\"number\">0</span></div><div class=\"line\">System.out: 接收线程:RxCachedThreadScheduler-<span class=\"number\">1</span>----&gt;接收:<span class=\"number\">0</span></div><div class=\"line\">System.out: 发射线程:RxCachedThreadScheduler-<span class=\"number\">1</span>----&gt;发射:<span class=\"number\">1</span></div><div class=\"line\">System.out: 接收线程:RxCachedThreadScheduler-<span class=\"number\">1</span>----&gt;接收:<span class=\"number\">1</span></div><div class=\"line\">System.out: 发射线程:RxCachedThreadScheduler-<span class=\"number\">1</span>----&gt;发射:<span class=\"number\">2</span></div><div class=\"line\">System.out: 接收线程:RxCachedThreadScheduler-<span class=\"number\">1</span>----&gt;接收:<span class=\"number\">2</span></div><div class=\"line\">System.out: 发射线程:RxCachedThreadScheduler-<span class=\"number\">1</span>----&gt;发射:<span class=\"number\">3</span></div><div class=\"line\">System.out: 接收线程:RxCachedThreadScheduler-<span class=\"number\">1</span>----&gt;接收:<span class=\"number\">3</span></div><div class=\"line\">System.out: 发射线程:RxCachedThreadScheduler-<span class=\"number\">1</span>----&gt;发射:<span class=\"number\">4</span></div><div class=\"line\">System.out: 接收线程:RxCachedThreadScheduler-<span class=\"number\">1</span>----&gt;接收:<span class=\"number\">4</span></div><div class=\"line\"><span class=\"comment\">//可以看到</span></div><div class=\"line\"><span class=\"comment\">//Schedulers.trampoline()指定Consumer回调执行线程和发布事件线程一样</span></div><div class=\"line\"><span class=\"comment\">//Schedulers.trampoline()的作用在当前线程立即执行任务，如果当前线程有任务在执行，则会将其暂停，等插入进来的任务执行完之后，再将未完成的任务接着执行。</span></div></pre></td></tr></table></figure>\n<p>结论：</p>\n<p>Schedulers.trampoline()的作用在当前线程立即执行任务，如果当前线程有任务在执行，则会将其暂停，等插入进来的任务执行完之后，再将未完成的任务接着执行。【本实例的体现：当observe接受的时候，事件停止了发送】</p>\n<h4 id=\"实例五Schedulers-single\"><a href=\"#实例五Schedulers-single\" class=\"headerlink\" title=\"实例五Schedulers.single()\"></a>实例五Schedulers.single()</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/6773051-7691bdd048bdcaad.jpg?imageMogr2/auto-orient/\" alt=\"\"></p>\n<p>log</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.out: 发射线程:RxSingleScheduler-<span class=\"number\">1</span>----&gt;发射:<span class=\"number\">0</span></div><div class=\"line\">System.out: 发射线程:RxSingleScheduler-<span class=\"number\">1</span>----&gt;发射:<span class=\"number\">1</span></div><div class=\"line\">System.out: 发射线程:RxSingleScheduler-<span class=\"number\">1</span>----&gt;发射:<span class=\"number\">2</span></div><div class=\"line\"></div><div class=\"line\">System.out: 处理线程:RxSingleScheduler-<span class=\"number\">1</span>----&gt;处理:<span class=\"number\">0</span></div><div class=\"line\">System.out: 处理线程:RxSingleScheduler-<span class=\"number\">1</span>----&gt;处理:<span class=\"number\">1</span></div><div class=\"line\">System.out: 处理线程:RxSingleScheduler-<span class=\"number\">1</span>----&gt;处理:<span class=\"number\">2</span></div><div class=\"line\"></div><div class=\"line\">System.out: 接收线程:RxSingleScheduler-<span class=\"number\">1</span>----&gt;接收:<span class=\"number\">0</span></div><div class=\"line\">System.out: 接收线程:RxSingleScheduler-<span class=\"number\">1</span>----&gt;接收:<span class=\"number\">1</span></div><div class=\"line\">System.out: 接收线程:RxSingleScheduler-<span class=\"number\">1</span>----&gt;接收:<span class=\"number\">2</span></div><div class=\"line\"><span class=\"comment\">//发布和接受都是single线程</span></div><div class=\"line\"><span class=\"comment\">//接收在Schedulers.single()的线程单例中排队执行，当此线程中有任务执行时，其他任务将会按照先进先出的顺序依次执行  </span></div><div class=\"line\"><span class=\"comment\">//所以可以达到。 完全发射---完全处理---完全接受的流程</span></div></pre></td></tr></table></figure>\n<p><a href=\"https://www.jianshu.com/p/12638513424f\">参考连接</a></p>"},{"title":"ThreadLocal的理解","date":"2018-03-02T06:02:18.000Z","password":123456,"_content":"\nThreadLocal相关整理\n\n<!--more-->\n\nJDK1.2提供\n\n- 根据JDK文档中的解释：\n\nThreadLocal的作用是提供线程内的局部变量，这种变量在多线程环境下访问时能够保证各个线程里变量的独立性。\n\n当使用ThreadLocal维护变量时，ThreadLocal为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立改变该变量的副本，而不会影响其他线程所对应的副本。\n\n### ThreadLocal的使用：\n\n![](https://ws4.sinaimg.cn/large/006tNc79gy1foyhets3pvj31kw15p4ac.jpg)\n\n可以看到我们用ThreadLocal存放了一个String字符串，在不同的线程set数值后，只在当前线程管用，所以说，如同上述所说的\n\n- 一个ThreadLocal可以被多个线程共享\n- 每个线程对同一个ThreadLocal的set get操作只针对当前线程管用\n\n### ThreadLocal的原理以及源码介绍\n\n大概了解了ThreadLocal如何使用，那么请问，ThreadLocal如何保证不同线程的独立性的呢？\n\n#### ThreadLocal几个内部方法\n\n##### **protected T initialValue()**（如果不想初始值返回null，需要重写initialValue方法）\n\n```java\nprotected T initialValue() {\n    return null;\n}\n```\n\n![如果不想初始值返回null，需要重写initialValue方法](https://ws2.sinaimg.cn/large/006tNc79gy1foyhxjqs0qj31kw0zyn9s.jpg)\n\n##### **public T get()**（该方法返回当前线程变量副本。如果这是线程第一次调用该方法，则创建并初始化此副本。）\n\n/**\n\n```java\n * Returns the value in the current thread's copy of this\n * thread-local variable.  If the variable has no value for the\n * current thread, it is first initialized to the value returned\n * by an invocation of the {@link #initialValue} method.\n *\n * @return the current thread's value of this thread-local\n */\npublic T get() {\n    Thread t = Thread.currentThread();\n    ThreadLocalMap map = getMap(t);\n    if (map != null) {\n        ThreadLocalMap.Entry e = map.getEntry(this);\n        if (e != null)\n            return (T)e.value;\n    }\n    return setInitialValue();\n}\n```\n##### **public void set(T value)**\n\n/**\n\n```java\n * Sets the current thread's copy of this thread-local variable\n * to the specified value.  Most subclasses will have no need to\n * override this method, relying solely on the {@link #initialValue}\n * method to set the values of thread-locals.\n *\n * @param value the value to be stored in the current thread's copy of\n *        this thread-local.\n */\npublic void set(T value) {\n    Thread t = Thread.currentThread();\n    ThreadLocalMap map = getMap(t);\n    if (map != null)\n        map.set(this, value);\n    else\n        createMap(t, value);\n}\n```\n1. 由get和set源码可以看出，数据的存取都是先获取ThreadLocalMap对象，从**ThreadLocalMap**存取\n2. ThreadLocalMap是一个map，它的key，就是threadLocal本身，值就是存放的变量副本\n3. **每个线程对应一个本地变量的map，每个可以存放多个线程本地变量（即不同的ThreadLocal）**\n\n##### **public void remove()**（jdk1.5后出现）\n\n/**\n\n```java\n * Removes the current thread's value for this thread-local\n * variable.  If this thread-local variable is subsequently\n * {@linkplain #get read} by the current thread, its value will be\n * reinitialized by invoking its {@link #initialValue} method,\n * unless its value is {@linkplain #set set} by the current thread\n * in the interim.  This may result in multiple invocations of the\n * <tt>initialValue</tt> method in the current thread.\n *\n * @since 1.5\n */\n public void remove() {\n     ThreadLocalMap m = getMap(Thread.currentThread());\n     if (m != null)\n         m.remove(this);\n }\n```\n通过remove源码可以看到，\n\n1. 先通过ThreadLocal的getMap（Thread.currentThread()）方法拿到当前线程的ThreadLocalMap\n2. 然后再在当前线程的ThreadLocalMap中get，set，remove\n\n关于remove需要知道的几点：\n\n- 为什么移除某个ThreadLocal的值：\n\n目的是减少内存缓存，remove之后如果再次访问此线程局部变量的值，将返回initiValue初始值\n\n线程结束后，该线程对应的所有局部变量将自动被垃圾回收，但是显示调用remove清楚线程局部变量不是必须操作，但是可以加快内存回收的速度\n\n### ThreadLocal和同步机制synchonzied的区别\n\n- ThreadLocal：以空间换时间\n- synchonzied：以时间换空间\n\nsynchonzied同步机制：\n\n为多线程对相同资源的并发访问控制，保证了多线程之间的数据共享，**同步会带来巨大的性能开销，所以同步操作应该是细粒度的（对象中的不同元素使用不同的锁，而不是整个对象一个锁）**，以时间换空间的意思是：**使用同步真正的风险是复杂性和可能破坏资源安全,而不是性能。**\n\nThreadLocal线程局部变量机制：\n\n空间换取时间，不同线程访问同一ThreadLocal，数据的存取是当前线程的数据副本，也就是说不同线程在某一时间访问到的并不是同一对象，所以效率比较高，但是占用内存比较大，当线程结束之后，remove会加快内存的回收速度。\n\nSynchronized着重于线程间的数据共享，而ThreadLocal则着重于线程间的数据隔离。 \n\n### ThreadLocal的弊端（内存泄露）\n\n#### 内存泄露原因\n\nThreadLocalMap使用ThreadLocal的弱引用作为key，如果一个ThreadLocal没有外部的强引用，那么在系统GC的时候，这个ThreadLocal就会被回收掉\n\nThreadLocal被回收掉之后，那么当前Thread的ThreadLocalMap中间就会出现key为null的Entry\n\nkey为null的话就意味着，没有办法访问这些key对应的值，就会存在以下的这样一个强引用链\n\nvalue —Entry—TreadLocalMap--Thread\n\n#### 内存泄露解决\n\n`ThreadLocalMap`的设计中已经考虑到这种情况，也加上了一些防护措施：在`ThreadLocal`的`get()`,`set()`,`remove()`的时候都会清除线程`ThreadLocalMap`里所有`key`为`null`的`value`。\n\n#### 以下操作会导致内存泄露\n\n1. 使用static的ThreadLocal，延长了`ThreadLocal`的生命周期，导致某个线程Thread结束后，但是Thread内部的ThreadLocalMap中存在这个静态的ThreadLocal，导致ThreadLocalMap没法被回收，导致该Thread没法被回收\n\n2. 分配使用了`ThreadLocal`又不再调用`get()`,`set()`,`remove()`方法，那么就会导致内存泄漏。因为如上所说\n\n   `get()`,`set()`,`remove()`会清理线程ThreadLocalMap里所有key为null的value\n\n### Android中ThreadLocal的体现\n\n#### Handler消息机制\n\n熟悉Handler机制的都知道\n\n在ActivityThread的main方法中Looper.prepareMainLooper();或者在自己创建的线程中Looper.pepare()的时候\n\n```java\nprivate static void prepare(boolean quitAllowed) {\n    if (sThreadLocal.get() != null) {\n        throw new RuntimeException(\"Only one Looper may be created per thread\");\n    }\n    sThreadLocal.set(new Looper(quitAllowed));\n}\n```\n\n创建了一个Looper对象并使用sThreadLocal的set方法进行保存\n\n并且这个ThreadLocal在Looper类中是静态的，如下\n\n![](https://ws4.sinaimg.cn/large/006tNc79gy1foylpjjmbuj31jg0w6k0i.jpg)\n\n那就是说，这个静态的ThreadLocal，可以供任何线程访问，但是任意线程中取出来的looper，都只是线程局部变量，都是在副本\n\n所以说，每个线程对应一个looper，\n\n![](https://ws4.sinaimg.cn/large/006tNc79gy1foylttuf5dj31i40ectj5.jpg)\n\n**对于ThreadLocal的总结，暂时整理到这里，后续补充 ♨**","source":"_posts/ThreadLocal的理解.md","raw":"---\ntitle: ThreadLocal的理解\ndate: 2018-03-02 14:02:18\ntags: \n- Android\ncategories: Android\npassword: 123456\n---\n\nThreadLocal相关整理\n\n<!--more-->\n\nJDK1.2提供\n\n- 根据JDK文档中的解释：\n\nThreadLocal的作用是提供线程内的局部变量，这种变量在多线程环境下访问时能够保证各个线程里变量的独立性。\n\n当使用ThreadLocal维护变量时，ThreadLocal为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立改变该变量的副本，而不会影响其他线程所对应的副本。\n\n### ThreadLocal的使用：\n\n![](https://ws4.sinaimg.cn/large/006tNc79gy1foyhets3pvj31kw15p4ac.jpg)\n\n可以看到我们用ThreadLocal存放了一个String字符串，在不同的线程set数值后，只在当前线程管用，所以说，如同上述所说的\n\n- 一个ThreadLocal可以被多个线程共享\n- 每个线程对同一个ThreadLocal的set get操作只针对当前线程管用\n\n### ThreadLocal的原理以及源码介绍\n\n大概了解了ThreadLocal如何使用，那么请问，ThreadLocal如何保证不同线程的独立性的呢？\n\n#### ThreadLocal几个内部方法\n\n##### **protected T initialValue()**（如果不想初始值返回null，需要重写initialValue方法）\n\n```java\nprotected T initialValue() {\n    return null;\n}\n```\n\n![如果不想初始值返回null，需要重写initialValue方法](https://ws2.sinaimg.cn/large/006tNc79gy1foyhxjqs0qj31kw0zyn9s.jpg)\n\n##### **public T get()**（该方法返回当前线程变量副本。如果这是线程第一次调用该方法，则创建并初始化此副本。）\n\n/**\n\n```java\n * Returns the value in the current thread's copy of this\n * thread-local variable.  If the variable has no value for the\n * current thread, it is first initialized to the value returned\n * by an invocation of the {@link #initialValue} method.\n *\n * @return the current thread's value of this thread-local\n */\npublic T get() {\n    Thread t = Thread.currentThread();\n    ThreadLocalMap map = getMap(t);\n    if (map != null) {\n        ThreadLocalMap.Entry e = map.getEntry(this);\n        if (e != null)\n            return (T)e.value;\n    }\n    return setInitialValue();\n}\n```\n##### **public void set(T value)**\n\n/**\n\n```java\n * Sets the current thread's copy of this thread-local variable\n * to the specified value.  Most subclasses will have no need to\n * override this method, relying solely on the {@link #initialValue}\n * method to set the values of thread-locals.\n *\n * @param value the value to be stored in the current thread's copy of\n *        this thread-local.\n */\npublic void set(T value) {\n    Thread t = Thread.currentThread();\n    ThreadLocalMap map = getMap(t);\n    if (map != null)\n        map.set(this, value);\n    else\n        createMap(t, value);\n}\n```\n1. 由get和set源码可以看出，数据的存取都是先获取ThreadLocalMap对象，从**ThreadLocalMap**存取\n2. ThreadLocalMap是一个map，它的key，就是threadLocal本身，值就是存放的变量副本\n3. **每个线程对应一个本地变量的map，每个可以存放多个线程本地变量（即不同的ThreadLocal）**\n\n##### **public void remove()**（jdk1.5后出现）\n\n/**\n\n```java\n * Removes the current thread's value for this thread-local\n * variable.  If this thread-local variable is subsequently\n * {@linkplain #get read} by the current thread, its value will be\n * reinitialized by invoking its {@link #initialValue} method,\n * unless its value is {@linkplain #set set} by the current thread\n * in the interim.  This may result in multiple invocations of the\n * <tt>initialValue</tt> method in the current thread.\n *\n * @since 1.5\n */\n public void remove() {\n     ThreadLocalMap m = getMap(Thread.currentThread());\n     if (m != null)\n         m.remove(this);\n }\n```\n通过remove源码可以看到，\n\n1. 先通过ThreadLocal的getMap（Thread.currentThread()）方法拿到当前线程的ThreadLocalMap\n2. 然后再在当前线程的ThreadLocalMap中get，set，remove\n\n关于remove需要知道的几点：\n\n- 为什么移除某个ThreadLocal的值：\n\n目的是减少内存缓存，remove之后如果再次访问此线程局部变量的值，将返回initiValue初始值\n\n线程结束后，该线程对应的所有局部变量将自动被垃圾回收，但是显示调用remove清楚线程局部变量不是必须操作，但是可以加快内存回收的速度\n\n### ThreadLocal和同步机制synchonzied的区别\n\n- ThreadLocal：以空间换时间\n- synchonzied：以时间换空间\n\nsynchonzied同步机制：\n\n为多线程对相同资源的并发访问控制，保证了多线程之间的数据共享，**同步会带来巨大的性能开销，所以同步操作应该是细粒度的（对象中的不同元素使用不同的锁，而不是整个对象一个锁）**，以时间换空间的意思是：**使用同步真正的风险是复杂性和可能破坏资源安全,而不是性能。**\n\nThreadLocal线程局部变量机制：\n\n空间换取时间，不同线程访问同一ThreadLocal，数据的存取是当前线程的数据副本，也就是说不同线程在某一时间访问到的并不是同一对象，所以效率比较高，但是占用内存比较大，当线程结束之后，remove会加快内存的回收速度。\n\nSynchronized着重于线程间的数据共享，而ThreadLocal则着重于线程间的数据隔离。 \n\n### ThreadLocal的弊端（内存泄露）\n\n#### 内存泄露原因\n\nThreadLocalMap使用ThreadLocal的弱引用作为key，如果一个ThreadLocal没有外部的强引用，那么在系统GC的时候，这个ThreadLocal就会被回收掉\n\nThreadLocal被回收掉之后，那么当前Thread的ThreadLocalMap中间就会出现key为null的Entry\n\nkey为null的话就意味着，没有办法访问这些key对应的值，就会存在以下的这样一个强引用链\n\nvalue —Entry—TreadLocalMap--Thread\n\n#### 内存泄露解决\n\n`ThreadLocalMap`的设计中已经考虑到这种情况，也加上了一些防护措施：在`ThreadLocal`的`get()`,`set()`,`remove()`的时候都会清除线程`ThreadLocalMap`里所有`key`为`null`的`value`。\n\n#### 以下操作会导致内存泄露\n\n1. 使用static的ThreadLocal，延长了`ThreadLocal`的生命周期，导致某个线程Thread结束后，但是Thread内部的ThreadLocalMap中存在这个静态的ThreadLocal，导致ThreadLocalMap没法被回收，导致该Thread没法被回收\n\n2. 分配使用了`ThreadLocal`又不再调用`get()`,`set()`,`remove()`方法，那么就会导致内存泄漏。因为如上所说\n\n   `get()`,`set()`,`remove()`会清理线程ThreadLocalMap里所有key为null的value\n\n### Android中ThreadLocal的体现\n\n#### Handler消息机制\n\n熟悉Handler机制的都知道\n\n在ActivityThread的main方法中Looper.prepareMainLooper();或者在自己创建的线程中Looper.pepare()的时候\n\n```java\nprivate static void prepare(boolean quitAllowed) {\n    if (sThreadLocal.get() != null) {\n        throw new RuntimeException(\"Only one Looper may be created per thread\");\n    }\n    sThreadLocal.set(new Looper(quitAllowed));\n}\n```\n\n创建了一个Looper对象并使用sThreadLocal的set方法进行保存\n\n并且这个ThreadLocal在Looper类中是静态的，如下\n\n![](https://ws4.sinaimg.cn/large/006tNc79gy1foylpjjmbuj31jg0w6k0i.jpg)\n\n那就是说，这个静态的ThreadLocal，可以供任何线程访问，但是任意线程中取出来的looper，都只是线程局部变量，都是在副本\n\n所以说，每个线程对应一个looper，\n\n![](https://ws4.sinaimg.cn/large/006tNc79gy1foylttuf5dj31i40ectj5.jpg)\n\n**对于ThreadLocal的总结，暂时整理到这里，后续补充 ♨**","slug":"ThreadLocal的理解","published":1,"updated":"2018-07-19T02:15:24.144Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6mv001k1kyg7fslntmx","content":"<p>ThreadLocal相关整理</p>\n<a id=\"more\"></a>\n<p>JDK1.2提供</p>\n<ul>\n<li>根据JDK文档中的解释：</li>\n</ul>\n<p>ThreadLocal的作用是提供线程内的局部变量，这种变量在多线程环境下访问时能够保证各个线程里变量的独立性。</p>\n<p>当使用ThreadLocal维护变量时，ThreadLocal为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立改变该变量的副本，而不会影响其他线程所对应的副本。</p>\n<h3 id=\"ThreadLocal的使用：\"><a href=\"#ThreadLocal的使用：\" class=\"headerlink\" title=\"ThreadLocal的使用：\"></a>ThreadLocal的使用：</h3><p><img src=\"https://ws4.sinaimg.cn/large/006tNc79gy1foyhets3pvj31kw15p4ac.jpg\" alt=\"\"></p>\n<p>可以看到我们用ThreadLocal存放了一个String字符串，在不同的线程set数值后，只在当前线程管用，所以说，如同上述所说的</p>\n<ul>\n<li>一个ThreadLocal可以被多个线程共享</li>\n<li>每个线程对同一个ThreadLocal的set get操作只针对当前线程管用</li>\n</ul>\n<h3 id=\"ThreadLocal的原理以及源码介绍\"><a href=\"#ThreadLocal的原理以及源码介绍\" class=\"headerlink\" title=\"ThreadLocal的原理以及源码介绍\"></a>ThreadLocal的原理以及源码介绍</h3><p>大概了解了ThreadLocal如何使用，那么请问，ThreadLocal如何保证不同线程的独立性的呢？</p>\n<h4 id=\"ThreadLocal几个内部方法\"><a href=\"#ThreadLocal几个内部方法\" class=\"headerlink\" title=\"ThreadLocal几个内部方法\"></a>ThreadLocal几个内部方法</h4><h5 id=\"protected-T-initialValue-（如果不想初始值返回null，需要重写initialValue方法）\"><a href=\"#protected-T-initialValue-（如果不想初始值返回null，需要重写initialValue方法）\" class=\"headerlink\" title=\"protected T initialValue()（如果不想初始值返回null，需要重写initialValue方法）\"></a><strong>protected T initialValue()</strong>（如果不想初始值返回null，需要重写initialValue方法）</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> T <span class=\"title\">initialValue</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tNc79gy1foyhxjqs0qj31kw0zyn9s.jpg\" alt=\"如果不想初始值返回null，需要重写initialValue方法\"></p>\n<h5 id=\"public-T-get-（该方法返回当前线程变量副本。如果这是线程第一次调用该方法，则创建并初始化此副本。）\"><a href=\"#public-T-get-（该方法返回当前线程变量副本。如果这是线程第一次调用该方法，则创建并初始化此副本。）\" class=\"headerlink\" title=\"public T get()（该方法返回当前线程变量副本。如果这是线程第一次调用该方法，则创建并初始化此副本。）\"></a><strong>public T get()</strong>（该方法返回当前线程变量副本。如果这是线程第一次调用该方法，则创建并初始化此副本。）</h5><p>/**</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"> * Returns the value in the current thread's copy of this</div><div class=\"line\"> * thread-local variable.  If the variable has no value for the</div><div class=\"line\"> * current thread, it is first initialized to the value returned</div><div class=\"line\"> * by an invocation of the &#123;@link #initialValue&#125; method.</div><div class=\"line\"> *</div><div class=\"line\"> * @return the current thread's value of this thread-local</div><div class=\"line\"> */</div><div class=\"line\">public T get() &#123;</div><div class=\"line\">    Thread t = Thread.currentThread();</div><div class=\"line\">    ThreadLocalMap map = getMap(t);</div><div class=\"line\">    if (map != null) &#123;</div><div class=\"line\">        ThreadLocalMap.Entry e = map.getEntry(this);</div><div class=\"line\">        if (e != null)</div><div class=\"line\">            return (T)e.value;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return setInitialValue();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"public-void-set-T-value\"><a href=\"#public-void-set-T-value\" class=\"headerlink\" title=\"public void set(T value)\"></a><strong>public void set(T value)</strong></h5><p>/**</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"> * Sets the current thread's copy of this thread-local variable</div><div class=\"line\"> * to the specified value.  Most subclasses will have no need to</div><div class=\"line\"> * override this method, relying solely on the &#123;@link #initialValue&#125;</div><div class=\"line\"> * method to set the values of thread-locals.</div><div class=\"line\"> *</div><div class=\"line\"> * @param value the value to be stored in the current thread's copy of</div><div class=\"line\"> *        this thread-local.</div><div class=\"line\"> */</div><div class=\"line\">public void set(T value) &#123;</div><div class=\"line\">    Thread t = Thread.currentThread();</div><div class=\"line\">    ThreadLocalMap map = getMap(t);</div><div class=\"line\">    if (map != null)</div><div class=\"line\">        map.set(this, value);</div><div class=\"line\">    else</div><div class=\"line\">        createMap(t, value);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>由get和set源码可以看出，数据的存取都是先获取ThreadLocalMap对象，从<strong>ThreadLocalMap</strong>存取</li>\n<li>ThreadLocalMap是一个map，它的key，就是threadLocal本身，值就是存放的变量副本</li>\n<li><strong>每个线程对应一个本地变量的map，每个可以存放多个线程本地变量（即不同的ThreadLocal）</strong></li>\n</ol>\n<h5 id=\"public-void-remove-（jdk1-5后出现）\"><a href=\"#public-void-remove-（jdk1-5后出现）\" class=\"headerlink\" title=\"public void remove()（jdk1.5后出现）\"></a><strong>public void remove()</strong>（jdk1.5后出现）</h5><p>/**</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">* Removes the current thread's value for this thread-local</div><div class=\"line\">* variable.  If this thread-local variable is subsequently</div><div class=\"line\">* &#123;@linkplain #get read&#125; by the current thread, its value will be</div><div class=\"line\">* reinitialized by invoking its &#123;@link #initialValue&#125; method,</div><div class=\"line\">* unless its value is &#123;@linkplain #set set&#125; by the current thread</div><div class=\"line\">* in the interim.  This may result in multiple invocations of the</div><div class=\"line\">* &lt;tt&gt;initialValue&lt;/tt&gt; method in the current thread.</div><div class=\"line\">*</div><div class=\"line\">* @since 1.5</div><div class=\"line\">*/</div><div class=\"line\">public void remove() &#123;</div><div class=\"line\">    ThreadLocalMap m = getMap(Thread.currentThread());</div><div class=\"line\">    if (m != null)</div><div class=\"line\">        m.remove(this);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过remove源码可以看到，</p>\n<ol>\n<li>先通过ThreadLocal的getMap（Thread.currentThread()）方法拿到当前线程的ThreadLocalMap</li>\n<li>然后再在当前线程的ThreadLocalMap中get，set，remove</li>\n</ol>\n<p>关于remove需要知道的几点：</p>\n<ul>\n<li>为什么移除某个ThreadLocal的值：</li>\n</ul>\n<p>目的是减少内存缓存，remove之后如果再次访问此线程局部变量的值，将返回initiValue初始值</p>\n<p>线程结束后，该线程对应的所有局部变量将自动被垃圾回收，但是显示调用remove清楚线程局部变量不是必须操作，但是可以加快内存回收的速度</p>\n<h3 id=\"ThreadLocal和同步机制synchonzied的区别\"><a href=\"#ThreadLocal和同步机制synchonzied的区别\" class=\"headerlink\" title=\"ThreadLocal和同步机制synchonzied的区别\"></a>ThreadLocal和同步机制synchonzied的区别</h3><ul>\n<li>ThreadLocal：以空间换时间</li>\n<li>synchonzied：以时间换空间</li>\n</ul>\n<p>synchonzied同步机制：</p>\n<p>为多线程对相同资源的并发访问控制，保证了多线程之间的数据共享，<strong>同步会带来巨大的性能开销，所以同步操作应该是细粒度的（对象中的不同元素使用不同的锁，而不是整个对象一个锁）</strong>，以时间换空间的意思是：<strong>使用同步真正的风险是复杂性和可能破坏资源安全,而不是性能。</strong></p>\n<p>ThreadLocal线程局部变量机制：</p>\n<p>空间换取时间，不同线程访问同一ThreadLocal，数据的存取是当前线程的数据副本，也就是说不同线程在某一时间访问到的并不是同一对象，所以效率比较高，但是占用内存比较大，当线程结束之后，remove会加快内存的回收速度。</p>\n<p>Synchronized着重于线程间的数据共享，而ThreadLocal则着重于线程间的数据隔离。 </p>\n<h3 id=\"ThreadLocal的弊端（内存泄露）\"><a href=\"#ThreadLocal的弊端（内存泄露）\" class=\"headerlink\" title=\"ThreadLocal的弊端（内存泄露）\"></a>ThreadLocal的弊端（内存泄露）</h3><h4 id=\"内存泄露原因\"><a href=\"#内存泄露原因\" class=\"headerlink\" title=\"内存泄露原因\"></a>内存泄露原因</h4><p>ThreadLocalMap使用ThreadLocal的弱引用作为key，如果一个ThreadLocal没有外部的强引用，那么在系统GC的时候，这个ThreadLocal就会被回收掉</p>\n<p>ThreadLocal被回收掉之后，那么当前Thread的ThreadLocalMap中间就会出现key为null的Entry</p>\n<p>key为null的话就意味着，没有办法访问这些key对应的值，就会存在以下的这样一个强引用链</p>\n<p>value —Entry—TreadLocalMap–Thread</p>\n<h4 id=\"内存泄露解决\"><a href=\"#内存泄露解决\" class=\"headerlink\" title=\"内存泄露解决\"></a>内存泄露解决</h4><p><code>ThreadLocalMap</code>的设计中已经考虑到这种情况，也加上了一些防护措施：在<code>ThreadLocal</code>的<code>get()</code>,<code>set()</code>,<code>remove()</code>的时候都会清除线程<code>ThreadLocalMap</code>里所有<code>key</code>为<code>null</code>的<code>value</code>。</p>\n<h4 id=\"以下操作会导致内存泄露\"><a href=\"#以下操作会导致内存泄露\" class=\"headerlink\" title=\"以下操作会导致内存泄露\"></a>以下操作会导致内存泄露</h4><ol>\n<li><p>使用static的ThreadLocal，延长了<code>ThreadLocal</code>的生命周期，导致某个线程Thread结束后，但是Thread内部的ThreadLocalMap中存在这个静态的ThreadLocal，导致ThreadLocalMap没法被回收，导致该Thread没法被回收</p>\n</li>\n<li><p>分配使用了<code>ThreadLocal</code>又不再调用<code>get()</code>,<code>set()</code>,<code>remove()</code>方法，那么就会导致内存泄漏。因为如上所说</p>\n<p><code>get()</code>,<code>set()</code>,<code>remove()</code>会清理线程ThreadLocalMap里所有key为null的value</p>\n</li>\n</ol>\n<h3 id=\"Android中ThreadLocal的体现\"><a href=\"#Android中ThreadLocal的体现\" class=\"headerlink\" title=\"Android中ThreadLocal的体现\"></a>Android中ThreadLocal的体现</h3><h4 id=\"Handler消息机制\"><a href=\"#Handler消息机制\" class=\"headerlink\" title=\"Handler消息机制\"></a>Handler消息机制</h4><p>熟悉Handler机制的都知道</p>\n<p>在ActivityThread的main方法中Looper.prepareMainLooper();或者在自己创建的线程中Looper.pepare()的时候</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">(<span class=\"keyword\">boolean</span> quitAllowed)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (sThreadLocal.get() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Only one Looper may be created per thread\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    sThreadLocal.set(<span class=\"keyword\">new</span> Looper(quitAllowed));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>创建了一个Looper对象并使用sThreadLocal的set方法进行保存</p>\n<p>并且这个ThreadLocal在Looper类中是静态的，如下</p>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tNc79gy1foylpjjmbuj31jg0w6k0i.jpg\" alt=\"\"></p>\n<p>那就是说，这个静态的ThreadLocal，可以供任何线程访问，但是任意线程中取出来的looper，都只是线程局部变量，都是在副本</p>\n<p>所以说，每个线程对应一个looper，</p>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tNc79gy1foylttuf5dj31i40ectj5.jpg\" alt=\"\"></p>\n<p><strong>对于ThreadLocal的总结，暂时整理到这里，后续补充 ♨</strong></p>\n","excerpt":"<p>ThreadLocal相关整理</p>","more":"<p>JDK1.2提供</p>\n<ul>\n<li>根据JDK文档中的解释：</li>\n</ul>\n<p>ThreadLocal的作用是提供线程内的局部变量，这种变量在多线程环境下访问时能够保证各个线程里变量的独立性。</p>\n<p>当使用ThreadLocal维护变量时，ThreadLocal为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立改变该变量的副本，而不会影响其他线程所对应的副本。</p>\n<h3 id=\"ThreadLocal的使用：\"><a href=\"#ThreadLocal的使用：\" class=\"headerlink\" title=\"ThreadLocal的使用：\"></a>ThreadLocal的使用：</h3><p><img src=\"https://ws4.sinaimg.cn/large/006tNc79gy1foyhets3pvj31kw15p4ac.jpg\" alt=\"\"></p>\n<p>可以看到我们用ThreadLocal存放了一个String字符串，在不同的线程set数值后，只在当前线程管用，所以说，如同上述所说的</p>\n<ul>\n<li>一个ThreadLocal可以被多个线程共享</li>\n<li>每个线程对同一个ThreadLocal的set get操作只针对当前线程管用</li>\n</ul>\n<h3 id=\"ThreadLocal的原理以及源码介绍\"><a href=\"#ThreadLocal的原理以及源码介绍\" class=\"headerlink\" title=\"ThreadLocal的原理以及源码介绍\"></a>ThreadLocal的原理以及源码介绍</h3><p>大概了解了ThreadLocal如何使用，那么请问，ThreadLocal如何保证不同线程的独立性的呢？</p>\n<h4 id=\"ThreadLocal几个内部方法\"><a href=\"#ThreadLocal几个内部方法\" class=\"headerlink\" title=\"ThreadLocal几个内部方法\"></a>ThreadLocal几个内部方法</h4><h5 id=\"protected-T-initialValue-（如果不想初始值返回null，需要重写initialValue方法）\"><a href=\"#protected-T-initialValue-（如果不想初始值返回null，需要重写initialValue方法）\" class=\"headerlink\" title=\"protected T initialValue()（如果不想初始值返回null，需要重写initialValue方法）\"></a><strong>protected T initialValue()</strong>（如果不想初始值返回null，需要重写initialValue方法）</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> T <span class=\"title\">initialValue</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tNc79gy1foyhxjqs0qj31kw0zyn9s.jpg\" alt=\"如果不想初始值返回null，需要重写initialValue方法\"></p>\n<h5 id=\"public-T-get-（该方法返回当前线程变量副本。如果这是线程第一次调用该方法，则创建并初始化此副本。）\"><a href=\"#public-T-get-（该方法返回当前线程变量副本。如果这是线程第一次调用该方法，则创建并初始化此副本。）\" class=\"headerlink\" title=\"public T get()（该方法返回当前线程变量副本。如果这是线程第一次调用该方法，则创建并初始化此副本。）\"></a><strong>public T get()</strong>（该方法返回当前线程变量副本。如果这是线程第一次调用该方法，则创建并初始化此副本。）</h5><p>/**</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"> * Returns the value in the current thread's copy of this</div><div class=\"line\"> * thread-local variable.  If the variable has no value for the</div><div class=\"line\"> * current thread, it is first initialized to the value returned</div><div class=\"line\"> * by an invocation of the &#123;@link #initialValue&#125; method.</div><div class=\"line\"> *</div><div class=\"line\"> * @return the current thread's value of this thread-local</div><div class=\"line\"> */</div><div class=\"line\">public T get() &#123;</div><div class=\"line\">    Thread t = Thread.currentThread();</div><div class=\"line\">    ThreadLocalMap map = getMap(t);</div><div class=\"line\">    if (map != null) &#123;</div><div class=\"line\">        ThreadLocalMap.Entry e = map.getEntry(this);</div><div class=\"line\">        if (e != null)</div><div class=\"line\">            return (T)e.value;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return setInitialValue();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"public-void-set-T-value\"><a href=\"#public-void-set-T-value\" class=\"headerlink\" title=\"public void set(T value)\"></a><strong>public void set(T value)</strong></h5><p>/**</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"> * Sets the current thread's copy of this thread-local variable</div><div class=\"line\"> * to the specified value.  Most subclasses will have no need to</div><div class=\"line\"> * override this method, relying solely on the &#123;@link #initialValue&#125;</div><div class=\"line\"> * method to set the values of thread-locals.</div><div class=\"line\"> *</div><div class=\"line\"> * @param value the value to be stored in the current thread's copy of</div><div class=\"line\"> *        this thread-local.</div><div class=\"line\"> */</div><div class=\"line\">public void set(T value) &#123;</div><div class=\"line\">    Thread t = Thread.currentThread();</div><div class=\"line\">    ThreadLocalMap map = getMap(t);</div><div class=\"line\">    if (map != null)</div><div class=\"line\">        map.set(this, value);</div><div class=\"line\">    else</div><div class=\"line\">        createMap(t, value);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>由get和set源码可以看出，数据的存取都是先获取ThreadLocalMap对象，从<strong>ThreadLocalMap</strong>存取</li>\n<li>ThreadLocalMap是一个map，它的key，就是threadLocal本身，值就是存放的变量副本</li>\n<li><strong>每个线程对应一个本地变量的map，每个可以存放多个线程本地变量（即不同的ThreadLocal）</strong></li>\n</ol>\n<h5 id=\"public-void-remove-（jdk1-5后出现）\"><a href=\"#public-void-remove-（jdk1-5后出现）\" class=\"headerlink\" title=\"public void remove()（jdk1.5后出现）\"></a><strong>public void remove()</strong>（jdk1.5后出现）</h5><p>/**</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">* Removes the current thread's value for this thread-local</div><div class=\"line\">* variable.  If this thread-local variable is subsequently</div><div class=\"line\">* &#123;@linkplain #get read&#125; by the current thread, its value will be</div><div class=\"line\">* reinitialized by invoking its &#123;@link #initialValue&#125; method,</div><div class=\"line\">* unless its value is &#123;@linkplain #set set&#125; by the current thread</div><div class=\"line\">* in the interim.  This may result in multiple invocations of the</div><div class=\"line\">* &lt;tt&gt;initialValue&lt;/tt&gt; method in the current thread.</div><div class=\"line\">*</div><div class=\"line\">* @since 1.5</div><div class=\"line\">*/</div><div class=\"line\">public void remove() &#123;</div><div class=\"line\">    ThreadLocalMap m = getMap(Thread.currentThread());</div><div class=\"line\">    if (m != null)</div><div class=\"line\">        m.remove(this);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过remove源码可以看到，</p>\n<ol>\n<li>先通过ThreadLocal的getMap（Thread.currentThread()）方法拿到当前线程的ThreadLocalMap</li>\n<li>然后再在当前线程的ThreadLocalMap中get，set，remove</li>\n</ol>\n<p>关于remove需要知道的几点：</p>\n<ul>\n<li>为什么移除某个ThreadLocal的值：</li>\n</ul>\n<p>目的是减少内存缓存，remove之后如果再次访问此线程局部变量的值，将返回initiValue初始值</p>\n<p>线程结束后，该线程对应的所有局部变量将自动被垃圾回收，但是显示调用remove清楚线程局部变量不是必须操作，但是可以加快内存回收的速度</p>\n<h3 id=\"ThreadLocal和同步机制synchonzied的区别\"><a href=\"#ThreadLocal和同步机制synchonzied的区别\" class=\"headerlink\" title=\"ThreadLocal和同步机制synchonzied的区别\"></a>ThreadLocal和同步机制synchonzied的区别</h3><ul>\n<li>ThreadLocal：以空间换时间</li>\n<li>synchonzied：以时间换空间</li>\n</ul>\n<p>synchonzied同步机制：</p>\n<p>为多线程对相同资源的并发访问控制，保证了多线程之间的数据共享，<strong>同步会带来巨大的性能开销，所以同步操作应该是细粒度的（对象中的不同元素使用不同的锁，而不是整个对象一个锁）</strong>，以时间换空间的意思是：<strong>使用同步真正的风险是复杂性和可能破坏资源安全,而不是性能。</strong></p>\n<p>ThreadLocal线程局部变量机制：</p>\n<p>空间换取时间，不同线程访问同一ThreadLocal，数据的存取是当前线程的数据副本，也就是说不同线程在某一时间访问到的并不是同一对象，所以效率比较高，但是占用内存比较大，当线程结束之后，remove会加快内存的回收速度。</p>\n<p>Synchronized着重于线程间的数据共享，而ThreadLocal则着重于线程间的数据隔离。 </p>\n<h3 id=\"ThreadLocal的弊端（内存泄露）\"><a href=\"#ThreadLocal的弊端（内存泄露）\" class=\"headerlink\" title=\"ThreadLocal的弊端（内存泄露）\"></a>ThreadLocal的弊端（内存泄露）</h3><h4 id=\"内存泄露原因\"><a href=\"#内存泄露原因\" class=\"headerlink\" title=\"内存泄露原因\"></a>内存泄露原因</h4><p>ThreadLocalMap使用ThreadLocal的弱引用作为key，如果一个ThreadLocal没有外部的强引用，那么在系统GC的时候，这个ThreadLocal就会被回收掉</p>\n<p>ThreadLocal被回收掉之后，那么当前Thread的ThreadLocalMap中间就会出现key为null的Entry</p>\n<p>key为null的话就意味着，没有办法访问这些key对应的值，就会存在以下的这样一个强引用链</p>\n<p>value —Entry—TreadLocalMap–Thread</p>\n<h4 id=\"内存泄露解决\"><a href=\"#内存泄露解决\" class=\"headerlink\" title=\"内存泄露解决\"></a>内存泄露解决</h4><p><code>ThreadLocalMap</code>的设计中已经考虑到这种情况，也加上了一些防护措施：在<code>ThreadLocal</code>的<code>get()</code>,<code>set()</code>,<code>remove()</code>的时候都会清除线程<code>ThreadLocalMap</code>里所有<code>key</code>为<code>null</code>的<code>value</code>。</p>\n<h4 id=\"以下操作会导致内存泄露\"><a href=\"#以下操作会导致内存泄露\" class=\"headerlink\" title=\"以下操作会导致内存泄露\"></a>以下操作会导致内存泄露</h4><ol>\n<li><p>使用static的ThreadLocal，延长了<code>ThreadLocal</code>的生命周期，导致某个线程Thread结束后，但是Thread内部的ThreadLocalMap中存在这个静态的ThreadLocal，导致ThreadLocalMap没法被回收，导致该Thread没法被回收</p>\n</li>\n<li><p>分配使用了<code>ThreadLocal</code>又不再调用<code>get()</code>,<code>set()</code>,<code>remove()</code>方法，那么就会导致内存泄漏。因为如上所说</p>\n<p><code>get()</code>,<code>set()</code>,<code>remove()</code>会清理线程ThreadLocalMap里所有key为null的value</p>\n</li>\n</ol>\n<h3 id=\"Android中ThreadLocal的体现\"><a href=\"#Android中ThreadLocal的体现\" class=\"headerlink\" title=\"Android中ThreadLocal的体现\"></a>Android中ThreadLocal的体现</h3><h4 id=\"Handler消息机制\"><a href=\"#Handler消息机制\" class=\"headerlink\" title=\"Handler消息机制\"></a>Handler消息机制</h4><p>熟悉Handler机制的都知道</p>\n<p>在ActivityThread的main方法中Looper.prepareMainLooper();或者在自己创建的线程中Looper.pepare()的时候</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">(<span class=\"keyword\">boolean</span> quitAllowed)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (sThreadLocal.get() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Only one Looper may be created per thread\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    sThreadLocal.set(<span class=\"keyword\">new</span> Looper(quitAllowed));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>创建了一个Looper对象并使用sThreadLocal的set方法进行保存</p>\n<p>并且这个ThreadLocal在Looper类中是静态的，如下</p>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tNc79gy1foylpjjmbuj31jg0w6k0i.jpg\" alt=\"\"></p>\n<p>那就是说，这个静态的ThreadLocal，可以供任何线程访问，但是任意线程中取出来的looper，都只是线程局部变量，都是在副本</p>\n<p>所以说，每个线程对应一个looper，</p>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tNc79gy1foylttuf5dj31i40ectj5.jpg\" alt=\"\"></p>\n<p><strong>对于ThreadLocal的总结，暂时整理到这里，后续补充 ♨</strong></p>"},{"title":"Webview使用总结","date":"2017-03-12T08:00:27.000Z","password":123456,"_content":"\nWebView相关知识整理\n\n<!--more-->\n\n### WebView使用总结\n\n**前言：**\n\n最近，修改了项目中网页中点击图片跳转查看大图页面的需求，激发了我归纳总结WebView的想法，今天再次整理一下。\n\n包含：使用过程，关键类，js交互，注意事项，以及几个常见的需求解决思路等。\n\n献上一张框架图\n\n![](http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/kd4ef.jpg)\n\n\n\n### 基本简介\n\n#### 内核\n\n在4.4以前的版本是WebKit的内核，4.4以后才换成chromium的内核\n\n可使用第三方WebView组件Crosswalk和TBS服务，具体区别后面再整理\n\n#### 作用\n\n- 显示和渲染web页面\n- 直接加载Html文件（网络或者本地asserts）\n- 与js互调\n\n#### 状态\n\n- webView.onResume() ；\n\n激活WebView为活跃状态，能正常执行网页的响应\n\n- webView.onPause()；\n\n当页面被失去焦点被切换到后台不可见状态，需要执行onPause，通过onPause动作通知内核暂停所有的动作，比如DOM的解析、plugin的执行、JavaScript执行。\n\n- webView.pauseTimers()\n\n[Webview后台耗电的问题](http://blog.csdn.net/mingli198611/article/details/49385557)\n\n当应用程序(存在webview)被切换到后台时，需要暂停所有webview的layout，parsing，javascripttimer。降低CPU功耗。\n\n可以调用此方法\n\n- webView.resumeTimers()\n\n恢复pauseTimers状态\n\n**注意：**\n\n由于pauseTimers和resumeTimers是全局生效的, 并不只影响单个WebView, resumeTimers注意不要遗漏, 否则遗漏的WebView会出现异常. 最好在重写的WebView\n\n- rootLayout.removeView(webView); \n- webView.destroy();\n\n销毁Webview，在关闭了Activity时，如果Webview的音乐或视频，还在播放。就必须销毁Webview\n\n但是注意：webview调用destory时,webview仍绑定在Activity上\n\n这是由于自定义webview构建时传入了该Activity的context对象\n\n因此需要先从父容器中移除webview,然后再销毁webview:\n\n#### 前进回退网页\n\n- Webview.canGoBack() \n\n是否可以后退\n\n- Webview.goBack()\n\n后退网页\n\n- Webview.canGoForward()\n\n是否可以前进 \n\n- Webview.goForward()\n\n前进网页\n\n- Webview.goBackOrForward(intsteps) \n\n以当前的index为起始点前进或者后退到历史记录中指定的steps\n\n如果steps为负数则为后退，正数则为前进\n\n**常见用法：**\n\n- 问题\n\n在不做任何处理前提下 ，浏览网页时点击系统的“Back”键,整个 Browser 会调用 finish()而结束自身\n\n- 目标\n\n点击返回后，是网页回退而不是推出浏览器\n\n- 解决方案\n\n在当前Activity中处理并消费掉该 Back 事件\n\n```java\npublic boolean onKeyDown(int keyCode, KeyEvent event) {\n    if ((keyCode == KEYCODE_BACK) && mWebView.canGoBack()) { \n        mWebView.goBack();\n        return true;\n    }\n    return super.onKeyDown(keyCode, event);\n}\n```\n\n\n\n### 常用类\n\n#### WebSettings\n\n```java\n//声明WebSettings子类\nWebSettings webSettings = webView.getSettings();\n\n//如果访问的页面中要与Javascript交互，则webview必须设置支持Javascript\nwebSettings.setJavaScriptEnabled(true);  \n\n//支持插件\nwebSettings.setPluginsEnabled(true); \n\n//设置自适应屏幕，两者合用\nwebSettings.setUseWideViewPort(true); //将图片调整到适合webview的大小 \nwebSettings.setLoadWithOverviewMode(true); // 缩放至屏幕的大小\n\n//缩放操作\nwebSettings.setSupportZoom(true); //支持缩放，默认为true。是下面那个的前提。\nwebSettings.setBuiltInZoomControls(true); //设置内置的缩放控件。若为false，则该WebView不可缩放\nwebSettings.setDisplayZoomControls(false); //隐藏原生的缩放控件\n\n//其他细节操作\nwebSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); //关闭webview中缓存 \nwebSettings.setAllowFileAccess(true); //设置可以访问文件 \nwebSettings.setJavaScriptCanOpenWindowsAutomatically(true); //支持通过JS打开新窗口 \nwebSettings.setLoadsImagesAutomatically(true); //支持自动加载图片\nwebSettings.setDefaultTextEncodingName(\"utf-8\");//设置编码格式\n//优先使用缓存: \nwebSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); \n        //缓存模式如下：\n        //LOAD_CACHE_ONLY: 不使用网络，只读取本地缓存数据\n        //LOAD_DEFAULT: （默认）根据cache-control决定是否从网络上取数据。\n        //LOAD_NO_CACHE: 不使用缓存，只从网络获取数据.\n        //LOAD_CACHE_ELSE_NETWORK，只要本地有，无论是否过期，或者no-cache，都使用缓存中的数据。\n```\n\n**常见缓存用法**\n\n```java\nif (NetStatusUtil.isConnected(getApplicationContext())) {\n    webSettings.setCacheMode(WebSettings.LOAD_DEFAULT);//根据cache-control决定是否从网络上取数据。\n} else {\n    webSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);//没网，则从本地获取，即离线加载\n}\n\nwebSettings.setDomStorageEnabled(true); // 开启 DOM storage API 功能\nwebSettings.setDatabaseEnabled(true);   //开启 database storage API 功能\nwebSettings.setAppCacheEnabled(true);//开启 Application Caches 功能\n\nString cacheDirPath = getFilesDir().getAbsolutePath() + APP_CACAHE_DIRNAME;\nwebSettings.setAppCachePath(cacheDirPath); //设置  Application Caches 缓存目录\n```\n\n**每个 Application 只调用一次 WebSettings.setAppCachePath()，WebSettings.setAppCacheMaxSize()**\n\n#### WebViewClient\n\n##### **主要辅助WebView处理各种通知、请求事件**\n\n```java\nnew WebViewClient(){\n//            使得打开网页时不调用系统浏览器， 而是在本WebView中显示\n            @Override\n            public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {\n                return super.shouldOverrideUrlLoading(view, request);\n            }\n\n//            开始载入页面调用的，我们可以设定一个loading的页面，告诉用户程序在等待网络响应。\n            @Override\n            public void onPageStarted(WebView view, String url, Bitmap favicon) {\n                super.onPageStarted(view, url, favicon);\n            }\n\n//            在页面加载结束时调用。我们可以关闭loading 条，切换程序动作。\n            @Override\n            public void onPageFinished(WebView view, String url) {\n                super.onPageFinished(view, url);\n            }\n\n//            在加载页面资源时会调用，每一个资源（比如图片）的加载都会调用一次。\n            @Override\n            public void onLoadResource(WebView view, String url) {\n                super.onLoadResource(view, url);\n            }\n\n//            该方法传回了错误码，根据错误类型可以进行不同的错误分类处理\n            @Override\n            public void onReceivedError(WebView view, WebResourceRequest request, WebResourceError error) {\n                super.onReceivedError(view, request, error);\n            }\n\n//            webView默认是不处理https请求的，页面显示空白，需要进行如下设置：\n            @Override\n            public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {\n//                super.onReceivedSslError(view, handler, error);\n                handler.proceed();    //表示等待证书响应\n                // handler.cancel();      //表示挂起连接，为默认方式\n                // handler.handleMessage(null);    //可做其他处理\n            }\n        };\n```\n\n\n\n#### WebChromClient\n\n**辅助 WebView 处理 Javascript 的对话框,网站图标,网站标题等等。**\n\n- 获得网页的加载进度并显示\n\n```java\nwebview.setWebChromeClient(new WebChromeClient(){\n\n      @Override\n      public void onProgressChanged(WebView view, int newProgress) {\n          if (newProgress < 100) {\n              String progress = newProgress + \"%\";\n              progress.setText(progress);\n            } else {\n        }\n    });\n```\n\n- **onReceivedTitle（）**\n\n```java\nwebview.setWebChromeClient(new WebChromeClient(){\n\n    @Override\n    public void onReceivedTitle(WebView view, String title) {\n       titleview.setText(title)；\n    }\n```\n\n### JS交互\n\n[原文](http://blog.csdn.net/carson_ho/article/details/64904691)\n\n![](http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/o45jt.png)\n\n#### Android调Js\n\n![](http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/1m6qx.png)\n\n**使用建议**\n\n两种方法混合使用，即Android 4.4以下使用方法1，Android 4.4以上方法2\n\n```java\n// Android版本变量\nfinal int version = Build.VERSION.SDK_INT;\n// 因为该方法在 Android 4.4 版本才可使用，所以使用时需进行版本判断\nif (version < 18) {\n    mWebView.loadUrl(\"javascript:callJS()\");\n} else {\n    mWebView.evaluateJavascript（\"javascript:callJS()\", new ValueCallback<String>() {\n        @Override\n        public void onReceiveValue(String value) {\n            //此处为 js 返回的结果\n        }\n    });\n}\n```\n\n##### 通过loadUrl方式调用js\n\nHtml代码\n\n```html\n// 文本名：javascript\n<!DOCTYPE html>\n<html>\n\n   <head>\n      <meta charset=\"utf-8\">\n      <title>Carson_Ho</title>\n\n// JS代码\n     <script>\n// Android需要调用的方法\n   function callJS(){\n      alert(\"Android调用了JS的callJS方法\");\n   }\n</script>\n\n   </head>\n\n</html>\n```\n\nAndroid代码\n\n```java\n // 设置与Js交互的权限\n        webSettings.setJavaScriptEnabled(true);\n        // 设置允许JS弹窗\n        webSettings.setJavaScriptCanOpenWindowsAutomatically(true);\n\n        // 先载入JS代码\n        // 格式规定为:file:///android_asset/文件名.html\n        mWebView.loadUrl(\"file:///android_asset/javascript.html\");\n\n        button = (Button) findViewById(R.id.button);\n\n\n        button.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                // 必须另开线程进行JS方法调用(否则无法调用)\n                mWebView.post(new Runnable() {\n                    @Override\n                    public void run() {\n\n                        // 注意调用的JS方法名要对应上\n                        // 调用javascript的callJS()方法\n                        mWebView.loadUrl(\"javascript:callJS()\");\n                    }\n                });\n\n            }\n        });\n\n        // 由于设置了弹窗检验调用结果,所以需要支持js对话框\n        // webview只是载体，内容的渲染需要使用webviewChromClient类去实现\n        // 通过设置WebChromeClient对象处理JavaScript的对话框\n        //设置响应js 的Alert()函数\n        mWebView.setWebChromeClient(new WebChromeClient() {\n            @Override\n            public boolean onJsAlert(WebView view, String url, String message, final JsResult result) {\n                AlertDialog.Builder b = new AlertDialog.Builder(MainActivity.this);\n                b.setTitle(\"Alert\");\n                b.setMessage(message);\n                b.setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n                        result.confirm();\n                    }\n                });\n                b.setCancelable(false);\n                b.create().show();\n                return true;\n            }\n\n        });\n\n\n    }\n```\n\n**特别注意：JS代码调用一定要在 onPageFinished（） 回调之后才能调用，否则不会调用。**\n\n`onPageFinished()`属于WebViewClient类的方法，主要在页面加载结束时调用\n\n所以一般等onPageFnished回调之后，我们才显示H5的页面，加载未完全的时候，则显示loading页面\n\n##### 通过evaluateJavascript调用js\n\n**优点**\n\n该方法比第一种方法效率更高、使用更简洁。\n\n- 因为该方法的执行不会使页面刷新，而第一种方法（loadUrl ）的执行则会。\n- Android 4.4 后才可使用\n\n```java\n// 只需要将第一种方法的loadUrl()换成下面该方法即可\n    mWebView.evaluateJavascript（\"javascript:callJS()\", new ValueCallback<String>() {\n        @Override\n        public void onReceiveValue(String value) {\n            //此处为 js 返回的结果\n        }\n    });\n}\n```\n\n\n\n#### Js调Android\n\n![](http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/vhjwh.png)\n\n### 缓存问题\n\n[原文](https://www.jianshu.com/p/f1efb0928ebc)\n\n### 参考链接\n\n[Carson_Ho](http://blog.csdn.net/carson_ho/article/details/52693322)\n\n","source":"_posts/Webview使用总结.md","raw":"---\ntitle: Webview使用总结\ndate: 2017-03-12 16:00:27\ntags: \n- Android\ncategories: Android\npassword: 123456\n---\n\nWebView相关知识整理\n\n<!--more-->\n\n### WebView使用总结\n\n**前言：**\n\n最近，修改了项目中网页中点击图片跳转查看大图页面的需求，激发了我归纳总结WebView的想法，今天再次整理一下。\n\n包含：使用过程，关键类，js交互，注意事项，以及几个常见的需求解决思路等。\n\n献上一张框架图\n\n![](http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/kd4ef.jpg)\n\n\n\n### 基本简介\n\n#### 内核\n\n在4.4以前的版本是WebKit的内核，4.4以后才换成chromium的内核\n\n可使用第三方WebView组件Crosswalk和TBS服务，具体区别后面再整理\n\n#### 作用\n\n- 显示和渲染web页面\n- 直接加载Html文件（网络或者本地asserts）\n- 与js互调\n\n#### 状态\n\n- webView.onResume() ；\n\n激活WebView为活跃状态，能正常执行网页的响应\n\n- webView.onPause()；\n\n当页面被失去焦点被切换到后台不可见状态，需要执行onPause，通过onPause动作通知内核暂停所有的动作，比如DOM的解析、plugin的执行、JavaScript执行。\n\n- webView.pauseTimers()\n\n[Webview后台耗电的问题](http://blog.csdn.net/mingli198611/article/details/49385557)\n\n当应用程序(存在webview)被切换到后台时，需要暂停所有webview的layout，parsing，javascripttimer。降低CPU功耗。\n\n可以调用此方法\n\n- webView.resumeTimers()\n\n恢复pauseTimers状态\n\n**注意：**\n\n由于pauseTimers和resumeTimers是全局生效的, 并不只影响单个WebView, resumeTimers注意不要遗漏, 否则遗漏的WebView会出现异常. 最好在重写的WebView\n\n- rootLayout.removeView(webView); \n- webView.destroy();\n\n销毁Webview，在关闭了Activity时，如果Webview的音乐或视频，还在播放。就必须销毁Webview\n\n但是注意：webview调用destory时,webview仍绑定在Activity上\n\n这是由于自定义webview构建时传入了该Activity的context对象\n\n因此需要先从父容器中移除webview,然后再销毁webview:\n\n#### 前进回退网页\n\n- Webview.canGoBack() \n\n是否可以后退\n\n- Webview.goBack()\n\n后退网页\n\n- Webview.canGoForward()\n\n是否可以前进 \n\n- Webview.goForward()\n\n前进网页\n\n- Webview.goBackOrForward(intsteps) \n\n以当前的index为起始点前进或者后退到历史记录中指定的steps\n\n如果steps为负数则为后退，正数则为前进\n\n**常见用法：**\n\n- 问题\n\n在不做任何处理前提下 ，浏览网页时点击系统的“Back”键,整个 Browser 会调用 finish()而结束自身\n\n- 目标\n\n点击返回后，是网页回退而不是推出浏览器\n\n- 解决方案\n\n在当前Activity中处理并消费掉该 Back 事件\n\n```java\npublic boolean onKeyDown(int keyCode, KeyEvent event) {\n    if ((keyCode == KEYCODE_BACK) && mWebView.canGoBack()) { \n        mWebView.goBack();\n        return true;\n    }\n    return super.onKeyDown(keyCode, event);\n}\n```\n\n\n\n### 常用类\n\n#### WebSettings\n\n```java\n//声明WebSettings子类\nWebSettings webSettings = webView.getSettings();\n\n//如果访问的页面中要与Javascript交互，则webview必须设置支持Javascript\nwebSettings.setJavaScriptEnabled(true);  \n\n//支持插件\nwebSettings.setPluginsEnabled(true); \n\n//设置自适应屏幕，两者合用\nwebSettings.setUseWideViewPort(true); //将图片调整到适合webview的大小 \nwebSettings.setLoadWithOverviewMode(true); // 缩放至屏幕的大小\n\n//缩放操作\nwebSettings.setSupportZoom(true); //支持缩放，默认为true。是下面那个的前提。\nwebSettings.setBuiltInZoomControls(true); //设置内置的缩放控件。若为false，则该WebView不可缩放\nwebSettings.setDisplayZoomControls(false); //隐藏原生的缩放控件\n\n//其他细节操作\nwebSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); //关闭webview中缓存 \nwebSettings.setAllowFileAccess(true); //设置可以访问文件 \nwebSettings.setJavaScriptCanOpenWindowsAutomatically(true); //支持通过JS打开新窗口 \nwebSettings.setLoadsImagesAutomatically(true); //支持自动加载图片\nwebSettings.setDefaultTextEncodingName(\"utf-8\");//设置编码格式\n//优先使用缓存: \nwebSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); \n        //缓存模式如下：\n        //LOAD_CACHE_ONLY: 不使用网络，只读取本地缓存数据\n        //LOAD_DEFAULT: （默认）根据cache-control决定是否从网络上取数据。\n        //LOAD_NO_CACHE: 不使用缓存，只从网络获取数据.\n        //LOAD_CACHE_ELSE_NETWORK，只要本地有，无论是否过期，或者no-cache，都使用缓存中的数据。\n```\n\n**常见缓存用法**\n\n```java\nif (NetStatusUtil.isConnected(getApplicationContext())) {\n    webSettings.setCacheMode(WebSettings.LOAD_DEFAULT);//根据cache-control决定是否从网络上取数据。\n} else {\n    webSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);//没网，则从本地获取，即离线加载\n}\n\nwebSettings.setDomStorageEnabled(true); // 开启 DOM storage API 功能\nwebSettings.setDatabaseEnabled(true);   //开启 database storage API 功能\nwebSettings.setAppCacheEnabled(true);//开启 Application Caches 功能\n\nString cacheDirPath = getFilesDir().getAbsolutePath() + APP_CACAHE_DIRNAME;\nwebSettings.setAppCachePath(cacheDirPath); //设置  Application Caches 缓存目录\n```\n\n**每个 Application 只调用一次 WebSettings.setAppCachePath()，WebSettings.setAppCacheMaxSize()**\n\n#### WebViewClient\n\n##### **主要辅助WebView处理各种通知、请求事件**\n\n```java\nnew WebViewClient(){\n//            使得打开网页时不调用系统浏览器， 而是在本WebView中显示\n            @Override\n            public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {\n                return super.shouldOverrideUrlLoading(view, request);\n            }\n\n//            开始载入页面调用的，我们可以设定一个loading的页面，告诉用户程序在等待网络响应。\n            @Override\n            public void onPageStarted(WebView view, String url, Bitmap favicon) {\n                super.onPageStarted(view, url, favicon);\n            }\n\n//            在页面加载结束时调用。我们可以关闭loading 条，切换程序动作。\n            @Override\n            public void onPageFinished(WebView view, String url) {\n                super.onPageFinished(view, url);\n            }\n\n//            在加载页面资源时会调用，每一个资源（比如图片）的加载都会调用一次。\n            @Override\n            public void onLoadResource(WebView view, String url) {\n                super.onLoadResource(view, url);\n            }\n\n//            该方法传回了错误码，根据错误类型可以进行不同的错误分类处理\n            @Override\n            public void onReceivedError(WebView view, WebResourceRequest request, WebResourceError error) {\n                super.onReceivedError(view, request, error);\n            }\n\n//            webView默认是不处理https请求的，页面显示空白，需要进行如下设置：\n            @Override\n            public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {\n//                super.onReceivedSslError(view, handler, error);\n                handler.proceed();    //表示等待证书响应\n                // handler.cancel();      //表示挂起连接，为默认方式\n                // handler.handleMessage(null);    //可做其他处理\n            }\n        };\n```\n\n\n\n#### WebChromClient\n\n**辅助 WebView 处理 Javascript 的对话框,网站图标,网站标题等等。**\n\n- 获得网页的加载进度并显示\n\n```java\nwebview.setWebChromeClient(new WebChromeClient(){\n\n      @Override\n      public void onProgressChanged(WebView view, int newProgress) {\n          if (newProgress < 100) {\n              String progress = newProgress + \"%\";\n              progress.setText(progress);\n            } else {\n        }\n    });\n```\n\n- **onReceivedTitle（）**\n\n```java\nwebview.setWebChromeClient(new WebChromeClient(){\n\n    @Override\n    public void onReceivedTitle(WebView view, String title) {\n       titleview.setText(title)；\n    }\n```\n\n### JS交互\n\n[原文](http://blog.csdn.net/carson_ho/article/details/64904691)\n\n![](http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/o45jt.png)\n\n#### Android调Js\n\n![](http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/1m6qx.png)\n\n**使用建议**\n\n两种方法混合使用，即Android 4.4以下使用方法1，Android 4.4以上方法2\n\n```java\n// Android版本变量\nfinal int version = Build.VERSION.SDK_INT;\n// 因为该方法在 Android 4.4 版本才可使用，所以使用时需进行版本判断\nif (version < 18) {\n    mWebView.loadUrl(\"javascript:callJS()\");\n} else {\n    mWebView.evaluateJavascript（\"javascript:callJS()\", new ValueCallback<String>() {\n        @Override\n        public void onReceiveValue(String value) {\n            //此处为 js 返回的结果\n        }\n    });\n}\n```\n\n##### 通过loadUrl方式调用js\n\nHtml代码\n\n```html\n// 文本名：javascript\n<!DOCTYPE html>\n<html>\n\n   <head>\n      <meta charset=\"utf-8\">\n      <title>Carson_Ho</title>\n\n// JS代码\n     <script>\n// Android需要调用的方法\n   function callJS(){\n      alert(\"Android调用了JS的callJS方法\");\n   }\n</script>\n\n   </head>\n\n</html>\n```\n\nAndroid代码\n\n```java\n // 设置与Js交互的权限\n        webSettings.setJavaScriptEnabled(true);\n        // 设置允许JS弹窗\n        webSettings.setJavaScriptCanOpenWindowsAutomatically(true);\n\n        // 先载入JS代码\n        // 格式规定为:file:///android_asset/文件名.html\n        mWebView.loadUrl(\"file:///android_asset/javascript.html\");\n\n        button = (Button) findViewById(R.id.button);\n\n\n        button.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                // 必须另开线程进行JS方法调用(否则无法调用)\n                mWebView.post(new Runnable() {\n                    @Override\n                    public void run() {\n\n                        // 注意调用的JS方法名要对应上\n                        // 调用javascript的callJS()方法\n                        mWebView.loadUrl(\"javascript:callJS()\");\n                    }\n                });\n\n            }\n        });\n\n        // 由于设置了弹窗检验调用结果,所以需要支持js对话框\n        // webview只是载体，内容的渲染需要使用webviewChromClient类去实现\n        // 通过设置WebChromeClient对象处理JavaScript的对话框\n        //设置响应js 的Alert()函数\n        mWebView.setWebChromeClient(new WebChromeClient() {\n            @Override\n            public boolean onJsAlert(WebView view, String url, String message, final JsResult result) {\n                AlertDialog.Builder b = new AlertDialog.Builder(MainActivity.this);\n                b.setTitle(\"Alert\");\n                b.setMessage(message);\n                b.setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n                        result.confirm();\n                    }\n                });\n                b.setCancelable(false);\n                b.create().show();\n                return true;\n            }\n\n        });\n\n\n    }\n```\n\n**特别注意：JS代码调用一定要在 onPageFinished（） 回调之后才能调用，否则不会调用。**\n\n`onPageFinished()`属于WebViewClient类的方法，主要在页面加载结束时调用\n\n所以一般等onPageFnished回调之后，我们才显示H5的页面，加载未完全的时候，则显示loading页面\n\n##### 通过evaluateJavascript调用js\n\n**优点**\n\n该方法比第一种方法效率更高、使用更简洁。\n\n- 因为该方法的执行不会使页面刷新，而第一种方法（loadUrl ）的执行则会。\n- Android 4.4 后才可使用\n\n```java\n// 只需要将第一种方法的loadUrl()换成下面该方法即可\n    mWebView.evaluateJavascript（\"javascript:callJS()\", new ValueCallback<String>() {\n        @Override\n        public void onReceiveValue(String value) {\n            //此处为 js 返回的结果\n        }\n    });\n}\n```\n\n\n\n#### Js调Android\n\n![](http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/vhjwh.png)\n\n### 缓存问题\n\n[原文](https://www.jianshu.com/p/f1efb0928ebc)\n\n### 参考链接\n\n[Carson_Ho](http://blog.csdn.net/carson_ho/article/details/52693322)\n\n","slug":"Webview使用总结","published":1,"updated":"2018-07-19T02:18:11.570Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6mw001n1kyg2tf6ssme","content":"<p>WebView相关知识整理</p>\n<a id=\"more\"></a>\n<h3 id=\"WebView使用总结\"><a href=\"#WebView使用总结\" class=\"headerlink\" title=\"WebView使用总结\"></a>WebView使用总结</h3><p><strong>前言：</strong></p>\n<p>最近，修改了项目中网页中点击图片跳转查看大图页面的需求，激发了我归纳总结WebView的想法，今天再次整理一下。</p>\n<p>包含：使用过程，关键类，js交互，注意事项，以及几个常见的需求解决思路等。</p>\n<p>献上一张框架图</p>\n<p><img src=\"http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/kd4ef.jpg\" alt=\"\"></p>\n<h3 id=\"基本简介\"><a href=\"#基本简介\" class=\"headerlink\" title=\"基本简介\"></a>基本简介</h3><h4 id=\"内核\"><a href=\"#内核\" class=\"headerlink\" title=\"内核\"></a>内核</h4><p>在4.4以前的版本是WebKit的内核，4.4以后才换成chromium的内核</p>\n<p>可使用第三方WebView组件Crosswalk和TBS服务，具体区别后面再整理</p>\n<h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h4><ul>\n<li>显示和渲染web页面</li>\n<li>直接加载Html文件（网络或者本地asserts）</li>\n<li>与js互调</li>\n</ul>\n<h4 id=\"状态\"><a href=\"#状态\" class=\"headerlink\" title=\"状态\"></a>状态</h4><ul>\n<li>webView.onResume() ；</li>\n</ul>\n<p>激活WebView为活跃状态，能正常执行网页的响应</p>\n<ul>\n<li>webView.onPause()；</li>\n</ul>\n<p>当页面被失去焦点被切换到后台不可见状态，需要执行onPause，通过onPause动作通知内核暂停所有的动作，比如DOM的解析、plugin的执行、JavaScript执行。</p>\n<ul>\n<li>webView.pauseTimers()</li>\n</ul>\n<p><a href=\"http://blog.csdn.net/mingli198611/article/details/49385557\" target=\"_blank\" rel=\"external\">Webview后台耗电的问题</a></p>\n<p>当应用程序(存在webview)被切换到后台时，需要暂停所有webview的layout，parsing，javascripttimer。降低CPU功耗。</p>\n<p>可以调用此方法</p>\n<ul>\n<li>webView.resumeTimers()</li>\n</ul>\n<p>恢复pauseTimers状态</p>\n<p><strong>注意：</strong></p>\n<p>由于pauseTimers和resumeTimers是全局生效的, 并不只影响单个WebView, resumeTimers注意不要遗漏, 否则遗漏的WebView会出现异常. 最好在重写的WebView</p>\n<ul>\n<li>rootLayout.removeView(webView); </li>\n<li>webView.destroy();</li>\n</ul>\n<p>销毁Webview，在关闭了Activity时，如果Webview的音乐或视频，还在播放。就必须销毁Webview</p>\n<p>但是注意：webview调用destory时,webview仍绑定在Activity上</p>\n<p>这是由于自定义webview构建时传入了该Activity的context对象</p>\n<p>因此需要先从父容器中移除webview,然后再销毁webview:</p>\n<h4 id=\"前进回退网页\"><a href=\"#前进回退网页\" class=\"headerlink\" title=\"前进回退网页\"></a>前进回退网页</h4><ul>\n<li>Webview.canGoBack() </li>\n</ul>\n<p>是否可以后退</p>\n<ul>\n<li>Webview.goBack()</li>\n</ul>\n<p>后退网页</p>\n<ul>\n<li>Webview.canGoForward()</li>\n</ul>\n<p>是否可以前进 </p>\n<ul>\n<li>Webview.goForward()</li>\n</ul>\n<p>前进网页</p>\n<ul>\n<li>Webview.goBackOrForward(intsteps) </li>\n</ul>\n<p>以当前的index为起始点前进或者后退到历史记录中指定的steps</p>\n<p>如果steps为负数则为后退，正数则为前进</p>\n<p><strong>常见用法：</strong></p>\n<ul>\n<li>问题</li>\n</ul>\n<p>在不做任何处理前提下 ，浏览网页时点击系统的“Back”键,整个 Browser 会调用 finish()而结束自身</p>\n<ul>\n<li>目标</li>\n</ul>\n<p>点击返回后，是网页回退而不是推出浏览器</p>\n<ul>\n<li>解决方案</li>\n</ul>\n<p>在当前Activity中处理并消费掉该 Back 事件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onKeyDown</span><span class=\"params\">(<span class=\"keyword\">int</span> keyCode, KeyEvent event)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ((keyCode == KEYCODE_BACK) &amp;&amp; mWebView.canGoBack()) &#123; </div><div class=\"line\">        mWebView.goBack();</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onKeyDown(keyCode, event);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"常用类\"><a href=\"#常用类\" class=\"headerlink\" title=\"常用类\"></a>常用类</h3><h4 id=\"WebSettings\"><a href=\"#WebSettings\" class=\"headerlink\" title=\"WebSettings\"></a>WebSettings</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//声明WebSettings子类</span></div><div class=\"line\">WebSettings webSettings = webView.getSettings();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//如果访问的页面中要与Javascript交互，则webview必须设置支持Javascript</span></div><div class=\"line\">webSettings.setJavaScriptEnabled(<span class=\"keyword\">true</span>);  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//支持插件</span></div><div class=\"line\">webSettings.setPluginsEnabled(<span class=\"keyword\">true</span>); </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//设置自适应屏幕，两者合用</span></div><div class=\"line\">webSettings.setUseWideViewPort(<span class=\"keyword\">true</span>); <span class=\"comment\">//将图片调整到适合webview的大小 </span></div><div class=\"line\">webSettings.setLoadWithOverviewMode(<span class=\"keyword\">true</span>); <span class=\"comment\">// 缩放至屏幕的大小</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//缩放操作</span></div><div class=\"line\">webSettings.setSupportZoom(<span class=\"keyword\">true</span>); <span class=\"comment\">//支持缩放，默认为true。是下面那个的前提。</span></div><div class=\"line\">webSettings.setBuiltInZoomControls(<span class=\"keyword\">true</span>); <span class=\"comment\">//设置内置的缩放控件。若为false，则该WebView不可缩放</span></div><div class=\"line\">webSettings.setDisplayZoomControls(<span class=\"keyword\">false</span>); <span class=\"comment\">//隐藏原生的缩放控件</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//其他细节操作</span></div><div class=\"line\">webSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); <span class=\"comment\">//关闭webview中缓存 </span></div><div class=\"line\">webSettings.setAllowFileAccess(<span class=\"keyword\">true</span>); <span class=\"comment\">//设置可以访问文件 </span></div><div class=\"line\">webSettings.setJavaScriptCanOpenWindowsAutomatically(<span class=\"keyword\">true</span>); <span class=\"comment\">//支持通过JS打开新窗口 </span></div><div class=\"line\">webSettings.setLoadsImagesAutomatically(<span class=\"keyword\">true</span>); <span class=\"comment\">//支持自动加载图片</span></div><div class=\"line\">webSettings.setDefaultTextEncodingName(<span class=\"string\">\"utf-8\"</span>);<span class=\"comment\">//设置编码格式</span></div><div class=\"line\"><span class=\"comment\">//优先使用缓存: </span></div><div class=\"line\">webSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); </div><div class=\"line\">        <span class=\"comment\">//缓存模式如下：</span></div><div class=\"line\">        <span class=\"comment\">//LOAD_CACHE_ONLY: 不使用网络，只读取本地缓存数据</span></div><div class=\"line\">        <span class=\"comment\">//LOAD_DEFAULT: （默认）根据cache-control决定是否从网络上取数据。</span></div><div class=\"line\">        <span class=\"comment\">//LOAD_NO_CACHE: 不使用缓存，只从网络获取数据.</span></div><div class=\"line\">        <span class=\"comment\">//LOAD_CACHE_ELSE_NETWORK，只要本地有，无论是否过期，或者no-cache，都使用缓存中的数据。</span></div></pre></td></tr></table></figure>\n<p><strong>常见缓存用法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (NetStatusUtil.isConnected(getApplicationContext())) &#123;</div><div class=\"line\">    webSettings.setCacheMode(WebSettings.LOAD_DEFAULT);<span class=\"comment\">//根据cache-control决定是否从网络上取数据。</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    webSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);<span class=\"comment\">//没网，则从本地获取，即离线加载</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">webSettings.setDomStorageEnabled(<span class=\"keyword\">true</span>); <span class=\"comment\">// 开启 DOM storage API 功能</span></div><div class=\"line\">webSettings.setDatabaseEnabled(<span class=\"keyword\">true</span>);   <span class=\"comment\">//开启 database storage API 功能</span></div><div class=\"line\">webSettings.setAppCacheEnabled(<span class=\"keyword\">true</span>);<span class=\"comment\">//开启 Application Caches 功能</span></div><div class=\"line\"></div><div class=\"line\">String cacheDirPath = getFilesDir().getAbsolutePath() + APP_CACAHE_DIRNAME;</div><div class=\"line\">webSettings.setAppCachePath(cacheDirPath); <span class=\"comment\">//设置  Application Caches 缓存目录</span></div></pre></td></tr></table></figure>\n<p><strong>每个 Application 只调用一次 WebSettings.setAppCachePath()，WebSettings.setAppCacheMaxSize()</strong></p>\n<h4 id=\"WebViewClient\"><a href=\"#WebViewClient\" class=\"headerlink\" title=\"WebViewClient\"></a>WebViewClient</h4><h5 id=\"主要辅助WebView处理各种通知、请求事件\"><a href=\"#主要辅助WebView处理各种通知、请求事件\" class=\"headerlink\" title=\"主要辅助WebView处理各种通知、请求事件\"></a><strong>主要辅助WebView处理各种通知、请求事件</strong></h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> WebViewClient()&#123;</div><div class=\"line\"><span class=\"comment\">//            使得打开网页时不调用系统浏览器， 而是在本WebView中显示</span></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, WebResourceRequest request)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.shouldOverrideUrlLoading(view, request);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//            开始载入页面调用的，我们可以设定一个loading的页面，告诉用户程序在等待网络响应。</span></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageStarted</span><span class=\"params\">(WebView view, String url, Bitmap favicon)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.onPageStarted(view, url, favicon);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//            在页面加载结束时调用。我们可以关闭loading 条，切换程序动作。</span></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageFinished</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.onPageFinished(view, url);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//            在加载页面资源时会调用，每一个资源（比如图片）的加载都会调用一次。</span></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoadResource</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.onLoadResource(view, url);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//            该方法传回了错误码，根据错误类型可以进行不同的错误分类处理</span></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceivedError</span><span class=\"params\">(WebView view, WebResourceRequest request, WebResourceError error)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.onReceivedError(view, request, error);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//            webView默认是不处理https请求的，页面显示空白，需要进行如下设置：</span></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceivedSslError</span><span class=\"params\">(WebView view, SslErrorHandler handler, SslError error)</span> </span>&#123;</div><div class=\"line\"><span class=\"comment\">//                super.onReceivedSslError(view, handler, error);</span></div><div class=\"line\">                handler.proceed();    <span class=\"comment\">//表示等待证书响应</span></div><div class=\"line\">                <span class=\"comment\">// handler.cancel();      //表示挂起连接，为默认方式</span></div><div class=\"line\">                <span class=\"comment\">// handler.handleMessage(null);    //可做其他处理</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div></pre></td></tr></table></figure>\n<h4 id=\"WebChromClient\"><a href=\"#WebChromClient\" class=\"headerlink\" title=\"WebChromClient\"></a>WebChromClient</h4><p><strong>辅助 WebView 处理 Javascript 的对话框,网站图标,网站标题等等。</strong></p>\n<ul>\n<li>获得网页的加载进度并显示</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">webview.setWebChromeClient(<span class=\"keyword\">new</span> WebChromeClient()&#123;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onProgressChanged</span><span class=\"params\">(WebView view, <span class=\"keyword\">int</span> newProgress)</span> </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (newProgress &lt; <span class=\"number\">100</span>) &#123;</div><div class=\"line\">              String progress = newProgress + <span class=\"string\">\"%\"</span>;</div><div class=\"line\">              progress.setText(progress);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>onReceivedTitle（）</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">webview.setWebChromeClient(<span class=\"keyword\">new</span> WebChromeClient()&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceivedTitle</span><span class=\"params\">(WebView view, String title)</span> </span>&#123;</div><div class=\"line\">       titleview.setText(title)；</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"JS交互\"><a href=\"#JS交互\" class=\"headerlink\" title=\"JS交互\"></a>JS交互</h3><p><a href=\"http://blog.csdn.net/carson_ho/article/details/64904691\" target=\"_blank\" rel=\"external\">原文</a></p>\n<p><img src=\"http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/o45jt.png\" alt=\"\"></p>\n<h4 id=\"Android调Js\"><a href=\"#Android调Js\" class=\"headerlink\" title=\"Android调Js\"></a>Android调Js</h4><p><img src=\"http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/1m6qx.png\" alt=\"\"></p>\n<p><strong>使用建议</strong></p>\n<p>两种方法混合使用，即Android 4.4以下使用方法1，Android 4.4以上方法2</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Android版本变量</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> version = Build.VERSION.SDK_INT;</div><div class=\"line\"><span class=\"comment\">// 因为该方法在 Android 4.4 版本才可使用，所以使用时需进行版本判断</span></div><div class=\"line\"><span class=\"keyword\">if</span> (version &lt; <span class=\"number\">18</span>) &#123;</div><div class=\"line\">    mWebView.loadUrl(<span class=\"string\">\"javascript:callJS()\"</span>);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    mWebView.evaluateJavascript（<span class=\"string\">\"javascript:callJS()\"</span>, <span class=\"keyword\">new</span> ValueCallback&lt;String&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceiveValue</span><span class=\"params\">(String value)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">//此处为 js 返回的结果</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"通过loadUrl方式调用js\"><a href=\"#通过loadUrl方式调用js\" class=\"headerlink\" title=\"通过loadUrl方式调用js\"></a>通过loadUrl方式调用js</h5><p>Html代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 文本名：javascript</div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Carson_Ho<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">// JS代码</div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"actionscript\"></span></div><div class=\"line\"><span class=\"comment\">// Android需要调用的方法</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callJS</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      alert(<span class=\"string\">\"Android调用了JS的callJS方法\"</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Android代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 设置与Js交互的权限</span></div><div class=\"line\">       webSettings.setJavaScriptEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">       <span class=\"comment\">// 设置允许JS弹窗</span></div><div class=\"line\">       webSettings.setJavaScriptCanOpenWindowsAutomatically(<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// 先载入JS代码</span></div><div class=\"line\">       <span class=\"comment\">// 格式规定为:file:///android_asset/文件名.html</span></div><div class=\"line\">       mWebView.loadUrl(<span class=\"string\">\"file:///android_asset/javascript.html\"</span>);</div><div class=\"line\"></div><div class=\"line\">       button = (Button) findViewById(R.id.button);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">       button.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">               <span class=\"comment\">// 必须另开线程进行JS方法调用(否则无法调用)</span></div><div class=\"line\">               mWebView.post(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                   <span class=\"meta\">@Override</span></div><div class=\"line\">                   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">                       <span class=\"comment\">// 注意调用的JS方法名要对应上</span></div><div class=\"line\">                       <span class=\"comment\">// 调用javascript的callJS()方法</span></div><div class=\"line\">                       mWebView.loadUrl(<span class=\"string\">\"javascript:callJS()\"</span>);</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;);</div><div class=\"line\"></div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// 由于设置了弹窗检验调用结果,所以需要支持js对话框</span></div><div class=\"line\">       <span class=\"comment\">// webview只是载体，内容的渲染需要使用webviewChromClient类去实现</span></div><div class=\"line\">       <span class=\"comment\">// 通过设置WebChromeClient对象处理JavaScript的对话框</span></div><div class=\"line\">       <span class=\"comment\">//设置响应js 的Alert()函数</span></div><div class=\"line\">       mWebView.setWebChromeClient(<span class=\"keyword\">new</span> WebChromeClient() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onJsAlert</span><span class=\"params\">(WebView view, String url, String message, <span class=\"keyword\">final</span> JsResult result)</span> </span>&#123;</div><div class=\"line\">               AlertDialog.Builder b = <span class=\"keyword\">new</span> AlertDialog.Builder(MainActivity.<span class=\"keyword\">this</span>);</div><div class=\"line\">               b.setTitle(<span class=\"string\">\"Alert\"</span>);</div><div class=\"line\">               b.setMessage(message);</div><div class=\"line\">               b.setPositiveButton(android.R.string.ok, <span class=\"keyword\">new</span> DialogInterface.OnClickListener() &#123;</div><div class=\"line\">                   <span class=\"meta\">@Override</span></div><div class=\"line\">                   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(DialogInterface dialog, <span class=\"keyword\">int</span> which)</span> </span>&#123;</div><div class=\"line\">                       result.confirm();</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;);</div><div class=\"line\">               b.setCancelable(<span class=\"keyword\">false</span>);</div><div class=\"line\">               b.create().show();</div><div class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">       &#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p><strong>特别注意：JS代码调用一定要在 onPageFinished（） 回调之后才能调用，否则不会调用。</strong></p>\n<p><code>onPageFinished()</code>属于WebViewClient类的方法，主要在页面加载结束时调用</p>\n<p>所以一般等onPageFnished回调之后，我们才显示H5的页面，加载未完全的时候，则显示loading页面</p>\n<h5 id=\"通过evaluateJavascript调用js\"><a href=\"#通过evaluateJavascript调用js\" class=\"headerlink\" title=\"通过evaluateJavascript调用js\"></a>通过evaluateJavascript调用js</h5><p><strong>优点</strong></p>\n<p>该方法比第一种方法效率更高、使用更简洁。</p>\n<ul>\n<li>因为该方法的执行不会使页面刷新，而第一种方法（loadUrl ）的执行则会。</li>\n<li>Android 4.4 后才可使用</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 只需要将第一种方法的loadUrl()换成下面该方法即可</span></div><div class=\"line\">    mWebView.evaluateJavascript（<span class=\"string\">\"javascript:callJS()\"</span>, <span class=\"keyword\">new</span> ValueCallback&lt;String&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceiveValue</span><span class=\"params\">(String value)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">//此处为 js 返回的结果</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Js调Android\"><a href=\"#Js调Android\" class=\"headerlink\" title=\"Js调Android\"></a>Js调Android</h4><p><img src=\"http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/vhjwh.png\" alt=\"\"></p>\n<h3 id=\"缓存问题\"><a href=\"#缓存问题\" class=\"headerlink\" title=\"缓存问题\"></a>缓存问题</h3><p><a href=\"https://www.jianshu.com/p/f1efb0928ebc\" target=\"_blank\" rel=\"external\">原文</a></p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"http://blog.csdn.net/carson_ho/article/details/52693322\" target=\"_blank\" rel=\"external\">Carson_Ho</a></p>\n","excerpt":"<p>WebView相关知识整理</p>","more":"<h3 id=\"WebView使用总结\"><a href=\"#WebView使用总结\" class=\"headerlink\" title=\"WebView使用总结\"></a>WebView使用总结</h3><p><strong>前言：</strong></p>\n<p>最近，修改了项目中网页中点击图片跳转查看大图页面的需求，激发了我归纳总结WebView的想法，今天再次整理一下。</p>\n<p>包含：使用过程，关键类，js交互，注意事项，以及几个常见的需求解决思路等。</p>\n<p>献上一张框架图</p>\n<p><img src=\"http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/kd4ef.jpg\" alt=\"\"></p>\n<h3 id=\"基本简介\"><a href=\"#基本简介\" class=\"headerlink\" title=\"基本简介\"></a>基本简介</h3><h4 id=\"内核\"><a href=\"#内核\" class=\"headerlink\" title=\"内核\"></a>内核</h4><p>在4.4以前的版本是WebKit的内核，4.4以后才换成chromium的内核</p>\n<p>可使用第三方WebView组件Crosswalk和TBS服务，具体区别后面再整理</p>\n<h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h4><ul>\n<li>显示和渲染web页面</li>\n<li>直接加载Html文件（网络或者本地asserts）</li>\n<li>与js互调</li>\n</ul>\n<h4 id=\"状态\"><a href=\"#状态\" class=\"headerlink\" title=\"状态\"></a>状态</h4><ul>\n<li>webView.onResume() ；</li>\n</ul>\n<p>激活WebView为活跃状态，能正常执行网页的响应</p>\n<ul>\n<li>webView.onPause()；</li>\n</ul>\n<p>当页面被失去焦点被切换到后台不可见状态，需要执行onPause，通过onPause动作通知内核暂停所有的动作，比如DOM的解析、plugin的执行、JavaScript执行。</p>\n<ul>\n<li>webView.pauseTimers()</li>\n</ul>\n<p><a href=\"http://blog.csdn.net/mingli198611/article/details/49385557\">Webview后台耗电的问题</a></p>\n<p>当应用程序(存在webview)被切换到后台时，需要暂停所有webview的layout，parsing，javascripttimer。降低CPU功耗。</p>\n<p>可以调用此方法</p>\n<ul>\n<li>webView.resumeTimers()</li>\n</ul>\n<p>恢复pauseTimers状态</p>\n<p><strong>注意：</strong></p>\n<p>由于pauseTimers和resumeTimers是全局生效的, 并不只影响单个WebView, resumeTimers注意不要遗漏, 否则遗漏的WebView会出现异常. 最好在重写的WebView</p>\n<ul>\n<li>rootLayout.removeView(webView); </li>\n<li>webView.destroy();</li>\n</ul>\n<p>销毁Webview，在关闭了Activity时，如果Webview的音乐或视频，还在播放。就必须销毁Webview</p>\n<p>但是注意：webview调用destory时,webview仍绑定在Activity上</p>\n<p>这是由于自定义webview构建时传入了该Activity的context对象</p>\n<p>因此需要先从父容器中移除webview,然后再销毁webview:</p>\n<h4 id=\"前进回退网页\"><a href=\"#前进回退网页\" class=\"headerlink\" title=\"前进回退网页\"></a>前进回退网页</h4><ul>\n<li>Webview.canGoBack() </li>\n</ul>\n<p>是否可以后退</p>\n<ul>\n<li>Webview.goBack()</li>\n</ul>\n<p>后退网页</p>\n<ul>\n<li>Webview.canGoForward()</li>\n</ul>\n<p>是否可以前进 </p>\n<ul>\n<li>Webview.goForward()</li>\n</ul>\n<p>前进网页</p>\n<ul>\n<li>Webview.goBackOrForward(intsteps) </li>\n</ul>\n<p>以当前的index为起始点前进或者后退到历史记录中指定的steps</p>\n<p>如果steps为负数则为后退，正数则为前进</p>\n<p><strong>常见用法：</strong></p>\n<ul>\n<li>问题</li>\n</ul>\n<p>在不做任何处理前提下 ，浏览网页时点击系统的“Back”键,整个 Browser 会调用 finish()而结束自身</p>\n<ul>\n<li>目标</li>\n</ul>\n<p>点击返回后，是网页回退而不是推出浏览器</p>\n<ul>\n<li>解决方案</li>\n</ul>\n<p>在当前Activity中处理并消费掉该 Back 事件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onKeyDown</span><span class=\"params\">(<span class=\"keyword\">int</span> keyCode, KeyEvent event)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ((keyCode == KEYCODE_BACK) &amp;&amp; mWebView.canGoBack()) &#123; </div><div class=\"line\">        mWebView.goBack();</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onKeyDown(keyCode, event);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"常用类\"><a href=\"#常用类\" class=\"headerlink\" title=\"常用类\"></a>常用类</h3><h4 id=\"WebSettings\"><a href=\"#WebSettings\" class=\"headerlink\" title=\"WebSettings\"></a>WebSettings</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//声明WebSettings子类</span></div><div class=\"line\">WebSettings webSettings = webView.getSettings();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//如果访问的页面中要与Javascript交互，则webview必须设置支持Javascript</span></div><div class=\"line\">webSettings.setJavaScriptEnabled(<span class=\"keyword\">true</span>);  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//支持插件</span></div><div class=\"line\">webSettings.setPluginsEnabled(<span class=\"keyword\">true</span>); </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//设置自适应屏幕，两者合用</span></div><div class=\"line\">webSettings.setUseWideViewPort(<span class=\"keyword\">true</span>); <span class=\"comment\">//将图片调整到适合webview的大小 </span></div><div class=\"line\">webSettings.setLoadWithOverviewMode(<span class=\"keyword\">true</span>); <span class=\"comment\">// 缩放至屏幕的大小</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//缩放操作</span></div><div class=\"line\">webSettings.setSupportZoom(<span class=\"keyword\">true</span>); <span class=\"comment\">//支持缩放，默认为true。是下面那个的前提。</span></div><div class=\"line\">webSettings.setBuiltInZoomControls(<span class=\"keyword\">true</span>); <span class=\"comment\">//设置内置的缩放控件。若为false，则该WebView不可缩放</span></div><div class=\"line\">webSettings.setDisplayZoomControls(<span class=\"keyword\">false</span>); <span class=\"comment\">//隐藏原生的缩放控件</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//其他细节操作</span></div><div class=\"line\">webSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); <span class=\"comment\">//关闭webview中缓存 </span></div><div class=\"line\">webSettings.setAllowFileAccess(<span class=\"keyword\">true</span>); <span class=\"comment\">//设置可以访问文件 </span></div><div class=\"line\">webSettings.setJavaScriptCanOpenWindowsAutomatically(<span class=\"keyword\">true</span>); <span class=\"comment\">//支持通过JS打开新窗口 </span></div><div class=\"line\">webSettings.setLoadsImagesAutomatically(<span class=\"keyword\">true</span>); <span class=\"comment\">//支持自动加载图片</span></div><div class=\"line\">webSettings.setDefaultTextEncodingName(<span class=\"string\">\"utf-8\"</span>);<span class=\"comment\">//设置编码格式</span></div><div class=\"line\"><span class=\"comment\">//优先使用缓存: </span></div><div class=\"line\">webSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); </div><div class=\"line\">        <span class=\"comment\">//缓存模式如下：</span></div><div class=\"line\">        <span class=\"comment\">//LOAD_CACHE_ONLY: 不使用网络，只读取本地缓存数据</span></div><div class=\"line\">        <span class=\"comment\">//LOAD_DEFAULT: （默认）根据cache-control决定是否从网络上取数据。</span></div><div class=\"line\">        <span class=\"comment\">//LOAD_NO_CACHE: 不使用缓存，只从网络获取数据.</span></div><div class=\"line\">        <span class=\"comment\">//LOAD_CACHE_ELSE_NETWORK，只要本地有，无论是否过期，或者no-cache，都使用缓存中的数据。</span></div></pre></td></tr></table></figure>\n<p><strong>常见缓存用法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (NetStatusUtil.isConnected(getApplicationContext())) &#123;</div><div class=\"line\">    webSettings.setCacheMode(WebSettings.LOAD_DEFAULT);<span class=\"comment\">//根据cache-control决定是否从网络上取数据。</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    webSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);<span class=\"comment\">//没网，则从本地获取，即离线加载</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">webSettings.setDomStorageEnabled(<span class=\"keyword\">true</span>); <span class=\"comment\">// 开启 DOM storage API 功能</span></div><div class=\"line\">webSettings.setDatabaseEnabled(<span class=\"keyword\">true</span>);   <span class=\"comment\">//开启 database storage API 功能</span></div><div class=\"line\">webSettings.setAppCacheEnabled(<span class=\"keyword\">true</span>);<span class=\"comment\">//开启 Application Caches 功能</span></div><div class=\"line\"></div><div class=\"line\">String cacheDirPath = getFilesDir().getAbsolutePath() + APP_CACAHE_DIRNAME;</div><div class=\"line\">webSettings.setAppCachePath(cacheDirPath); <span class=\"comment\">//设置  Application Caches 缓存目录</span></div></pre></td></tr></table></figure>\n<p><strong>每个 Application 只调用一次 WebSettings.setAppCachePath()，WebSettings.setAppCacheMaxSize()</strong></p>\n<h4 id=\"WebViewClient\"><a href=\"#WebViewClient\" class=\"headerlink\" title=\"WebViewClient\"></a>WebViewClient</h4><h5 id=\"主要辅助WebView处理各种通知、请求事件\"><a href=\"#主要辅助WebView处理各种通知、请求事件\" class=\"headerlink\" title=\"主要辅助WebView处理各种通知、请求事件\"></a><strong>主要辅助WebView处理各种通知、请求事件</strong></h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> WebViewClient()&#123;</div><div class=\"line\"><span class=\"comment\">//            使得打开网页时不调用系统浏览器， 而是在本WebView中显示</span></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, WebResourceRequest request)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.shouldOverrideUrlLoading(view, request);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//            开始载入页面调用的，我们可以设定一个loading的页面，告诉用户程序在等待网络响应。</span></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageStarted</span><span class=\"params\">(WebView view, String url, Bitmap favicon)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.onPageStarted(view, url, favicon);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//            在页面加载结束时调用。我们可以关闭loading 条，切换程序动作。</span></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageFinished</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.onPageFinished(view, url);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//            在加载页面资源时会调用，每一个资源（比如图片）的加载都会调用一次。</span></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoadResource</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.onLoadResource(view, url);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//            该方法传回了错误码，根据错误类型可以进行不同的错误分类处理</span></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceivedError</span><span class=\"params\">(WebView view, WebResourceRequest request, WebResourceError error)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.onReceivedError(view, request, error);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//            webView默认是不处理https请求的，页面显示空白，需要进行如下设置：</span></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceivedSslError</span><span class=\"params\">(WebView view, SslErrorHandler handler, SslError error)</span> </span>&#123;</div><div class=\"line\"><span class=\"comment\">//                super.onReceivedSslError(view, handler, error);</span></div><div class=\"line\">                handler.proceed();    <span class=\"comment\">//表示等待证书响应</span></div><div class=\"line\">                <span class=\"comment\">// handler.cancel();      //表示挂起连接，为默认方式</span></div><div class=\"line\">                <span class=\"comment\">// handler.handleMessage(null);    //可做其他处理</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div></pre></td></tr></table></figure>\n<h4 id=\"WebChromClient\"><a href=\"#WebChromClient\" class=\"headerlink\" title=\"WebChromClient\"></a>WebChromClient</h4><p><strong>辅助 WebView 处理 Javascript 的对话框,网站图标,网站标题等等。</strong></p>\n<ul>\n<li>获得网页的加载进度并显示</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">webview.setWebChromeClient(<span class=\"keyword\">new</span> WebChromeClient()&#123;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onProgressChanged</span><span class=\"params\">(WebView view, <span class=\"keyword\">int</span> newProgress)</span> </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (newProgress &lt; <span class=\"number\">100</span>) &#123;</div><div class=\"line\">              String progress = newProgress + <span class=\"string\">\"%\"</span>;</div><div class=\"line\">              progress.setText(progress);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>onReceivedTitle（）</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">webview.setWebChromeClient(<span class=\"keyword\">new</span> WebChromeClient()&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceivedTitle</span><span class=\"params\">(WebView view, String title)</span> </span>&#123;</div><div class=\"line\">       titleview.setText(title)；</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"JS交互\"><a href=\"#JS交互\" class=\"headerlink\" title=\"JS交互\"></a>JS交互</h3><p><a href=\"http://blog.csdn.net/carson_ho/article/details/64904691\">原文</a></p>\n<p><img src=\"http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/o45jt.png\" alt=\"\"></p>\n<h4 id=\"Android调Js\"><a href=\"#Android调Js\" class=\"headerlink\" title=\"Android调Js\"></a>Android调Js</h4><p><img src=\"http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/1m6qx.png\" alt=\"\"></p>\n<p><strong>使用建议</strong></p>\n<p>两种方法混合使用，即Android 4.4以下使用方法1，Android 4.4以上方法2</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Android版本变量</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> version = Build.VERSION.SDK_INT;</div><div class=\"line\"><span class=\"comment\">// 因为该方法在 Android 4.4 版本才可使用，所以使用时需进行版本判断</span></div><div class=\"line\"><span class=\"keyword\">if</span> (version &lt; <span class=\"number\">18</span>) &#123;</div><div class=\"line\">    mWebView.loadUrl(<span class=\"string\">\"javascript:callJS()\"</span>);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    mWebView.evaluateJavascript（<span class=\"string\">\"javascript:callJS()\"</span>, <span class=\"keyword\">new</span> ValueCallback&lt;String&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceiveValue</span><span class=\"params\">(String value)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">//此处为 js 返回的结果</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"通过loadUrl方式调用js\"><a href=\"#通过loadUrl方式调用js\" class=\"headerlink\" title=\"通过loadUrl方式调用js\"></a>通过loadUrl方式调用js</h5><p>Html代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 文本名：javascript</div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Carson_Ho<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">// JS代码</div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"actionscript\"></div><div class=\"line\"><span class=\"comment\">// Android需要调用的方法</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callJS</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      alert(<span class=\"string\">\"Android调用了JS的callJS方法\"</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Android代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 设置与Js交互的权限</span></div><div class=\"line\">       webSettings.setJavaScriptEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">       <span class=\"comment\">// 设置允许JS弹窗</span></div><div class=\"line\">       webSettings.setJavaScriptCanOpenWindowsAutomatically(<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// 先载入JS代码</span></div><div class=\"line\">       <span class=\"comment\">// 格式规定为:file:///android_asset/文件名.html</span></div><div class=\"line\">       mWebView.loadUrl(<span class=\"string\">\"file:///android_asset/javascript.html\"</span>);</div><div class=\"line\"></div><div class=\"line\">       button = (Button) findViewById(R.id.button);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">       button.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">               <span class=\"comment\">// 必须另开线程进行JS方法调用(否则无法调用)</span></div><div class=\"line\">               mWebView.post(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                   <span class=\"meta\">@Override</span></div><div class=\"line\">                   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">                       <span class=\"comment\">// 注意调用的JS方法名要对应上</span></div><div class=\"line\">                       <span class=\"comment\">// 调用javascript的callJS()方法</span></div><div class=\"line\">                       mWebView.loadUrl(<span class=\"string\">\"javascript:callJS()\"</span>);</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;);</div><div class=\"line\"></div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// 由于设置了弹窗检验调用结果,所以需要支持js对话框</span></div><div class=\"line\">       <span class=\"comment\">// webview只是载体，内容的渲染需要使用webviewChromClient类去实现</span></div><div class=\"line\">       <span class=\"comment\">// 通过设置WebChromeClient对象处理JavaScript的对话框</span></div><div class=\"line\">       <span class=\"comment\">//设置响应js 的Alert()函数</span></div><div class=\"line\">       mWebView.setWebChromeClient(<span class=\"keyword\">new</span> WebChromeClient() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onJsAlert</span><span class=\"params\">(WebView view, String url, String message, <span class=\"keyword\">final</span> JsResult result)</span> </span>&#123;</div><div class=\"line\">               AlertDialog.Builder b = <span class=\"keyword\">new</span> AlertDialog.Builder(MainActivity.<span class=\"keyword\">this</span>);</div><div class=\"line\">               b.setTitle(<span class=\"string\">\"Alert\"</span>);</div><div class=\"line\">               b.setMessage(message);</div><div class=\"line\">               b.setPositiveButton(android.R.string.ok, <span class=\"keyword\">new</span> DialogInterface.OnClickListener() &#123;</div><div class=\"line\">                   <span class=\"meta\">@Override</span></div><div class=\"line\">                   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(DialogInterface dialog, <span class=\"keyword\">int</span> which)</span> </span>&#123;</div><div class=\"line\">                       result.confirm();</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;);</div><div class=\"line\">               b.setCancelable(<span class=\"keyword\">false</span>);</div><div class=\"line\">               b.create().show();</div><div class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">       &#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p><strong>特别注意：JS代码调用一定要在 onPageFinished（） 回调之后才能调用，否则不会调用。</strong></p>\n<p><code>onPageFinished()</code>属于WebViewClient类的方法，主要在页面加载结束时调用</p>\n<p>所以一般等onPageFnished回调之后，我们才显示H5的页面，加载未完全的时候，则显示loading页面</p>\n<h5 id=\"通过evaluateJavascript调用js\"><a href=\"#通过evaluateJavascript调用js\" class=\"headerlink\" title=\"通过evaluateJavascript调用js\"></a>通过evaluateJavascript调用js</h5><p><strong>优点</strong></p>\n<p>该方法比第一种方法效率更高、使用更简洁。</p>\n<ul>\n<li>因为该方法的执行不会使页面刷新，而第一种方法（loadUrl ）的执行则会。</li>\n<li>Android 4.4 后才可使用</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 只需要将第一种方法的loadUrl()换成下面该方法即可</span></div><div class=\"line\">    mWebView.evaluateJavascript（<span class=\"string\">\"javascript:callJS()\"</span>, <span class=\"keyword\">new</span> ValueCallback&lt;String&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceiveValue</span><span class=\"params\">(String value)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">//此处为 js 返回的结果</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Js调Android\"><a href=\"#Js调Android\" class=\"headerlink\" title=\"Js调Android\"></a>Js调Android</h4><p><img src=\"http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/vhjwh.png\" alt=\"\"></p>\n<h3 id=\"缓存问题\"><a href=\"#缓存问题\" class=\"headerlink\" title=\"缓存问题\"></a>缓存问题</h3><p><a href=\"https://www.jianshu.com/p/f1efb0928ebc\">原文</a></p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"http://blog.csdn.net/carson_ho/article/details/52693322\">Carson_Ho</a></p>"},{"title":"app启动流程简析","date":"2016-03-16T12:27:53.000Z","password":123456,"_content":"\n**前言**\n\nAndroid系统中，应用程序是由Activity组成的，因此，应用程序的启动过程实际上就说应用程序中默认Activity的启动过程，本文主要整理冷启动的情况。\n\n<!--more-->\n\n\n","source":"_posts/app启动流程简析.md","raw":"---\ntitle: app启动流程简析\ndate: 2016-03-16 20:27:53\ntags: \n- Android\ncategories: Android\npassword: 123456\n---\n\n**前言**\n\nAndroid系统中，应用程序是由Activity组成的，因此，应用程序的启动过程实际上就说应用程序中默认Activity的启动过程，本文主要整理冷启动的情况。\n\n<!--more-->\n\n\n","slug":"app启动流程简析","published":1,"updated":"2018-07-19T02:06:58.355Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6mx001s1kygl7ym9x56","content":"<p><strong>前言</strong></p>\n<p>Android系统中，应用程序是由Activity组成的，因此，应用程序的启动过程实际上就说应用程序中默认Activity的启动过程，本文主要整理冷启动的情况。</p>\n<a id=\"more\"></a>\n","excerpt":"<p><strong>前言</strong></p>\n<p>Android系统中，应用程序是由Activity组成的，因此，应用程序的启动过程实际上就说应用程序中默认Activity的启动过程，本文主要整理冷启动的情况。</p>","more":""},{"title":"edittext输入限制","date":"2015-12-13T09:42:12.000Z","_content":"\nEditText智能限制小数点前后分别保留几位\n\n<!--more-->\n\n需求\n\n- 可以分别限制小数点前面几位，和小数点后几位\n- 首位输入0时，第二位只能输入小数点\n- 首位输入小数点，默认显示0.\n- 嘻嘻!\n\n```java\n/**\n *\n * @param frontPoint    小数点前几位数\n * @param behindPoint   小数点后几位数\n * @param editTexts\n */\npublic static void setEditTextLimit(final int frontPoint, final int behindPoint, final EditText... editTexts) {\n    if (editTexts != null && editTexts.length > 0) {\n        for (final EditText editText : editTexts) {\n            editText.addTextChangedListener(new TextWatcher() {\n                @Override\n                public void onTextChanged(CharSequence s, int start, int before,\n                                          int count) {\n                    if (s.length() == frontPoint + 1 && !s.toString().contains(\".\")) {\n                        editText.setText(s.toString().substring(0, frontPoint));\n                        editText.setSelection(frontPoint);\n                    }\n                    if (editText.getText().toString().indexOf(\".\") >= 0) {\n                        if (editText.getText().toString().indexOf(\".\", editText.getText().toString().indexOf(\".\") + 1) > 0) {\n                            editText.setText(editText.getText().toString().substring(0, editText.getText().toString().length() - 1));\n                            editText.setSelection(editText.getText().toString().length());\n                        }\n                    }\n                    if (s.toString().contains(\".\")) {\n                        if (s.length() - 1 - s.toString().indexOf(\".\") > behindPoint) {\n                            s = s.toString().subSequence(0,\n                                    s.toString().indexOf(\".\") + behindPoint+1);\n                            editText.setText(s);\n                            editText.setSelection(s.length());\n                        }\n                    }\n                    //直接输入一个点,显示0.\n                    if (s.toString().trim().substring(0).equals(\".\")) {\n                        s = \"0\" + s;\n                        editText.setText(s);\n                        editText.setSelection(2);\n                    }\n                    //当输入一个0,后面只能输入小数点\n                    if (s.toString().startsWith(\"0\")\n                            && s.toString().trim().length() > 1) {\n                        if (!s.toString().substring(1, 2).equals(\".\")) {\n                            editText.setText(s.subSequence(0, 1));\n                            editText.setSelection(1);\n                            return;\n                        }\n                    }\n                }\n\n                @Override\n                public void beforeTextChanged(CharSequence s, int start, int count,\n                                              int after) {\n\n                }\n\n                @Override\n                public void afterTextChanged(Editable s) {\n                }\n\n            });\n        }\n    }\n}\n```\n\nxml别忘了\n\n```xml\nandroid:inputType=\"numberDecimal\"\n```\n\n\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=417859220&auto=1&height=66\"></iframe>","source":"_posts/edittext输入限制.md","raw":"---\ntitle: edittext输入限制\ndate: 2015-12-13 17:42:12\ntags: \n- Android\ncategories: Android\n---\n\nEditText智能限制小数点前后分别保留几位\n\n<!--more-->\n\n需求\n\n- 可以分别限制小数点前面几位，和小数点后几位\n- 首位输入0时，第二位只能输入小数点\n- 首位输入小数点，默认显示0.\n- 嘻嘻!\n\n```java\n/**\n *\n * @param frontPoint    小数点前几位数\n * @param behindPoint   小数点后几位数\n * @param editTexts\n */\npublic static void setEditTextLimit(final int frontPoint, final int behindPoint, final EditText... editTexts) {\n    if (editTexts != null && editTexts.length > 0) {\n        for (final EditText editText : editTexts) {\n            editText.addTextChangedListener(new TextWatcher() {\n                @Override\n                public void onTextChanged(CharSequence s, int start, int before,\n                                          int count) {\n                    if (s.length() == frontPoint + 1 && !s.toString().contains(\".\")) {\n                        editText.setText(s.toString().substring(0, frontPoint));\n                        editText.setSelection(frontPoint);\n                    }\n                    if (editText.getText().toString().indexOf(\".\") >= 0) {\n                        if (editText.getText().toString().indexOf(\".\", editText.getText().toString().indexOf(\".\") + 1) > 0) {\n                            editText.setText(editText.getText().toString().substring(0, editText.getText().toString().length() - 1));\n                            editText.setSelection(editText.getText().toString().length());\n                        }\n                    }\n                    if (s.toString().contains(\".\")) {\n                        if (s.length() - 1 - s.toString().indexOf(\".\") > behindPoint) {\n                            s = s.toString().subSequence(0,\n                                    s.toString().indexOf(\".\") + behindPoint+1);\n                            editText.setText(s);\n                            editText.setSelection(s.length());\n                        }\n                    }\n                    //直接输入一个点,显示0.\n                    if (s.toString().trim().substring(0).equals(\".\")) {\n                        s = \"0\" + s;\n                        editText.setText(s);\n                        editText.setSelection(2);\n                    }\n                    //当输入一个0,后面只能输入小数点\n                    if (s.toString().startsWith(\"0\")\n                            && s.toString().trim().length() > 1) {\n                        if (!s.toString().substring(1, 2).equals(\".\")) {\n                            editText.setText(s.subSequence(0, 1));\n                            editText.setSelection(1);\n                            return;\n                        }\n                    }\n                }\n\n                @Override\n                public void beforeTextChanged(CharSequence s, int start, int count,\n                                              int after) {\n\n                }\n\n                @Override\n                public void afterTextChanged(Editable s) {\n                }\n\n            });\n        }\n    }\n}\n```\n\nxml别忘了\n\n```xml\nandroid:inputType=\"numberDecimal\"\n```\n\n\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=417859220&auto=1&height=66\"></iframe>","slug":"edittext输入限制","published":1,"updated":"2018-07-19T02:08:58.979Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6my001v1kygm0y1mb80","content":"<p>EditText智能限制小数点前后分别保留几位</p>\n<a id=\"more\"></a>\n<p>需求</p>\n<ul>\n<li>可以分别限制小数点前面几位，和小数点后几位</li>\n<li>首位输入0时，第二位只能输入小数点</li>\n<li>首位输入小数点，默认显示0.</li>\n<li>嘻嘻!</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> frontPoint    小数点前几位数</div><div class=\"line\"> * <span class=\"doctag\">@param</span> behindPoint   小数点后几位数</div><div class=\"line\"> * <span class=\"doctag\">@param</span> editTexts</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setEditTextLimit</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> frontPoint, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> behindPoint, <span class=\"keyword\">final</span> EditText... editTexts)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (editTexts != <span class=\"keyword\">null</span> &amp;&amp; editTexts.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">final</span> EditText editText : editTexts) &#123;</div><div class=\"line\">            editText.addTextChangedListener(<span class=\"keyword\">new</span> TextWatcher() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTextChanged</span><span class=\"params\">(CharSequence s, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> before,</span></span></div><div class=\"line\">                                          <span class=\"keyword\">int</span> count) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (s.length() == frontPoint + <span class=\"number\">1</span> &amp;&amp; !s.toString().contains(<span class=\"string\">\".\"</span>)) &#123;</div><div class=\"line\">                        editText.setText(s.toString().substring(<span class=\"number\">0</span>, frontPoint));</div><div class=\"line\">                        editText.setSelection(frontPoint);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (editText.getText().toString().indexOf(<span class=\"string\">\".\"</span>) &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (editText.getText().toString().indexOf(<span class=\"string\">\".\"</span>, editText.getText().toString().indexOf(<span class=\"string\">\".\"</span>) + <span class=\"number\">1</span>) &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                            editText.setText(editText.getText().toString().substring(<span class=\"number\">0</span>, editText.getText().toString().length() - <span class=\"number\">1</span>));</div><div class=\"line\">                            editText.setSelection(editText.getText().toString().length());</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (s.toString().contains(<span class=\"string\">\".\"</span>)) &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (s.length() - <span class=\"number\">1</span> - s.toString().indexOf(<span class=\"string\">\".\"</span>) &gt; behindPoint) &#123;</div><div class=\"line\">                            s = s.toString().subSequence(<span class=\"number\">0</span>,</div><div class=\"line\">                                    s.toString().indexOf(<span class=\"string\">\".\"</span>) + behindPoint+<span class=\"number\">1</span>);</div><div class=\"line\">                            editText.setText(s);</div><div class=\"line\">                            editText.setSelection(s.length());</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"comment\">//直接输入一个点,显示0.</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (s.toString().trim().substring(<span class=\"number\">0</span>).equals(<span class=\"string\">\".\"</span>)) &#123;</div><div class=\"line\">                        s = <span class=\"string\">\"0\"</span> + s;</div><div class=\"line\">                        editText.setText(s);</div><div class=\"line\">                        editText.setSelection(<span class=\"number\">2</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"comment\">//当输入一个0,后面只能输入小数点</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (s.toString().startsWith(<span class=\"string\">\"0\"</span>)</div><div class=\"line\">                            &amp;&amp; s.toString().trim().length() &gt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (!s.toString().substring(<span class=\"number\">1</span>, <span class=\"number\">2</span>).equals(<span class=\"string\">\".\"</span>)) &#123;</div><div class=\"line\">                            editText.setText(s.subSequence(<span class=\"number\">0</span>, <span class=\"number\">1</span>));</div><div class=\"line\">                            editText.setSelection(<span class=\"number\">1</span>);</div><div class=\"line\">                            <span class=\"keyword\">return</span>;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeTextChanged</span><span class=\"params\">(CharSequence s, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> count,</span></span></div><div class=\"line\">                                              <span class=\"keyword\">int</span> after) &#123;</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterTextChanged</span><span class=\"params\">(Editable s)</span> </span>&#123;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>xml别忘了</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:inputType=\"numberDecimal\"</div></pre></td></tr></table></figure>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=417859220&auto=1&height=66\"></iframe>","excerpt":"<p>EditText智能限制小数点前后分别保留几位</p>","more":"<p>需求</p>\n<ul>\n<li>可以分别限制小数点前面几位，和小数点后几位</li>\n<li>首位输入0时，第二位只能输入小数点</li>\n<li>首位输入小数点，默认显示0.</li>\n<li>嘻嘻!</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> frontPoint    小数点前几位数</div><div class=\"line\"> * <span class=\"doctag\">@param</span> behindPoint   小数点后几位数</div><div class=\"line\"> * <span class=\"doctag\">@param</span> editTexts</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setEditTextLimit</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> frontPoint, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> behindPoint, <span class=\"keyword\">final</span> EditText... editTexts)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (editTexts != <span class=\"keyword\">null</span> &amp;&amp; editTexts.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">final</span> EditText editText : editTexts) &#123;</div><div class=\"line\">            editText.addTextChangedListener(<span class=\"keyword\">new</span> TextWatcher() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTextChanged</span><span class=\"params\">(CharSequence s, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> before,</div><div class=\"line\">                                          <span class=\"keyword\">int</span> count)</span> </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (s.length() == frontPoint + <span class=\"number\">1</span> &amp;&amp; !s.toString().contains(<span class=\"string\">\".\"</span>)) &#123;</div><div class=\"line\">                        editText.setText(s.toString().substring(<span class=\"number\">0</span>, frontPoint));</div><div class=\"line\">                        editText.setSelection(frontPoint);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (editText.getText().toString().indexOf(<span class=\"string\">\".\"</span>) &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (editText.getText().toString().indexOf(<span class=\"string\">\".\"</span>, editText.getText().toString().indexOf(<span class=\"string\">\".\"</span>) + <span class=\"number\">1</span>) &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                            editText.setText(editText.getText().toString().substring(<span class=\"number\">0</span>, editText.getText().toString().length() - <span class=\"number\">1</span>));</div><div class=\"line\">                            editText.setSelection(editText.getText().toString().length());</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (s.toString().contains(<span class=\"string\">\".\"</span>)) &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (s.length() - <span class=\"number\">1</span> - s.toString().indexOf(<span class=\"string\">\".\"</span>) &gt; behindPoint) &#123;</div><div class=\"line\">                            s = s.toString().subSequence(<span class=\"number\">0</span>,</div><div class=\"line\">                                    s.toString().indexOf(<span class=\"string\">\".\"</span>) + behindPoint+<span class=\"number\">1</span>);</div><div class=\"line\">                            editText.setText(s);</div><div class=\"line\">                            editText.setSelection(s.length());</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"comment\">//直接输入一个点,显示0.</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (s.toString().trim().substring(<span class=\"number\">0</span>).equals(<span class=\"string\">\".\"</span>)) &#123;</div><div class=\"line\">                        s = <span class=\"string\">\"0\"</span> + s;</div><div class=\"line\">                        editText.setText(s);</div><div class=\"line\">                        editText.setSelection(<span class=\"number\">2</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"comment\">//当输入一个0,后面只能输入小数点</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (s.toString().startsWith(<span class=\"string\">\"0\"</span>)</div><div class=\"line\">                            &amp;&amp; s.toString().trim().length() &gt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (!s.toString().substring(<span class=\"number\">1</span>, <span class=\"number\">2</span>).equals(<span class=\"string\">\".\"</span>)) &#123;</div><div class=\"line\">                            editText.setText(s.subSequence(<span class=\"number\">0</span>, <span class=\"number\">1</span>));</div><div class=\"line\">                            editText.setSelection(<span class=\"number\">1</span>);</div><div class=\"line\">                            <span class=\"keyword\">return</span>;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeTextChanged</span><span class=\"params\">(CharSequence s, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> count,</div><div class=\"line\">                                              <span class=\"keyword\">int</span> after)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterTextChanged</span><span class=\"params\">(Editable s)</span> </span>&#123;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>xml别忘了</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:inputType=\"numberDecimal\"</div></pre></td></tr></table></figure>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=417859220&auto=1&height=66\"></iframe>"},{"title":"ReactNative碎片整理之网络请求","date":"2018-07-30T10:49:21.000Z","password":null,"_content":"\nReact Native 中虽然也内置了XMLHttpRequest 网络请求Api（也就是ajax），但XMLHttpRequest 是一个设计粗糙的API，不符合职责分离的原则，配置和调用方式比较混乱，而且基于事件的异步模型不如现代的Promise友好。所以，React Native官方推荐使用Fetch Api\n\n<!--more-->\n\n### Fetch基本使用\n\n#### 最简单的使用\n\n> 如果只是请求一下服务器，不需要任何操作\n\n```javascript\nfetch('http://chenxiaoping.com/demo')添加请求头\n```\n\n>  添加请求头和请求参数（服务端支持json参数）\n\n```javascript\nfetch('https://mywebsite.com/endpoint/', {\n  method: 'POST',\n  headers: {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    firstParam: 'yourValue',\n    secondParam: 'yourOtherValue',\n  })\n})\n```\n\n>  添加请求头和请求参数（服务端不支持json参数）\n\n```javascript\nfetch('https://mywebsite.com/endpoint/', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded',\n  },\n  body: 'key1=value1&key2=value2'\n})\n```\n\n### Response对象参数解析\n\n**Response对象中包含了多种属性：**\n\n- status (number) ： HTTP请求的响应状态行。\n- statusText (String) ： 服务器返回的状态报告。\n- ok (boolean) ：如果返回200表示请求成功，则为true。\n- headers (Headers) ： 返回头部信息。\n- url (String) ：请求的地址。\n\n**Response对象还提供了多种方法：**\n\n- formData()：返回一个带有FormData的Promise。\n- json() ：返回一个带有JSON对象的Promise。\n- text()：返回一个带有文本的Promise。\n- clone() ：复制一份response。\n- error()：返回一个与网络相关的错误。\n- redirect()：返回了一个可以重定向至某URL的response。\n- arrayBuffer()：返回一个带有ArrayBuffer的Promise。\n- blob() ： 返回一个带有Blob的Promise。\n\n> 解析json和修改json数据\n\n```javascript\nloadData() {\n        return fetch('https://facebook.github.io/react-native/movies.json',)\n            .then((response) => response.json())\n            .then((json) => {\n                json['description']='hello'\n                Alert.alert(json.description)\n            })\n            .catch((error) => {\n                this.setState(() => {\n                    return {\n                        buttonText: 'doLoad',\n                    }\n                });\n                console.error(error);\n            })\n    }\n```\n\nresponse：\n\n```json\n{\n  \"title\": \"The Basics - Networking\",\n  \"description\": \"Your app fetched this from a remote endpoint!\",\n  \"movies\": [\n    { \"id\": \"1\", \"title\": \"Star Wars\", \"releaseYear\": \"1977\" },\n    { \"id\": \"2\", \"title\": \"Back to the Future\", \"releaseYear\": \"1985\" },\n    { \"id\": \"3\", \"title\": \"The Matrix\", \"releaseYear\": \"1999\" },\n    { \"id\": \"4\", \"title\": \"Inception\", \"releaseYear\": \"2010\" },\n    { \"id\": \"5\", \"title\": \"Interstellar\", \"releaseYear\": \"2014\" }\n  ]\n}\n```\n\n可以看到弹窗为‘hello’\n\n### 超时\n\n```javascript\nfetch(input, init).then(function(response) { ... });\n```\n\n### 参数\n\n- input\n\n定义要获取的资源。这可能是： 一个 USVString 字符串，包含要获取资源的 URL。 一个 Request 对象。\n\n- init 可选 一个配置项对象，包括所有对请求的设置。可选的参数有：\n\n1. method: 请求使用的方法，如 GET、POST。\n2. headers: 请求的头信息，形式为 Headers 对象或 ByteString。 body: 请求的 body 信息：可能是一个 Blob、BufferSource、FormData、URLSearchParams 或者 USVString 对象。注意 GET 或 HEAD 方法的请求不能包含 body 信息。\n3. mode: 请求的模式，如 cors、 no-cors 或者 same-origin。\n4. credentials: 请求的 credentials，如 omit、same-origin 或者 include。\n5. cache: 请求的 cache 模式: default, no-store, reload, no-cache, force-cache, or only-if-cached.\n\n根本找不到 timeout 配置\n\n```javascript\n\t\t// 超时版的fetch\n        _fetch(fetch, timeout) {\n            return Promise.race([\n                fetch,\n                new Promise(function (resolve, reject) {\n                    setTimeout(() => reject(new Error('request timeout')), timeout);\n                })\n            ]);\n        }\n        // 使用\n        _fetch(fetch('url'), 1000).then((info)=> {\n            return info.text();\n        }).then((info)=> {\n            console.log(info);\n        }).catch((err)=> {\n            throw new Error(err);    \n        });\n```\n\n**代码中用Promise.race()将fetch和一个新的Promise包装在了一起,新的Promise和fetch谁率先返回就把该Promise实例返回值传递给下面的.then()或者是.catch()**\n\n[让fetch也可以timeout](http://www.open-open.com/lib/view/open1472717659359.html)\n\n[[可以设置超时版的的fetch](https://www.cnblogs.com/sorrowx/p/7096316.html)](https://www.cnblogs.com/sorrowx/p/7096316.html)\n\n[fetch添加超时时间只需几行代码--fetch timeout](https://blog.csdn.net/qq_33323251/article/details/79832689)\n\n### 简单封装\n\n```javascript\nexport default class FetchUtil {\n    init() {\n        this.url = '';\n        this.method = 'GET';\n        this.headers = {};\n        this.body_type = 'form';\n        this.bodys = {};\n        this.credentials = 'omit';\n      //默认返回json对象\n        this.return_type = 'json';\n        this.overtime = 0;\n        this.firstThen = undefined;\n\n        return this;\n    }\n    setUrl(url) {\n        this.url = url;\n        return this;\n    }\n    setMethod(val) {\n        this.method = val;\n        return this;\n    }\n    setBodyType(val) {\n        this.body_type = val;\n        return this;\n    }\n\n    setReturnType(val) {\n        this.return_type = val;\n        return this;\n    }\n\n    setOvertime(val) {\n        this.overtime = val;\n        return this;\n    }\n\n    setHeader(name, val = null) {\n        if (typeof name == 'string') {\n            this.headers[name] = val;\n        } else if (typeof name == 'object') {\n            Object.keys(name).map((index) => {\n                this.headers[index] = name[index];\n            });\n        }\n\n        return this;\n    }\n\n    setBody(name, val = null) {\n        if (typeof name == 'string') {\n            this.bodys[name] = val;\n        } else if (typeof name == 'object') {\n            Object.keys(name).map((index) => {\n                this.bodys[index] = name[index];\n            });\n        }\n        return this;\n    }\n\n    setCookieOrigin() {\n        this.credentials = 'same-origin';\n        return this;\n    }\n\n    setCookieCors() {\n        this.credentials = 'include';\n        return this;\n    }\n\n    thenStart(then) {\n        this.firstThen = then;\n        return this;\n    }\n\n    dofetch() {\n        let options = {};\n        options.method = this.method;\n        options.credentials = this.credentials;\n\n        options.headers = this.headers;\n\n        if ({} != this.bodys && this.method != 'GET') {\n            if ('form' == this.body_type) {\n                this.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded;charset=UTF-8\");\n                let data = '';\n                Object.keys(this.bodys).map((index) => {\n                    let param = encodeURI(this.bodys[index]);\n                    data += `${index}=${param}&`;\n                });\n                options.body = data;\n            } else if ('file' == this.body_type) {\n                let data = new FormData();\n                Object.keys(this.bodys).map((index) => {\n                    data.append(index, this.bodys[index]);\n                });\n                options.body = data;\n            } else if ('json' == this.body_type) {\n                options.body = JSON.stringify(this.bodys);\n            }\n        }\n\n        return Promise.race([\n            fetch(this.url, options),\n            new Promise((resolve, reject) => {\n                setTimeout(() => reject(new Error('request timeout')), this.overtime ? this.overtime : 30 * 1000);\n            })\n        ]).then(\n            (response) => {\n                if (this.firstThen) {\n                    let tempResponse = this.firstThen(response);\n                    if (tempResponse) {\n                        return tempResponse;\n                    }\n                }\n                return response;\n            }\n        ).then(\n            (response) => {\n                if ('json' == this.return_type) {\n                    return response.json();\n                } else if ('text' == this.return_type) {\n                    return response.text();\n                } else if ('blob' == this.return_type) {\n                    return response.blob();\n                } else if ('formData' == this.return_type) {\n                    return response.formData();\n                } else if ('arrayBuffer' == this.return_type) {\n                    return response.arrayBuffer();\n                }\n            }\n        );\n    }\n}\n\n//use\nlet fetchUtil = new FetchUtil();\n        fetchUtil.init()\n            .setUrl('https://www.google.com/')\n            .setMethod('GET')\n            .setOvertime(15 * 1000)\n            .setHeader({\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            })\n            .dofetch()\n            .then((response) => {\n          \t\t//这里的response已经被转成object了\n                console.warn( typeof response.title);\n            })\n            .then((data) => {\n\n                Alert.alert(data);\n            })\n            .catch((error) => {\n                console.warn( '=> catch: ', error);\n                // console.log('=> catch: ', error);\n            });\n```\n\n","source":"_posts/ReactNative碎片整理之网络请求.md","raw":"---\ntitle: ReactNative碎片整理之网络请求\ndate: 2018-07-30 18:49:21\ntags:\n- RN\ncategories: RN\npassword:\n---\n\nReact Native 中虽然也内置了XMLHttpRequest 网络请求Api（也就是ajax），但XMLHttpRequest 是一个设计粗糙的API，不符合职责分离的原则，配置和调用方式比较混乱，而且基于事件的异步模型不如现代的Promise友好。所以，React Native官方推荐使用Fetch Api\n\n<!--more-->\n\n### Fetch基本使用\n\n#### 最简单的使用\n\n> 如果只是请求一下服务器，不需要任何操作\n\n```javascript\nfetch('http://chenxiaoping.com/demo')添加请求头\n```\n\n>  添加请求头和请求参数（服务端支持json参数）\n\n```javascript\nfetch('https://mywebsite.com/endpoint/', {\n  method: 'POST',\n  headers: {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    firstParam: 'yourValue',\n    secondParam: 'yourOtherValue',\n  })\n})\n```\n\n>  添加请求头和请求参数（服务端不支持json参数）\n\n```javascript\nfetch('https://mywebsite.com/endpoint/', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded',\n  },\n  body: 'key1=value1&key2=value2'\n})\n```\n\n### Response对象参数解析\n\n**Response对象中包含了多种属性：**\n\n- status (number) ： HTTP请求的响应状态行。\n- statusText (String) ： 服务器返回的状态报告。\n- ok (boolean) ：如果返回200表示请求成功，则为true。\n- headers (Headers) ： 返回头部信息。\n- url (String) ：请求的地址。\n\n**Response对象还提供了多种方法：**\n\n- formData()：返回一个带有FormData的Promise。\n- json() ：返回一个带有JSON对象的Promise。\n- text()：返回一个带有文本的Promise。\n- clone() ：复制一份response。\n- error()：返回一个与网络相关的错误。\n- redirect()：返回了一个可以重定向至某URL的response。\n- arrayBuffer()：返回一个带有ArrayBuffer的Promise。\n- blob() ： 返回一个带有Blob的Promise。\n\n> 解析json和修改json数据\n\n```javascript\nloadData() {\n        return fetch('https://facebook.github.io/react-native/movies.json',)\n            .then((response) => response.json())\n            .then((json) => {\n                json['description']='hello'\n                Alert.alert(json.description)\n            })\n            .catch((error) => {\n                this.setState(() => {\n                    return {\n                        buttonText: 'doLoad',\n                    }\n                });\n                console.error(error);\n            })\n    }\n```\n\nresponse：\n\n```json\n{\n  \"title\": \"The Basics - Networking\",\n  \"description\": \"Your app fetched this from a remote endpoint!\",\n  \"movies\": [\n    { \"id\": \"1\", \"title\": \"Star Wars\", \"releaseYear\": \"1977\" },\n    { \"id\": \"2\", \"title\": \"Back to the Future\", \"releaseYear\": \"1985\" },\n    { \"id\": \"3\", \"title\": \"The Matrix\", \"releaseYear\": \"1999\" },\n    { \"id\": \"4\", \"title\": \"Inception\", \"releaseYear\": \"2010\" },\n    { \"id\": \"5\", \"title\": \"Interstellar\", \"releaseYear\": \"2014\" }\n  ]\n}\n```\n\n可以看到弹窗为‘hello’\n\n### 超时\n\n```javascript\nfetch(input, init).then(function(response) { ... });\n```\n\n### 参数\n\n- input\n\n定义要获取的资源。这可能是： 一个 USVString 字符串，包含要获取资源的 URL。 一个 Request 对象。\n\n- init 可选 一个配置项对象，包括所有对请求的设置。可选的参数有：\n\n1. method: 请求使用的方法，如 GET、POST。\n2. headers: 请求的头信息，形式为 Headers 对象或 ByteString。 body: 请求的 body 信息：可能是一个 Blob、BufferSource、FormData、URLSearchParams 或者 USVString 对象。注意 GET 或 HEAD 方法的请求不能包含 body 信息。\n3. mode: 请求的模式，如 cors、 no-cors 或者 same-origin。\n4. credentials: 请求的 credentials，如 omit、same-origin 或者 include。\n5. cache: 请求的 cache 模式: default, no-store, reload, no-cache, force-cache, or only-if-cached.\n\n根本找不到 timeout 配置\n\n```javascript\n\t\t// 超时版的fetch\n        _fetch(fetch, timeout) {\n            return Promise.race([\n                fetch,\n                new Promise(function (resolve, reject) {\n                    setTimeout(() => reject(new Error('request timeout')), timeout);\n                })\n            ]);\n        }\n        // 使用\n        _fetch(fetch('url'), 1000).then((info)=> {\n            return info.text();\n        }).then((info)=> {\n            console.log(info);\n        }).catch((err)=> {\n            throw new Error(err);    \n        });\n```\n\n**代码中用Promise.race()将fetch和一个新的Promise包装在了一起,新的Promise和fetch谁率先返回就把该Promise实例返回值传递给下面的.then()或者是.catch()**\n\n[让fetch也可以timeout](http://www.open-open.com/lib/view/open1472717659359.html)\n\n[[可以设置超时版的的fetch](https://www.cnblogs.com/sorrowx/p/7096316.html)](https://www.cnblogs.com/sorrowx/p/7096316.html)\n\n[fetch添加超时时间只需几行代码--fetch timeout](https://blog.csdn.net/qq_33323251/article/details/79832689)\n\n### 简单封装\n\n```javascript\nexport default class FetchUtil {\n    init() {\n        this.url = '';\n        this.method = 'GET';\n        this.headers = {};\n        this.body_type = 'form';\n        this.bodys = {};\n        this.credentials = 'omit';\n      //默认返回json对象\n        this.return_type = 'json';\n        this.overtime = 0;\n        this.firstThen = undefined;\n\n        return this;\n    }\n    setUrl(url) {\n        this.url = url;\n        return this;\n    }\n    setMethod(val) {\n        this.method = val;\n        return this;\n    }\n    setBodyType(val) {\n        this.body_type = val;\n        return this;\n    }\n\n    setReturnType(val) {\n        this.return_type = val;\n        return this;\n    }\n\n    setOvertime(val) {\n        this.overtime = val;\n        return this;\n    }\n\n    setHeader(name, val = null) {\n        if (typeof name == 'string') {\n            this.headers[name] = val;\n        } else if (typeof name == 'object') {\n            Object.keys(name).map((index) => {\n                this.headers[index] = name[index];\n            });\n        }\n\n        return this;\n    }\n\n    setBody(name, val = null) {\n        if (typeof name == 'string') {\n            this.bodys[name] = val;\n        } else if (typeof name == 'object') {\n            Object.keys(name).map((index) => {\n                this.bodys[index] = name[index];\n            });\n        }\n        return this;\n    }\n\n    setCookieOrigin() {\n        this.credentials = 'same-origin';\n        return this;\n    }\n\n    setCookieCors() {\n        this.credentials = 'include';\n        return this;\n    }\n\n    thenStart(then) {\n        this.firstThen = then;\n        return this;\n    }\n\n    dofetch() {\n        let options = {};\n        options.method = this.method;\n        options.credentials = this.credentials;\n\n        options.headers = this.headers;\n\n        if ({} != this.bodys && this.method != 'GET') {\n            if ('form' == this.body_type) {\n                this.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded;charset=UTF-8\");\n                let data = '';\n                Object.keys(this.bodys).map((index) => {\n                    let param = encodeURI(this.bodys[index]);\n                    data += `${index}=${param}&`;\n                });\n                options.body = data;\n            } else if ('file' == this.body_type) {\n                let data = new FormData();\n                Object.keys(this.bodys).map((index) => {\n                    data.append(index, this.bodys[index]);\n                });\n                options.body = data;\n            } else if ('json' == this.body_type) {\n                options.body = JSON.stringify(this.bodys);\n            }\n        }\n\n        return Promise.race([\n            fetch(this.url, options),\n            new Promise((resolve, reject) => {\n                setTimeout(() => reject(new Error('request timeout')), this.overtime ? this.overtime : 30 * 1000);\n            })\n        ]).then(\n            (response) => {\n                if (this.firstThen) {\n                    let tempResponse = this.firstThen(response);\n                    if (tempResponse) {\n                        return tempResponse;\n                    }\n                }\n                return response;\n            }\n        ).then(\n            (response) => {\n                if ('json' == this.return_type) {\n                    return response.json();\n                } else if ('text' == this.return_type) {\n                    return response.text();\n                } else if ('blob' == this.return_type) {\n                    return response.blob();\n                } else if ('formData' == this.return_type) {\n                    return response.formData();\n                } else if ('arrayBuffer' == this.return_type) {\n                    return response.arrayBuffer();\n                }\n            }\n        );\n    }\n}\n\n//use\nlet fetchUtil = new FetchUtil();\n        fetchUtil.init()\n            .setUrl('https://www.google.com/')\n            .setMethod('GET')\n            .setOvertime(15 * 1000)\n            .setHeader({\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            })\n            .dofetch()\n            .then((response) => {\n          \t\t//这里的response已经被转成object了\n                console.warn( typeof response.title);\n            })\n            .then((data) => {\n\n                Alert.alert(data);\n            })\n            .catch((error) => {\n                console.warn( '=> catch: ', error);\n                // console.log('=> catch: ', error);\n            });\n```\n\n","slug":"ReactNative碎片整理之网络请求","published":1,"updated":"2018-07-31T03:27:50.498Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6mz001y1kygv1bs2w71","content":"<p>React Native 中虽然也内置了XMLHttpRequest 网络请求Api（也就是ajax），但XMLHttpRequest 是一个设计粗糙的API，不符合职责分离的原则，配置和调用方式比较混乱，而且基于事件的异步模型不如现代的Promise友好。所以，React Native官方推荐使用Fetch Api</p>\n<a id=\"more\"></a>\n<h3 id=\"Fetch基本使用\"><a href=\"#Fetch基本使用\" class=\"headerlink\" title=\"Fetch基本使用\"></a>Fetch基本使用</h3><h4 id=\"最简单的使用\"><a href=\"#最简单的使用\" class=\"headerlink\" title=\"最简单的使用\"></a>最简单的使用</h4><blockquote>\n<p>如果只是请求一下服务器，不需要任何操作</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fetch(<span class=\"string\">'http://chenxiaoping.com/demo'</span>)添加请求头</div></pre></td></tr></table></figure>\n<blockquote>\n<p> 添加请求头和请求参数（服务端支持json参数）</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">fetch(<span class=\"string\">'https://mywebsite.com/endpoint/'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">method</span>: <span class=\"string\">'POST'</span>,</div><div class=\"line\">  <span class=\"attr\">headers</span>: &#123;</div><div class=\"line\">    <span class=\"string\">'Accept'</span>: <span class=\"string\">'application/json'</span>,</div><div class=\"line\">    <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span>,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">body</span>: <span class=\"built_in\">JSON</span>.stringify(&#123;</div><div class=\"line\">    <span class=\"attr\">firstParam</span>: <span class=\"string\">'yourValue'</span>,</div><div class=\"line\">    <span class=\"attr\">secondParam</span>: <span class=\"string\">'yourOtherValue'</span>,</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<blockquote>\n<p> 添加请求头和请求参数（服务端不支持json参数）</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">fetch(<span class=\"string\">'https://mywebsite.com/endpoint/'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">method</span>: <span class=\"string\">'POST'</span>,</div><div class=\"line\">  <span class=\"attr\">headers</span>: &#123;</div><div class=\"line\">    <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/x-www-form-urlencoded'</span>,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">body</span>: <span class=\"string\">'key1=value1&amp;key2=value2'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"Response对象参数解析\"><a href=\"#Response对象参数解析\" class=\"headerlink\" title=\"Response对象参数解析\"></a>Response对象参数解析</h3><p><strong>Response对象中包含了多种属性：</strong></p>\n<ul>\n<li>status (number) ： HTTP请求的响应状态行。</li>\n<li>statusText (String) ： 服务器返回的状态报告。</li>\n<li>ok (boolean) ：如果返回200表示请求成功，则为true。</li>\n<li>headers (Headers) ： 返回头部信息。</li>\n<li>url (String) ：请求的地址。</li>\n</ul>\n<p><strong>Response对象还提供了多种方法：</strong></p>\n<ul>\n<li>formData()：返回一个带有FormData的Promise。</li>\n<li>json() ：返回一个带有JSON对象的Promise。</li>\n<li>text()：返回一个带有文本的Promise。</li>\n<li>clone() ：复制一份response。</li>\n<li>error()：返回一个与网络相关的错误。</li>\n<li>redirect()：返回了一个可以重定向至某URL的response。</li>\n<li>arrayBuffer()：返回一个带有ArrayBuffer的Promise。</li>\n<li>blob() ： 返回一个带有Blob的Promise。</li>\n</ul>\n<blockquote>\n<p>解析json和修改json数据</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">loadData() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> fetch(<span class=\"string\">'https://facebook.github.io/react-native/movies.json'</span>,)</div><div class=\"line\">            .then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> response.json())</div><div class=\"line\">            .then(<span class=\"function\">(<span class=\"params\">json</span>) =&gt;</span> &#123;</div><div class=\"line\">                json[<span class=\"string\">'description'</span>]=<span class=\"string\">'hello'</span></div><div class=\"line\">                Alert.alert(json.description)</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">                        <span class=\"attr\">buttonText</span>: <span class=\"string\">'doLoad'</span>,</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\">                <span class=\"built_in\">console</span>.error(error);</div><div class=\"line\">            &#125;)</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>response：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"The Basics - Networking\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Your app fetched this from a remote endpoint!\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"movies\"</span>: [</div><div class=\"line\">    &#123; <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"1\"</span>, <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Star Wars\"</span>, <span class=\"attr\">\"releaseYear\"</span>: <span class=\"string\">\"1977\"</span> &#125;,</div><div class=\"line\">    &#123; <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"2\"</span>, <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Back to the Future\"</span>, <span class=\"attr\">\"releaseYear\"</span>: <span class=\"string\">\"1985\"</span> &#125;,</div><div class=\"line\">    &#123; <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"3\"</span>, <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"The Matrix\"</span>, <span class=\"attr\">\"releaseYear\"</span>: <span class=\"string\">\"1999\"</span> &#125;,</div><div class=\"line\">    &#123; <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"4\"</span>, <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Inception\"</span>, <span class=\"attr\">\"releaseYear\"</span>: <span class=\"string\">\"2010\"</span> &#125;,</div><div class=\"line\">    &#123; <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"5\"</span>, <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Interstellar\"</span>, <span class=\"attr\">\"releaseYear\"</span>: <span class=\"string\">\"2014\"</span> &#125;</div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看到弹窗为‘hello’</p>\n<h3 id=\"超时\"><a href=\"#超时\" class=\"headerlink\" title=\"超时\"></a>超时</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fetch(input, init).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123; ... &#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ul>\n<li>input</li>\n</ul>\n<p>定义要获取的资源。这可能是： 一个 USVString 字符串，包含要获取资源的 URL。 一个 Request 对象。</p>\n<ul>\n<li>init 可选 一个配置项对象，包括所有对请求的设置。可选的参数有：</li>\n</ul>\n<ol>\n<li>method: 请求使用的方法，如 GET、POST。</li>\n<li>headers: 请求的头信息，形式为 Headers 对象或 ByteString。 body: 请求的 body 信息：可能是一个 Blob、BufferSource、FormData、URLSearchParams 或者 USVString 对象。注意 GET 或 HEAD 方法的请求不能包含 body 信息。</li>\n<li>mode: 请求的模式，如 cors、 no-cors 或者 same-origin。</li>\n<li>credentials: 请求的 credentials，如 omit、same-origin 或者 include。</li>\n<li>cache: 请求的 cache 模式: default, no-store, reload, no-cache, force-cache, or only-if-cached.</li>\n</ol>\n<p>根本找不到 timeout 配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 超时版的fetch</span></div><div class=\"line\">      _fetch(fetch, timeout) &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.race([</div><div class=\"line\">              fetch,</div><div class=\"line\">              <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">                  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'request timeout'</span>)), timeout);</div><div class=\"line\">              &#125;)</div><div class=\"line\">          ]);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">// 使用</span></div><div class=\"line\">      _fetch(fetch(<span class=\"string\">'url'</span>), <span class=\"number\">1000</span>).then(<span class=\"function\">(<span class=\"params\">info</span>)=&gt;</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> info.text();</div><div class=\"line\">      &#125;).then(<span class=\"function\">(<span class=\"params\">info</span>)=&gt;</span> &#123;</div><div class=\"line\">          <span class=\"built_in\">console</span>.log(info);</div><div class=\"line\">      &#125;).catch(<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(err);    </div><div class=\"line\">      &#125;);</div></pre></td></tr></table></figure>\n<p><strong>代码中用Promise.race()将fetch和一个新的Promise包装在了一起,新的Promise和fetch谁率先返回就把该Promise实例返回值传递给下面的.then()或者是.catch()</strong></p>\n<p><a href=\"http://www.open-open.com/lib/view/open1472717659359.html\" target=\"_blank\" rel=\"external\">让fetch也可以timeout</a></p>\n<p><a href=\"https://www.cnblogs.com/sorrowx/p/7096316.html\" target=\"_blank\" rel=\"external\"><a href=\"https://www.cnblogs.com/sorrowx/p/7096316.html\" target=\"_blank\" rel=\"external\">可以设置超时版的的fetch</a></a></p>\n<p><a href=\"https://blog.csdn.net/qq_33323251/article/details/79832689\" target=\"_blank\" rel=\"external\">fetch添加超时时间只需几行代码–fetch timeout</a></p>\n<h3 id=\"简单封装\"><a href=\"#简单封装\" class=\"headerlink\" title=\"简单封装\"></a>简单封装</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FetchUtil</span> </span>&#123;</div><div class=\"line\">    init() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.url = <span class=\"string\">''</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.method = <span class=\"string\">'GET'</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.headers = &#123;&#125;;</div><div class=\"line\">        <span class=\"keyword\">this</span>.body_type = <span class=\"string\">'form'</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.bodys = &#123;&#125;;</div><div class=\"line\">        <span class=\"keyword\">this</span>.credentials = <span class=\"string\">'omit'</span>;</div><div class=\"line\">      <span class=\"comment\">//默认返回json对象</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.return_type = <span class=\"string\">'json'</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.overtime = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.firstThen = <span class=\"literal\">undefined</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    setUrl(url) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.url = url;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    setMethod(val) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.method = val;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    setBodyType(val) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.body_type = val;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setReturnType(val) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.return_type = val;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setOvertime(val) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.overtime = val;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setHeader(name, val = <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> name == <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.headers[name] = val;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> name == <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">Object</span>.keys(name).map(<span class=\"function\">(<span class=\"params\">index</span>) =&gt;</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.headers[index] = name[index];</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setBody(name, val = <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> name == <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.bodys[name] = val;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> name == <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">Object</span>.keys(name).map(<span class=\"function\">(<span class=\"params\">index</span>) =&gt;</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.bodys[index] = name[index];</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setCookieOrigin() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.credentials = <span class=\"string\">'same-origin'</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setCookieCors() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.credentials = <span class=\"string\">'include'</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    thenStart(then) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.firstThen = then;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    dofetch() &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> options = &#123;&#125;;</div><div class=\"line\">        options.method = <span class=\"keyword\">this</span>.method;</div><div class=\"line\">        options.credentials = <span class=\"keyword\">this</span>.credentials;</div><div class=\"line\"></div><div class=\"line\">        options.headers = <span class=\"keyword\">this</span>.headers;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (&#123;&#125; != <span class=\"keyword\">this</span>.bodys &amp;&amp; <span class=\"keyword\">this</span>.method != <span class=\"string\">'GET'</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"string\">'form'</span> == <span class=\"keyword\">this</span>.body_type) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.setHeader(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"application/x-www-form-urlencoded;charset=UTF-8\"</span>);</div><div class=\"line\">                <span class=\"keyword\">let</span> data = <span class=\"string\">''</span>;</div><div class=\"line\">                <span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>.bodys).map(<span class=\"function\">(<span class=\"params\">index</span>) =&gt;</span> &#123;</div><div class=\"line\">                    <span class=\"keyword\">let</span> param = <span class=\"built_in\">encodeURI</span>(<span class=\"keyword\">this</span>.bodys[index]);</div><div class=\"line\">                    data += <span class=\"string\">`<span class=\"subst\">$&#123;index&#125;</span>=<span class=\"subst\">$&#123;param&#125;</span>&amp;`</span>;</div><div class=\"line\">                &#125;);</div><div class=\"line\">                options.body = data;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">'file'</span> == <span class=\"keyword\">this</span>.body_type) &#123;</div><div class=\"line\">                <span class=\"keyword\">let</span> data = <span class=\"keyword\">new</span> FormData();</div><div class=\"line\">                <span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>.bodys).map(<span class=\"function\">(<span class=\"params\">index</span>) =&gt;</span> &#123;</div><div class=\"line\">                    data.append(index, <span class=\"keyword\">this</span>.bodys[index]);</div><div class=\"line\">                &#125;);</div><div class=\"line\">                options.body = data;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">'json'</span> == <span class=\"keyword\">this</span>.body_type) &#123;</div><div class=\"line\">                options.body = <span class=\"built_in\">JSON</span>.stringify(<span class=\"keyword\">this</span>.bodys);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.race([</div><div class=\"line\">            fetch(<span class=\"keyword\">this</span>.url, options),</div><div class=\"line\">            <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">                setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'request timeout'</span>)), <span class=\"keyword\">this</span>.overtime ? <span class=\"keyword\">this</span>.overtime : <span class=\"number\">30</span> * <span class=\"number\">1000</span>);</div><div class=\"line\">            &#125;)</div><div class=\"line\">        ]).then(</div><div class=\"line\">            <span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.firstThen) &#123;</div><div class=\"line\">                    <span class=\"keyword\">let</span> tempResponse = <span class=\"keyword\">this</span>.firstThen(response);</div><div class=\"line\">                    <span class=\"keyword\">if</span> (tempResponse) &#123;</div><div class=\"line\">                        <span class=\"keyword\">return</span> tempResponse;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">return</span> response;</div><div class=\"line\">            &#125;</div><div class=\"line\">        ).then(</div><div class=\"line\">            <span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"string\">'json'</span> == <span class=\"keyword\">this</span>.return_type) &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> response.json();</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">'text'</span> == <span class=\"keyword\">this</span>.return_type) &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> response.text();</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">'blob'</span> == <span class=\"keyword\">this</span>.return_type) &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> response.blob();</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">'formData'</span> == <span class=\"keyword\">this</span>.return_type) &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> response.formData();</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">'arrayBuffer'</span> == <span class=\"keyword\">this</span>.return_type) &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> response.arrayBuffer();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//use</span></div><div class=\"line\"><span class=\"keyword\">let</span> fetchUtil = <span class=\"keyword\">new</span> FetchUtil();</div><div class=\"line\">        fetchUtil.init()</div><div class=\"line\">            .setUrl(<span class=\"string\">'https://www.google.com/'</span>)</div><div class=\"line\">            .setMethod(<span class=\"string\">'GET'</span>)</div><div class=\"line\">            .setOvertime(<span class=\"number\">15</span> * <span class=\"number\">1000</span>)</div><div class=\"line\">            .setHeader(&#123;</div><div class=\"line\">                <span class=\"string\">'Accept'</span>: <span class=\"string\">'application/json'</span>,</div><div class=\"line\">                <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span></div><div class=\"line\">            &#125;)</div><div class=\"line\">            .dofetch()</div><div class=\"line\">            .then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</div><div class=\"line\">          \t\t<span class=\"comment\">//这里的response已经被转成object了</span></div><div class=\"line\">                <span class=\"built_in\">console</span>.warn( <span class=\"keyword\">typeof</span> response.title);</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</div><div class=\"line\"></div><div class=\"line\">                Alert.alert(data);</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.warn( <span class=\"string\">'=&gt; catch: '</span>, error);</div><div class=\"line\">                <span class=\"comment\">// console.log('=&gt; catch: ', error);</span></div><div class=\"line\">            &#125;);</div></pre></td></tr></table></figure>\n","excerpt":"<p>React Native 中虽然也内置了XMLHttpRequest 网络请求Api（也就是ajax），但XMLHttpRequest 是一个设计粗糙的API，不符合职责分离的原则，配置和调用方式比较混乱，而且基于事件的异步模型不如现代的Promise友好。所以，React Native官方推荐使用Fetch Api</p>","more":"<h3 id=\"Fetch基本使用\"><a href=\"#Fetch基本使用\" class=\"headerlink\" title=\"Fetch基本使用\"></a>Fetch基本使用</h3><h4 id=\"最简单的使用\"><a href=\"#最简单的使用\" class=\"headerlink\" title=\"最简单的使用\"></a>最简单的使用</h4><blockquote>\n<p>如果只是请求一下服务器，不需要任何操作</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fetch(<span class=\"string\">'http://chenxiaoping.com/demo'</span>)添加请求头</div></pre></td></tr></table></figure>\n<blockquote>\n<p> 添加请求头和请求参数（服务端支持json参数）</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">fetch(<span class=\"string\">'https://mywebsite.com/endpoint/'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">method</span>: <span class=\"string\">'POST'</span>,</div><div class=\"line\">  <span class=\"attr\">headers</span>: &#123;</div><div class=\"line\">    <span class=\"string\">'Accept'</span>: <span class=\"string\">'application/json'</span>,</div><div class=\"line\">    <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span>,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">body</span>: <span class=\"built_in\">JSON</span>.stringify(&#123;</div><div class=\"line\">    <span class=\"attr\">firstParam</span>: <span class=\"string\">'yourValue'</span>,</div><div class=\"line\">    <span class=\"attr\">secondParam</span>: <span class=\"string\">'yourOtherValue'</span>,</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<blockquote>\n<p> 添加请求头和请求参数（服务端不支持json参数）</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">fetch(<span class=\"string\">'https://mywebsite.com/endpoint/'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">method</span>: <span class=\"string\">'POST'</span>,</div><div class=\"line\">  <span class=\"attr\">headers</span>: &#123;</div><div class=\"line\">    <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/x-www-form-urlencoded'</span>,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">body</span>: <span class=\"string\">'key1=value1&amp;key2=value2'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"Response对象参数解析\"><a href=\"#Response对象参数解析\" class=\"headerlink\" title=\"Response对象参数解析\"></a>Response对象参数解析</h3><p><strong>Response对象中包含了多种属性：</strong></p>\n<ul>\n<li>status (number) ： HTTP请求的响应状态行。</li>\n<li>statusText (String) ： 服务器返回的状态报告。</li>\n<li>ok (boolean) ：如果返回200表示请求成功，则为true。</li>\n<li>headers (Headers) ： 返回头部信息。</li>\n<li>url (String) ：请求的地址。</li>\n</ul>\n<p><strong>Response对象还提供了多种方法：</strong></p>\n<ul>\n<li>formData()：返回一个带有FormData的Promise。</li>\n<li>json() ：返回一个带有JSON对象的Promise。</li>\n<li>text()：返回一个带有文本的Promise。</li>\n<li>clone() ：复制一份response。</li>\n<li>error()：返回一个与网络相关的错误。</li>\n<li>redirect()：返回了一个可以重定向至某URL的response。</li>\n<li>arrayBuffer()：返回一个带有ArrayBuffer的Promise。</li>\n<li>blob() ： 返回一个带有Blob的Promise。</li>\n</ul>\n<blockquote>\n<p>解析json和修改json数据</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">loadData() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> fetch(<span class=\"string\">'https://facebook.github.io/react-native/movies.json'</span>,)</div><div class=\"line\">            .then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> response.json())</div><div class=\"line\">            .then(<span class=\"function\">(<span class=\"params\">json</span>) =&gt;</span> &#123;</div><div class=\"line\">                json[<span class=\"string\">'description'</span>]=<span class=\"string\">'hello'</span></div><div class=\"line\">                Alert.alert(json.description)</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">                        <span class=\"attr\">buttonText</span>: <span class=\"string\">'doLoad'</span>,</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\">                <span class=\"built_in\">console</span>.error(error);</div><div class=\"line\">            &#125;)</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>response：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"The Basics - Networking\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Your app fetched this from a remote endpoint!\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"movies\"</span>: [</div><div class=\"line\">    &#123; <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"1\"</span>, <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Star Wars\"</span>, <span class=\"attr\">\"releaseYear\"</span>: <span class=\"string\">\"1977\"</span> &#125;,</div><div class=\"line\">    &#123; <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"2\"</span>, <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Back to the Future\"</span>, <span class=\"attr\">\"releaseYear\"</span>: <span class=\"string\">\"1985\"</span> &#125;,</div><div class=\"line\">    &#123; <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"3\"</span>, <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"The Matrix\"</span>, <span class=\"attr\">\"releaseYear\"</span>: <span class=\"string\">\"1999\"</span> &#125;,</div><div class=\"line\">    &#123; <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"4\"</span>, <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Inception\"</span>, <span class=\"attr\">\"releaseYear\"</span>: <span class=\"string\">\"2010\"</span> &#125;,</div><div class=\"line\">    &#123; <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"5\"</span>, <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Interstellar\"</span>, <span class=\"attr\">\"releaseYear\"</span>: <span class=\"string\">\"2014\"</span> &#125;</div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看到弹窗为‘hello’</p>\n<h3 id=\"超时\"><a href=\"#超时\" class=\"headerlink\" title=\"超时\"></a>超时</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fetch(input, init).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123; ... &#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ul>\n<li>input</li>\n</ul>\n<p>定义要获取的资源。这可能是： 一个 USVString 字符串，包含要获取资源的 URL。 一个 Request 对象。</p>\n<ul>\n<li>init 可选 一个配置项对象，包括所有对请求的设置。可选的参数有：</li>\n</ul>\n<ol>\n<li>method: 请求使用的方法，如 GET、POST。</li>\n<li>headers: 请求的头信息，形式为 Headers 对象或 ByteString。 body: 请求的 body 信息：可能是一个 Blob、BufferSource、FormData、URLSearchParams 或者 USVString 对象。注意 GET 或 HEAD 方法的请求不能包含 body 信息。</li>\n<li>mode: 请求的模式，如 cors、 no-cors 或者 same-origin。</li>\n<li>credentials: 请求的 credentials，如 omit、same-origin 或者 include。</li>\n<li>cache: 请求的 cache 模式: default, no-store, reload, no-cache, force-cache, or only-if-cached.</li>\n</ol>\n<p>根本找不到 timeout 配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 超时版的fetch</span></div><div class=\"line\">      _fetch(fetch, timeout) &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.race([</div><div class=\"line\">              fetch,</div><div class=\"line\">              <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">                  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'request timeout'</span>)), timeout);</div><div class=\"line\">              &#125;)</div><div class=\"line\">          ]);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">// 使用</span></div><div class=\"line\">      _fetch(fetch(<span class=\"string\">'url'</span>), <span class=\"number\">1000</span>).then(<span class=\"function\">(<span class=\"params\">info</span>)=&gt;</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> info.text();</div><div class=\"line\">      &#125;).then(<span class=\"function\">(<span class=\"params\">info</span>)=&gt;</span> &#123;</div><div class=\"line\">          <span class=\"built_in\">console</span>.log(info);</div><div class=\"line\">      &#125;).catch(<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(err);    </div><div class=\"line\">      &#125;);</div></pre></td></tr></table></figure>\n<p><strong>代码中用Promise.race()将fetch和一个新的Promise包装在了一起,新的Promise和fetch谁率先返回就把该Promise实例返回值传递给下面的.then()或者是.catch()</strong></p>\n<p><a href=\"http://www.open-open.com/lib/view/open1472717659359.html\">让fetch也可以timeout</a></p>\n<p><a href=\"https://www.cnblogs.com/sorrowx/p/7096316.html\"><a href=\"https://www.cnblogs.com/sorrowx/p/7096316.html\">可以设置超时版的的fetch</a></a></p>\n<p><a href=\"https://blog.csdn.net/qq_33323251/article/details/79832689\">fetch添加超时时间只需几行代码–fetch timeout</a></p>\n<h3 id=\"简单封装\"><a href=\"#简单封装\" class=\"headerlink\" title=\"简单封装\"></a>简单封装</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FetchUtil</span> </span>&#123;</div><div class=\"line\">    init() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.url = <span class=\"string\">''</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.method = <span class=\"string\">'GET'</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.headers = &#123;&#125;;</div><div class=\"line\">        <span class=\"keyword\">this</span>.body_type = <span class=\"string\">'form'</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.bodys = &#123;&#125;;</div><div class=\"line\">        <span class=\"keyword\">this</span>.credentials = <span class=\"string\">'omit'</span>;</div><div class=\"line\">      <span class=\"comment\">//默认返回json对象</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.return_type = <span class=\"string\">'json'</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.overtime = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.firstThen = <span class=\"literal\">undefined</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    setUrl(url) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.url = url;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    setMethod(val) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.method = val;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    setBodyType(val) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.body_type = val;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setReturnType(val) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.return_type = val;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setOvertime(val) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.overtime = val;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setHeader(name, val = <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> name == <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.headers[name] = val;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> name == <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">Object</span>.keys(name).map(<span class=\"function\">(<span class=\"params\">index</span>) =&gt;</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.headers[index] = name[index];</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setBody(name, val = <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> name == <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.bodys[name] = val;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> name == <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">Object</span>.keys(name).map(<span class=\"function\">(<span class=\"params\">index</span>) =&gt;</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.bodys[index] = name[index];</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setCookieOrigin() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.credentials = <span class=\"string\">'same-origin'</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setCookieCors() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.credentials = <span class=\"string\">'include'</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    thenStart(then) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.firstThen = then;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    dofetch() &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> options = &#123;&#125;;</div><div class=\"line\">        options.method = <span class=\"keyword\">this</span>.method;</div><div class=\"line\">        options.credentials = <span class=\"keyword\">this</span>.credentials;</div><div class=\"line\"></div><div class=\"line\">        options.headers = <span class=\"keyword\">this</span>.headers;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (&#123;&#125; != <span class=\"keyword\">this</span>.bodys &amp;&amp; <span class=\"keyword\">this</span>.method != <span class=\"string\">'GET'</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"string\">'form'</span> == <span class=\"keyword\">this</span>.body_type) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.setHeader(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"application/x-www-form-urlencoded;charset=UTF-8\"</span>);</div><div class=\"line\">                <span class=\"keyword\">let</span> data = <span class=\"string\">''</span>;</div><div class=\"line\">                <span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>.bodys).map(<span class=\"function\">(<span class=\"params\">index</span>) =&gt;</span> &#123;</div><div class=\"line\">                    <span class=\"keyword\">let</span> param = <span class=\"built_in\">encodeURI</span>(<span class=\"keyword\">this</span>.bodys[index]);</div><div class=\"line\">                    data += <span class=\"string\">`<span class=\"subst\">$&#123;index&#125;</span>=<span class=\"subst\">$&#123;param&#125;</span>&amp;`</span>;</div><div class=\"line\">                &#125;);</div><div class=\"line\">                options.body = data;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">'file'</span> == <span class=\"keyword\">this</span>.body_type) &#123;</div><div class=\"line\">                <span class=\"keyword\">let</span> data = <span class=\"keyword\">new</span> FormData();</div><div class=\"line\">                <span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>.bodys).map(<span class=\"function\">(<span class=\"params\">index</span>) =&gt;</span> &#123;</div><div class=\"line\">                    data.append(index, <span class=\"keyword\">this</span>.bodys[index]);</div><div class=\"line\">                &#125;);</div><div class=\"line\">                options.body = data;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">'json'</span> == <span class=\"keyword\">this</span>.body_type) &#123;</div><div class=\"line\">                options.body = <span class=\"built_in\">JSON</span>.stringify(<span class=\"keyword\">this</span>.bodys);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.race([</div><div class=\"line\">            fetch(<span class=\"keyword\">this</span>.url, options),</div><div class=\"line\">            <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">                setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'request timeout'</span>)), <span class=\"keyword\">this</span>.overtime ? <span class=\"keyword\">this</span>.overtime : <span class=\"number\">30</span> * <span class=\"number\">1000</span>);</div><div class=\"line\">            &#125;)</div><div class=\"line\">        ]).then(</div><div class=\"line\">            <span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.firstThen) &#123;</div><div class=\"line\">                    <span class=\"keyword\">let</span> tempResponse = <span class=\"keyword\">this</span>.firstThen(response);</div><div class=\"line\">                    <span class=\"keyword\">if</span> (tempResponse) &#123;</div><div class=\"line\">                        <span class=\"keyword\">return</span> tempResponse;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">return</span> response;</div><div class=\"line\">            &#125;</div><div class=\"line\">        ).then(</div><div class=\"line\">            <span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"string\">'json'</span> == <span class=\"keyword\">this</span>.return_type) &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> response.json();</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">'text'</span> == <span class=\"keyword\">this</span>.return_type) &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> response.text();</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">'blob'</span> == <span class=\"keyword\">this</span>.return_type) &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> response.blob();</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">'formData'</span> == <span class=\"keyword\">this</span>.return_type) &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> response.formData();</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">'arrayBuffer'</span> == <span class=\"keyword\">this</span>.return_type) &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> response.arrayBuffer();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//use</span></div><div class=\"line\"><span class=\"keyword\">let</span> fetchUtil = <span class=\"keyword\">new</span> FetchUtil();</div><div class=\"line\">        fetchUtil.init()</div><div class=\"line\">            .setUrl(<span class=\"string\">'https://www.google.com/'</span>)</div><div class=\"line\">            .setMethod(<span class=\"string\">'GET'</span>)</div><div class=\"line\">            .setOvertime(<span class=\"number\">15</span> * <span class=\"number\">1000</span>)</div><div class=\"line\">            .setHeader(&#123;</div><div class=\"line\">                <span class=\"string\">'Accept'</span>: <span class=\"string\">'application/json'</span>,</div><div class=\"line\">                <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span></div><div class=\"line\">            &#125;)</div><div class=\"line\">            .dofetch()</div><div class=\"line\">            .then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</div><div class=\"line\">          \t\t<span class=\"comment\">//这里的response已经被转成object了</span></div><div class=\"line\">                <span class=\"built_in\">console</span>.warn( <span class=\"keyword\">typeof</span> response.title);</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</div><div class=\"line\"></div><div class=\"line\">                Alert.alert(data);</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.warn( <span class=\"string\">'=&gt; catch: '</span>, error);</div><div class=\"line\">                <span class=\"comment\">// console.log('=&gt; catch: ', error);</span></div><div class=\"line\">            &#125;);</div></pre></td></tr></table></figure>"},{"title":"mysql关联阿里云dms","date":"2018-06-14T04:09:47.000Z","password":123456,"_content":"\n将远程服务器中的mysql绑定到阿里云DMS中\n\n<!--more-->\n\n#### 阿里云DMS绑定mysql\n\n![查看截图](https://img-blog.csdn.net/20180608174133433?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdhbml0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n#### **数据管理DMS登录云服务器的IP段（经典网络）：**\n\n[DMS的ip段](https://help.aliyun.com/knowledge_detail/51251.html)\n\n120.55.177.0/24\n\n121.43.18.0/24\n\n101.37.74.0/24\n\n10.153.176.106/24\n\n10.137.42.136/24\n\n11.193.54.0/24\n\n数据管理DMS登录云服务器的IP段（VPC）：\n\n100.104.175.0/24\n\n100.104.72.0/24\n\n100.104.5.0/24\n\n100.104.205.0/24\n\n**添加白名单**\n1，登录mysql：\n\n```\nmysql -h host -u username -p password\n```\n\n2，切换至mysql库：\n\n```\nuse mysql;\n```\n\n3 查看当前允许登录IP及用户\n\n```\nselect Host,User from user;\n```\n\n4 删除不必要而表中存在的IP和用户\n\n```\nDELETE FROM user WHERE User='username' and Host='host';\n```\n\n(host值为“%”或空表示所有IP都可登录，一般来说此类行需要删掉)\n\n5 增加需要而表中没有的IP和用户\n\n```\nGRANT ALL PRIVILEGES ON *.* TO 'username'@'host' IDENTIFIED BY 'password' WITH GRANT OPTION;\n \n```\n\n6 使更新的配置生效\n\n```\nFLUSH PRIVILEGES;\n```\n\n#### 登录mysql失败问题\n\n**错误 ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: YE**S)\n\n- vim /etc/my.cnf(注：windows下修改的是my.ini)\n\n```\n[mysqld]\n\n\n\nsql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES\n\n# 一般配置选项\nbasedir = /usr/local/mysql\ndatadir = /usr/local/mysql/data\nport = 3306\nsocket = /tmp/mysql.sock\ncharacter-set-server=utf8\n#在此添加【主意是在[mysqld]内部】\nskip-grant-tables\n\nback_log = 300\nmax_connections = 1000\nmax_connect_errors = 50\ntable_open_cache = 4096\nmax_allowed_packet = 32M\n#binlog_cache_size = 4M\n```\n\n:wq 保存\n\n- 接下来我们需要重启MySQL：\n\n[各个平台重启mysql的方式](https://www.cnblogs.com/adolfmc/p/5497974.html)\n\n```\nservice mysqld restart\n```\n\n\n\n- 重启之后输入#mysql即可进入mysql。\n\n\n- 接下来就是用sql来修改root的密码\n\n```\nmysql> use mysql;\nmysql> update user set password=password(\"你的新密码\") where user=\"root\";\nmysql> flush privileges;\nmysql> quit\n\n到这里root账户就已经重置成新的密码了。\n```\n\n- 5.编辑my.cnf,去掉刚才添加的内容，然后重启MySQL。\n\n###### 查看当前mysql用户表\n\nhost为% 代表任意域名下都可以访问\n\n```\nmysql> select Host,User from user;\n+-----------------+-----------+\n| Host            | User      |\n+-----------------+-----------+\n| %               | dms       |\n| 120.55.177.0/24 | dms       |\n| localhost       | mysql.sys |\n| localhost       | root      |\n+-----------------+-----------+\n4 rows in set (0.00 sec)\n```\n\n","source":"_posts/mysql关联阿里云dms.md","raw":"---\ntitle: mysql关联阿里云dms\ndate: 2018-06-14 12:09:47\ntags: Dev\ncategories: Dev\npassword: 123456\n---\n\n将远程服务器中的mysql绑定到阿里云DMS中\n\n<!--more-->\n\n#### 阿里云DMS绑定mysql\n\n![查看截图](https://img-blog.csdn.net/20180608174133433?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdhbml0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n#### **数据管理DMS登录云服务器的IP段（经典网络）：**\n\n[DMS的ip段](https://help.aliyun.com/knowledge_detail/51251.html)\n\n120.55.177.0/24\n\n121.43.18.0/24\n\n101.37.74.0/24\n\n10.153.176.106/24\n\n10.137.42.136/24\n\n11.193.54.0/24\n\n数据管理DMS登录云服务器的IP段（VPC）：\n\n100.104.175.0/24\n\n100.104.72.0/24\n\n100.104.5.0/24\n\n100.104.205.0/24\n\n**添加白名单**\n1，登录mysql：\n\n```\nmysql -h host -u username -p password\n```\n\n2，切换至mysql库：\n\n```\nuse mysql;\n```\n\n3 查看当前允许登录IP及用户\n\n```\nselect Host,User from user;\n```\n\n4 删除不必要而表中存在的IP和用户\n\n```\nDELETE FROM user WHERE User='username' and Host='host';\n```\n\n(host值为“%”或空表示所有IP都可登录，一般来说此类行需要删掉)\n\n5 增加需要而表中没有的IP和用户\n\n```\nGRANT ALL PRIVILEGES ON *.* TO 'username'@'host' IDENTIFIED BY 'password' WITH GRANT OPTION;\n \n```\n\n6 使更新的配置生效\n\n```\nFLUSH PRIVILEGES;\n```\n\n#### 登录mysql失败问题\n\n**错误 ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: YE**S)\n\n- vim /etc/my.cnf(注：windows下修改的是my.ini)\n\n```\n[mysqld]\n\n\n\nsql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES\n\n# 一般配置选项\nbasedir = /usr/local/mysql\ndatadir = /usr/local/mysql/data\nport = 3306\nsocket = /tmp/mysql.sock\ncharacter-set-server=utf8\n#在此添加【主意是在[mysqld]内部】\nskip-grant-tables\n\nback_log = 300\nmax_connections = 1000\nmax_connect_errors = 50\ntable_open_cache = 4096\nmax_allowed_packet = 32M\n#binlog_cache_size = 4M\n```\n\n:wq 保存\n\n- 接下来我们需要重启MySQL：\n\n[各个平台重启mysql的方式](https://www.cnblogs.com/adolfmc/p/5497974.html)\n\n```\nservice mysqld restart\n```\n\n\n\n- 重启之后输入#mysql即可进入mysql。\n\n\n- 接下来就是用sql来修改root的密码\n\n```\nmysql> use mysql;\nmysql> update user set password=password(\"你的新密码\") where user=\"root\";\nmysql> flush privileges;\nmysql> quit\n\n到这里root账户就已经重置成新的密码了。\n```\n\n- 5.编辑my.cnf,去掉刚才添加的内容，然后重启MySQL。\n\n###### 查看当前mysql用户表\n\nhost为% 代表任意域名下都可以访问\n\n```\nmysql> select Host,User from user;\n+-----------------+-----------+\n| Host            | User      |\n+-----------------+-----------+\n| %               | dms       |\n| 120.55.177.0/24 | dms       |\n| localhost       | mysql.sys |\n| localhost       | root      |\n+-----------------+-----------+\n4 rows in set (0.00 sec)\n```\n\n","slug":"mysql关联阿里云dms","published":1,"updated":"2018-07-19T02:13:25.625Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6n000211kygxy05ebii","content":"<p>将远程服务器中的mysql绑定到阿里云DMS中</p>\n<a id=\"more\"></a>\n<h4 id=\"阿里云DMS绑定mysql\"><a href=\"#阿里云DMS绑定mysql\" class=\"headerlink\" title=\"阿里云DMS绑定mysql\"></a>阿里云DMS绑定mysql</h4><p><img src=\"https://img-blog.csdn.net/20180608174133433?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdhbml0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"查看截图\"></p>\n<h4 id=\"数据管理DMS登录云服务器的IP段（经典网络）：\"><a href=\"#数据管理DMS登录云服务器的IP段（经典网络）：\" class=\"headerlink\" title=\"数据管理DMS登录云服务器的IP段（经典网络）：\"></a><strong>数据管理DMS登录云服务器的IP段（经典网络）：</strong></h4><p><a href=\"https://help.aliyun.com/knowledge_detail/51251.html\" target=\"_blank\" rel=\"external\">DMS的ip段</a></p>\n<p>120.55.177.0/24</p>\n<p>121.43.18.0/24</p>\n<p>101.37.74.0/24</p>\n<p>10.153.176.106/24</p>\n<p>10.137.42.136/24</p>\n<p>11.193.54.0/24</p>\n<p>数据管理DMS登录云服务器的IP段（VPC）：</p>\n<p>100.104.175.0/24</p>\n<p>100.104.72.0/24</p>\n<p>100.104.5.0/24</p>\n<p>100.104.205.0/24</p>\n<p><strong>添加白名单</strong><br>1，登录mysql：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql -h host -u username -<span class=\"selector-tag\">p</span> password</div></pre></td></tr></table></figure>\n<p>2，切换至mysql库：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">mysql</span>;</div></pre></td></tr></table></figure>\n<p>3 查看当前允许登录IP及用户</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> Host,<span class=\"keyword\">User</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span>;</div></pre></td></tr></table></figure>\n<p>4 删除不必要而表中存在的IP和用户</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> <span class=\"keyword\">user</span> <span class=\"keyword\">WHERE</span> <span class=\"keyword\">User</span>=<span class=\"string\">'username'</span> <span class=\"keyword\">and</span> Host=<span class=\"string\">'host'</span>;</div></pre></td></tr></table></figure>\n<p>(host值为“%”或空表示所有IP都可登录，一般来说此类行需要删掉)</p>\n<p>5 增加需要而表中没有的IP和用户</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">GRANT</span> ALL <span class=\"keyword\">PRIVILEGES</span> <span class=\"keyword\">ON</span> *.* <span class=\"keyword\">TO</span> <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span> <span class=\"keyword\">IDENTIFIED</span> <span class=\"keyword\">BY</span> <span class=\"string\">'password'</span> <span class=\"keyword\">WITH</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">OPTION</span>;</div></pre></td></tr></table></figure>\n<p>6 使更新的配置生效</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">FLUSH</span> <span class=\"keyword\">PRIVILEGES</span>;</div></pre></td></tr></table></figure>\n<h4 id=\"登录mysql失败问题\"><a href=\"#登录mysql失败问题\" class=\"headerlink\" title=\"登录mysql失败问题\"></a>登录mysql失败问题</h4><p><strong>错误 ERROR 1045 (28000): Access denied for user ‘root’@’localhost’ (using password: YE</strong>S)</p>\n<ul>\n<li>vim /etc/my.cnf(注：windows下修改的是my.ini)</li>\n</ul>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">[mysqld]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 一般配置选项</span></div><div class=\"line\"><span class=\"attr\">basedir</span> = /usr/local/mysql</div><div class=\"line\"><span class=\"attr\">datadir</span> = /usr/local/mysql/data</div><div class=\"line\"><span class=\"attr\">port</span> = <span class=\"number\">3306</span></div><div class=\"line\"><span class=\"attr\">socket</span> = /tmp/mysql.sock</div><div class=\"line\"><span class=\"attr\">character-set-server=utf8</span></div><div class=\"line\"><span class=\"comment\">#在此添加【主意是在[mysqld]内部】</span></div><div class=\"line\">skip-grant-tables</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">back_log</span> = <span class=\"number\">300</span></div><div class=\"line\"><span class=\"attr\">max_connections</span> = <span class=\"number\">1000</span></div><div class=\"line\"><span class=\"attr\">max_connect_errors</span> = <span class=\"number\">50</span></div><div class=\"line\"><span class=\"attr\">table_open_cache</span> = <span class=\"number\">4096</span></div><div class=\"line\"><span class=\"attr\">max_allowed_packet</span> = <span class=\"number\">32</span>M</div><div class=\"line\"><span class=\"comment\">#binlog_cache_size = 4M</span></div></pre></td></tr></table></figure>\n<p>:wq 保存</p>\n<ul>\n<li>接下来我们需要重启MySQL：</li>\n</ul>\n<p><a href=\"https://www.cnblogs.com/adolfmc/p/5497974.html\" target=\"_blank\" rel=\"external\">各个平台重启mysql的方式</a></p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">service mysqld restart</span></div></pre></td></tr></table></figure>\n<ul>\n<li>重启之后输入#mysql即可进入mysql。</li>\n</ul>\n<ul>\n<li>接下来就是用sql来修改root的密码</li>\n</ul>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; use mysql<span class=\"comment\">;</span></div><div class=\"line\">mysql&gt; update user set password=password(<span class=\"string\">\"你的新密码\"</span>) where user=<span class=\"string\">\"root\"</span><span class=\"comment\">;</span></div><div class=\"line\">mysql&gt; flush privileges<span class=\"comment\">;</span></div><div class=\"line\">mysql&gt; quit</div><div class=\"line\"></div><div class=\"line\">到这里root账户就已经重置成新的密码了。</div></pre></td></tr></table></figure>\n<ul>\n<li>5.编辑my.cnf,去掉刚才添加的内容，然后重启MySQL。</li>\n</ul>\n<h6 id=\"查看当前mysql用户表\"><a href=\"#查看当前mysql用户表\" class=\"headerlink\" title=\"查看当前mysql用户表\"></a>查看当前mysql用户表</h6><p>host为% 代表任意域名下都可以访问</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">mysql&gt; select Host,User from user;</span></div><div class=\"line\">+-----------------+-----------+</div><div class=\"line\"><span class=\"section\">| Host            | User      |</span></div><div class=\"line\">+-----------------+-----------+</div><div class=\"line\">| %               | dms       |</div><div class=\"line\">| 120.55.177.0/24 | dms       |</div><div class=\"line\">| localhost       | mysql.sys |</div><div class=\"line\"><span class=\"section\">| localhost       | root      |</span></div><div class=\"line\">+-----------------+-----------+</div><div class=\"line\">4 rows in set (0.00 sec)</div></pre></td></tr></table></figure>\n","excerpt":"<p>将远程服务器中的mysql绑定到阿里云DMS中</p>","more":"<h4 id=\"阿里云DMS绑定mysql\"><a href=\"#阿里云DMS绑定mysql\" class=\"headerlink\" title=\"阿里云DMS绑定mysql\"></a>阿里云DMS绑定mysql</h4><p><img src=\"https://img-blog.csdn.net/20180608174133433?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdhbml0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"查看截图\"></p>\n<h4 id=\"数据管理DMS登录云服务器的IP段（经典网络）：\"><a href=\"#数据管理DMS登录云服务器的IP段（经典网络）：\" class=\"headerlink\" title=\"数据管理DMS登录云服务器的IP段（经典网络）：\"></a><strong>数据管理DMS登录云服务器的IP段（经典网络）：</strong></h4><p><a href=\"https://help.aliyun.com/knowledge_detail/51251.html\">DMS的ip段</a></p>\n<p>120.55.177.0/24</p>\n<p>121.43.18.0/24</p>\n<p>101.37.74.0/24</p>\n<p>10.153.176.106/24</p>\n<p>10.137.42.136/24</p>\n<p>11.193.54.0/24</p>\n<p>数据管理DMS登录云服务器的IP段（VPC）：</p>\n<p>100.104.175.0/24</p>\n<p>100.104.72.0/24</p>\n<p>100.104.5.0/24</p>\n<p>100.104.205.0/24</p>\n<p><strong>添加白名单</strong><br>1，登录mysql：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql -h host -u username -<span class=\"selector-tag\">p</span> password</div></pre></td></tr></table></figure>\n<p>2，切换至mysql库：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">mysql</span>;</div></pre></td></tr></table></figure>\n<p>3 查看当前允许登录IP及用户</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> Host,<span class=\"keyword\">User</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span>;</div></pre></td></tr></table></figure>\n<p>4 删除不必要而表中存在的IP和用户</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> <span class=\"keyword\">user</span> <span class=\"keyword\">WHERE</span> <span class=\"keyword\">User</span>=<span class=\"string\">'username'</span> <span class=\"keyword\">and</span> Host=<span class=\"string\">'host'</span>;</div></pre></td></tr></table></figure>\n<p>(host值为“%”或空表示所有IP都可登录，一般来说此类行需要删掉)</p>\n<p>5 增加需要而表中没有的IP和用户</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">GRANT</span> ALL <span class=\"keyword\">PRIVILEGES</span> <span class=\"keyword\">ON</span> *.* <span class=\"keyword\">TO</span> <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span> <span class=\"keyword\">IDENTIFIED</span> <span class=\"keyword\">BY</span> <span class=\"string\">'password'</span> <span class=\"keyword\">WITH</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">OPTION</span>;</div></pre></td></tr></table></figure>\n<p>6 使更新的配置生效</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">FLUSH</span> <span class=\"keyword\">PRIVILEGES</span>;</div></pre></td></tr></table></figure>\n<h4 id=\"登录mysql失败问题\"><a href=\"#登录mysql失败问题\" class=\"headerlink\" title=\"登录mysql失败问题\"></a>登录mysql失败问题</h4><p><strong>错误 ERROR 1045 (28000): Access denied for user ‘root’@’localhost’ (using password: YE</strong>S)</p>\n<ul>\n<li>vim /etc/my.cnf(注：windows下修改的是my.ini)</li>\n</ul>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">[mysqld]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 一般配置选项</span></div><div class=\"line\"><span class=\"attr\">basedir</span> = /usr/local/mysql</div><div class=\"line\"><span class=\"attr\">datadir</span> = /usr/local/mysql/data</div><div class=\"line\"><span class=\"attr\">port</span> = <span class=\"number\">3306</span></div><div class=\"line\"><span class=\"attr\">socket</span> = /tmp/mysql.sock</div><div class=\"line\"><span class=\"attr\">character-set-server=utf8</span></div><div class=\"line\"><span class=\"comment\">#在此添加【主意是在[mysqld]内部】</span></div><div class=\"line\">skip-grant-tables</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">back_log</span> = <span class=\"number\">300</span></div><div class=\"line\"><span class=\"attr\">max_connections</span> = <span class=\"number\">1000</span></div><div class=\"line\"><span class=\"attr\">max_connect_errors</span> = <span class=\"number\">50</span></div><div class=\"line\"><span class=\"attr\">table_open_cache</span> = <span class=\"number\">4096</span></div><div class=\"line\"><span class=\"attr\">max_allowed_packet</span> = <span class=\"number\">32</span>M</div><div class=\"line\"><span class=\"comment\">#binlog_cache_size = 4M</span></div></pre></td></tr></table></figure>\n<p>:wq 保存</p>\n<ul>\n<li>接下来我们需要重启MySQL：</li>\n</ul>\n<p><a href=\"https://www.cnblogs.com/adolfmc/p/5497974.html\">各个平台重启mysql的方式</a></p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">service mysqld restart</span></div></pre></td></tr></table></figure>\n<ul>\n<li>重启之后输入#mysql即可进入mysql。</li>\n</ul>\n<ul>\n<li>接下来就是用sql来修改root的密码</li>\n</ul>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; use mysql<span class=\"comment\">;</span></div><div class=\"line\">mysql&gt; update user set password=password(<span class=\"string\">\"你的新密码\"</span>) where user=<span class=\"string\">\"root\"</span><span class=\"comment\">;</span></div><div class=\"line\">mysql&gt; flush privileges<span class=\"comment\">;</span></div><div class=\"line\">mysql&gt; quit</div><div class=\"line\"></div><div class=\"line\">到这里root账户就已经重置成新的密码了。</div></pre></td></tr></table></figure>\n<ul>\n<li>5.编辑my.cnf,去掉刚才添加的内容，然后重启MySQL。</li>\n</ul>\n<h6 id=\"查看当前mysql用户表\"><a href=\"#查看当前mysql用户表\" class=\"headerlink\" title=\"查看当前mysql用户表\"></a>查看当前mysql用户表</h6><p>host为% 代表任意域名下都可以访问</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">mysql&gt; select Host,User from user;</div><div class=\"line\">+-----------------+-----------+</span></div><div class=\"line\"><span class=\"section\">| Host            | User      |</div><div class=\"line\">+-----------------+-----------+</span></div><div class=\"line\">| %               | dms       |</div><div class=\"line\">| 120.55.177.0/24 | dms       |</div><div class=\"line\">| localhost       | mysql.sys |</div><div class=\"line\"><span class=\"section\">| localhost       | root      |</div><div class=\"line\">+-----------------+-----------+</span></div><div class=\"line\">4 rows in set (0.00 sec)</div></pre></td></tr></table></figure>"},{"title":"transient关键字的作用","date":"2017-03-15T12:51:11.000Z","password":123456,"_content":"\ntransient的相关知识整理\n\n<!--more-->\n\n### transient的相关知识\n\n#### 官方解释\n\n```java\nVariables may be marked transient to indicate that they are not part of the persistent state of an object.\n```\n\n#### 遇到问题\n\n我们都知道一个对象只要实现了Serializable接口，这个对象就可以被序列化，那么在实际开发过程中，可能会遇到这样的问题，这个类的有些属性需要序列号，而其他属性不需要序列化，比如说：一个用户有一些敏感信息，比如密码或者银行卡号之类，为了安全起见，不希望在网络操作（主要涉及到序列化操作，本地序列化缓存也适用）中被传输，这些信息对应的变量就可以加上transient关键字。换句话说，这个字段的生命周期仅存于调用者的内存中而不会写到磁盘里持久化。\n\n#### 解决问题\n\n再次之前，有一个姿势点：\n\n父类序列化\n\n> **一个情景**：一个子类实现了Serializable接口，它的父类都没有实现Serializable接口，序列化该子类对象，然后反序列化后，输出父类定义的某变量的数值，该变量数值与序列化前不同\n\n**解决**：**要想将父类对象也序列化，就需要让父类也实现Serializable 接口**。如果父类不实现的话的，就 **需要有默认的无参的构造函数**。在父类没有实现 Serializable 接口时，虚拟机是不会序列化父对象的，而一个 Java 对象的构造必须先有父对象，才有子对象，反序列化也不例外。所以反序列化时，为了构造父对象，只能调用父类的无参构造函数作为默认的父对象。因此当我们取父对象的变量值时，它的值是调用父类无参构造函数后的值。如果你考虑到这种序列化的情况，在父类无参构造函数中对变量进行初始化，否则的话，父类变量值都是默认声明的值，如 int 型的默认是 0，string 型的默认是 null。\n\nTransient 关键字的作用是控制变量的序列化，在变量声明前加上该关键字，可以阻止该变量被序列化到文件中，在被反序列化后，transient 变量的值被设为初始值，如 int 型的是 0，对象型的是 null。\n\n**特性使用案例**\n\n我们熟悉使用 Transient 关键字可以使得字段不被序列化，那么还有别的方法吗？根据父类对象序列化的规则，我们可以将不需要被序列化的字段抽取出来放到父类中，子类实现 Serializable 接口，父类不实现，根据父类序列化规则，父类的字段数据将不被序列化\n\n![](http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/8u215.png)\n\n上图中可以看出，attr1、attr2、attr3、attr5 都不会被序列化，放在父类中的好处在于当有另外一个 Child 类时，attr1、attr2、attr3 依然不会被序列化，不用重复抒写 transient，代码简洁。\n\n\n\n**参考：**\n\n[java学习—序列化与Transient关键字](http://blog.csdn.net/janronehoo/article/details/7306900)\n\n[Transient关键字使用场景](http://blog.csdn.net/hushaoxi/article/details/52385614)","source":"_posts/transient关键字的作用.md","raw":"---\ntitle: transient关键字的作用\ndate: 2017-03-15 20:51:11\ntags: \n- Android\ncategories: Android\npassword: 123456\n---\n\ntransient的相关知识整理\n\n<!--more-->\n\n### transient的相关知识\n\n#### 官方解释\n\n```java\nVariables may be marked transient to indicate that they are not part of the persistent state of an object.\n```\n\n#### 遇到问题\n\n我们都知道一个对象只要实现了Serializable接口，这个对象就可以被序列化，那么在实际开发过程中，可能会遇到这样的问题，这个类的有些属性需要序列号，而其他属性不需要序列化，比如说：一个用户有一些敏感信息，比如密码或者银行卡号之类，为了安全起见，不希望在网络操作（主要涉及到序列化操作，本地序列化缓存也适用）中被传输，这些信息对应的变量就可以加上transient关键字。换句话说，这个字段的生命周期仅存于调用者的内存中而不会写到磁盘里持久化。\n\n#### 解决问题\n\n再次之前，有一个姿势点：\n\n父类序列化\n\n> **一个情景**：一个子类实现了Serializable接口，它的父类都没有实现Serializable接口，序列化该子类对象，然后反序列化后，输出父类定义的某变量的数值，该变量数值与序列化前不同\n\n**解决**：**要想将父类对象也序列化，就需要让父类也实现Serializable 接口**。如果父类不实现的话的，就 **需要有默认的无参的构造函数**。在父类没有实现 Serializable 接口时，虚拟机是不会序列化父对象的，而一个 Java 对象的构造必须先有父对象，才有子对象，反序列化也不例外。所以反序列化时，为了构造父对象，只能调用父类的无参构造函数作为默认的父对象。因此当我们取父对象的变量值时，它的值是调用父类无参构造函数后的值。如果你考虑到这种序列化的情况，在父类无参构造函数中对变量进行初始化，否则的话，父类变量值都是默认声明的值，如 int 型的默认是 0，string 型的默认是 null。\n\nTransient 关键字的作用是控制变量的序列化，在变量声明前加上该关键字，可以阻止该变量被序列化到文件中，在被反序列化后，transient 变量的值被设为初始值，如 int 型的是 0，对象型的是 null。\n\n**特性使用案例**\n\n我们熟悉使用 Transient 关键字可以使得字段不被序列化，那么还有别的方法吗？根据父类对象序列化的规则，我们可以将不需要被序列化的字段抽取出来放到父类中，子类实现 Serializable 接口，父类不实现，根据父类序列化规则，父类的字段数据将不被序列化\n\n![](http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/8u215.png)\n\n上图中可以看出，attr1、attr2、attr3、attr5 都不会被序列化，放在父类中的好处在于当有另外一个 Child 类时，attr1、attr2、attr3 依然不会被序列化，不用重复抒写 transient，代码简洁。\n\n\n\n**参考：**\n\n[java学习—序列化与Transient关键字](http://blog.csdn.net/janronehoo/article/details/7306900)\n\n[Transient关键字使用场景](http://blog.csdn.net/hushaoxi/article/details/52385614)","slug":"transient关键字的作用","published":1,"updated":"2018-07-19T02:16:35.237Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6n100241kyg01q1m1ec","content":"<p>transient的相关知识整理</p>\n<a id=\"more\"></a>\n<h3 id=\"transient的相关知识\"><a href=\"#transient的相关知识\" class=\"headerlink\" title=\"transient的相关知识\"></a>transient的相关知识</h3><h4 id=\"官方解释\"><a href=\"#官方解释\" class=\"headerlink\" title=\"官方解释\"></a>官方解释</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Variables may be marked <span class=\"keyword\">transient</span> to indicate that they are not part of the persistent state of an object.</div></pre></td></tr></table></figure>\n<h4 id=\"遇到问题\"><a href=\"#遇到问题\" class=\"headerlink\" title=\"遇到问题\"></a>遇到问题</h4><p>我们都知道一个对象只要实现了Serializable接口，这个对象就可以被序列化，那么在实际开发过程中，可能会遇到这样的问题，这个类的有些属性需要序列号，而其他属性不需要序列化，比如说：一个用户有一些敏感信息，比如密码或者银行卡号之类，为了安全起见，不希望在网络操作（主要涉及到序列化操作，本地序列化缓存也适用）中被传输，这些信息对应的变量就可以加上transient关键字。换句话说，这个字段的生命周期仅存于调用者的内存中而不会写到磁盘里持久化。</p>\n<h4 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h4><p>再次之前，有一个姿势点：</p>\n<p>父类序列化</p>\n<blockquote>\n<p><strong>一个情景</strong>：一个子类实现了Serializable接口，它的父类都没有实现Serializable接口，序列化该子类对象，然后反序列化后，输出父类定义的某变量的数值，该变量数值与序列化前不同</p>\n</blockquote>\n<p><strong>解决</strong>：<strong>要想将父类对象也序列化，就需要让父类也实现Serializable 接口</strong>。如果父类不实现的话的，就 <strong>需要有默认的无参的构造函数</strong>。在父类没有实现 Serializable 接口时，虚拟机是不会序列化父对象的，而一个 Java 对象的构造必须先有父对象，才有子对象，反序列化也不例外。所以反序列化时，为了构造父对象，只能调用父类的无参构造函数作为默认的父对象。因此当我们取父对象的变量值时，它的值是调用父类无参构造函数后的值。如果你考虑到这种序列化的情况，在父类无参构造函数中对变量进行初始化，否则的话，父类变量值都是默认声明的值，如 int 型的默认是 0，string 型的默认是 null。</p>\n<p>Transient 关键字的作用是控制变量的序列化，在变量声明前加上该关键字，可以阻止该变量被序列化到文件中，在被反序列化后，transient 变量的值被设为初始值，如 int 型的是 0，对象型的是 null。</p>\n<p><strong>特性使用案例</strong></p>\n<p>我们熟悉使用 Transient 关键字可以使得字段不被序列化，那么还有别的方法吗？根据父类对象序列化的规则，我们可以将不需要被序列化的字段抽取出来放到父类中，子类实现 Serializable 接口，父类不实现，根据父类序列化规则，父类的字段数据将不被序列化</p>\n<p><img src=\"http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/8u215.png\" alt=\"\"></p>\n<p>上图中可以看出，attr1、attr2、attr3、attr5 都不会被序列化，放在父类中的好处在于当有另外一个 Child 类时，attr1、attr2、attr3 依然不会被序列化，不用重复抒写 transient，代码简洁。</p>\n<p><strong>参考：</strong></p>\n<p><a href=\"http://blog.csdn.net/janronehoo/article/details/7306900\" target=\"_blank\" rel=\"external\">java学习—序列化与Transient关键字</a></p>\n<p><a href=\"http://blog.csdn.net/hushaoxi/article/details/52385614\" target=\"_blank\" rel=\"external\">Transient关键字使用场景</a></p>\n","excerpt":"<p>transient的相关知识整理</p>","more":"<h3 id=\"transient的相关知识\"><a href=\"#transient的相关知识\" class=\"headerlink\" title=\"transient的相关知识\"></a>transient的相关知识</h3><h4 id=\"官方解释\"><a href=\"#官方解释\" class=\"headerlink\" title=\"官方解释\"></a>官方解释</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Variables may be marked <span class=\"keyword\">transient</span> to indicate that they are not part of the persistent state of an object.</div></pre></td></tr></table></figure>\n<h4 id=\"遇到问题\"><a href=\"#遇到问题\" class=\"headerlink\" title=\"遇到问题\"></a>遇到问题</h4><p>我们都知道一个对象只要实现了Serializable接口，这个对象就可以被序列化，那么在实际开发过程中，可能会遇到这样的问题，这个类的有些属性需要序列号，而其他属性不需要序列化，比如说：一个用户有一些敏感信息，比如密码或者银行卡号之类，为了安全起见，不希望在网络操作（主要涉及到序列化操作，本地序列化缓存也适用）中被传输，这些信息对应的变量就可以加上transient关键字。换句话说，这个字段的生命周期仅存于调用者的内存中而不会写到磁盘里持久化。</p>\n<h4 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h4><p>再次之前，有一个姿势点：</p>\n<p>父类序列化</p>\n<blockquote>\n<p><strong>一个情景</strong>：一个子类实现了Serializable接口，它的父类都没有实现Serializable接口，序列化该子类对象，然后反序列化后，输出父类定义的某变量的数值，该变量数值与序列化前不同</p>\n</blockquote>\n<p><strong>解决</strong>：<strong>要想将父类对象也序列化，就需要让父类也实现Serializable 接口</strong>。如果父类不实现的话的，就 <strong>需要有默认的无参的构造函数</strong>。在父类没有实现 Serializable 接口时，虚拟机是不会序列化父对象的，而一个 Java 对象的构造必须先有父对象，才有子对象，反序列化也不例外。所以反序列化时，为了构造父对象，只能调用父类的无参构造函数作为默认的父对象。因此当我们取父对象的变量值时，它的值是调用父类无参构造函数后的值。如果你考虑到这种序列化的情况，在父类无参构造函数中对变量进行初始化，否则的话，父类变量值都是默认声明的值，如 int 型的默认是 0，string 型的默认是 null。</p>\n<p>Transient 关键字的作用是控制变量的序列化，在变量声明前加上该关键字，可以阻止该变量被序列化到文件中，在被反序列化后，transient 变量的值被设为初始值，如 int 型的是 0，对象型的是 null。</p>\n<p><strong>特性使用案例</strong></p>\n<p>我们熟悉使用 Transient 关键字可以使得字段不被序列化，那么还有别的方法吗？根据父类对象序列化的规则，我们可以将不需要被序列化的字段抽取出来放到父类中，子类实现 Serializable 接口，父类不实现，根据父类序列化规则，父类的字段数据将不被序列化</p>\n<p><img src=\"http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/8u215.png\" alt=\"\"></p>\n<p>上图中可以看出，attr1、attr2、attr3、attr5 都不会被序列化，放在父类中的好处在于当有另外一个 Child 类时，attr1、attr2、attr3 依然不会被序列化，不用重复抒写 transient，代码简洁。</p>\n<p><strong>参考：</strong></p>\n<p><a href=\"http://blog.csdn.net/janronehoo/article/details/7306900\">java学习—序列化与Transient关键字</a></p>\n<p><a href=\"http://blog.csdn.net/hushaoxi/article/details/52385614\">Transient关键字使用场景</a></p>"},{"title":"view被软键盘挡住和点击外部软键盘消失","date":"2016-08-21T03:02:01.000Z","_content":"软键盘遮挡和点击空白区域关闭键盘\n\n<!--more-->\n\n### 需求\n\n- 登陆button挡住输入框\n- 软键盘弹出挡住其他控件\n- 软键盘弹出，点击空白区域关闭软件盘\n\n\n#### 点击button，键盘将button顶上去####\n\n\n> ![引用块内容](http://img.blog.csdn.net/20170615102440904?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmVuZ2FuaXQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n    //    控制是否移动布局。比如只有密码输入框获取到焦点时才执行。\n    public  boolean flag = true;\n    \n    /**\n     * @param act          activiry用于获取底部导航栏高度。\n     * @param root         最外层布局，需要调整的布局\n     * @param scrollToView 被键盘遮挡的scrollToView，滚动root,使scrollToView在root可视区域的底部\n     */\n    public  void controlKeyboardLayout(Context act, final View root, final View scrollToView) {\n        final int navigationBarHeight = getNavigationBarHeight(act);\n    \n        root.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n            @Override\n            public void onGlobalLayout() {\n                Rect rect = new Rect();\n                //获取root在窗体的可视区域\n                root.getWindowVisibleDisplayFrame(rect);\n                //获取root在窗体的不可视区域高度(被其他View遮挡的区域高度)\n                int rootInvisibleHeight = root.getRootView().getHeight() - rect.bottom;\n                //若不可视区域高度大于100，则键盘显示\n                if (rootInvisibleHeight > navigationBarHeight && flag) {\n                    int[] location = new int[2];\n                    //获取scrollToView在窗体的坐标\n                    scrollToView.getLocationInWindow(location);\n                    //计算root滚动高度，使scrollToView在可见区域\n                    int srollHeight = (location[1] + scrollToView.getHeight()) - rect.bottom;\n                    if (root.getScrollY() != 0) {// 如果已经滚动，要根据上次滚动，重新计算位置。\n                        srollHeight += root.getScrollY();\n                    }\n                    root.scrollTo(0, srollHeight);\n                } else {\n                    //键盘隐藏\n                    root.scrollTo(0, 0);\n                }\n            }\n        });\n    }\n\n### 解决控制点击可选择的区域让软键盘消失或者不消失 ###\n      /**\n     * 获取底部导航栏高度\n     *\n     * @param act\n     * @return\n     */\n    private  int getNavigationBarHeight(Context act) {\n        Resources resources = act.getResources();\n        int resourceId = resources.getIdentifier(\"navigation_bar_height\", \"dimen\", \"android\");\n        int height = resources.getDimensionPixelSize(resourceId);\n        Log.v(\"dbw\", \"Navi height:\" + height);\n        return height;\n    }\n    \n    //软键盘消失的管理\n    //region软键盘的处理\n    \n    /**\n     * 清除editText的焦点\n     *\n     * @param v   焦点所在View\n     * @param ids 输入框\n     */\n    public void clearViewFocus(View v, int... ids) {\n        if (null != v && null != ids && ids.length > 0) {\n            for (int id : ids) {\n                if (v.getId() == id) {\n                    v.clearFocus();\n                    break;\n                }\n            }\n        }\n    }\n    /**\n     * 隐藏键盘\n     *\n     * @param v   焦点所在View\n     * @param ids 输入框\n     * @return true代表焦点在edit上\n     */\n    public boolean isFocusEditText(View v, int... ids) {\n        if (v instanceof EditText) {\n            EditText tmp_et = (EditText) v;\n            for (int id : ids) {\n                if (tmp_et.getId() == id) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    \n    //是否触摸在指定view上面,对某个控件过滤\n    public boolean isTouchView(View[] views, MotionEvent ev) {\n        if (views == null || views.length == 0) return false;\n        int[] location = new int[2];\n        for (View view : views) {\n            view.getLocationOnScreen(location);\n            int x = location[0];\n            int y = location[1];\n            if (ev.getX() > x && ev.getX() < (x + view.getWidth())\n                    && ev.getY() > y && ev.getY() < (y + view.getHeight())) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    //region 右滑返回上级\n    @Override\n    public boolean dispatchTouchEvent(MotionEvent ev) {\n        if (ev.getAction() == MotionEvent.ACTION_DOWN) {\n            if (isTouchView(filterViewByIds(), ev)) return super.dispatchTouchEvent(ev);\n            if (hideSoftByEditViewIds() == null || hideSoftByEditViewIds().length == 0)\n                return super.dispatchTouchEvent(ev);\n            View v = getCurrentFocus();\n            if (isFocusEditText(v, hideSoftByEditViewIds())) {\n                //隐藏键盘\n                hideInputForce(this);\n                clearViewFocus(v, hideSoftByEditViewIds());\n            }\n        }\n        return super.dispatchTouchEvent(ev);\n    \n    }\n\n\n    /**\n     * 传入EditText的Id\n     * 没有传入的EditText不做处理\n     *\n     * @return id 数组\n     */\n    public int[] hideSoftByEditViewIds() {\n        return null;\n    }\n    \n    /**\n     * 传入要过滤的View\n     * 过滤之后点击将不会有隐藏软键盘的操作\n     *\n     * @return id 数组\n     */\n    public View[] filterViewByIds() {\n        return null;\n    }\n    \n    /**\n     * des:隐藏软键盘,这种方式参数为activity\n     *\n     * @param activity\n     */\n    public static void hideInputForce(Activity activity) {\n        if (activity == null || activity.getCurrentFocus() == null)\n            return;\n    \n        ((InputMethodManager) activity.getSystemService(INPUT_METHOD_SERVICE))\n                .hideSoftInputFromWindow(activity.getCurrentFocus()\n                        .getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);\n    }\n\n### 以下Demo全部代码 ###\n\n\n```java\npublic class MainActivity extends AppCompatActivity {\nprivate EditText mEt1;\nprivate EditText mEt2;\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    Button btn = (Button) findViewById(R.id.btn);\n    mEt1 = (EditText) findViewById(R.id.et1);\n    mEt2 = (EditText) findViewById(R.id.et2);\n    LinearLayout LL = (LinearLayout) findViewById(R.id.LL);\n    controlKeyboardLayout(this,LL,btn);\n}\n```\n\n\n```java\n//    控制是否移动布局。比如只有密码输入框获取到焦点时才执行。\npublic  boolean flag = true;\n\n/**\n * @param act          activiry用于获取底部导航栏高度。\n * @param root         最外层布局，需要调整的布局\n * @param scrollToView 被键盘遮挡的scrollToView，滚动root,使scrollToView在root可视区域的底部\n */\npublic  void controlKeyboardLayout(Context act, final View root, final View scrollToView) {\n    final int navigationBarHeight = getNavigationBarHeight(act);\n\n    root.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n        @Override\n        public void onGlobalLayout() {\n            Rect rect = new Rect();\n            //获取root在窗体的可视区域\n            root.getWindowVisibleDisplayFrame(rect);\n            //获取root在窗体的不可视区域高度(被其他View遮挡的区域高度)\n            int rootInvisibleHeight = root.getRootView().getHeight() - rect.bottom;\n            //若不可视区域高度大于100，则键盘显示\n            if (rootInvisibleHeight > navigationBarHeight && flag) {\n                int[] location = new int[2];\n                //获取scrollToView在窗体的坐标\n                scrollToView.getLocationInWindow(location);\n                //计算root滚动高度，使scrollToView在可见区域\n                int srollHeight = (location[1] + scrollToView.getHeight()) - rect.bottom;\n                if (root.getScrollY() != 0) {// 如果已经滚动，要根据上次滚动，重新计算位置。\n                    srollHeight += root.getScrollY();\n                }\n                root.scrollTo(0, srollHeight);\n            } else {\n                //键盘隐藏\n                root.scrollTo(0, 0);\n            }\n        }\n    });\n}\n\n/**\n * 获取底部导航栏高度\n *\n * @param act\n * @return\n */\nprivate  int getNavigationBarHeight(Context act) {\n    Resources resources = act.getResources();\n    int resourceId = resources.getIdentifier(\"navigation_bar_height\", \"dimen\", \"android\");\n    int height = resources.getDimensionPixelSize(resourceId);\n    Log.v(\"dbw\", \"Navi height:\" + height);\n    return height;\n}\n\n//软键盘消失的管理\n//region软键盘的处理\n\n/**\n * 清除editText的焦点\n *\n * @param v   焦点所在View\n * @param ids 输入框\n */\npublic void clearViewFocus(View v, int... ids) {\n    if (null != v && null != ids && ids.length > 0) {\n        for (int id : ids) {\n            if (v.getId() == id) {\n                v.clearFocus();\n                break;\n            }\n        }\n    }\n}\n/**\n * 隐藏键盘\n *\n * @param v   焦点所在View\n * @param ids 输入框\n * @return true代表焦点在edit上\n */\npublic boolean isFocusEditText(View v, int... ids) {\n    if (v instanceof EditText) {\n        EditText tmp_et = (EditText) v;\n        for (int id : ids) {\n            if (tmp_et.getId() == id) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n//是否触摸在指定view上面,对某个控件过滤\npublic boolean isTouchView(View[] views, MotionEvent ev) {\n    if (views == null || views.length == 0) return false;\n    int[] location = new int[2];\n    for (View view : views) {\n        view.getLocationOnScreen(location);\n        int x = location[0];\n        int y = location[1];\n        if (ev.getX() > x && ev.getX() < (x + view.getWidth())\n                && ev.getY() > y && ev.getY() < (y + view.getHeight())) {\n            return true;\n        }\n    }\n    return false;\n}\n\n//region 右滑返回上级\n@Override\npublic boolean dispatchTouchEvent(MotionEvent ev) {\n    if (ev.getAction() == MotionEvent.ACTION_DOWN) {\n        if (isTouchView(filterViewByIds(), ev)) return super.dispatchTouchEvent(ev);\n        if (hideSoftByEditViewIds() == null || hideSoftByEditViewIds().length == 0)\n            return super.dispatchTouchEvent(ev);\n        View v = getCurrentFocus();\n        if (isFocusEditText(v, hideSoftByEditViewIds())) {\n            //隐藏键盘\n            hideInputForce(this);\n            clearViewFocus(v, hideSoftByEditViewIds());\n        }\n    }\n    return super.dispatchTouchEvent(ev);\n\n}\n```\n\n\n```java\n/**\n * 传入EditText的Id\n * 没有传入的EditText不做处理\n *\n * @return id 数组\n */\npublic int[] hideSoftByEditViewIds() {\n    int []  ids = {R.id.et1,R.id.et2};\n    return ids;\n}\n\n/**\n * 传入要过滤的View\n * 过滤之后点击将不会有隐藏软键盘的操作\n *\n * @return id 数组\n */\npublic View[] filterViewByIds() {\n    View [] views = {mEt1,mEt2};//点击这两个控件,软键盘不会消失\n    return views;\n}\n\n/**\n * des:隐藏软键盘,这种方式参数为activity\n *\n * @param activity\n */\npublic static void hideInputForce(Activity activity) {\n    if (activity == null || activity.getCurrentFocus() == null)\n        return;\n\n    ((InputMethodManager) activity.getSystemService(INPUT_METHOD_SERVICE))\n            .hideSoftInputFromWindow(activity.getCurrentFocus()\n                    .getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);\n}\n}\n```\n### 以下是布局文件 ###\n\n```Xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\nxmlns:tools=\"http://schemas.android.com/tools\"\nandroid:id=\"@+id/activity_main\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"match_parent\"\nandroid:orientation=\"vertical\"\ntools:context=\"fengan.softinputdemo.MainActivity\">\n<LinearLayout\n    android:id=\"@+id/LL\"\n    android:layout_marginTop=\"100dp\"\n    android:layout_width=\"match_parent\"\n    android:orientation=\"vertical\"\n    android:layout_height=\"wrap_content\">\n<EditText\n    android:id=\"@+id/et1\"\n    android:layout_marginTop=\"60dp\"\n    android:background=\"#ff0\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"60dp\"/>\n<EditText\n    android:id=\"@+id/et2\"\n    android:layout_marginTop=\"20dp\"\n    android:background=\"#ff0\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"60dp\"/>\n<Button\n    android:text=\"软键盘挡住button\"\n    android:id=\"@+id/btn\"\n    android:layout_marginTop=\"30dp\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"/>\n</LinearLayout>\n```\n\n\n- 可以将隐藏显示的代码封装到BaseActivity\n\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=448707059&auto=1&height=66\"></iframe>","source":"_posts/view被软键盘挡住和点击外部软键盘消失.md","raw":"---\ntitle: view被软键盘挡住和点击外部软键盘消失\ndate: 2016-08-21 11:02:01\ntags: \n- Android\ncategories: Android\n---\n软键盘遮挡和点击空白区域关闭键盘\n\n<!--more-->\n\n### 需求\n\n- 登陆button挡住输入框\n- 软键盘弹出挡住其他控件\n- 软键盘弹出，点击空白区域关闭软件盘\n\n\n#### 点击button，键盘将button顶上去####\n\n\n> ![引用块内容](http://img.blog.csdn.net/20170615102440904?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmVuZ2FuaXQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n    //    控制是否移动布局。比如只有密码输入框获取到焦点时才执行。\n    public  boolean flag = true;\n    \n    /**\n     * @param act          activiry用于获取底部导航栏高度。\n     * @param root         最外层布局，需要调整的布局\n     * @param scrollToView 被键盘遮挡的scrollToView，滚动root,使scrollToView在root可视区域的底部\n     */\n    public  void controlKeyboardLayout(Context act, final View root, final View scrollToView) {\n        final int navigationBarHeight = getNavigationBarHeight(act);\n    \n        root.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n            @Override\n            public void onGlobalLayout() {\n                Rect rect = new Rect();\n                //获取root在窗体的可视区域\n                root.getWindowVisibleDisplayFrame(rect);\n                //获取root在窗体的不可视区域高度(被其他View遮挡的区域高度)\n                int rootInvisibleHeight = root.getRootView().getHeight() - rect.bottom;\n                //若不可视区域高度大于100，则键盘显示\n                if (rootInvisibleHeight > navigationBarHeight && flag) {\n                    int[] location = new int[2];\n                    //获取scrollToView在窗体的坐标\n                    scrollToView.getLocationInWindow(location);\n                    //计算root滚动高度，使scrollToView在可见区域\n                    int srollHeight = (location[1] + scrollToView.getHeight()) - rect.bottom;\n                    if (root.getScrollY() != 0) {// 如果已经滚动，要根据上次滚动，重新计算位置。\n                        srollHeight += root.getScrollY();\n                    }\n                    root.scrollTo(0, srollHeight);\n                } else {\n                    //键盘隐藏\n                    root.scrollTo(0, 0);\n                }\n            }\n        });\n    }\n\n### 解决控制点击可选择的区域让软键盘消失或者不消失 ###\n      /**\n     * 获取底部导航栏高度\n     *\n     * @param act\n     * @return\n     */\n    private  int getNavigationBarHeight(Context act) {\n        Resources resources = act.getResources();\n        int resourceId = resources.getIdentifier(\"navigation_bar_height\", \"dimen\", \"android\");\n        int height = resources.getDimensionPixelSize(resourceId);\n        Log.v(\"dbw\", \"Navi height:\" + height);\n        return height;\n    }\n    \n    //软键盘消失的管理\n    //region软键盘的处理\n    \n    /**\n     * 清除editText的焦点\n     *\n     * @param v   焦点所在View\n     * @param ids 输入框\n     */\n    public void clearViewFocus(View v, int... ids) {\n        if (null != v && null != ids && ids.length > 0) {\n            for (int id : ids) {\n                if (v.getId() == id) {\n                    v.clearFocus();\n                    break;\n                }\n            }\n        }\n    }\n    /**\n     * 隐藏键盘\n     *\n     * @param v   焦点所在View\n     * @param ids 输入框\n     * @return true代表焦点在edit上\n     */\n    public boolean isFocusEditText(View v, int... ids) {\n        if (v instanceof EditText) {\n            EditText tmp_et = (EditText) v;\n            for (int id : ids) {\n                if (tmp_et.getId() == id) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    \n    //是否触摸在指定view上面,对某个控件过滤\n    public boolean isTouchView(View[] views, MotionEvent ev) {\n        if (views == null || views.length == 0) return false;\n        int[] location = new int[2];\n        for (View view : views) {\n            view.getLocationOnScreen(location);\n            int x = location[0];\n            int y = location[1];\n            if (ev.getX() > x && ev.getX() < (x + view.getWidth())\n                    && ev.getY() > y && ev.getY() < (y + view.getHeight())) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    //region 右滑返回上级\n    @Override\n    public boolean dispatchTouchEvent(MotionEvent ev) {\n        if (ev.getAction() == MotionEvent.ACTION_DOWN) {\n            if (isTouchView(filterViewByIds(), ev)) return super.dispatchTouchEvent(ev);\n            if (hideSoftByEditViewIds() == null || hideSoftByEditViewIds().length == 0)\n                return super.dispatchTouchEvent(ev);\n            View v = getCurrentFocus();\n            if (isFocusEditText(v, hideSoftByEditViewIds())) {\n                //隐藏键盘\n                hideInputForce(this);\n                clearViewFocus(v, hideSoftByEditViewIds());\n            }\n        }\n        return super.dispatchTouchEvent(ev);\n    \n    }\n\n\n    /**\n     * 传入EditText的Id\n     * 没有传入的EditText不做处理\n     *\n     * @return id 数组\n     */\n    public int[] hideSoftByEditViewIds() {\n        return null;\n    }\n    \n    /**\n     * 传入要过滤的View\n     * 过滤之后点击将不会有隐藏软键盘的操作\n     *\n     * @return id 数组\n     */\n    public View[] filterViewByIds() {\n        return null;\n    }\n    \n    /**\n     * des:隐藏软键盘,这种方式参数为activity\n     *\n     * @param activity\n     */\n    public static void hideInputForce(Activity activity) {\n        if (activity == null || activity.getCurrentFocus() == null)\n            return;\n    \n        ((InputMethodManager) activity.getSystemService(INPUT_METHOD_SERVICE))\n                .hideSoftInputFromWindow(activity.getCurrentFocus()\n                        .getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);\n    }\n\n### 以下Demo全部代码 ###\n\n\n```java\npublic class MainActivity extends AppCompatActivity {\nprivate EditText mEt1;\nprivate EditText mEt2;\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    Button btn = (Button) findViewById(R.id.btn);\n    mEt1 = (EditText) findViewById(R.id.et1);\n    mEt2 = (EditText) findViewById(R.id.et2);\n    LinearLayout LL = (LinearLayout) findViewById(R.id.LL);\n    controlKeyboardLayout(this,LL,btn);\n}\n```\n\n\n```java\n//    控制是否移动布局。比如只有密码输入框获取到焦点时才执行。\npublic  boolean flag = true;\n\n/**\n * @param act          activiry用于获取底部导航栏高度。\n * @param root         最外层布局，需要调整的布局\n * @param scrollToView 被键盘遮挡的scrollToView，滚动root,使scrollToView在root可视区域的底部\n */\npublic  void controlKeyboardLayout(Context act, final View root, final View scrollToView) {\n    final int navigationBarHeight = getNavigationBarHeight(act);\n\n    root.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n        @Override\n        public void onGlobalLayout() {\n            Rect rect = new Rect();\n            //获取root在窗体的可视区域\n            root.getWindowVisibleDisplayFrame(rect);\n            //获取root在窗体的不可视区域高度(被其他View遮挡的区域高度)\n            int rootInvisibleHeight = root.getRootView().getHeight() - rect.bottom;\n            //若不可视区域高度大于100，则键盘显示\n            if (rootInvisibleHeight > navigationBarHeight && flag) {\n                int[] location = new int[2];\n                //获取scrollToView在窗体的坐标\n                scrollToView.getLocationInWindow(location);\n                //计算root滚动高度，使scrollToView在可见区域\n                int srollHeight = (location[1] + scrollToView.getHeight()) - rect.bottom;\n                if (root.getScrollY() != 0) {// 如果已经滚动，要根据上次滚动，重新计算位置。\n                    srollHeight += root.getScrollY();\n                }\n                root.scrollTo(0, srollHeight);\n            } else {\n                //键盘隐藏\n                root.scrollTo(0, 0);\n            }\n        }\n    });\n}\n\n/**\n * 获取底部导航栏高度\n *\n * @param act\n * @return\n */\nprivate  int getNavigationBarHeight(Context act) {\n    Resources resources = act.getResources();\n    int resourceId = resources.getIdentifier(\"navigation_bar_height\", \"dimen\", \"android\");\n    int height = resources.getDimensionPixelSize(resourceId);\n    Log.v(\"dbw\", \"Navi height:\" + height);\n    return height;\n}\n\n//软键盘消失的管理\n//region软键盘的处理\n\n/**\n * 清除editText的焦点\n *\n * @param v   焦点所在View\n * @param ids 输入框\n */\npublic void clearViewFocus(View v, int... ids) {\n    if (null != v && null != ids && ids.length > 0) {\n        for (int id : ids) {\n            if (v.getId() == id) {\n                v.clearFocus();\n                break;\n            }\n        }\n    }\n}\n/**\n * 隐藏键盘\n *\n * @param v   焦点所在View\n * @param ids 输入框\n * @return true代表焦点在edit上\n */\npublic boolean isFocusEditText(View v, int... ids) {\n    if (v instanceof EditText) {\n        EditText tmp_et = (EditText) v;\n        for (int id : ids) {\n            if (tmp_et.getId() == id) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n//是否触摸在指定view上面,对某个控件过滤\npublic boolean isTouchView(View[] views, MotionEvent ev) {\n    if (views == null || views.length == 0) return false;\n    int[] location = new int[2];\n    for (View view : views) {\n        view.getLocationOnScreen(location);\n        int x = location[0];\n        int y = location[1];\n        if (ev.getX() > x && ev.getX() < (x + view.getWidth())\n                && ev.getY() > y && ev.getY() < (y + view.getHeight())) {\n            return true;\n        }\n    }\n    return false;\n}\n\n//region 右滑返回上级\n@Override\npublic boolean dispatchTouchEvent(MotionEvent ev) {\n    if (ev.getAction() == MotionEvent.ACTION_DOWN) {\n        if (isTouchView(filterViewByIds(), ev)) return super.dispatchTouchEvent(ev);\n        if (hideSoftByEditViewIds() == null || hideSoftByEditViewIds().length == 0)\n            return super.dispatchTouchEvent(ev);\n        View v = getCurrentFocus();\n        if (isFocusEditText(v, hideSoftByEditViewIds())) {\n            //隐藏键盘\n            hideInputForce(this);\n            clearViewFocus(v, hideSoftByEditViewIds());\n        }\n    }\n    return super.dispatchTouchEvent(ev);\n\n}\n```\n\n\n```java\n/**\n * 传入EditText的Id\n * 没有传入的EditText不做处理\n *\n * @return id 数组\n */\npublic int[] hideSoftByEditViewIds() {\n    int []  ids = {R.id.et1,R.id.et2};\n    return ids;\n}\n\n/**\n * 传入要过滤的View\n * 过滤之后点击将不会有隐藏软键盘的操作\n *\n * @return id 数组\n */\npublic View[] filterViewByIds() {\n    View [] views = {mEt1,mEt2};//点击这两个控件,软键盘不会消失\n    return views;\n}\n\n/**\n * des:隐藏软键盘,这种方式参数为activity\n *\n * @param activity\n */\npublic static void hideInputForce(Activity activity) {\n    if (activity == null || activity.getCurrentFocus() == null)\n        return;\n\n    ((InputMethodManager) activity.getSystemService(INPUT_METHOD_SERVICE))\n            .hideSoftInputFromWindow(activity.getCurrentFocus()\n                    .getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);\n}\n}\n```\n### 以下是布局文件 ###\n\n```Xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\nxmlns:tools=\"http://schemas.android.com/tools\"\nandroid:id=\"@+id/activity_main\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"match_parent\"\nandroid:orientation=\"vertical\"\ntools:context=\"fengan.softinputdemo.MainActivity\">\n<LinearLayout\n    android:id=\"@+id/LL\"\n    android:layout_marginTop=\"100dp\"\n    android:layout_width=\"match_parent\"\n    android:orientation=\"vertical\"\n    android:layout_height=\"wrap_content\">\n<EditText\n    android:id=\"@+id/et1\"\n    android:layout_marginTop=\"60dp\"\n    android:background=\"#ff0\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"60dp\"/>\n<EditText\n    android:id=\"@+id/et2\"\n    android:layout_marginTop=\"20dp\"\n    android:background=\"#ff0\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"60dp\"/>\n<Button\n    android:text=\"软键盘挡住button\"\n    android:id=\"@+id/btn\"\n    android:layout_marginTop=\"30dp\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"/>\n</LinearLayout>\n```\n\n\n- 可以将隐藏显示的代码封装到BaseActivity\n\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=448707059&auto=1&height=66\"></iframe>","slug":"view被软键盘挡住和点击外部软键盘消失","published":1,"updated":"2018-07-19T02:17:42.443Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6n300291kyg3mu9xfpp","content":"<p>软键盘遮挡和点击空白区域关闭键盘</p>\n<a id=\"more\"></a>\n<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><ul>\n<li>登陆button挡住输入框</li>\n<li>软键盘弹出挡住其他控件</li>\n<li>软键盘弹出，点击空白区域关闭软件盘</li>\n</ul>\n<h4 id=\"点击button，键盘将button顶上去\"><a href=\"#点击button，键盘将button顶上去\" class=\"headerlink\" title=\"点击button，键盘将button顶上去\"></a>点击button，键盘将button顶上去</h4><blockquote>\n<p><img src=\"http://img.blog.csdn.net/20170615102440904?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmVuZ2FuaXQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"引用块内容\"></p>\n</blockquote>\n<pre><code>//    控制是否移动布局。比如只有密码输入框获取到焦点时才执行。\npublic  boolean flag = true;\n\n/**\n * @param act          activiry用于获取底部导航栏高度。\n * @param root         最外层布局，需要调整的布局\n * @param scrollToView 被键盘遮挡的scrollToView，滚动root,使scrollToView在root可视区域的底部\n */\npublic  void controlKeyboardLayout(Context act, final View root, final View scrollToView) {\n    final int navigationBarHeight = getNavigationBarHeight(act);\n\n    root.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n        @Override\n        public void onGlobalLayout() {\n            Rect rect = new Rect();\n            //获取root在窗体的可视区域\n            root.getWindowVisibleDisplayFrame(rect);\n            //获取root在窗体的不可视区域高度(被其他View遮挡的区域高度)\n            int rootInvisibleHeight = root.getRootView().getHeight() - rect.bottom;\n            //若不可视区域高度大于100，则键盘显示\n            if (rootInvisibleHeight &gt; navigationBarHeight &amp;&amp; flag) {\n                int[] location = new int[2];\n                //获取scrollToView在窗体的坐标\n                scrollToView.getLocationInWindow(location);\n                //计算root滚动高度，使scrollToView在可见区域\n                int srollHeight = (location[1] + scrollToView.getHeight()) - rect.bottom;\n                if (root.getScrollY() != 0) {// 如果已经滚动，要根据上次滚动，重新计算位置。\n                    srollHeight += root.getScrollY();\n                }\n                root.scrollTo(0, srollHeight);\n            } else {\n                //键盘隐藏\n                root.scrollTo(0, 0);\n            }\n        }\n    });\n}\n</code></pre><h3 id=\"解决控制点击可选择的区域让软键盘消失或者不消失\"><a href=\"#解决控制点击可选择的区域让软键盘消失或者不消失\" class=\"headerlink\" title=\"解决控制点击可选择的区域让软键盘消失或者不消失\"></a>解决控制点击可选择的区域让软键盘消失或者不消失</h3><pre><code>  /**\n * 获取底部导航栏高度\n *\n * @param act\n * @return\n */\nprivate  int getNavigationBarHeight(Context act) {\n    Resources resources = act.getResources();\n    int resourceId = resources.getIdentifier(&quot;navigation_bar_height&quot;, &quot;dimen&quot;, &quot;android&quot;);\n    int height = resources.getDimensionPixelSize(resourceId);\n    Log.v(&quot;dbw&quot;, &quot;Navi height:&quot; + height);\n    return height;\n}\n\n//软键盘消失的管理\n//region软键盘的处理\n\n/**\n * 清除editText的焦点\n *\n * @param v   焦点所在View\n * @param ids 输入框\n */\npublic void clearViewFocus(View v, int... ids) {\n    if (null != v &amp;&amp; null != ids &amp;&amp; ids.length &gt; 0) {\n        for (int id : ids) {\n            if (v.getId() == id) {\n                v.clearFocus();\n                break;\n            }\n        }\n    }\n}\n/**\n * 隐藏键盘\n *\n * @param v   焦点所在View\n * @param ids 输入框\n * @return true代表焦点在edit上\n */\npublic boolean isFocusEditText(View v, int... ids) {\n    if (v instanceof EditText) {\n        EditText tmp_et = (EditText) v;\n        for (int id : ids) {\n            if (tmp_et.getId() == id) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n//是否触摸在指定view上面,对某个控件过滤\npublic boolean isTouchView(View[] views, MotionEvent ev) {\n    if (views == null || views.length == 0) return false;\n    int[] location = new int[2];\n    for (View view : views) {\n        view.getLocationOnScreen(location);\n        int x = location[0];\n        int y = location[1];\n        if (ev.getX() &gt; x &amp;&amp; ev.getX() &lt; (x + view.getWidth())\n                &amp;&amp; ev.getY() &gt; y &amp;&amp; ev.getY() &lt; (y + view.getHeight())) {\n            return true;\n        }\n    }\n    return false;\n}\n\n//region 右滑返回上级\n@Override\npublic boolean dispatchTouchEvent(MotionEvent ev) {\n    if (ev.getAction() == MotionEvent.ACTION_DOWN) {\n        if (isTouchView(filterViewByIds(), ev)) return super.dispatchTouchEvent(ev);\n        if (hideSoftByEditViewIds() == null || hideSoftByEditViewIds().length == 0)\n            return super.dispatchTouchEvent(ev);\n        View v = getCurrentFocus();\n        if (isFocusEditText(v, hideSoftByEditViewIds())) {\n            //隐藏键盘\n            hideInputForce(this);\n            clearViewFocus(v, hideSoftByEditViewIds());\n        }\n    }\n    return super.dispatchTouchEvent(ev);\n\n}\n\n\n/**\n * 传入EditText的Id\n * 没有传入的EditText不做处理\n *\n * @return id 数组\n */\npublic int[] hideSoftByEditViewIds() {\n    return null;\n}\n\n/**\n * 传入要过滤的View\n * 过滤之后点击将不会有隐藏软键盘的操作\n *\n * @return id 数组\n */\npublic View[] filterViewByIds() {\n    return null;\n}\n\n/**\n * des:隐藏软键盘,这种方式参数为activity\n *\n * @param activity\n */\npublic static void hideInputForce(Activity activity) {\n    if (activity == null || activity.getCurrentFocus() == null)\n        return;\n\n    ((InputMethodManager) activity.getSystemService(INPUT_METHOD_SERVICE))\n            .hideSoftInputFromWindow(activity.getCurrentFocus()\n                    .getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);\n}\n</code></pre><h3 id=\"以下Demo全部代码\"><a href=\"#以下Demo全部代码\" class=\"headerlink\" title=\"以下Demo全部代码\"></a>以下Demo全部代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"><span class=\"keyword\">private</span> EditText mEt1;</div><div class=\"line\"><span class=\"keyword\">private</span> EditText mEt2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">    setContentView(R.layout.activity_main);</div><div class=\"line\">    Button btn = (Button) findViewById(R.id.btn);</div><div class=\"line\">    mEt1 = (EditText) findViewById(R.id.et1);</div><div class=\"line\">    mEt2 = (EditText) findViewById(R.id.et2);</div><div class=\"line\">    LinearLayout LL = (LinearLayout) findViewById(R.id.LL);</div><div class=\"line\">    controlKeyboardLayout(<span class=\"keyword\">this</span>,LL,btn);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//    控制是否移动布局。比如只有密码输入框获取到焦点时才执行。</span></div><div class=\"line\"><span class=\"keyword\">public</span>  <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@param</span> act          activiry用于获取底部导航栏高度。</div><div class=\"line\"> * <span class=\"doctag\">@param</span> root         最外层布局，需要调整的布局</div><div class=\"line\"> * <span class=\"doctag\">@param</span> scrollToView 被键盘遮挡的scrollToView，滚动root,使scrollToView在root可视区域的底部</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title\">controlKeyboardLayout</span><span class=\"params\">(Context act, <span class=\"keyword\">final</span> View root, <span class=\"keyword\">final</span> View scrollToView)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> navigationBarHeight = getNavigationBarHeight(act);</div><div class=\"line\"></div><div class=\"line\">    root.getViewTreeObserver().addOnGlobalLayoutListener(<span class=\"keyword\">new</span> ViewTreeObserver.OnGlobalLayoutListener() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onGlobalLayout</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            Rect rect = <span class=\"keyword\">new</span> Rect();</div><div class=\"line\">            <span class=\"comment\">//获取root在窗体的可视区域</span></div><div class=\"line\">            root.getWindowVisibleDisplayFrame(rect);</div><div class=\"line\">            <span class=\"comment\">//获取root在窗体的不可视区域高度(被其他View遮挡的区域高度)</span></div><div class=\"line\">            <span class=\"keyword\">int</span> rootInvisibleHeight = root.getRootView().getHeight() - rect.bottom;</div><div class=\"line\">            <span class=\"comment\">//若不可视区域高度大于100，则键盘显示</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (rootInvisibleHeight &gt; navigationBarHeight &amp;&amp; flag) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span>[] location = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</div><div class=\"line\">                <span class=\"comment\">//获取scrollToView在窗体的坐标</span></div><div class=\"line\">                scrollToView.getLocationInWindow(location);</div><div class=\"line\">                <span class=\"comment\">//计算root滚动高度，使scrollToView在可见区域</span></div><div class=\"line\">                <span class=\"keyword\">int</span> srollHeight = (location[<span class=\"number\">1</span>] + scrollToView.getHeight()) - rect.bottom;</div><div class=\"line\">                <span class=\"keyword\">if</span> (root.getScrollY() != <span class=\"number\">0</span>) &#123;<span class=\"comment\">// 如果已经滚动，要根据上次滚动，重新计算位置。</span></div><div class=\"line\">                    srollHeight += root.getScrollY();</div><div class=\"line\">                &#125;</div><div class=\"line\">                root.scrollTo(<span class=\"number\">0</span>, srollHeight);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"comment\">//键盘隐藏</span></div><div class=\"line\">                root.scrollTo(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 获取底部导航栏高度</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> act</div><div class=\"line\"> * <span class=\"doctag\">@return</span></div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span>  <span class=\"keyword\">int</span> <span class=\"title\">getNavigationBarHeight</span><span class=\"params\">(Context act)</span> </span>&#123;</div><div class=\"line\">    Resources resources = act.getResources();</div><div class=\"line\">    <span class=\"keyword\">int</span> resourceId = resources.getIdentifier(<span class=\"string\">\"navigation_bar_height\"</span>, <span class=\"string\">\"dimen\"</span>, <span class=\"string\">\"android\"</span>);</div><div class=\"line\">    <span class=\"keyword\">int</span> height = resources.getDimensionPixelSize(resourceId);</div><div class=\"line\">    Log.v(<span class=\"string\">\"dbw\"</span>, <span class=\"string\">\"Navi height:\"</span> + height);</div><div class=\"line\">    <span class=\"keyword\">return</span> height;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//软键盘消失的管理</span></div><div class=\"line\"><span class=\"comment\">//region软键盘的处理</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 清除editText的焦点</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> v   焦点所在View</div><div class=\"line\"> * <span class=\"doctag\">@param</span> ids 输入框</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clearViewFocus</span><span class=\"params\">(View v, <span class=\"keyword\">int</span>... ids)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != v &amp;&amp; <span class=\"keyword\">null</span> != ids &amp;&amp; ids.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> id : ids) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (v.getId() == id) &#123;</div><div class=\"line\">                v.clearFocus();</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 隐藏键盘</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> v   焦点所在View</div><div class=\"line\"> * <span class=\"doctag\">@param</span> ids 输入框</div><div class=\"line\"> * <span class=\"doctag\">@return</span> true代表焦点在edit上</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isFocusEditText</span><span class=\"params\">(View v, <span class=\"keyword\">int</span>... ids)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (v <span class=\"keyword\">instanceof</span> EditText) &#123;</div><div class=\"line\">        EditText tmp_et = (EditText) v;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> id : ids) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (tmp_et.getId() == id) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//是否触摸在指定view上面,对某个控件过滤</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isTouchView</span><span class=\"params\">(View[] views, MotionEvent ev)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (views == <span class=\"keyword\">null</span> || views.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span>[] location = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</div><div class=\"line\">    <span class=\"keyword\">for</span> (View view : views) &#123;</div><div class=\"line\">        view.getLocationOnScreen(location);</div><div class=\"line\">        <span class=\"keyword\">int</span> x = location[<span class=\"number\">0</span>];</div><div class=\"line\">        <span class=\"keyword\">int</span> y = location[<span class=\"number\">1</span>];</div><div class=\"line\">        <span class=\"keyword\">if</span> (ev.getX() &gt; x &amp;&amp; ev.getX() &lt; (x + view.getWidth())</div><div class=\"line\">                &amp;&amp; ev.getY() &gt; y &amp;&amp; ev.getY() &lt; (y + view.getHeight())) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//region 右滑返回上级</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (isTouchView(filterViewByIds(), ev)) <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.dispatchTouchEvent(ev);</div><div class=\"line\">        <span class=\"keyword\">if</span> (hideSoftByEditViewIds() == <span class=\"keyword\">null</span> || hideSoftByEditViewIds().length == <span class=\"number\">0</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.dispatchTouchEvent(ev);</div><div class=\"line\">        View v = getCurrentFocus();</div><div class=\"line\">        <span class=\"keyword\">if</span> (isFocusEditText(v, hideSoftByEditViewIds())) &#123;</div><div class=\"line\">            <span class=\"comment\">//隐藏键盘</span></div><div class=\"line\">            hideInputForce(<span class=\"keyword\">this</span>);</div><div class=\"line\">            clearViewFocus(v, hideSoftByEditViewIds());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.dispatchTouchEvent(ev);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 传入EditText的Id</div><div class=\"line\"> * 没有传入的EditText不做处理</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@return</span> id 数组</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] hideSoftByEditViewIds() &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> []  ids = &#123;R.id.et1,R.id.et2&#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> ids;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 传入要过滤的View</div><div class=\"line\"> * 过滤之后点击将不会有隐藏软键盘的操作</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@return</span> id 数组</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> View[] filterViewByIds() &#123;</div><div class=\"line\">    View [] views = &#123;mEt1,mEt2&#125;;<span class=\"comment\">//点击这两个控件,软键盘不会消失</span></div><div class=\"line\">    <span class=\"keyword\">return</span> views;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * des:隐藏软键盘,这种方式参数为activity</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> activity</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">hideInputForce</span><span class=\"params\">(Activity activity)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (activity == <span class=\"keyword\">null</span> || activity.getCurrentFocus() == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">    ((InputMethodManager) activity.getSystemService(INPUT_METHOD_SERVICE))</div><div class=\"line\">            .hideSoftInputFromWindow(activity.getCurrentFocus()</div><div class=\"line\">                    .getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"以下是布局文件\"><a href=\"#以下是布局文件\" class=\"headerlink\" title=\"以下是布局文件\"></a>以下是布局文件</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></div><div class=\"line\"><span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\"><span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/activity_main\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\"><span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\"><span class=\"attr\">tools:context</span>=<span class=\"string\">\"fengan.softinputdemo.MainActivity\"</span>&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/LL\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"100dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">EditText</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/et1\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"60dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"#ff0\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"60dp\"</span>/&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">EditText</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/et2\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"20dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"#ff0\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"60dp\"</span>/&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"软键盘挡住button\"</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/btn\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"30dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>可以将隐藏显示的代码封装到BaseActivity</li>\n</ul>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=448707059&auto=1&height=66\"></iframe>","excerpt":"<p>软键盘遮挡和点击空白区域关闭键盘</p>","more":"<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><ul>\n<li>登陆button挡住输入框</li>\n<li>软键盘弹出挡住其他控件</li>\n<li>软键盘弹出，点击空白区域关闭软件盘</li>\n</ul>\n<h4 id=\"点击button，键盘将button顶上去\"><a href=\"#点击button，键盘将button顶上去\" class=\"headerlink\" title=\"点击button，键盘将button顶上去\"></a>点击button，键盘将button顶上去</h4><blockquote>\n<p><img src=\"http://img.blog.csdn.net/20170615102440904?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmVuZ2FuaXQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"引用块内容\"></p>\n</blockquote>\n<pre><code>//    控制是否移动布局。比如只有密码输入框获取到焦点时才执行。\npublic  boolean flag = true;\n\n/**\n * @param act          activiry用于获取底部导航栏高度。\n * @param root         最外层布局，需要调整的布局\n * @param scrollToView 被键盘遮挡的scrollToView，滚动root,使scrollToView在root可视区域的底部\n */\npublic  void controlKeyboardLayout(Context act, final View root, final View scrollToView) {\n    final int navigationBarHeight = getNavigationBarHeight(act);\n\n    root.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n        @Override\n        public void onGlobalLayout() {\n            Rect rect = new Rect();\n            //获取root在窗体的可视区域\n            root.getWindowVisibleDisplayFrame(rect);\n            //获取root在窗体的不可视区域高度(被其他View遮挡的区域高度)\n            int rootInvisibleHeight = root.getRootView().getHeight() - rect.bottom;\n            //若不可视区域高度大于100，则键盘显示\n            if (rootInvisibleHeight &gt; navigationBarHeight &amp;&amp; flag) {\n                int[] location = new int[2];\n                //获取scrollToView在窗体的坐标\n                scrollToView.getLocationInWindow(location);\n                //计算root滚动高度，使scrollToView在可见区域\n                int srollHeight = (location[1] + scrollToView.getHeight()) - rect.bottom;\n                if (root.getScrollY() != 0) {// 如果已经滚动，要根据上次滚动，重新计算位置。\n                    srollHeight += root.getScrollY();\n                }\n                root.scrollTo(0, srollHeight);\n            } else {\n                //键盘隐藏\n                root.scrollTo(0, 0);\n            }\n        }\n    });\n}\n</code></pre><h3 id=\"解决控制点击可选择的区域让软键盘消失或者不消失\"><a href=\"#解决控制点击可选择的区域让软键盘消失或者不消失\" class=\"headerlink\" title=\"解决控制点击可选择的区域让软键盘消失或者不消失\"></a>解决控制点击可选择的区域让软键盘消失或者不消失</h3><pre><code>  /**\n * 获取底部导航栏高度\n *\n * @param act\n * @return\n */\nprivate  int getNavigationBarHeight(Context act) {\n    Resources resources = act.getResources();\n    int resourceId = resources.getIdentifier(&quot;navigation_bar_height&quot;, &quot;dimen&quot;, &quot;android&quot;);\n    int height = resources.getDimensionPixelSize(resourceId);\n    Log.v(&quot;dbw&quot;, &quot;Navi height:&quot; + height);\n    return height;\n}\n\n//软键盘消失的管理\n//region软键盘的处理\n\n/**\n * 清除editText的焦点\n *\n * @param v   焦点所在View\n * @param ids 输入框\n */\npublic void clearViewFocus(View v, int... ids) {\n    if (null != v &amp;&amp; null != ids &amp;&amp; ids.length &gt; 0) {\n        for (int id : ids) {\n            if (v.getId() == id) {\n                v.clearFocus();\n                break;\n            }\n        }\n    }\n}\n/**\n * 隐藏键盘\n *\n * @param v   焦点所在View\n * @param ids 输入框\n * @return true代表焦点在edit上\n */\npublic boolean isFocusEditText(View v, int... ids) {\n    if (v instanceof EditText) {\n        EditText tmp_et = (EditText) v;\n        for (int id : ids) {\n            if (tmp_et.getId() == id) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n//是否触摸在指定view上面,对某个控件过滤\npublic boolean isTouchView(View[] views, MotionEvent ev) {\n    if (views == null || views.length == 0) return false;\n    int[] location = new int[2];\n    for (View view : views) {\n        view.getLocationOnScreen(location);\n        int x = location[0];\n        int y = location[1];\n        if (ev.getX() &gt; x &amp;&amp; ev.getX() &lt; (x + view.getWidth())\n                &amp;&amp; ev.getY() &gt; y &amp;&amp; ev.getY() &lt; (y + view.getHeight())) {\n            return true;\n        }\n    }\n    return false;\n}\n\n//region 右滑返回上级\n@Override\npublic boolean dispatchTouchEvent(MotionEvent ev) {\n    if (ev.getAction() == MotionEvent.ACTION_DOWN) {\n        if (isTouchView(filterViewByIds(), ev)) return super.dispatchTouchEvent(ev);\n        if (hideSoftByEditViewIds() == null || hideSoftByEditViewIds().length == 0)\n            return super.dispatchTouchEvent(ev);\n        View v = getCurrentFocus();\n        if (isFocusEditText(v, hideSoftByEditViewIds())) {\n            //隐藏键盘\n            hideInputForce(this);\n            clearViewFocus(v, hideSoftByEditViewIds());\n        }\n    }\n    return super.dispatchTouchEvent(ev);\n\n}\n\n\n/**\n * 传入EditText的Id\n * 没有传入的EditText不做处理\n *\n * @return id 数组\n */\npublic int[] hideSoftByEditViewIds() {\n    return null;\n}\n\n/**\n * 传入要过滤的View\n * 过滤之后点击将不会有隐藏软键盘的操作\n *\n * @return id 数组\n */\npublic View[] filterViewByIds() {\n    return null;\n}\n\n/**\n * des:隐藏软键盘,这种方式参数为activity\n *\n * @param activity\n */\npublic static void hideInputForce(Activity activity) {\n    if (activity == null || activity.getCurrentFocus() == null)\n        return;\n\n    ((InputMethodManager) activity.getSystemService(INPUT_METHOD_SERVICE))\n            .hideSoftInputFromWindow(activity.getCurrentFocus()\n                    .getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);\n}\n</code></pre><h3 id=\"以下Demo全部代码\"><a href=\"#以下Demo全部代码\" class=\"headerlink\" title=\"以下Demo全部代码\"></a>以下Demo全部代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"><span class=\"keyword\">private</span> EditText mEt1;</div><div class=\"line\"><span class=\"keyword\">private</span> EditText mEt2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">    setContentView(R.layout.activity_main);</div><div class=\"line\">    Button btn = (Button) findViewById(R.id.btn);</div><div class=\"line\">    mEt1 = (EditText) findViewById(R.id.et1);</div><div class=\"line\">    mEt2 = (EditText) findViewById(R.id.et2);</div><div class=\"line\">    LinearLayout LL = (LinearLayout) findViewById(R.id.LL);</div><div class=\"line\">    controlKeyboardLayout(<span class=\"keyword\">this</span>,LL,btn);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//    控制是否移动布局。比如只有密码输入框获取到焦点时才执行。</span></div><div class=\"line\"><span class=\"keyword\">public</span>  <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * <span class=\"doctag\">@param</span> act          activiry用于获取底部导航栏高度。</div><div class=\"line\"> * <span class=\"doctag\">@param</span> root         最外层布局，需要调整的布局</div><div class=\"line\"> * <span class=\"doctag\">@param</span> scrollToView 被键盘遮挡的scrollToView，滚动root,使scrollToView在root可视区域的底部</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title\">controlKeyboardLayout</span><span class=\"params\">(Context act, <span class=\"keyword\">final</span> View root, <span class=\"keyword\">final</span> View scrollToView)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> navigationBarHeight = getNavigationBarHeight(act);</div><div class=\"line\"></div><div class=\"line\">    root.getViewTreeObserver().addOnGlobalLayoutListener(<span class=\"keyword\">new</span> ViewTreeObserver.OnGlobalLayoutListener() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onGlobalLayout</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            Rect rect = <span class=\"keyword\">new</span> Rect();</div><div class=\"line\">            <span class=\"comment\">//获取root在窗体的可视区域</span></div><div class=\"line\">            root.getWindowVisibleDisplayFrame(rect);</div><div class=\"line\">            <span class=\"comment\">//获取root在窗体的不可视区域高度(被其他View遮挡的区域高度)</span></div><div class=\"line\">            <span class=\"keyword\">int</span> rootInvisibleHeight = root.getRootView().getHeight() - rect.bottom;</div><div class=\"line\">            <span class=\"comment\">//若不可视区域高度大于100，则键盘显示</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (rootInvisibleHeight &gt; navigationBarHeight &amp;&amp; flag) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span>[] location = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</div><div class=\"line\">                <span class=\"comment\">//获取scrollToView在窗体的坐标</span></div><div class=\"line\">                scrollToView.getLocationInWindow(location);</div><div class=\"line\">                <span class=\"comment\">//计算root滚动高度，使scrollToView在可见区域</span></div><div class=\"line\">                <span class=\"keyword\">int</span> srollHeight = (location[<span class=\"number\">1</span>] + scrollToView.getHeight()) - rect.bottom;</div><div class=\"line\">                <span class=\"keyword\">if</span> (root.getScrollY() != <span class=\"number\">0</span>) &#123;<span class=\"comment\">// 如果已经滚动，要根据上次滚动，重新计算位置。</span></div><div class=\"line\">                    srollHeight += root.getScrollY();</div><div class=\"line\">                &#125;</div><div class=\"line\">                root.scrollTo(<span class=\"number\">0</span>, srollHeight);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"comment\">//键盘隐藏</span></div><div class=\"line\">                root.scrollTo(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 获取底部导航栏高度</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> act</div><div class=\"line\"> * <span class=\"doctag\">@return</span></div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span>  <span class=\"keyword\">int</span> <span class=\"title\">getNavigationBarHeight</span><span class=\"params\">(Context act)</span> </span>&#123;</div><div class=\"line\">    Resources resources = act.getResources();</div><div class=\"line\">    <span class=\"keyword\">int</span> resourceId = resources.getIdentifier(<span class=\"string\">\"navigation_bar_height\"</span>, <span class=\"string\">\"dimen\"</span>, <span class=\"string\">\"android\"</span>);</div><div class=\"line\">    <span class=\"keyword\">int</span> height = resources.getDimensionPixelSize(resourceId);</div><div class=\"line\">    Log.v(<span class=\"string\">\"dbw\"</span>, <span class=\"string\">\"Navi height:\"</span> + height);</div><div class=\"line\">    <span class=\"keyword\">return</span> height;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//软键盘消失的管理</span></div><div class=\"line\"><span class=\"comment\">//region软键盘的处理</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 清除editText的焦点</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> v   焦点所在View</div><div class=\"line\"> * <span class=\"doctag\">@param</span> ids 输入框</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clearViewFocus</span><span class=\"params\">(View v, <span class=\"keyword\">int</span>... ids)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != v &amp;&amp; <span class=\"keyword\">null</span> != ids &amp;&amp; ids.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> id : ids) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (v.getId() == id) &#123;</div><div class=\"line\">                v.clearFocus();</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 隐藏键盘</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> v   焦点所在View</div><div class=\"line\"> * <span class=\"doctag\">@param</span> ids 输入框</div><div class=\"line\"> * <span class=\"doctag\">@return</span> true代表焦点在edit上</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isFocusEditText</span><span class=\"params\">(View v, <span class=\"keyword\">int</span>... ids)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (v <span class=\"keyword\">instanceof</span> EditText) &#123;</div><div class=\"line\">        EditText tmp_et = (EditText) v;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> id : ids) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (tmp_et.getId() == id) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//是否触摸在指定view上面,对某个控件过滤</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isTouchView</span><span class=\"params\">(View[] views, MotionEvent ev)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (views == <span class=\"keyword\">null</span> || views.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span>[] location = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</div><div class=\"line\">    <span class=\"keyword\">for</span> (View view : views) &#123;</div><div class=\"line\">        view.getLocationOnScreen(location);</div><div class=\"line\">        <span class=\"keyword\">int</span> x = location[<span class=\"number\">0</span>];</div><div class=\"line\">        <span class=\"keyword\">int</span> y = location[<span class=\"number\">1</span>];</div><div class=\"line\">        <span class=\"keyword\">if</span> (ev.getX() &gt; x &amp;&amp; ev.getX() &lt; (x + view.getWidth())</div><div class=\"line\">                &amp;&amp; ev.getY() &gt; y &amp;&amp; ev.getY() &lt; (y + view.getHeight())) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//region 右滑返回上级</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (isTouchView(filterViewByIds(), ev)) <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.dispatchTouchEvent(ev);</div><div class=\"line\">        <span class=\"keyword\">if</span> (hideSoftByEditViewIds() == <span class=\"keyword\">null</span> || hideSoftByEditViewIds().length == <span class=\"number\">0</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.dispatchTouchEvent(ev);</div><div class=\"line\">        View v = getCurrentFocus();</div><div class=\"line\">        <span class=\"keyword\">if</span> (isFocusEditText(v, hideSoftByEditViewIds())) &#123;</div><div class=\"line\">            <span class=\"comment\">//隐藏键盘</span></div><div class=\"line\">            hideInputForce(<span class=\"keyword\">this</span>);</div><div class=\"line\">            clearViewFocus(v, hideSoftByEditViewIds());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.dispatchTouchEvent(ev);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 传入EditText的Id</div><div class=\"line\"> * 没有传入的EditText不做处理</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@return</span> id 数组</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] hideSoftByEditViewIds() &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> []  ids = &#123;R.id.et1,R.id.et2&#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> ids;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 传入要过滤的View</div><div class=\"line\"> * 过滤之后点击将不会有隐藏软键盘的操作</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@return</span> id 数组</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> View[] filterViewByIds() &#123;</div><div class=\"line\">    View [] views = &#123;mEt1,mEt2&#125;;<span class=\"comment\">//点击这两个控件,软键盘不会消失</span></div><div class=\"line\">    <span class=\"keyword\">return</span> views;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * des:隐藏软键盘,这种方式参数为activity</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> activity</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">hideInputForce</span><span class=\"params\">(Activity activity)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (activity == <span class=\"keyword\">null</span> || activity.getCurrentFocus() == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">    ((InputMethodManager) activity.getSystemService(INPUT_METHOD_SERVICE))</div><div class=\"line\">            .hideSoftInputFromWindow(activity.getCurrentFocus()</div><div class=\"line\">                    .getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"以下是布局文件\"><a href=\"#以下是布局文件\" class=\"headerlink\" title=\"以下是布局文件\"></a>以下是布局文件</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></div><div class=\"line\"><span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\"><span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/activity_main\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\"><span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\"><span class=\"attr\">tools:context</span>=<span class=\"string\">\"fengan.softinputdemo.MainActivity\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/LL\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"100dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">EditText</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/et1\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"60dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"#ff0\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"60dp\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">EditText</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/et2\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"20dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"#ff0\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"60dp\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></div><div class=\"line\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"软键盘挡住button\"</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/btn\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"30dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>可以将隐藏显示的代码封装到BaseActivity</li>\n</ul>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=448707059&auto=1&height=66\"></iframe>"},{"title":"retrofit和动态代理","date":"2017-02-07T01:45:11.000Z","password":123456,"_content":"\n代理类在运行前不存在，运行时由程序动态生成的代理方式称为动态代理\n\n<!--more-->\n\n#### 关于Retrofit\n\nSquare公司的OkHttp简直是完美的一个网络请求库，而在其上又封装了一层的Retrofit库，使其调用Restful Api更方便\n\n#### 简述Retrofit调用流程\n\n因为本篇只是简述动态代理在Retrofit的使用，所以不过多总结Retrofit的详细使用，在上家公司的项目都网络层，用的retrofit，现在这家公司的项目因为刚开始是我独立开发，所以网络层框架我也是用的Retrofit，功能强大，详细使用，以后再总结\n\n熟悉Retrofit使用的都对下面几个步骤比较熟悉了：\n\n- 定义一个ApiService接口，通过注解可以标记请求方法，请求参数，以及添加的头信息\n- 然后创建Retrofit对象，通过建造者模式设置BaseUrl等一些参数，通过Retrofit对象create一个你定义的接口对象\n- 拿到接口对象调用具体的方法完成请求\n\n具体的代码大概如下：\n\n```java\npublic interface ApiService {\n  @GET(\"users/{user}/repos\")\n  Call<List<Repo>> listRepos(@Path(\"user\") String user);\n}\n```\n\n```java\nRetrofit retrofit = new Retrofit.Builder()\n    .baseUrl(\"https://api.github.com\")\n    .build();\nApiService service = retrofit.create(ApiService.class);\n```\n\n```java\nCall<List<Repo>> repos = service.listRepos(\"fengan\");\n```\n\n#### ApiService是如何产生的\n\n因为接口是不可以直接new出来的，那么ApiService是如何产生的呢？\n\nApiService service = retrofit.create(ApiService.class);方法内部到底做了什么？\n\n没错，就是动态代理\n\n为了更好的理解动态代理，下面过一下简易版的Retrofit，\n\n```j a v\npublic interface Callback<T> {\n\n    void onSuccess(Object t);\n\n    void onFailed(Exception e);\n\n}\n```\n\n```java\n    /**\n     * 约定最后一个参数是callback\n     */\npublic interface GithubService {\n\n    @GET(\"users/{user}/repos\")\n\n    void list<Repos>(@Path(\"user\") String user,Callback<List<Repo>> callback);\n}\n```\n\n用到了两个注解，一个是方法注解，一个是参数注解\n\n```java\n@Retention(RetentionPolicy.RUNTIME)\n\n@Target({ElementType.METHOD})\n\npublic @interface GET {\n\n    String value() default \"\";\n\n}\n```\n\n```java\n@Retention(RetentionPolicy.RUNTIME)\n\n@Target(ElementType.PARAMETER)\n\npublic @interface Path {\n\n    String value();\n\n}\n```\n\nRepo实体类是使用GsonFormat根据json自动生成的。现实使用中，我们在构建Retrofit过程传入GsonFactory\n\nRetrofit这个类应该是一个builder模式，里面可以设置baseUrl，姑且忽略其他所有参数。还有一个create方法\n\n```java\npublic class Retrofit {\n\n    private String baseUrl;\n    private Retrofit(Builder builder) {\n        this.baseUrl = builder.baseUrl;\n    }\n\n    public <T> T create(Class<T> clazz) {\n        return null\n    }\n\n    static class Builder {\n        private String baseUrl;\n        Builder baseUrl(String host) {\n            this.baseUrl = host;\n            return this;\n        }\n\n        Retrofit build() {\n            return new Retrofit(this);\n        }\n    }\n}\n```\n\n最关键的就是create这个方法了，\n\n```java\npublic <T> T create(Class<T> clazz) {\n        /**\n         * 缓存中去\n         */\n        Object o = serviceMap.get(clazz);\n        /**\n         * 取不到则取构造代理对象\n         */\n        if (o == null) {\n            o = (T) Proxy.newProxyInstance(Retrofit.class.getClassLoader(), new Class[]{clazz}, new InvocationHandler() {\n                @Override\n                public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n                    final Callback<?> callback = (Callback<?>) args[args.length - 1];\n\n\n                    final GET get = method.getAnnotation(GET.class);\n                    if (get != null) {\n                        /**\n                         * 获得GET注解的值\n                         */\n                        String getValue = get.value();\n\n                        System.out.println(getValue);\n\n                        /**\n                         * 获得所有参数上的注解\n                         */\n                        Annotation[][] methodParameterAnnotationArrays = method.getParameterAnnotations();\n\n                        if (methodParameterAnnotationArrays != null) {\n                            int count = methodParameterAnnotationArrays.length;\n                            for (int i = 0; i < count; i++) {\n                                /**\n                                 * 获得单个参数上的注解\n                                 */\n                                Annotation[] methodParameterAnnotations = methodParameterAnnotationArrays[i];\n\n                                if (methodParameterAnnotations != null) {\n                                    for (Annotation methodParameterAnnotation : methodParameterAnnotations) {\n\n                                        /**\n                                         * 如果是Path注解\n                                         */\n                                        if (methodParameterAnnotation instanceof Path) {\n\n                                            /**\n                                             * 取得path注解上的值\n                                             */\n                                            Path path = (Path) methodParameterAnnotation;\n                                            String pathValue = path.value();\n                                            System.out.println(pathValue);\n\n                                            /**\n                                             * 这是对应的参数的值\n                                             */\n                                            System.out.println(args[i]);\n\n\n                                            Request.Builder builder = new Request.Builder();\n\n\n                                            /**\n                                             * 使用path注解替换get注解中的值为参数值\n                                             */\n                                            String result = getValue.replaceAll(\"\\\\{\" + pathValue + \"\\\\}\", (String) args[i]);\n\n                                            System.out.println(result);\n\n                                            /**\n                                             * 开始构造请求\n                                             */\n                                            Request request = builder.get()\n                                                    .url(baseUrl + \"/\" + result)\n                                                    .build();\n\n                                            okHttpClient.newCall(request).enqueue(new okhttp3.Callback() {\n                                                @Override\n                                                public void onFailure(Call call, IOException e) {\n                                                    /**\n                                                     * 失败则回调失败的方法\n                                                     */\n                                                    callback.onFailed(e);\n                                                }\n\n                                                @Override\n                                                public void onResponse(Call call, Response response) throws IOException {\n                                                    if (response.isSuccessful()) {\n                                                        /**\n                                                         * 请求成功\n                                                         */\n                                                        String body = response.body().string();\n\n                                                        /**\n                                                         * 使用fastjson进行zhuan转换\n                                                         */\n                                                        Type type = callback.getClass().getGenericInterfaces()[0];\n\n                                                        Object o1 = JSON.parse(body);\n\n                                                        /**\n                                                         * 回调成功\n                                                         */\n                                                        callback.onSuccess(o1);\n                                                    }\n                                                }\n                                            });\n\n                                        }\n                                    }\n                                }\n\n                            }\n                        }\n                    }\n\n\n                    return null;\n                }\n            });\n            /**\n             * 扔到缓存中\n             */\n            serviceMap.put(clazz, o);\n        }\n        return (T) o;\n    }\n```\n\n然后我们就可以根据Retrofit那样进行调用了\n\n```java\nRetrofit retrofit = new Retrofit.Builder()\n        .baseUrl(\"https://api.github.com\")\n        .build();\n\nGithubService githubService = retrofit.create(GithubService.class);\n\ngithubService.listRepos(\"lizhangqu\", new Callback<List<Repo>>() {\n    @Override\n    public void onSuccess(Object t) {\n        System.out.println(t);\n    }\n    @Override\n    public void onFailed(Exception e) {\n    }\n});\n```\n\n#### retrofit动态代理原理\n\n原理就是先拿到最后一个参数，也就是回调，再拿到方法上的注解，获得具体的值，然后拿到除了回调之外的其他参数，获得参数上的注解，然后根据注解取得对应的值，还有原来的参数值，将方法上的注解的值中进行替换。使用OkHttp构造请求，请求完成后根据将结果解析为回调中的类型。整个过程如下\n\n拦截到方法、参数，再根据我们在方法上的注解，去拼接为一个正常的Okhttp请求，然后执行。\n\n#### java中的动态代理\n\n在java的动态代理机制中，有两个重要的类或接口，一个是 InvocationHandler(Interface)、另一个则是 Proxy(Class)，这一个类和接口是实现我们动态代理所必须用到的\n\n每一个动态代理类都必须要实现InvocationHandler这个接口，并且每个代理类的实例都关联到了一个handler，当我们通过代理对象调用一个方法的时候，这个方法的调用就会被转发为由InvocationHandler这个接口的 invoke 方法来进行调用。我们来看看InvocationHandler这个接口的唯一一个方法 invoke 方法：\n\n```java\nObject invoke(Object proxy, Method method, Object[] args) throws Throwable\n\nproxy:　　指代我们所代理的那个真实对象\nmethod:　　指代的是我们所要调用真实对象的某个方法的Method对象\nargs:　　指代的是调用真实对象某个方法时接受的参数\n```\n\nProxy这个类的作用就是用来动态创建一个代理对象的类，它提供了许多的方法，但是我们用的最多的就是 newProxyInstance 这个方法：\n\n```java\npublic static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces,  InvocationHandler h)  throws IllegalArgumentException\n```\n\n这个方法的作用就是得到一个动态的代理对象，其接收三个参数，我们来看看这三个参数所代表的含义：\n\n```java\n\npublic static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h) throws IllegalArgumentException\n\nloader:　　一个ClassLoader对象，定义了由哪个ClassLoader对象来对生成的代理对象进行加载\n\ninterfaces:　　一个Interface对象的数组，表示的是我将要给我需要代理的对象提供一组什么接口，如果我提供了一组接口给它，那么这个代理对象就宣称实现了该接口(多态)，这样我就能调用这组接口中的方法了\n\nh:　　一个InvocationHandler对象，表示的是当我这个动态代理对象在调用方法的时候，会关联到哪一个InvocationHandler对象上\n```\n\n使用如下：\n\n- 定义被代理对象\n\n```java\npublic interface Subject\n{\n    public void rent();\n    \n    public void hello(String str);\n}\n```\n\n```java\npublic class RealSubject implements Subject\n{\n    @Override\n    public void rent()\n    {\n        System.out.println(\"I want to rent my house\");\n    }\n    \n    @Override\n    public void hello(String str)\n    {\n        System.out.println(\"hello: \" + str);\n    }\n}\n```\n\n- 定义动态代理类，任何动态代理类都必须实现InvotionHandler这个接口，重写invoke方法\n\n```java\npublic class DynamicProxy implements InvocationHandler\n{\n    //　这个就是我们要代理的真实对象\n    private Object subject;\n    \n    //    构造方法，给我们要代理的真实对象赋初值\n    public DynamicProxy(Object subject)\n    {\n        this.subject = subject;\n    }\n    \n    @Override\n    public Object invoke(Object object, Method method, Object[] args)\n            throws Throwable\n    {\n        //　　在代理真实对象前我们可以添加一些自己的操作\n        System.out.println(\"before rent house\");\n        \n        System.out.println(\"Method:\" + method);\n        \n        //    当代理对象调用真实对象的方法时，其会自动的跳转到代理对象关联的handler对象的invoke方法来进行调用\n        method.invoke(subject, args);\n        \n        //　　在代理真实对象后我们也可以添加一些自己的操作\n        System.out.println(\"after rent house\");\n        \n        return null;\n    }\n\n}\n```\n\n- 使用\n\n```Java\npublic class Client\n{\n    public static void main(String[] args)\n    {\n        //    我们要代理的真实对象\n        Subject realSubject = new RealSubject();\n\n        //    我们要代理哪个真实对象，就将该对象传进去，最后是通过该真实对象来调用其方法的\n        InvocationHandler handler = new DynamicProxy(realSubject);\n\n        /*\n         * 通过Proxy的newProxyInstance方法来创建我们的代理对象，我们来看看其三个参数\n         * 第一个参数 handler.getClass().getClassLoader() ，我们这里使用handler这个类的ClassLoader对象来加载我们的代理对象\n         * 第二个参数realSubject.getClass().getInterfaces()，我们这里为代理对象提供的接口是真实对象所实行的接口，表示我要代理的是该真实对象，这样我就能调用这组接口中的方法了\n         * 第三个参数handler， 我们这里将这个代理对象关联到了上方的 InvocationHandler 这个对象上\n         */\n        Subject subject = (Subject)Proxy.newProxyInstance(handler.getClass().getClassLoader(), realSubject\n                .getClass().getInterfaces(), handler);\n        \n        System.out.println(subject.getClass().getName());\n        subject.rent();\n        subject.hello(\"world\");\n    }\n}\n```","source":"_posts/retrofit和动态代理.md","raw":"---\ntitle: retrofit和动态代理\ndate: 2017-02-07 09:45:11\ntags: \n- Android\ncategories: Android\npassword: 123456\n---\n\n代理类在运行前不存在，运行时由程序动态生成的代理方式称为动态代理\n\n<!--more-->\n\n#### 关于Retrofit\n\nSquare公司的OkHttp简直是完美的一个网络请求库，而在其上又封装了一层的Retrofit库，使其调用Restful Api更方便\n\n#### 简述Retrofit调用流程\n\n因为本篇只是简述动态代理在Retrofit的使用，所以不过多总结Retrofit的详细使用，在上家公司的项目都网络层，用的retrofit，现在这家公司的项目因为刚开始是我独立开发，所以网络层框架我也是用的Retrofit，功能强大，详细使用，以后再总结\n\n熟悉Retrofit使用的都对下面几个步骤比较熟悉了：\n\n- 定义一个ApiService接口，通过注解可以标记请求方法，请求参数，以及添加的头信息\n- 然后创建Retrofit对象，通过建造者模式设置BaseUrl等一些参数，通过Retrofit对象create一个你定义的接口对象\n- 拿到接口对象调用具体的方法完成请求\n\n具体的代码大概如下：\n\n```java\npublic interface ApiService {\n  @GET(\"users/{user}/repos\")\n  Call<List<Repo>> listRepos(@Path(\"user\") String user);\n}\n```\n\n```java\nRetrofit retrofit = new Retrofit.Builder()\n    .baseUrl(\"https://api.github.com\")\n    .build();\nApiService service = retrofit.create(ApiService.class);\n```\n\n```java\nCall<List<Repo>> repos = service.listRepos(\"fengan\");\n```\n\n#### ApiService是如何产生的\n\n因为接口是不可以直接new出来的，那么ApiService是如何产生的呢？\n\nApiService service = retrofit.create(ApiService.class);方法内部到底做了什么？\n\n没错，就是动态代理\n\n为了更好的理解动态代理，下面过一下简易版的Retrofit，\n\n```j a v\npublic interface Callback<T> {\n\n    void onSuccess(Object t);\n\n    void onFailed(Exception e);\n\n}\n```\n\n```java\n    /**\n     * 约定最后一个参数是callback\n     */\npublic interface GithubService {\n\n    @GET(\"users/{user}/repos\")\n\n    void list<Repos>(@Path(\"user\") String user,Callback<List<Repo>> callback);\n}\n```\n\n用到了两个注解，一个是方法注解，一个是参数注解\n\n```java\n@Retention(RetentionPolicy.RUNTIME)\n\n@Target({ElementType.METHOD})\n\npublic @interface GET {\n\n    String value() default \"\";\n\n}\n```\n\n```java\n@Retention(RetentionPolicy.RUNTIME)\n\n@Target(ElementType.PARAMETER)\n\npublic @interface Path {\n\n    String value();\n\n}\n```\n\nRepo实体类是使用GsonFormat根据json自动生成的。现实使用中，我们在构建Retrofit过程传入GsonFactory\n\nRetrofit这个类应该是一个builder模式，里面可以设置baseUrl，姑且忽略其他所有参数。还有一个create方法\n\n```java\npublic class Retrofit {\n\n    private String baseUrl;\n    private Retrofit(Builder builder) {\n        this.baseUrl = builder.baseUrl;\n    }\n\n    public <T> T create(Class<T> clazz) {\n        return null\n    }\n\n    static class Builder {\n        private String baseUrl;\n        Builder baseUrl(String host) {\n            this.baseUrl = host;\n            return this;\n        }\n\n        Retrofit build() {\n            return new Retrofit(this);\n        }\n    }\n}\n```\n\n最关键的就是create这个方法了，\n\n```java\npublic <T> T create(Class<T> clazz) {\n        /**\n         * 缓存中去\n         */\n        Object o = serviceMap.get(clazz);\n        /**\n         * 取不到则取构造代理对象\n         */\n        if (o == null) {\n            o = (T) Proxy.newProxyInstance(Retrofit.class.getClassLoader(), new Class[]{clazz}, new InvocationHandler() {\n                @Override\n                public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n                    final Callback<?> callback = (Callback<?>) args[args.length - 1];\n\n\n                    final GET get = method.getAnnotation(GET.class);\n                    if (get != null) {\n                        /**\n                         * 获得GET注解的值\n                         */\n                        String getValue = get.value();\n\n                        System.out.println(getValue);\n\n                        /**\n                         * 获得所有参数上的注解\n                         */\n                        Annotation[][] methodParameterAnnotationArrays = method.getParameterAnnotations();\n\n                        if (methodParameterAnnotationArrays != null) {\n                            int count = methodParameterAnnotationArrays.length;\n                            for (int i = 0; i < count; i++) {\n                                /**\n                                 * 获得单个参数上的注解\n                                 */\n                                Annotation[] methodParameterAnnotations = methodParameterAnnotationArrays[i];\n\n                                if (methodParameterAnnotations != null) {\n                                    for (Annotation methodParameterAnnotation : methodParameterAnnotations) {\n\n                                        /**\n                                         * 如果是Path注解\n                                         */\n                                        if (methodParameterAnnotation instanceof Path) {\n\n                                            /**\n                                             * 取得path注解上的值\n                                             */\n                                            Path path = (Path) methodParameterAnnotation;\n                                            String pathValue = path.value();\n                                            System.out.println(pathValue);\n\n                                            /**\n                                             * 这是对应的参数的值\n                                             */\n                                            System.out.println(args[i]);\n\n\n                                            Request.Builder builder = new Request.Builder();\n\n\n                                            /**\n                                             * 使用path注解替换get注解中的值为参数值\n                                             */\n                                            String result = getValue.replaceAll(\"\\\\{\" + pathValue + \"\\\\}\", (String) args[i]);\n\n                                            System.out.println(result);\n\n                                            /**\n                                             * 开始构造请求\n                                             */\n                                            Request request = builder.get()\n                                                    .url(baseUrl + \"/\" + result)\n                                                    .build();\n\n                                            okHttpClient.newCall(request).enqueue(new okhttp3.Callback() {\n                                                @Override\n                                                public void onFailure(Call call, IOException e) {\n                                                    /**\n                                                     * 失败则回调失败的方法\n                                                     */\n                                                    callback.onFailed(e);\n                                                }\n\n                                                @Override\n                                                public void onResponse(Call call, Response response) throws IOException {\n                                                    if (response.isSuccessful()) {\n                                                        /**\n                                                         * 请求成功\n                                                         */\n                                                        String body = response.body().string();\n\n                                                        /**\n                                                         * 使用fastjson进行zhuan转换\n                                                         */\n                                                        Type type = callback.getClass().getGenericInterfaces()[0];\n\n                                                        Object o1 = JSON.parse(body);\n\n                                                        /**\n                                                         * 回调成功\n                                                         */\n                                                        callback.onSuccess(o1);\n                                                    }\n                                                }\n                                            });\n\n                                        }\n                                    }\n                                }\n\n                            }\n                        }\n                    }\n\n\n                    return null;\n                }\n            });\n            /**\n             * 扔到缓存中\n             */\n            serviceMap.put(clazz, o);\n        }\n        return (T) o;\n    }\n```\n\n然后我们就可以根据Retrofit那样进行调用了\n\n```java\nRetrofit retrofit = new Retrofit.Builder()\n        .baseUrl(\"https://api.github.com\")\n        .build();\n\nGithubService githubService = retrofit.create(GithubService.class);\n\ngithubService.listRepos(\"lizhangqu\", new Callback<List<Repo>>() {\n    @Override\n    public void onSuccess(Object t) {\n        System.out.println(t);\n    }\n    @Override\n    public void onFailed(Exception e) {\n    }\n});\n```\n\n#### retrofit动态代理原理\n\n原理就是先拿到最后一个参数，也就是回调，再拿到方法上的注解，获得具体的值，然后拿到除了回调之外的其他参数，获得参数上的注解，然后根据注解取得对应的值，还有原来的参数值，将方法上的注解的值中进行替换。使用OkHttp构造请求，请求完成后根据将结果解析为回调中的类型。整个过程如下\n\n拦截到方法、参数，再根据我们在方法上的注解，去拼接为一个正常的Okhttp请求，然后执行。\n\n#### java中的动态代理\n\n在java的动态代理机制中，有两个重要的类或接口，一个是 InvocationHandler(Interface)、另一个则是 Proxy(Class)，这一个类和接口是实现我们动态代理所必须用到的\n\n每一个动态代理类都必须要实现InvocationHandler这个接口，并且每个代理类的实例都关联到了一个handler，当我们通过代理对象调用一个方法的时候，这个方法的调用就会被转发为由InvocationHandler这个接口的 invoke 方法来进行调用。我们来看看InvocationHandler这个接口的唯一一个方法 invoke 方法：\n\n```java\nObject invoke(Object proxy, Method method, Object[] args) throws Throwable\n\nproxy:　　指代我们所代理的那个真实对象\nmethod:　　指代的是我们所要调用真实对象的某个方法的Method对象\nargs:　　指代的是调用真实对象某个方法时接受的参数\n```\n\nProxy这个类的作用就是用来动态创建一个代理对象的类，它提供了许多的方法，但是我们用的最多的就是 newProxyInstance 这个方法：\n\n```java\npublic static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces,  InvocationHandler h)  throws IllegalArgumentException\n```\n\n这个方法的作用就是得到一个动态的代理对象，其接收三个参数，我们来看看这三个参数所代表的含义：\n\n```java\n\npublic static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h) throws IllegalArgumentException\n\nloader:　　一个ClassLoader对象，定义了由哪个ClassLoader对象来对生成的代理对象进行加载\n\ninterfaces:　　一个Interface对象的数组，表示的是我将要给我需要代理的对象提供一组什么接口，如果我提供了一组接口给它，那么这个代理对象就宣称实现了该接口(多态)，这样我就能调用这组接口中的方法了\n\nh:　　一个InvocationHandler对象，表示的是当我这个动态代理对象在调用方法的时候，会关联到哪一个InvocationHandler对象上\n```\n\n使用如下：\n\n- 定义被代理对象\n\n```java\npublic interface Subject\n{\n    public void rent();\n    \n    public void hello(String str);\n}\n```\n\n```java\npublic class RealSubject implements Subject\n{\n    @Override\n    public void rent()\n    {\n        System.out.println(\"I want to rent my house\");\n    }\n    \n    @Override\n    public void hello(String str)\n    {\n        System.out.println(\"hello: \" + str);\n    }\n}\n```\n\n- 定义动态代理类，任何动态代理类都必须实现InvotionHandler这个接口，重写invoke方法\n\n```java\npublic class DynamicProxy implements InvocationHandler\n{\n    //　这个就是我们要代理的真实对象\n    private Object subject;\n    \n    //    构造方法，给我们要代理的真实对象赋初值\n    public DynamicProxy(Object subject)\n    {\n        this.subject = subject;\n    }\n    \n    @Override\n    public Object invoke(Object object, Method method, Object[] args)\n            throws Throwable\n    {\n        //　　在代理真实对象前我们可以添加一些自己的操作\n        System.out.println(\"before rent house\");\n        \n        System.out.println(\"Method:\" + method);\n        \n        //    当代理对象调用真实对象的方法时，其会自动的跳转到代理对象关联的handler对象的invoke方法来进行调用\n        method.invoke(subject, args);\n        \n        //　　在代理真实对象后我们也可以添加一些自己的操作\n        System.out.println(\"after rent house\");\n        \n        return null;\n    }\n\n}\n```\n\n- 使用\n\n```Java\npublic class Client\n{\n    public static void main(String[] args)\n    {\n        //    我们要代理的真实对象\n        Subject realSubject = new RealSubject();\n\n        //    我们要代理哪个真实对象，就将该对象传进去，最后是通过该真实对象来调用其方法的\n        InvocationHandler handler = new DynamicProxy(realSubject);\n\n        /*\n         * 通过Proxy的newProxyInstance方法来创建我们的代理对象，我们来看看其三个参数\n         * 第一个参数 handler.getClass().getClassLoader() ，我们这里使用handler这个类的ClassLoader对象来加载我们的代理对象\n         * 第二个参数realSubject.getClass().getInterfaces()，我们这里为代理对象提供的接口是真实对象所实行的接口，表示我要代理的是该真实对象，这样我就能调用这组接口中的方法了\n         * 第三个参数handler， 我们这里将这个代理对象关联到了上方的 InvocationHandler 这个对象上\n         */\n        Subject subject = (Subject)Proxy.newProxyInstance(handler.getClass().getClassLoader(), realSubject\n                .getClass().getInterfaces(), handler);\n        \n        System.out.println(subject.getClass().getName());\n        subject.rent();\n        subject.hello(\"world\");\n    }\n}\n```","slug":"retrofit和动态代理","published":1,"updated":"2018-07-19T02:14:31.360Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6n4002c1kygfb0ba8t0","content":"<p>代理类在运行前不存在，运行时由程序动态生成的代理方式称为动态代理</p>\n<a id=\"more\"></a>\n<h4 id=\"关于Retrofit\"><a href=\"#关于Retrofit\" class=\"headerlink\" title=\"关于Retrofit\"></a>关于Retrofit</h4><p>Square公司的OkHttp简直是完美的一个网络请求库，而在其上又封装了一层的Retrofit库，使其调用Restful Api更方便</p>\n<h4 id=\"简述Retrofit调用流程\"><a href=\"#简述Retrofit调用流程\" class=\"headerlink\" title=\"简述Retrofit调用流程\"></a>简述Retrofit调用流程</h4><p>因为本篇只是简述动态代理在Retrofit的使用，所以不过多总结Retrofit的详细使用，在上家公司的项目都网络层，用的retrofit，现在这家公司的项目因为刚开始是我独立开发，所以网络层框架我也是用的Retrofit，功能强大，详细使用，以后再总结</p>\n<p>熟悉Retrofit使用的都对下面几个步骤比较熟悉了：</p>\n<ul>\n<li>定义一个ApiService接口，通过注解可以标记请求方法，请求参数，以及添加的头信息</li>\n<li>然后创建Retrofit对象，通过建造者模式设置BaseUrl等一些参数，通过Retrofit对象create一个你定义的接口对象</li>\n<li>拿到接口对象调用具体的方法完成请求</li>\n</ul>\n<p>具体的代码大概如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ApiService</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@GET</span>(<span class=\"string\">\"users/&#123;user&#125;/repos\"</span>)</div><div class=\"line\">  Call&lt;List&lt;Repo&gt;&gt; listRepos(<span class=\"meta\">@Path</span>(<span class=\"string\">\"user\"</span>) String user);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Retrofit retrofit = <span class=\"keyword\">new</span> Retrofit.Builder()</div><div class=\"line\">    .baseUrl(<span class=\"string\">\"https://api.github.com\"</span>)</div><div class=\"line\">    .build();</div><div class=\"line\">ApiService service = retrofit.create(ApiService.class);</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Call&lt;List&lt;Repo&gt;&gt; repos = service.listRepos(<span class=\"string\">\"fengan\"</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"ApiService是如何产生的\"><a href=\"#ApiService是如何产生的\" class=\"headerlink\" title=\"ApiService是如何产生的\"></a>ApiService是如何产生的</h4><p>因为接口是不可以直接new出来的，那么ApiService是如何产生的呢？</p>\n<p>ApiService service = retrofit.create(ApiService.class);方法内部到底做了什么？</p>\n<p>没错，就是动态代理</p>\n<p>为了更好的理解动态代理，下面过一下简易版的Retrofit，</p>\n<figure class=\"highlight plain\"><figcaption><span>a v</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface Callback&lt;T&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">    void onSuccess(Object t);</div><div class=\"line\"></div><div class=\"line\">    void onFailed(Exception e);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 约定最后一个参数是callback</div><div class=\"line\">     */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">GithubService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@GET</span>(<span class=\"string\">\"users/&#123;user&#125;/repos\"</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">void</span> list&lt;Repos&gt;(<span class=\"meta\">@Path</span>(<span class=\"string\">\"user\"</span>) String user,Callback&lt;List&lt;Repo&gt;&gt; callback);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>用到了两个注解，一个是方法注解，一个是参数注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Target</span>(&#123;ElementType.METHOD&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> GET &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"\"</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.PARAMETER)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Path &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">value</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Repo实体类是使用GsonFormat根据json自动生成的。现实使用中，我们在构建Retrofit过程传入GsonFactory</p>\n<p>Retrofit这个类应该是一个builder模式，里面可以设置baseUrl，姑且忽略其他所有参数。还有一个create方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Retrofit</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> String baseUrl;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Retrofit</span><span class=\"params\">(Builder builder)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.baseUrl = builder.baseUrl;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">create</span><span class=\"params\">(Class&lt;T&gt; clazz)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> String baseUrl;</div><div class=\"line\">        <span class=\"function\">Builder <span class=\"title\">baseUrl</span><span class=\"params\">(String host)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.baseUrl = host;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\">Retrofit <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Retrofit(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最关键的就是create这个方法了，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">create</span><span class=\"params\">(Class&lt;T&gt; clazz)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         * 缓存中去</div><div class=\"line\">         */</div><div class=\"line\">        Object o = serviceMap.get(clazz);</div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         * 取不到则取构造代理对象</div><div class=\"line\">         */</div><div class=\"line\">        <span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            o = (T) Proxy.newProxyInstance(Retrofit.class.getClassLoader(), <span class=\"keyword\">new</span> Class[]&#123;clazz&#125;, <span class=\"keyword\">new</span> InvocationHandler() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">final</span> Callback&lt;?&gt; callback = (Callback&lt;?&gt;) args[args.length - <span class=\"number\">1</span>];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">final</span> GET get = method.getAnnotation(GET.class);</div><div class=\"line\">                    <span class=\"keyword\">if</span> (get != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        <span class=\"comment\">/**</span></div><div class=\"line\">                         * 获得GET注解的值</div><div class=\"line\">                         */</div><div class=\"line\">                        String getValue = get.value();</div><div class=\"line\"></div><div class=\"line\">                        System.out.println(getValue);</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"comment\">/**</span></div><div class=\"line\">                         * 获得所有参数上的注解</div><div class=\"line\">                         */</div><div class=\"line\">                        Annotation[][] methodParameterAnnotationArrays = method.getParameterAnnotations();</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"keyword\">if</span> (methodParameterAnnotationArrays != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                            <span class=\"keyword\">int</span> count = methodParameterAnnotationArrays.length;</div><div class=\"line\">                            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">                                <span class=\"comment\">/**</span></div><div class=\"line\">                                 * 获得单个参数上的注解</div><div class=\"line\">                                 */</div><div class=\"line\">                                Annotation[] methodParameterAnnotations = methodParameterAnnotationArrays[i];</div><div class=\"line\"></div><div class=\"line\">                                <span class=\"keyword\">if</span> (methodParameterAnnotations != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                                    <span class=\"keyword\">for</span> (Annotation methodParameterAnnotation : methodParameterAnnotations) &#123;</div><div class=\"line\"></div><div class=\"line\">                                        <span class=\"comment\">/**</span></div><div class=\"line\">                                         * 如果是Path注解</div><div class=\"line\">                                         */</div><div class=\"line\">                                        <span class=\"keyword\">if</span> (methodParameterAnnotation <span class=\"keyword\">instanceof</span> Path) &#123;</div><div class=\"line\"></div><div class=\"line\">                                            <span class=\"comment\">/**</span></div><div class=\"line\">                                             * 取得path注解上的值</div><div class=\"line\">                                             */</div><div class=\"line\">                                            Path path = (Path) methodParameterAnnotation;</div><div class=\"line\">                                            String pathValue = path.value();</div><div class=\"line\">                                            System.out.println(pathValue);</div><div class=\"line\"></div><div class=\"line\">                                            <span class=\"comment\">/**</span></div><div class=\"line\">                                             * 这是对应的参数的值</div><div class=\"line\">                                             */</div><div class=\"line\">                                            System.out.println(args[i]);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">                                            Request.Builder builder = <span class=\"keyword\">new</span> Request.Builder();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">                                            <span class=\"comment\">/**</span></div><div class=\"line\">                                             * 使用path注解替换get注解中的值为参数值</div><div class=\"line\">                                             */</div><div class=\"line\">                                            String result = getValue.replaceAll(<span class=\"string\">\"\\\\&#123;\"</span> + pathValue + <span class=\"string\">\"\\\\&#125;\"</span>, (String) args[i]);</div><div class=\"line\"></div><div class=\"line\">                                            System.out.println(result);</div><div class=\"line\"></div><div class=\"line\">                                            <span class=\"comment\">/**</span></div><div class=\"line\">                                             * 开始构造请求</div><div class=\"line\">                                             */</div><div class=\"line\">                                            Request request = builder.get()</div><div class=\"line\">                                                    .url(baseUrl + <span class=\"string\">\"/\"</span> + result)</div><div class=\"line\">                                                    .build();</div><div class=\"line\"></div><div class=\"line\">                                            okHttpClient.newCall(request).enqueue(<span class=\"keyword\">new</span> okhttp3.Callback() &#123;</div><div class=\"line\">                                                <span class=\"meta\">@Override</span></div><div class=\"line\">                                                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call call, IOException e)</span> </span>&#123;</div><div class=\"line\">                                                    <span class=\"comment\">/**</span></div><div class=\"line\">                                                     * 失败则回调失败的方法</div><div class=\"line\">                                                     */</div><div class=\"line\">                                                    callback.onFailed(e);</div><div class=\"line\">                                                &#125;</div><div class=\"line\"></div><div class=\"line\">                                                <span class=\"meta\">@Override</span></div><div class=\"line\">                                                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">                                                    <span class=\"keyword\">if</span> (response.isSuccessful()) &#123;</div><div class=\"line\">                                                        <span class=\"comment\">/**</span></div><div class=\"line\">                                                         * 请求成功</div><div class=\"line\">                                                         */</div><div class=\"line\">                                                        String body = response.body().string();</div><div class=\"line\"></div><div class=\"line\">                                                        <span class=\"comment\">/**</span></div><div class=\"line\">                                                         * 使用fastjson进行zhuan转换</div><div class=\"line\">                                                         */</div><div class=\"line\">                                                        Type type = callback.getClass().getGenericInterfaces()[<span class=\"number\">0</span>];</div><div class=\"line\"></div><div class=\"line\">                                                        Object o1 = JSON.parse(body);</div><div class=\"line\"></div><div class=\"line\">                                                        <span class=\"comment\">/**</span></div><div class=\"line\">                                                         * 回调成功</div><div class=\"line\">                                                         */</div><div class=\"line\">                                                        callback.onSuccess(o1);</div><div class=\"line\">                                                    &#125;</div><div class=\"line\">                                                &#125;</div><div class=\"line\">                                            &#125;);</div><div class=\"line\"></div><div class=\"line\">                                        &#125;</div><div class=\"line\">                                    &#125;</div><div class=\"line\">                                &#125;</div><div class=\"line\"></div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">            <span class=\"comment\">/**</span></div><div class=\"line\">             * 扔到缓存中</div><div class=\"line\">             */</div><div class=\"line\">            serviceMap.put(clazz, o);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> (T) o;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>然后我们就可以根据Retrofit那样进行调用了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">Retrofit retrofit = <span class=\"keyword\">new</span> Retrofit.Builder()</div><div class=\"line\">        .baseUrl(<span class=\"string\">\"https://api.github.com\"</span>)</div><div class=\"line\">        .build();</div><div class=\"line\"></div><div class=\"line\">GithubService githubService = retrofit.create(GithubService.class);</div><div class=\"line\"></div><div class=\"line\">githubService.listRepos(<span class=\"string\">\"lizhangqu\"</span>, <span class=\"keyword\">new</span> Callback&lt;List&lt;Repo&gt;&gt;() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">(Object t)</span> </span>&#123;</div><div class=\"line\">        System.out.println(t);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailed</span><span class=\"params\">(Exception e)</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"retrofit动态代理原理\"><a href=\"#retrofit动态代理原理\" class=\"headerlink\" title=\"retrofit动态代理原理\"></a>retrofit动态代理原理</h4><p>原理就是先拿到最后一个参数，也就是回调，再拿到方法上的注解，获得具体的值，然后拿到除了回调之外的其他参数，获得参数上的注解，然后根据注解取得对应的值，还有原来的参数值，将方法上的注解的值中进行替换。使用OkHttp构造请求，请求完成后根据将结果解析为回调中的类型。整个过程如下</p>\n<p>拦截到方法、参数，再根据我们在方法上的注解，去拼接为一个正常的Okhttp请求，然后执行。</p>\n<h4 id=\"java中的动态代理\"><a href=\"#java中的动态代理\" class=\"headerlink\" title=\"java中的动态代理\"></a>java中的动态代理</h4><p>在java的动态代理机制中，有两个重要的类或接口，一个是 InvocationHandler(Interface)、另一个则是 Proxy(Class)，这一个类和接口是实现我们动态代理所必须用到的</p>\n<p>每一个动态代理类都必须要实现InvocationHandler这个接口，并且每个代理类的实例都关联到了一个handler，当我们通过代理对象调用一个方法的时候，这个方法的调用就会被转发为由InvocationHandler这个接口的 invoke 方法来进行调用。我们来看看InvocationHandler这个接口的唯一一个方法 invoke 方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable</span></div><div class=\"line\"></div><div class=\"line\">proxy:　　指代我们所代理的那个真实对象</div><div class=\"line\">method:　　指代的是我们所要调用真实对象的某个方法的Method对象</div><div class=\"line\">args:　　指代的是调用真实对象某个方法时接受的参数</div></pre></td></tr></table></figure>\n<p>Proxy这个类的作用就是用来动态创建一个代理对象的类，它提供了许多的方法，但是我们用的最多的就是 newProxyInstance 这个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">newProxyInstance</span><span class=\"params\">(ClassLoader loader, Class&lt;?&gt;[] interfaces,  InvocationHandler h)</span>  <span class=\"keyword\">throws</span> IllegalArgumentException</span></div></pre></td></tr></table></figure>\n<p>这个方法的作用就是得到一个动态的代理对象，其接收三个参数，我们来看看这三个参数所代表的含义：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">newProxyInstance</span><span class=\"params\">(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span> <span class=\"keyword\">throws</span> IllegalArgumentException</span></div><div class=\"line\"></div><div class=\"line\">loader:　　一个ClassLoader对象，定义了由哪个ClassLoader对象来对生成的代理对象进行加载</div><div class=\"line\"></div><div class=\"line\">interfaces:　　一个Interface对象的数组，表示的是我将要给我需要代理的对象提供一组什么接口，如果我提供了一组接口给它，那么这个代理对象就宣称实现了该接口<span class=\"params\">(多态)</span>，这样我就能调用这组接口中的方法了</div><div class=\"line\"></div><div class=\"line\">h:　　一个InvocationHandler对象，表示的是当我这个动态代理对象在调用方法的时候，会关联到哪一个InvocationHandler对象上</div></pre></td></tr></table></figure>\n<p>使用如下：</p>\n<ul>\n<li>定义被代理对象</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Subject</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rent</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">(String str)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RealSubject</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rent</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"I want to rent my house\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">(String str)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"hello: \"</span> + str);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>定义动态代理类，任何动态代理类都必须实现InvotionHandler这个接口，重写invoke方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DynamicProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//　这个就是我们要代理的真实对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> Object subject;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//    构造方法，给我们要代理的真实对象赋初值</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DynamicProxy</span><span class=\"params\">(Object subject)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.subject = subject;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object object, Method method, Object[] args)</span></span></div><div class=\"line\">            <span class=\"keyword\">throws</span> Throwable</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\">//　　在代理真实对象前我们可以添加一些自己的操作</span></div><div class=\"line\">        System.out.println(<span class=\"string\">\"before rent house\"</span>);</div><div class=\"line\">        </div><div class=\"line\">        System.out.println(<span class=\"string\">\"Method:\"</span> + method);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//    当代理对象调用真实对象的方法时，其会自动的跳转到代理对象关联的handler对象的invoke方法来进行调用</span></div><div class=\"line\">        method.invoke(subject, args);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//　　在代理真实对象后我们也可以添加一些自己的操作</span></div><div class=\"line\">        System.out.println(<span class=\"string\">\"after rent house\"</span>);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>使用</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\">//    我们要代理的真实对象</span></div><div class=\"line\">        Subject realSubject = <span class=\"keyword\">new</span> RealSubject();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//    我们要代理哪个真实对象，就将该对象传进去，最后是通过该真实对象来调用其方法的</span></div><div class=\"line\">        InvocationHandler handler = <span class=\"keyword\">new</span> DynamicProxy(realSubject);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*</span></div><div class=\"line\">         * 通过Proxy的newProxyInstance方法来创建我们的代理对象，我们来看看其三个参数</div><div class=\"line\">         * 第一个参数 handler.getClass().getClassLoader() ，我们这里使用handler这个类的ClassLoader对象来加载我们的代理对象</div><div class=\"line\">         * 第二个参数realSubject.getClass().getInterfaces()，我们这里为代理对象提供的接口是真实对象所实行的接口，表示我要代理的是该真实对象，这样我就能调用这组接口中的方法了</div><div class=\"line\">         * 第三个参数handler， 我们这里将这个代理对象关联到了上方的 InvocationHandler 这个对象上</div><div class=\"line\">         */</div><div class=\"line\">        Subject subject = (Subject)Proxy.newProxyInstance(handler.getClass().getClassLoader(), realSubject</div><div class=\"line\">                .getClass().getInterfaces(), handler);</div><div class=\"line\">        </div><div class=\"line\">        System.out.println(subject.getClass().getName());</div><div class=\"line\">        subject.rent();</div><div class=\"line\">        subject.hello(<span class=\"string\">\"world\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"<p>代理类在运行前不存在，运行时由程序动态生成的代理方式称为动态代理</p>","more":"<h4 id=\"关于Retrofit\"><a href=\"#关于Retrofit\" class=\"headerlink\" title=\"关于Retrofit\"></a>关于Retrofit</h4><p>Square公司的OkHttp简直是完美的一个网络请求库，而在其上又封装了一层的Retrofit库，使其调用Restful Api更方便</p>\n<h4 id=\"简述Retrofit调用流程\"><a href=\"#简述Retrofit调用流程\" class=\"headerlink\" title=\"简述Retrofit调用流程\"></a>简述Retrofit调用流程</h4><p>因为本篇只是简述动态代理在Retrofit的使用，所以不过多总结Retrofit的详细使用，在上家公司的项目都网络层，用的retrofit，现在这家公司的项目因为刚开始是我独立开发，所以网络层框架我也是用的Retrofit，功能强大，详细使用，以后再总结</p>\n<p>熟悉Retrofit使用的都对下面几个步骤比较熟悉了：</p>\n<ul>\n<li>定义一个ApiService接口，通过注解可以标记请求方法，请求参数，以及添加的头信息</li>\n<li>然后创建Retrofit对象，通过建造者模式设置BaseUrl等一些参数，通过Retrofit对象create一个你定义的接口对象</li>\n<li>拿到接口对象调用具体的方法完成请求</li>\n</ul>\n<p>具体的代码大概如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ApiService</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@GET</span>(<span class=\"string\">\"users/&#123;user&#125;/repos\"</span>)</div><div class=\"line\">  Call&lt;List&lt;Repo&gt;&gt; listRepos(<span class=\"meta\">@Path</span>(<span class=\"string\">\"user\"</span>) String user);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Retrofit retrofit = <span class=\"keyword\">new</span> Retrofit.Builder()</div><div class=\"line\">    .baseUrl(<span class=\"string\">\"https://api.github.com\"</span>)</div><div class=\"line\">    .build();</div><div class=\"line\">ApiService service = retrofit.create(ApiService.class);</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Call&lt;List&lt;Repo&gt;&gt; repos = service.listRepos(<span class=\"string\">\"fengan\"</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"ApiService是如何产生的\"><a href=\"#ApiService是如何产生的\" class=\"headerlink\" title=\"ApiService是如何产生的\"></a>ApiService是如何产生的</h4><p>因为接口是不可以直接new出来的，那么ApiService是如何产生的呢？</p>\n<p>ApiService service = retrofit.create(ApiService.class);方法内部到底做了什么？</p>\n<p>没错，就是动态代理</p>\n<p>为了更好的理解动态代理，下面过一下简易版的Retrofit，</p>\n<figure class=\"highlight plain\"><figcaption><span>a v</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface Callback&lt;T&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">    void onSuccess(Object t);</div><div class=\"line\"></div><div class=\"line\">    void onFailed(Exception e);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 约定最后一个参数是callback</div><div class=\"line\">     */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">GithubService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@GET</span>(<span class=\"string\">\"users/&#123;user&#125;/repos\"</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">void</span> list&lt;Repos&gt;(<span class=\"meta\">@Path</span>(<span class=\"string\">\"user\"</span>) String user,Callback&lt;List&lt;Repo&gt;&gt; callback);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>用到了两个注解，一个是方法注解，一个是参数注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Target</span>(&#123;ElementType.METHOD&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> GET &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"\"</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.PARAMETER)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Path &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">value</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Repo实体类是使用GsonFormat根据json自动生成的。现实使用中，我们在构建Retrofit过程传入GsonFactory</p>\n<p>Retrofit这个类应该是一个builder模式，里面可以设置baseUrl，姑且忽略其他所有参数。还有一个create方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Retrofit</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> String baseUrl;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Retrofit</span><span class=\"params\">(Builder builder)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.baseUrl = builder.baseUrl;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">create</span><span class=\"params\">(Class&lt;T&gt; clazz)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> String baseUrl;</div><div class=\"line\">        <span class=\"function\">Builder <span class=\"title\">baseUrl</span><span class=\"params\">(String host)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.baseUrl = host;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\">Retrofit <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Retrofit(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最关键的就是create这个方法了，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">create</span><span class=\"params\">(Class&lt;T&gt; clazz)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">/**</div><div class=\"line\">         * 缓存中去</div><div class=\"line\">         */</span></div><div class=\"line\">        Object o = serviceMap.get(clazz);</div><div class=\"line\">        <span class=\"comment\">/**</div><div class=\"line\">         * 取不到则取构造代理对象</div><div class=\"line\">         */</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            o = (T) Proxy.newProxyInstance(Retrofit.class.getClassLoader(), <span class=\"keyword\">new</span> Class[]&#123;clazz&#125;, <span class=\"keyword\">new</span> InvocationHandler() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">final</span> Callback&lt;?&gt; callback = (Callback&lt;?&gt;) args[args.length - <span class=\"number\">1</span>];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">final</span> GET get = method.getAnnotation(GET.class);</div><div class=\"line\">                    <span class=\"keyword\">if</span> (get != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        <span class=\"comment\">/**</div><div class=\"line\">                         * 获得GET注解的值</div><div class=\"line\">                         */</span></div><div class=\"line\">                        String getValue = get.value();</div><div class=\"line\"></div><div class=\"line\">                        System.out.println(getValue);</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"comment\">/**</div><div class=\"line\">                         * 获得所有参数上的注解</div><div class=\"line\">                         */</span></div><div class=\"line\">                        Annotation[][] methodParameterAnnotationArrays = method.getParameterAnnotations();</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"keyword\">if</span> (methodParameterAnnotationArrays != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                            <span class=\"keyword\">int</span> count = methodParameterAnnotationArrays.length;</div><div class=\"line\">                            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">                                <span class=\"comment\">/**</div><div class=\"line\">                                 * 获得单个参数上的注解</div><div class=\"line\">                                 */</span></div><div class=\"line\">                                Annotation[] methodParameterAnnotations = methodParameterAnnotationArrays[i];</div><div class=\"line\"></div><div class=\"line\">                                <span class=\"keyword\">if</span> (methodParameterAnnotations != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                                    <span class=\"keyword\">for</span> (Annotation methodParameterAnnotation : methodParameterAnnotations) &#123;</div><div class=\"line\"></div><div class=\"line\">                                        <span class=\"comment\">/**</div><div class=\"line\">                                         * 如果是Path注解</div><div class=\"line\">                                         */</span></div><div class=\"line\">                                        <span class=\"keyword\">if</span> (methodParameterAnnotation <span class=\"keyword\">instanceof</span> Path) &#123;</div><div class=\"line\"></div><div class=\"line\">                                            <span class=\"comment\">/**</div><div class=\"line\">                                             * 取得path注解上的值</div><div class=\"line\">                                             */</span></div><div class=\"line\">                                            Path path = (Path) methodParameterAnnotation;</div><div class=\"line\">                                            String pathValue = path.value();</div><div class=\"line\">                                            System.out.println(pathValue);</div><div class=\"line\"></div><div class=\"line\">                                            <span class=\"comment\">/**</div><div class=\"line\">                                             * 这是对应的参数的值</div><div class=\"line\">                                             */</span></div><div class=\"line\">                                            System.out.println(args[i]);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">                                            Request.Builder builder = <span class=\"keyword\">new</span> Request.Builder();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">                                            <span class=\"comment\">/**</div><div class=\"line\">                                             * 使用path注解替换get注解中的值为参数值</div><div class=\"line\">                                             */</span></div><div class=\"line\">                                            String result = getValue.replaceAll(<span class=\"string\">\"\\\\&#123;\"</span> + pathValue + <span class=\"string\">\"\\\\&#125;\"</span>, (String) args[i]);</div><div class=\"line\"></div><div class=\"line\">                                            System.out.println(result);</div><div class=\"line\"></div><div class=\"line\">                                            <span class=\"comment\">/**</div><div class=\"line\">                                             * 开始构造请求</div><div class=\"line\">                                             */</span></div><div class=\"line\">                                            Request request = builder.get()</div><div class=\"line\">                                                    .url(baseUrl + <span class=\"string\">\"/\"</span> + result)</div><div class=\"line\">                                                    .build();</div><div class=\"line\"></div><div class=\"line\">                                            okHttpClient.newCall(request).enqueue(<span class=\"keyword\">new</span> okhttp3.Callback() &#123;</div><div class=\"line\">                                                <span class=\"meta\">@Override</span></div><div class=\"line\">                                                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call call, IOException e)</span> </span>&#123;</div><div class=\"line\">                                                    <span class=\"comment\">/**</div><div class=\"line\">                                                     * 失败则回调失败的方法</div><div class=\"line\">                                                     */</span></div><div class=\"line\">                                                    callback.onFailed(e);</div><div class=\"line\">                                                &#125;</div><div class=\"line\"></div><div class=\"line\">                                                <span class=\"meta\">@Override</span></div><div class=\"line\">                                                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">                                                    <span class=\"keyword\">if</span> (response.isSuccessful()) &#123;</div><div class=\"line\">                                                        <span class=\"comment\">/**</div><div class=\"line\">                                                         * 请求成功</div><div class=\"line\">                                                         */</span></div><div class=\"line\">                                                        String body = response.body().string();</div><div class=\"line\"></div><div class=\"line\">                                                        <span class=\"comment\">/**</div><div class=\"line\">                                                         * 使用fastjson进行zhuan转换</div><div class=\"line\">                                                         */</span></div><div class=\"line\">                                                        Type type = callback.getClass().getGenericInterfaces()[<span class=\"number\">0</span>];</div><div class=\"line\"></div><div class=\"line\">                                                        Object o1 = JSON.parse(body);</div><div class=\"line\"></div><div class=\"line\">                                                        <span class=\"comment\">/**</div><div class=\"line\">                                                         * 回调成功</div><div class=\"line\">                                                         */</span></div><div class=\"line\">                                                        callback.onSuccess(o1);</div><div class=\"line\">                                                    &#125;</div><div class=\"line\">                                                &#125;</div><div class=\"line\">                                            &#125;);</div><div class=\"line\"></div><div class=\"line\">                                        &#125;</div><div class=\"line\">                                    &#125;</div><div class=\"line\">                                &#125;</div><div class=\"line\"></div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">            <span class=\"comment\">/**</div><div class=\"line\">             * 扔到缓存中</div><div class=\"line\">             */</span></div><div class=\"line\">            serviceMap.put(clazz, o);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> (T) o;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>然后我们就可以根据Retrofit那样进行调用了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">Retrofit retrofit = <span class=\"keyword\">new</span> Retrofit.Builder()</div><div class=\"line\">        .baseUrl(<span class=\"string\">\"https://api.github.com\"</span>)</div><div class=\"line\">        .build();</div><div class=\"line\"></div><div class=\"line\">GithubService githubService = retrofit.create(GithubService.class);</div><div class=\"line\"></div><div class=\"line\">githubService.listRepos(<span class=\"string\">\"lizhangqu\"</span>, <span class=\"keyword\">new</span> Callback&lt;List&lt;Repo&gt;&gt;() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">(Object t)</span> </span>&#123;</div><div class=\"line\">        System.out.println(t);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailed</span><span class=\"params\">(Exception e)</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"retrofit动态代理原理\"><a href=\"#retrofit动态代理原理\" class=\"headerlink\" title=\"retrofit动态代理原理\"></a>retrofit动态代理原理</h4><p>原理就是先拿到最后一个参数，也就是回调，再拿到方法上的注解，获得具体的值，然后拿到除了回调之外的其他参数，获得参数上的注解，然后根据注解取得对应的值，还有原来的参数值，将方法上的注解的值中进行替换。使用OkHttp构造请求，请求完成后根据将结果解析为回调中的类型。整个过程如下</p>\n<p>拦截到方法、参数，再根据我们在方法上的注解，去拼接为一个正常的Okhttp请求，然后执行。</p>\n<h4 id=\"java中的动态代理\"><a href=\"#java中的动态代理\" class=\"headerlink\" title=\"java中的动态代理\"></a>java中的动态代理</h4><p>在java的动态代理机制中，有两个重要的类或接口，一个是 InvocationHandler(Interface)、另一个则是 Proxy(Class)，这一个类和接口是实现我们动态代理所必须用到的</p>\n<p>每一个动态代理类都必须要实现InvocationHandler这个接口，并且每个代理类的实例都关联到了一个handler，当我们通过代理对象调用一个方法的时候，这个方法的调用就会被转发为由InvocationHandler这个接口的 invoke 方法来进行调用。我们来看看InvocationHandler这个接口的唯一一个方法 invoke 方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable</div><div class=\"line\"></div><div class=\"line\">proxy:　　指代我们所代理的那个真实对象</div><div class=\"line\">method:　　指代的是我们所要调用真实对象的某个方法的Method对象</div><div class=\"line\">args:　　指代的是调用真实对象某个方法时接受的参数</span></div></pre></td></tr></table></figure>\n<p>Proxy这个类的作用就是用来动态创建一个代理对象的类，它提供了许多的方法，但是我们用的最多的就是 newProxyInstance 这个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">newProxyInstance</span><span class=\"params\">(ClassLoader loader, Class&lt;?&gt;[] interfaces,  InvocationHandler h)</span>  <span class=\"keyword\">throws</span> IllegalArgumentException</span></div></pre></td></tr></table></figure>\n<p>这个方法的作用就是得到一个动态的代理对象，其接收三个参数，我们来看看这三个参数所代表的含义：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">newProxyInstance</span><span class=\"params\">(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span> <span class=\"keyword\">throws</span> IllegalArgumentException</div><div class=\"line\"></div><div class=\"line\">loader:　　一个ClassLoader对象，定义了由哪个ClassLoader对象来对生成的代理对象进行加载</div><div class=\"line\"></div><div class=\"line\">interfaces:　　一个Interface对象的数组，表示的是我将要给我需要代理的对象提供一组什么接口，如果我提供了一组接口给它，那么这个代理对象就宣称实现了该接口<span class=\"params\">(多态)</span>，这样我就能调用这组接口中的方法了</div><div class=\"line\"></div><div class=\"line\">h:　　一个InvocationHandler对象，表示的是当我这个动态代理对象在调用方法的时候，会关联到哪一个InvocationHandler对象上</span></div></pre></td></tr></table></figure>\n<p>使用如下：</p>\n<ul>\n<li>定义被代理对象</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Subject</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rent</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">(String str)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RealSubject</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rent</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"I want to rent my house\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">(String str)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"hello: \"</span> + str);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>定义动态代理类，任何动态代理类都必须实现InvotionHandler这个接口，重写invoke方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DynamicProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//　这个就是我们要代理的真实对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> Object subject;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//    构造方法，给我们要代理的真实对象赋初值</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DynamicProxy</span><span class=\"params\">(Object subject)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.subject = subject;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object object, Method method, Object[] args)</span></div><div class=\"line\">            <span class=\"keyword\">throws</span> Throwable</div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//　　在代理真实对象前我们可以添加一些自己的操作</span></div><div class=\"line\">        System.out.println(<span class=\"string\">\"before rent house\"</span>);</div><div class=\"line\">        </div><div class=\"line\">        System.out.println(<span class=\"string\">\"Method:\"</span> + method);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//    当代理对象调用真实对象的方法时，其会自动的跳转到代理对象关联的handler对象的invoke方法来进行调用</span></div><div class=\"line\">        method.invoke(subject, args);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//　　在代理真实对象后我们也可以添加一些自己的操作</span></div><div class=\"line\">        System.out.println(<span class=\"string\">\"after rent house\"</span>);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>使用</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//    我们要代理的真实对象</span></div><div class=\"line\">        Subject realSubject = <span class=\"keyword\">new</span> RealSubject();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//    我们要代理哪个真实对象，就将该对象传进去，最后是通过该真实对象来调用其方法的</span></div><div class=\"line\">        InvocationHandler handler = <span class=\"keyword\">new</span> DynamicProxy(realSubject);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*</div><div class=\"line\">         * 通过Proxy的newProxyInstance方法来创建我们的代理对象，我们来看看其三个参数</div><div class=\"line\">         * 第一个参数 handler.getClass().getClassLoader() ，我们这里使用handler这个类的ClassLoader对象来加载我们的代理对象</div><div class=\"line\">         * 第二个参数realSubject.getClass().getInterfaces()，我们这里为代理对象提供的接口是真实对象所实行的接口，表示我要代理的是该真实对象，这样我就能调用这组接口中的方法了</div><div class=\"line\">         * 第三个参数handler， 我们这里将这个代理对象关联到了上方的 InvocationHandler 这个对象上</div><div class=\"line\">         */</span></div><div class=\"line\">        Subject subject = (Subject)Proxy.newProxyInstance(handler.getClass().getClassLoader(), realSubject</div><div class=\"line\">                .getClass().getInterfaces(), handler);</div><div class=\"line\">        </div><div class=\"line\">        System.out.println(subject.getClass().getName());</div><div class=\"line\">        subject.rent();</div><div class=\"line\">        subject.hello(<span class=\"string\">\"world\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"webview中点击网页图片跳转查看图片","date":"2016-03-08T08:11:40.000Z","password":123456,"_content":"\n**前言**\n\napp中很多图文页面，类似新闻详情页，都是一个H5网页，当我们点击网页中的图片，希望跳转到一个多图游览的页面，并且支持手势缩放和保存的一些功能。今天主要整理一下点击网页中图片，跳转到指定图片的查看页面即可，手势缩放可以使用photoview。\n\n<!--more-->\n\n### 原理\n\n#### 效果\n\n![网页点击图片](https://ws4.sinaimg.cn/large/006tNc79ly1fp5hh5mdkvg30bf0lgnpd.gif)\n\n**原理**\n\n首先点击h5页面，跳转本地页面，是js调用原生代码\n\n**Js通过WebView调用Android代码有三种方式**\n\n- 通过WebView的addJavascriptInterface（）进行对象映射\n- 通过 WebViewClient 的shouldOverrideUrlLoading ()方法回调拦截 url\n- 通过 WebChromeClient 的onJsAlert()、onJsConfirm()、onJsPrompt（）方法回调拦截JS对话框alert()、confirm()、prompt（） 消息\n\n![js调原生](https://ws4.sinaimg.cn/large/006tNc79ly1fp5hmm8ywuj31d60hqgqf.jpg)\n\n通过addJavascriptInterface定义js接口的方式比较方便，所以本文采用的是这种方式，详细见下列代码\n\n- 定义js接口\n- 找到网页中img标签的代码块，设置点击\n- 相关权限和混淆\n\n### 代码\n\n#### 定义js接口\n\n```java\n**\n * Created by fengan on 2016/3/8.\n * email:fengan1102@gmail.com\n * 点击webview页面图片，跳转查看大图页面的js接口\n * 检查混淆文件，确保未被混淆\n */\n\npublic class JavaScriptInterface {\n    private Activity mContext;\n    private ArrayList<String> mImgList = new ArrayList<>();\n\n    public JavaScriptInterface(Activity context) {\n        this.mContext = context;\n    }\n\n//方法名要和执行的js代码中一致\n    @JavascriptInterface\n    public void addImageUrl(String img) { \n        mImgList.add(img);\n    }\n\n    @JavascriptInterface\n    public void openImage(String img) {\n        if (ClickUtils.noDoubleClick()) {\n            int index = mImgList.indexOf(img);\n            PhotoListAty.startAty(index == -1 ? 0 : index, mImgList, mContext);\n        }\n    }\n}\n\n```\n\n#### 自定义WebClient\n\n```java\npublic class MyWebViewClient extends WebViewClient {  \n\n    @Override  \n\n    public void onPageFinished(WebView view, String url) {  \n\n        view.getSettings().setJavaScriptEnabled(true);  \n\n      super.onPageFinished(view, url);  \n\n    addImageClickListener(view);//待网页加载完全后设置图片点击的监听方法  \n\n    }  \n\n \n\n  @Override  \n\n   public void onPageStarted(WebView view, String url, Bitmap favicon) {  \n\n        view.getSettings().setJavaScriptEnabled(true);  \n\n       super.onPageStarted(view, url, favicon);  \n\n   }  \n\n \n\n    private void addImageClickListener(WebView webView) {  \n\t\t webView.loadUrl(\"javascript:(function(){\" +\n                \"var objs = document.getElementsByTagName(\\\"img\\\"); \" +\n                \"for(var i=0;i<objs.length;i++)  \" +\n                \"{\" +\n                \"window.imagelistener.addImageUrl(objs[i].src);  \" +\n                \" objs[i].onclick=function()  \" +\n                \" {  \" +\n                \" window.imagelistener.openImage(this.src);  \" +\n                \"  }  \" +\n                \"}\" +\n                \"})()\");\n   }  \n\n```\n\n```java\n//imagelistener用于暴露js的对象，需要对应\n mWebview.getSettings().setJavaScriptEnabled(true);  \n mWebview.addJavascriptInterface(new JavaScriptInterface(this), \"imagelistener\");\n mWebview.setWebViewClient(new MyWebViewClient());  \n```\n\n\n\n### 注意事项\n\n注意在混淆文件中添加\n\n项目中暴露的js接口类：MJavascriptInterface不能混淆，其调用的方法的声明也不能混淆，所以还要添加如下混淆设置代码（代码因包名而变化）\n\n```properties\n-keepclassmembers class com.example.administrator.webviewpagescannerapp.other.MJavascriptInterface{  \n  public *;  \n}  \n  \n-keepattributes *Annotation*  \n-keepattributes *JavascriptInterface*\n```","source":"_posts/webview中点击网页图片跳转查看图片.md","raw":"---\ntitle: webview中点击网页图片跳转查看图片\ndate: 2016-03-08 16:11:40\ntags: \n- Android\ncategories: Android\npassword: 123456\n---\n\n**前言**\n\napp中很多图文页面，类似新闻详情页，都是一个H5网页，当我们点击网页中的图片，希望跳转到一个多图游览的页面，并且支持手势缩放和保存的一些功能。今天主要整理一下点击网页中图片，跳转到指定图片的查看页面即可，手势缩放可以使用photoview。\n\n<!--more-->\n\n### 原理\n\n#### 效果\n\n![网页点击图片](https://ws4.sinaimg.cn/large/006tNc79ly1fp5hh5mdkvg30bf0lgnpd.gif)\n\n**原理**\n\n首先点击h5页面，跳转本地页面，是js调用原生代码\n\n**Js通过WebView调用Android代码有三种方式**\n\n- 通过WebView的addJavascriptInterface（）进行对象映射\n- 通过 WebViewClient 的shouldOverrideUrlLoading ()方法回调拦截 url\n- 通过 WebChromeClient 的onJsAlert()、onJsConfirm()、onJsPrompt（）方法回调拦截JS对话框alert()、confirm()、prompt（） 消息\n\n![js调原生](https://ws4.sinaimg.cn/large/006tNc79ly1fp5hmm8ywuj31d60hqgqf.jpg)\n\n通过addJavascriptInterface定义js接口的方式比较方便，所以本文采用的是这种方式，详细见下列代码\n\n- 定义js接口\n- 找到网页中img标签的代码块，设置点击\n- 相关权限和混淆\n\n### 代码\n\n#### 定义js接口\n\n```java\n**\n * Created by fengan on 2016/3/8.\n * email:fengan1102@gmail.com\n * 点击webview页面图片，跳转查看大图页面的js接口\n * 检查混淆文件，确保未被混淆\n */\n\npublic class JavaScriptInterface {\n    private Activity mContext;\n    private ArrayList<String> mImgList = new ArrayList<>();\n\n    public JavaScriptInterface(Activity context) {\n        this.mContext = context;\n    }\n\n//方法名要和执行的js代码中一致\n    @JavascriptInterface\n    public void addImageUrl(String img) { \n        mImgList.add(img);\n    }\n\n    @JavascriptInterface\n    public void openImage(String img) {\n        if (ClickUtils.noDoubleClick()) {\n            int index = mImgList.indexOf(img);\n            PhotoListAty.startAty(index == -1 ? 0 : index, mImgList, mContext);\n        }\n    }\n}\n\n```\n\n#### 自定义WebClient\n\n```java\npublic class MyWebViewClient extends WebViewClient {  \n\n    @Override  \n\n    public void onPageFinished(WebView view, String url) {  \n\n        view.getSettings().setJavaScriptEnabled(true);  \n\n      super.onPageFinished(view, url);  \n\n    addImageClickListener(view);//待网页加载完全后设置图片点击的监听方法  \n\n    }  \n\n \n\n  @Override  \n\n   public void onPageStarted(WebView view, String url, Bitmap favicon) {  \n\n        view.getSettings().setJavaScriptEnabled(true);  \n\n       super.onPageStarted(view, url, favicon);  \n\n   }  \n\n \n\n    private void addImageClickListener(WebView webView) {  \n\t\t webView.loadUrl(\"javascript:(function(){\" +\n                \"var objs = document.getElementsByTagName(\\\"img\\\"); \" +\n                \"for(var i=0;i<objs.length;i++)  \" +\n                \"{\" +\n                \"window.imagelistener.addImageUrl(objs[i].src);  \" +\n                \" objs[i].onclick=function()  \" +\n                \" {  \" +\n                \" window.imagelistener.openImage(this.src);  \" +\n                \"  }  \" +\n                \"}\" +\n                \"})()\");\n   }  \n\n```\n\n```java\n//imagelistener用于暴露js的对象，需要对应\n mWebview.getSettings().setJavaScriptEnabled(true);  \n mWebview.addJavascriptInterface(new JavaScriptInterface(this), \"imagelistener\");\n mWebview.setWebViewClient(new MyWebViewClient());  \n```\n\n\n\n### 注意事项\n\n注意在混淆文件中添加\n\n项目中暴露的js接口类：MJavascriptInterface不能混淆，其调用的方法的声明也不能混淆，所以还要添加如下混淆设置代码（代码因包名而变化）\n\n```properties\n-keepclassmembers class com.example.administrator.webviewpagescannerapp.other.MJavascriptInterface{  \n  public *;  \n}  \n  \n-keepattributes *Annotation*  \n-keepattributes *JavascriptInterface*\n```","slug":"webview中点击网页图片跳转查看图片","published":1,"updated":"2018-07-19T02:18:38.195Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6n6002f1kygbwm5rc0z","content":"<p><strong>前言</strong></p>\n<p>app中很多图文页面，类似新闻详情页，都是一个H5网页，当我们点击网页中的图片，希望跳转到一个多图游览的页面，并且支持手势缩放和保存的一些功能。今天主要整理一下点击网页中图片，跳转到指定图片的查看页面即可，手势缩放可以使用photoview。</p>\n<a id=\"more\"></a>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><h4 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h4><p><img src=\"https://ws4.sinaimg.cn/large/006tNc79ly1fp5hh5mdkvg30bf0lgnpd.gif\" alt=\"网页点击图片\"></p>\n<p><strong>原理</strong></p>\n<p>首先点击h5页面，跳转本地页面，是js调用原生代码</p>\n<p><strong>Js通过WebView调用Android代码有三种方式</strong></p>\n<ul>\n<li>通过WebView的addJavascriptInterface（）进行对象映射</li>\n<li>通过 WebViewClient 的shouldOverrideUrlLoading ()方法回调拦截 url</li>\n<li>通过 WebChromeClient 的onJsAlert()、onJsConfirm()、onJsPrompt（）方法回调拦截JS对话框alert()、confirm()、prompt（） 消息</li>\n</ul>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tNc79ly1fp5hmm8ywuj31d60hqgqf.jpg\" alt=\"js调原生\"></p>\n<p>通过addJavascriptInterface定义js接口的方式比较方便，所以本文采用的是这种方式，详细见下列代码</p>\n<ul>\n<li>定义js接口</li>\n<li>找到网页中img标签的代码块，设置点击</li>\n<li>相关权限和混淆</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><h4 id=\"定义js接口\"><a href=\"#定义js接口\" class=\"headerlink\" title=\"定义js接口\"></a>定义js接口</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">**</div><div class=\"line\"> * Created by fengan on <span class=\"number\">2016</span>/<span class=\"number\">3</span>/<span class=\"number\">8</span>.</div><div class=\"line\"> * email:fengan1102<span class=\"meta\">@gmail</span>.com</div><div class=\"line\"> * 点击webview页面图片，跳转查看大图页面的js接口</div><div class=\"line\"> * 检查混淆文件，确保未被混淆</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaScriptInterface</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Activity mContext;</div><div class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;String&gt; mImgList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">JavaScriptInterface</span><span class=\"params\">(Activity context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.mContext = context;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//方法名要和执行的js代码中一致</span></div><div class=\"line\">    <span class=\"meta\">@JavascriptInterface</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addImageUrl</span><span class=\"params\">(String img)</span> </span>&#123; </div><div class=\"line\">        mImgList.add(img);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@JavascriptInterface</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">openImage</span><span class=\"params\">(String img)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (ClickUtils.noDoubleClick()) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> index = mImgList.indexOf(img);</div><div class=\"line\">            PhotoListAty.startAty(index == -<span class=\"number\">1</span> ? <span class=\"number\">0</span> : index, mImgList, mContext);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"自定义WebClient\"><a href=\"#自定义WebClient\" class=\"headerlink\" title=\"自定义WebClient\"></a>自定义WebClient</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyWebViewClient</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebViewClient</span> </span>&#123;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageFinished</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;  </div><div class=\"line\"></div><div class=\"line\">        view.getSettings().setJavaScriptEnabled(<span class=\"keyword\">true</span>);  </div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">super</span>.onPageFinished(view, url);  </div><div class=\"line\"></div><div class=\"line\">    addImageClickListener(view);<span class=\"comment\">//待网页加载完全后设置图片点击的监听方法  </span></div><div class=\"line\"></div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\"> </div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span>  </div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageStarted</span><span class=\"params\">(WebView view, String url, Bitmap favicon)</span> </span>&#123;  </div><div class=\"line\"></div><div class=\"line\">        view.getSettings().setJavaScriptEnabled(<span class=\"keyword\">true</span>);  </div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">super</span>.onPageStarted(view, url, favicon);  </div><div class=\"line\"></div><div class=\"line\">   &#125;  </div><div class=\"line\"></div><div class=\"line\"> </div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addImageClickListener</span><span class=\"params\">(WebView webView)</span> </span>&#123;  </div><div class=\"line\">\t\t webView.loadUrl(<span class=\"string\">\"javascript:(function()&#123;\"</span> +</div><div class=\"line\">                <span class=\"string\">\"var objs = document.getElementsByTagName(\\\"img\\\"); \"</span> +</div><div class=\"line\">                <span class=\"string\">\"for(var i=0;i&lt;objs.length;i++)  \"</span> +</div><div class=\"line\">                <span class=\"string\">\"&#123;\"</span> +</div><div class=\"line\">                <span class=\"string\">\"window.imagelistener.addImageUrl(objs[i].src);  \"</span> +</div><div class=\"line\">                <span class=\"string\">\" objs[i].onclick=function()  \"</span> +</div><div class=\"line\">                <span class=\"string\">\" &#123;  \"</span> +</div><div class=\"line\">                <span class=\"string\">\" window.imagelistener.openImage(this.src);  \"</span> +</div><div class=\"line\">                <span class=\"string\">\"  &#125;  \"</span> +</div><div class=\"line\">                <span class=\"string\">\"&#125;\"</span> +</div><div class=\"line\">                <span class=\"string\">\"&#125;)()\"</span>);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//imagelistener用于暴露js的对象，需要对应</span></div><div class=\"line\"> mWebview.getSettings().setJavaScriptEnabled(<span class=\"keyword\">true</span>);  </div><div class=\"line\"> mWebview.addJavascriptInterface(<span class=\"keyword\">new</span> JavaScriptInterface(<span class=\"keyword\">this</span>), <span class=\"string\">\"imagelistener\"</span>);</div><div class=\"line\"> mWebview.setWebViewClient(<span class=\"keyword\">new</span> MyWebViewClient());</div></pre></td></tr></table></figure>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><p>注意在混淆文件中添加</p>\n<p>项目中暴露的js接口类：MJavascriptInterface不能混淆，其调用的方法的声明也不能混淆，所以还要添加如下混淆设置代码（代码因包名而变化）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">-keepclassmembers class com.example.administrator.webviewpagescannerapp.other.MJavascriptInterface&#123;  </div><div class=\"line\">  public *;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">-keepattributes *Annotation*  </div><div class=\"line\">-keepattributes *JavascriptInterface*</div></pre></td></tr></table></figure>","excerpt":"<p><strong>前言</strong></p>\n<p>app中很多图文页面，类似新闻详情页，都是一个H5网页，当我们点击网页中的图片，希望跳转到一个多图游览的页面，并且支持手势缩放和保存的一些功能。今天主要整理一下点击网页中图片，跳转到指定图片的查看页面即可，手势缩放可以使用photoview。</p>","more":"<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><h4 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h4><p><img src=\"https://ws4.sinaimg.cn/large/006tNc79ly1fp5hh5mdkvg30bf0lgnpd.gif\" alt=\"网页点击图片\"></p>\n<p><strong>原理</strong></p>\n<p>首先点击h5页面，跳转本地页面，是js调用原生代码</p>\n<p><strong>Js通过WebView调用Android代码有三种方式</strong></p>\n<ul>\n<li>通过WebView的addJavascriptInterface（）进行对象映射</li>\n<li>通过 WebViewClient 的shouldOverrideUrlLoading ()方法回调拦截 url</li>\n<li>通过 WebChromeClient 的onJsAlert()、onJsConfirm()、onJsPrompt（）方法回调拦截JS对话框alert()、confirm()、prompt（） 消息</li>\n</ul>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tNc79ly1fp5hmm8ywuj31d60hqgqf.jpg\" alt=\"js调原生\"></p>\n<p>通过addJavascriptInterface定义js接口的方式比较方便，所以本文采用的是这种方式，详细见下列代码</p>\n<ul>\n<li>定义js接口</li>\n<li>找到网页中img标签的代码块，设置点击</li>\n<li>相关权限和混淆</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><h4 id=\"定义js接口\"><a href=\"#定义js接口\" class=\"headerlink\" title=\"定义js接口\"></a>定义js接口</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">**</div><div class=\"line\"> * Created by fengan on <span class=\"number\">2016</span>/<span class=\"number\">3</span>/<span class=\"number\">8</span>.</div><div class=\"line\"> * email:fengan1102<span class=\"meta\">@gmail</span>.com</div><div class=\"line\"> * 点击webview页面图片，跳转查看大图页面的js接口</div><div class=\"line\"> * 检查混淆文件，确保未被混淆</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaScriptInterface</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Activity mContext;</div><div class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;String&gt; mImgList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">JavaScriptInterface</span><span class=\"params\">(Activity context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.mContext = context;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//方法名要和执行的js代码中一致</span></div><div class=\"line\">    <span class=\"meta\">@JavascriptInterface</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addImageUrl</span><span class=\"params\">(String img)</span> </span>&#123; </div><div class=\"line\">        mImgList.add(img);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@JavascriptInterface</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">openImage</span><span class=\"params\">(String img)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (ClickUtils.noDoubleClick()) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> index = mImgList.indexOf(img);</div><div class=\"line\">            PhotoListAty.startAty(index == -<span class=\"number\">1</span> ? <span class=\"number\">0</span> : index, mImgList, mContext);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"自定义WebClient\"><a href=\"#自定义WebClient\" class=\"headerlink\" title=\"自定义WebClient\"></a>自定义WebClient</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyWebViewClient</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebViewClient</span> </span>&#123;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageFinished</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;  </div><div class=\"line\"></div><div class=\"line\">        view.getSettings().setJavaScriptEnabled(<span class=\"keyword\">true</span>);  </div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">super</span>.onPageFinished(view, url);  </div><div class=\"line\"></div><div class=\"line\">    addImageClickListener(view);<span class=\"comment\">//待网页加载完全后设置图片点击的监听方法  </span></div><div class=\"line\"></div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\"> </div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span>  </div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageStarted</span><span class=\"params\">(WebView view, String url, Bitmap favicon)</span> </span>&#123;  </div><div class=\"line\"></div><div class=\"line\">        view.getSettings().setJavaScriptEnabled(<span class=\"keyword\">true</span>);  </div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">super</span>.onPageStarted(view, url, favicon);  </div><div class=\"line\"></div><div class=\"line\">   &#125;  </div><div class=\"line\"></div><div class=\"line\"> </div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addImageClickListener</span><span class=\"params\">(WebView webView)</span> </span>&#123;  </div><div class=\"line\">\t\t webView.loadUrl(<span class=\"string\">\"javascript:(function()&#123;\"</span> +</div><div class=\"line\">                <span class=\"string\">\"var objs = document.getElementsByTagName(\\\"img\\\"); \"</span> +</div><div class=\"line\">                <span class=\"string\">\"for(var i=0;i&lt;objs.length;i++)  \"</span> +</div><div class=\"line\">                <span class=\"string\">\"&#123;\"</span> +</div><div class=\"line\">                <span class=\"string\">\"window.imagelistener.addImageUrl(objs[i].src);  \"</span> +</div><div class=\"line\">                <span class=\"string\">\" objs[i].onclick=function()  \"</span> +</div><div class=\"line\">                <span class=\"string\">\" &#123;  \"</span> +</div><div class=\"line\">                <span class=\"string\">\" window.imagelistener.openImage(this.src);  \"</span> +</div><div class=\"line\">                <span class=\"string\">\"  &#125;  \"</span> +</div><div class=\"line\">                <span class=\"string\">\"&#125;\"</span> +</div><div class=\"line\">                <span class=\"string\">\"&#125;)()\"</span>);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//imagelistener用于暴露js的对象，需要对应</span></div><div class=\"line\"> mWebview.getSettings().setJavaScriptEnabled(<span class=\"keyword\">true</span>);  </div><div class=\"line\"> mWebview.addJavascriptInterface(<span class=\"keyword\">new</span> JavaScriptInterface(<span class=\"keyword\">this</span>), <span class=\"string\">\"imagelistener\"</span>);</div><div class=\"line\"> mWebview.setWebViewClient(<span class=\"keyword\">new</span> MyWebViewClient());</div></pre></td></tr></table></figure>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><p>注意在混淆文件中添加</p>\n<p>项目中暴露的js接口类：MJavascriptInterface不能混淆，其调用的方法的声明也不能混淆，所以还要添加如下混淆设置代码（代码因包名而变化）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">-keepclassmembers class com.example.administrator.webviewpagescannerapp.other.MJavascriptInterface&#123;  </div><div class=\"line\">  public *;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">-keepattributes *Annotation*  </div><div class=\"line\">-keepattributes *JavascriptInterface*</div></pre></td></tr></table></figure>"},{"title":"事件分发小结","date":"2017-01-20T03:38:23.000Z","_content":"\nAndroid开发中，事件分发是非常重要的，了解熟悉整个事件分发过程有助于更好的分析各种点击滑动失效问题,也是一个安卓开发必会的一部分，但是时间长了，对整个流程多少会有些模糊，所以在此记录一下\n\n<!--more-->\n\n网上看到一张图，可以很详细的描述整个事件分发的过程\n\n![事件分发流程图](https://ws2.sinaimg.cn/large/006tKfTcgy1fo6s6mz1gzj30ot0gy42p.jpg)\n\n[原文的链接](https://www.jianshu.com/p/e99b5e8bd67b)\n\n- 问题一：\n\n当ViewGroup重写的onInterceptTouchEvent，并且始终返回了true，那么子view就永远无法接受到了事件\n\n但是在实际开发中可能会有这种需求，在按下（ACTION_DOWN）的时候，需要子view进行时间反馈，但在滑动（ACTION_MOVE）或者抬起（ACTION_UP）的时候需要父布局进行拦截操作，这个时候可以使用**requestDisallInterceptRouchEvent(boolean disallowIntercept)**，该方法在**子view中调用**，**getParent().requestDisallInterceptRouchEvent(true)**请求父布局禁用拦截事件功能\n\n[相关资料](http://blog.csdn.net/qq_34795285/article/details/61200211)\n\n具体例子，在我做的项目中，在viewpager中的每一页fragment中都折线图，viewpager是可以左右切换的，每一页的fragment中的折线图也是可以手势缩放的，所以这就和viewpager滑动有冲突，利用requestDisallInterceptRouchEvent，我们可以自定义折线图控件继承项目中使用的（项目中使用的mpandroid），重写onTouchEvent，当水平滑动的时候，getParent().requestDisallInterceptRouchEvent(true)，请求父布局不拦截事件，交给子view处理。\n\n相关源码如下：\n\n```java\npackage com.nongfaziran.workiot.view;\n\nimport android.annotation.SuppressLint;\nimport android.content.Context;\nimport android.graphics.PointF;\nimport android.util.AttributeSet;\nimport android.view.MotionEvent;\n\nimport com.github.mikephil.charting.charts.LineChart;\n\n/**\n * Created by fengan on 2018/2/3.\n * email:fengan1102@gmail.com\n * 解决折线图在viewpager滑动冲突\n */\n\npublic class LineChartInViewPager extends LineChart {\n\n    PointF downPoint = new PointF();\n\n    public LineChartInViewPager(Context context) {\n        super(context);\n    }\n\n    public LineChartInViewPager(Context context, AttributeSet attrs) {\n        super(context, attrs);\n    }\n\n    public LineChartInViewPager(Context context, AttributeSet attrs, int defStyle) {\n        super(context, attrs, defStyle);\n    }\n\n    @SuppressLint(\"ClickableViewAccessibility\")\n    @Override\n    public boolean onTouchEvent(MotionEvent evt) {\n        switch (evt.getAction()) {\n            case MotionEvent.ACTION_DOWN:\n                downPoint.x = evt.getX();\n                downPoint.y = evt.getY();\n                break;\n            case MotionEvent.ACTION_MOVE:\n                if (getScaleX() > 1 && Math.abs(evt.getX() - downPoint.x) > 5) {\n                    getParent().requestDisallowInterceptTouchEvent(true);\n                }\n                break;\n        }\n        return super.onTouchEvent(evt);\n    }\n}\n```\n\n未完待续","source":"_posts/事件分发小结.md","raw":"---\ntitle: 事件分发小结\ndate: 2017-1-20 11:38:23\ntags: \n- Android\ncategories: Android\n---\n\nAndroid开发中，事件分发是非常重要的，了解熟悉整个事件分发过程有助于更好的分析各种点击滑动失效问题,也是一个安卓开发必会的一部分，但是时间长了，对整个流程多少会有些模糊，所以在此记录一下\n\n<!--more-->\n\n网上看到一张图，可以很详细的描述整个事件分发的过程\n\n![事件分发流程图](https://ws2.sinaimg.cn/large/006tKfTcgy1fo6s6mz1gzj30ot0gy42p.jpg)\n\n[原文的链接](https://www.jianshu.com/p/e99b5e8bd67b)\n\n- 问题一：\n\n当ViewGroup重写的onInterceptTouchEvent，并且始终返回了true，那么子view就永远无法接受到了事件\n\n但是在实际开发中可能会有这种需求，在按下（ACTION_DOWN）的时候，需要子view进行时间反馈，但在滑动（ACTION_MOVE）或者抬起（ACTION_UP）的时候需要父布局进行拦截操作，这个时候可以使用**requestDisallInterceptRouchEvent(boolean disallowIntercept)**，该方法在**子view中调用**，**getParent().requestDisallInterceptRouchEvent(true)**请求父布局禁用拦截事件功能\n\n[相关资料](http://blog.csdn.net/qq_34795285/article/details/61200211)\n\n具体例子，在我做的项目中，在viewpager中的每一页fragment中都折线图，viewpager是可以左右切换的，每一页的fragment中的折线图也是可以手势缩放的，所以这就和viewpager滑动有冲突，利用requestDisallInterceptRouchEvent，我们可以自定义折线图控件继承项目中使用的（项目中使用的mpandroid），重写onTouchEvent，当水平滑动的时候，getParent().requestDisallInterceptRouchEvent(true)，请求父布局不拦截事件，交给子view处理。\n\n相关源码如下：\n\n```java\npackage com.nongfaziran.workiot.view;\n\nimport android.annotation.SuppressLint;\nimport android.content.Context;\nimport android.graphics.PointF;\nimport android.util.AttributeSet;\nimport android.view.MotionEvent;\n\nimport com.github.mikephil.charting.charts.LineChart;\n\n/**\n * Created by fengan on 2018/2/3.\n * email:fengan1102@gmail.com\n * 解决折线图在viewpager滑动冲突\n */\n\npublic class LineChartInViewPager extends LineChart {\n\n    PointF downPoint = new PointF();\n\n    public LineChartInViewPager(Context context) {\n        super(context);\n    }\n\n    public LineChartInViewPager(Context context, AttributeSet attrs) {\n        super(context, attrs);\n    }\n\n    public LineChartInViewPager(Context context, AttributeSet attrs, int defStyle) {\n        super(context, attrs, defStyle);\n    }\n\n    @SuppressLint(\"ClickableViewAccessibility\")\n    @Override\n    public boolean onTouchEvent(MotionEvent evt) {\n        switch (evt.getAction()) {\n            case MotionEvent.ACTION_DOWN:\n                downPoint.x = evt.getX();\n                downPoint.y = evt.getY();\n                break;\n            case MotionEvent.ACTION_MOVE:\n                if (getScaleX() > 1 && Math.abs(evt.getX() - downPoint.x) > 5) {\n                    getParent().requestDisallowInterceptTouchEvent(true);\n                }\n                break;\n        }\n        return super.onTouchEvent(evt);\n    }\n}\n```\n\n未完待续","slug":"事件分发小结","published":1,"updated":"2018-07-19T01:54:29.988Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6n6002i1kygd8qup6nt","content":"<p>Android开发中，事件分发是非常重要的，了解熟悉整个事件分发过程有助于更好的分析各种点击滑动失效问题,也是一个安卓开发必会的一部分，但是时间长了，对整个流程多少会有些模糊，所以在此记录一下</p>\n<a id=\"more\"></a>\n<p>网上看到一张图，可以很详细的描述整个事件分发的过程</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tKfTcgy1fo6s6mz1gzj30ot0gy42p.jpg\" alt=\"事件分发流程图\"></p>\n<p><a href=\"https://www.jianshu.com/p/e99b5e8bd67b\" target=\"_blank\" rel=\"external\">原文的链接</a></p>\n<ul>\n<li>问题一：</li>\n</ul>\n<p>当ViewGroup重写的onInterceptTouchEvent，并且始终返回了true，那么子view就永远无法接受到了事件</p>\n<p>但是在实际开发中可能会有这种需求，在按下（ACTION_DOWN）的时候，需要子view进行时间反馈，但在滑动（ACTION_MOVE）或者抬起（ACTION_UP）的时候需要父布局进行拦截操作，这个时候可以使用<strong>requestDisallInterceptRouchEvent(boolean disallowIntercept)</strong>，该方法在<strong>子view中调用</strong>，<strong>getParent().requestDisallInterceptRouchEvent(true)</strong>请求父布局禁用拦截事件功能</p>\n<p><a href=\"http://blog.csdn.net/qq_34795285/article/details/61200211\" target=\"_blank\" rel=\"external\">相关资料</a></p>\n<p>具体例子，在我做的项目中，在viewpager中的每一页fragment中都折线图，viewpager是可以左右切换的，每一页的fragment中的折线图也是可以手势缩放的，所以这就和viewpager滑动有冲突，利用requestDisallInterceptRouchEvent，我们可以自定义折线图控件继承项目中使用的（项目中使用的mpandroid），重写onTouchEvent，当水平滑动的时候，getParent().requestDisallInterceptRouchEvent(true)，请求父布局不拦截事件，交给子view处理。</p>\n<p>相关源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.nongfaziran.workiot.view;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.annotation.SuppressLint;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.PointF;</div><div class=\"line\"><span class=\"keyword\">import</span> android.util.AttributeSet;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.MotionEvent;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.github.mikephil.charting.charts.LineChart;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Created by fengan on 2018/2/3.</div><div class=\"line\"> * email:fengan1102@gmail.com</div><div class=\"line\"> * 解决折线图在viewpager滑动冲突</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LineChartInViewPager</span> <span class=\"keyword\">extends</span> <span class=\"title\">LineChart</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    PointF downPoint = <span class=\"keyword\">new</span> PointF();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LineChartInViewPager</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LineChartInViewPager</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LineChartInViewPager</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyle)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyle);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@SuppressLint</span>(<span class=\"string\">\"ClickableViewAccessibility\"</span>)</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent evt)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (evt.getAction()) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:</div><div class=\"line\">                downPoint.x = evt.getX();</div><div class=\"line\">                downPoint.y = evt.getY();</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE:</div><div class=\"line\">                <span class=\"keyword\">if</span> (getScaleX() &gt; <span class=\"number\">1</span> &amp;&amp; Math.abs(evt.getX() - downPoint.x) &gt; <span class=\"number\">5</span>) &#123;</div><div class=\"line\">                    getParent().requestDisallowInterceptTouchEvent(<span class=\"keyword\">true</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onTouchEvent(evt);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>未完待续</p>\n","excerpt":"<p>Android开发中，事件分发是非常重要的，了解熟悉整个事件分发过程有助于更好的分析各种点击滑动失效问题,也是一个安卓开发必会的一部分，但是时间长了，对整个流程多少会有些模糊，所以在此记录一下</p>","more":"<p>网上看到一张图，可以很详细的描述整个事件分发的过程</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tKfTcgy1fo6s6mz1gzj30ot0gy42p.jpg\" alt=\"事件分发流程图\"></p>\n<p><a href=\"https://www.jianshu.com/p/e99b5e8bd67b\">原文的链接</a></p>\n<ul>\n<li>问题一：</li>\n</ul>\n<p>当ViewGroup重写的onInterceptTouchEvent，并且始终返回了true，那么子view就永远无法接受到了事件</p>\n<p>但是在实际开发中可能会有这种需求，在按下（ACTION_DOWN）的时候，需要子view进行时间反馈，但在滑动（ACTION_MOVE）或者抬起（ACTION_UP）的时候需要父布局进行拦截操作，这个时候可以使用<strong>requestDisallInterceptRouchEvent(boolean disallowIntercept)</strong>，该方法在<strong>子view中调用</strong>，<strong>getParent().requestDisallInterceptRouchEvent(true)</strong>请求父布局禁用拦截事件功能</p>\n<p><a href=\"http://blog.csdn.net/qq_34795285/article/details/61200211\">相关资料</a></p>\n<p>具体例子，在我做的项目中，在viewpager中的每一页fragment中都折线图，viewpager是可以左右切换的，每一页的fragment中的折线图也是可以手势缩放的，所以这就和viewpager滑动有冲突，利用requestDisallInterceptRouchEvent，我们可以自定义折线图控件继承项目中使用的（项目中使用的mpandroid），重写onTouchEvent，当水平滑动的时候，getParent().requestDisallInterceptRouchEvent(true)，请求父布局不拦截事件，交给子view处理。</p>\n<p>相关源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.nongfaziran.workiot.view;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.annotation.SuppressLint;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.PointF;</div><div class=\"line\"><span class=\"keyword\">import</span> android.util.AttributeSet;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.MotionEvent;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.github.mikephil.charting.charts.LineChart;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Created by fengan on 2018/2/3.</div><div class=\"line\"> * email:fengan1102@gmail.com</div><div class=\"line\"> * 解决折线图在viewpager滑动冲突</div><div class=\"line\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LineChartInViewPager</span> <span class=\"keyword\">extends</span> <span class=\"title\">LineChart</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    PointF downPoint = <span class=\"keyword\">new</span> PointF();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LineChartInViewPager</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LineChartInViewPager</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LineChartInViewPager</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyle)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyle);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@SuppressLint</span>(<span class=\"string\">\"ClickableViewAccessibility\"</span>)</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent evt)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (evt.getAction()) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:</div><div class=\"line\">                downPoint.x = evt.getX();</div><div class=\"line\">                downPoint.y = evt.getY();</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE:</div><div class=\"line\">                <span class=\"keyword\">if</span> (getScaleX() &gt; <span class=\"number\">1</span> &amp;&amp; Math.abs(evt.getX() - downPoint.x) &gt; <span class=\"number\">5</span>) &#123;</div><div class=\"line\">                    getParent().requestDisallowInterceptTouchEvent(<span class=\"keyword\">true</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onTouchEvent(evt);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>未完待续</p>"},{"title":"产生65535的原因和解决办法","date":"2016-03-06T02:08:20.000Z","password":null,"_content":"\nAndroid关于65535的问题\n\n<!--more-->\n\n熟悉Android开发的都知道，在生成Dex过程中，方法数超过65535就会报错，本文只简述一下如何解决，更重要的是为什么会这样。简单来说，在[Dalvik指令集](https://source.android.com/devices/tech/dalvik/dalvik-bytecode)中，调用方法的`invoke-kind`指令中，method reference index只给了16bits，最多能调用65535个方法，所以在生成dex文件的过程中，当方法数超过65535就会报错。其实除了method，filed和class的index也是16bits，所以也会存在65535的问题，只不过method的数量一般是最多的，所以最常见的也是方法数溢出的问题。\n\n#### 导入multidex包，配置gradle文件\n\n`multiDexEnabled true`\n\n`implementation 'com.android.support:multidex:1.0.2'`\n\n#### Application中初始化\n\n- 继承MultiDexApplication\n- 重写Application 的attachBaseContext方法，这个方法是在onCreate之前执行的\n\n```java\npublic class MyApplication extends Application{  \n  \n@Override  \n    protected void attachBaseContext(Context base) {  \n        super.attachBaseContext(base);  \n        MultiDex.install(this);  \n    }  \n}  \n```\n\n\n\n这样会生成classes.dex  classes2.dex  classes3.dex  ...多个dex文件\n\n#### 为啥会有65536的限制\n\n一个 dex 文件的方法引用数不能大于 64k，64k 的准确值是（64 * 1024 = 65536）。\n\ninvoke-kind （调用各类方法）指令中，方法引用索引数是 16 位的，也就是最多调用 2^16 = 65536 个方法，这就是 **DexFormat** 中 **MAX_MEMBER_IDX **为 0xFFFF 的原因。\n\n[详细原因查看](https://mp.weixin.qq.com/s?__biz=MjM5OTE4ODgzMw==&mid=2247483766&idx=1&sn=3ab423d9a16824f4c4252c3fb3fdb8d2&chksm=a73e01789049886e8ecec45a5b3a4f6132faf3f953e79a6d5717360dc91314d74a3589766efe&scene=38#wechat_redirect)","source":"_posts/产生65535的原因和解决办法.md","raw":"---\ntitle: 产生65535的原因和解决办法\ndate: 2016-03-06 10:08:20\ntags: \n- Android\ncategories: Android\npassword:\n---\n\nAndroid关于65535的问题\n\n<!--more-->\n\n熟悉Android开发的都知道，在生成Dex过程中，方法数超过65535就会报错，本文只简述一下如何解决，更重要的是为什么会这样。简单来说，在[Dalvik指令集](https://source.android.com/devices/tech/dalvik/dalvik-bytecode)中，调用方法的`invoke-kind`指令中，method reference index只给了16bits，最多能调用65535个方法，所以在生成dex文件的过程中，当方法数超过65535就会报错。其实除了method，filed和class的index也是16bits，所以也会存在65535的问题，只不过method的数量一般是最多的，所以最常见的也是方法数溢出的问题。\n\n#### 导入multidex包，配置gradle文件\n\n`multiDexEnabled true`\n\n`implementation 'com.android.support:multidex:1.0.2'`\n\n#### Application中初始化\n\n- 继承MultiDexApplication\n- 重写Application 的attachBaseContext方法，这个方法是在onCreate之前执行的\n\n```java\npublic class MyApplication extends Application{  \n  \n@Override  \n    protected void attachBaseContext(Context base) {  \n        super.attachBaseContext(base);  \n        MultiDex.install(this);  \n    }  \n}  \n```\n\n\n\n这样会生成classes.dex  classes2.dex  classes3.dex  ...多个dex文件\n\n#### 为啥会有65536的限制\n\n一个 dex 文件的方法引用数不能大于 64k，64k 的准确值是（64 * 1024 = 65536）。\n\ninvoke-kind （调用各类方法）指令中，方法引用索引数是 16 位的，也就是最多调用 2^16 = 65536 个方法，这就是 **DexFormat** 中 **MAX_MEMBER_IDX **为 0xFFFF 的原因。\n\n[详细原因查看](https://mp.weixin.qq.com/s?__biz=MjM5OTE4ODgzMw==&mid=2247483766&idx=1&sn=3ab423d9a16824f4c4252c3fb3fdb8d2&chksm=a73e01789049886e8ecec45a5b3a4f6132faf3f953e79a6d5717360dc91314d74a3589766efe&scene=38#wechat_redirect)","slug":"产生65535的原因和解决办法","published":1,"updated":"2018-07-19T01:49:03.179Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6n7002l1kygtztt2b6n","content":"<p>Android关于65535的问题</p>\n<a id=\"more\"></a>\n<p>熟悉Android开发的都知道，在生成Dex过程中，方法数超过65535就会报错，本文只简述一下如何解决，更重要的是为什么会这样。简单来说，在<a href=\"https://source.android.com/devices/tech/dalvik/dalvik-bytecode\" target=\"_blank\" rel=\"external\">Dalvik指令集</a>中，调用方法的<code>invoke-kind</code>指令中，method reference index只给了16bits，最多能调用65535个方法，所以在生成dex文件的过程中，当方法数超过65535就会报错。其实除了method，filed和class的index也是16bits，所以也会存在65535的问题，只不过method的数量一般是最多的，所以最常见的也是方法数溢出的问题。</p>\n<h4 id=\"导入multidex包，配置gradle文件\"><a href=\"#导入multidex包，配置gradle文件\" class=\"headerlink\" title=\"导入multidex包，配置gradle文件\"></a>导入multidex包，配置gradle文件</h4><p><code>multiDexEnabled true</code></p>\n<p><code>implementation &#39;com.android.support:multidex:1.0.2&#39;</code></p>\n<h4 id=\"Application中初始化\"><a href=\"#Application中初始化\" class=\"headerlink\" title=\"Application中初始化\"></a>Application中初始化</h4><ul>\n<li>继承MultiDexApplication</li>\n<li>重写Application 的attachBaseContext方法，这个方法是在onCreate之前执行的</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span></span>&#123;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">attachBaseContext</span><span class=\"params\">(Context base)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">super</span>.attachBaseContext(base);  </div><div class=\"line\">        MultiDex.install(<span class=\"keyword\">this</span>);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样会生成classes.dex  classes2.dex  classes3.dex  …多个dex文件</p>\n<h4 id=\"为啥会有65536的限制\"><a href=\"#为啥会有65536的限制\" class=\"headerlink\" title=\"为啥会有65536的限制\"></a>为啥会有65536的限制</h4><p>一个 dex 文件的方法引用数不能大于 64k，64k 的准确值是（64 * 1024 = 65536）。</p>\n<p>invoke-kind （调用各类方法）指令中，方法引用索引数是 16 位的，也就是最多调用 2^16 = 65536 个方法，这就是 <strong>DexFormat</strong> 中 <strong>MAX_MEMBER_IDX </strong>为 0xFFFF 的原因。</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MjM5OTE4ODgzMw==&amp;mid=2247483766&amp;idx=1&amp;sn=3ab423d9a16824f4c4252c3fb3fdb8d2&amp;chksm=a73e01789049886e8ecec45a5b3a4f6132faf3f953e79a6d5717360dc91314d74a3589766efe&amp;scene=38#wechat_redirect\" target=\"_blank\" rel=\"external\">详细原因查看</a></p>\n","excerpt":"<p>Android关于65535的问题</p>","more":"<p>熟悉Android开发的都知道，在生成Dex过程中，方法数超过65535就会报错，本文只简述一下如何解决，更重要的是为什么会这样。简单来说，在<a href=\"https://source.android.com/devices/tech/dalvik/dalvik-bytecode\">Dalvik指令集</a>中，调用方法的<code>invoke-kind</code>指令中，method reference index只给了16bits，最多能调用65535个方法，所以在生成dex文件的过程中，当方法数超过65535就会报错。其实除了method，filed和class的index也是16bits，所以也会存在65535的问题，只不过method的数量一般是最多的，所以最常见的也是方法数溢出的问题。</p>\n<h4 id=\"导入multidex包，配置gradle文件\"><a href=\"#导入multidex包，配置gradle文件\" class=\"headerlink\" title=\"导入multidex包，配置gradle文件\"></a>导入multidex包，配置gradle文件</h4><p><code>multiDexEnabled true</code></p>\n<p><code>implementation &#39;com.android.support:multidex:1.0.2&#39;</code></p>\n<h4 id=\"Application中初始化\"><a href=\"#Application中初始化\" class=\"headerlink\" title=\"Application中初始化\"></a>Application中初始化</h4><ul>\n<li>继承MultiDexApplication</li>\n<li>重写Application 的attachBaseContext方法，这个方法是在onCreate之前执行的</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span></span>&#123;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">attachBaseContext</span><span class=\"params\">(Context base)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">super</span>.attachBaseContext(base);  </div><div class=\"line\">        MultiDex.install(<span class=\"keyword\">this</span>);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样会生成classes.dex  classes2.dex  classes3.dex  …多个dex文件</p>\n<h4 id=\"为啥会有65536的限制\"><a href=\"#为啥会有65536的限制\" class=\"headerlink\" title=\"为啥会有65536的限制\"></a>为啥会有65536的限制</h4><p>一个 dex 文件的方法引用数不能大于 64k，64k 的准确值是（64 * 1024 = 65536）。</p>\n<p>invoke-kind （调用各类方法）指令中，方法引用索引数是 16 位的，也就是最多调用 2^16 = 65536 个方法，这就是 <strong>DexFormat</strong> 中 <strong>MAX_MEMBER_IDX </strong>为 0xFFFF 的原因。</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MjM5OTE4ODgzMw==&amp;mid=2247483766&amp;idx=1&amp;sn=3ab423d9a16824f4c4252c3fb3fdb8d2&amp;chksm=a73e01789049886e8ecec45a5b3a4f6132faf3f953e79a6d5717360dc91314d74a3589766efe&amp;scene=38#wechat_redirect\">详细原因查看</a></p>"},{"title":"保存图片到本地","date":"2016-08-21T02:14:21.000Z","_content":"\n一个很常见的需求,图片保存到本地,矫正图片角度，通知图库更新\n<!--more-->\n> 步骤\n\n1. 使用Gilde获取图片的Drawable\n2. Drawable转成Bitmap\n3. bigtmap压缩并通过流写入\n4. 通知系统图库更新\n\n> 代码块\n\n- 保存图片,流写入,压缩\n- \n        public static void saveImageToGallery(Context context, Bitmap bmp) {\n        File appDir = new File(Environment.getExternalStorageDirectory(), \"fengandev\");\n        if (!appDir.exists()) {\n            appDir.mkdir();\n        }\n        String fileName = System.currentTimeMillis() + \".jpg\";\n        File file = new File(appDir, fileName);\n        try {\n            FileOutputStream fos = new FileOutputStream(file);\n            bmp.compress(Bitmap.CompressFormat.JPEG, 100, fos);\n            fos.flush();\n            fos.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        \n        // 其次把文件插入到系统图库\n        try {\n            MediaStore.Images.Media.insertImage(context.getContentResolver(),\n                    file.getAbsolutePath(), fileName, null);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n        // 最后通知图库更新\n        context.sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, Uri.fromFile(new File(file.getPath()))));\n        ToastUtil.showShort(\"保存到\" + file.getPath());\n    }`\n> 通过glide回调,获取图片Drawable\n\n\n\t\t  mTvSave.setOnClickListener(new View.OnClickListener() {\n\t        @Override\n\t        public void onClick(View v) {\n\t            showLoadding();\n\t            GlideUtils.loadImage(Utils.getContext(), imaUrl), mIvImg,new GlideUtils.ImageLoadListener<String, GlideDrawable>() {\n\t                @Override\n\t                public void onLoadingComplete(String uri, ImageView view, GlideDrawable resource) {\n\t                    FileUtils.saveImageToGallery(Utils.getContext(), BitmapUtils.drawableToBitmap(resource));\n\t                }\n\t\n\t                @Override\n\t                public void onLoadingError(String source, Exception e) {\n\t                    showState(\"保存失败\",0);\n\t                }\n\t            });\n\t        }\n\t    });\n\n> 分享一个Glide封装\n\n  * Glide封装类\n\n\n    public abstract class GlideUtils {\n    /**\n     * 简单图片加载回调\n     *\n     * @param <T> 图片url 或资源id 或 文件\n     * @param <K> 返回的资源,GlideDrawable或者Bitmap或者GifDrawable,ImageView.setImageRecourse设置\n     */\n    public interface ImageLoadListener<T, K> {\n    \n        /**\n         * 图片加载成功回调\n         *\n         * @param uri      图片url 或资源id 或 文件\n         * @param view     目标载体，不传则为空\n         * @param resource 返回的资源,GlideDrawable或者Bitmap或者GifDrawable,ImageView.setImageRecourse设置\n         */\n        void onLoadingComplete(T uri, ImageView view, K resource);\n    \n        /**\n         * 图片加载异常返回\n         *\n         * @param source 图片地址、File、资源id\n         * @param e      异常信息\n         */\n        void onLoadingError(T source, Exception e);\n    \n    }\n\n\n    /**\n     * 详细加载图片加载回调\n     *\n     * @param <T> 图片url 或资源id 或 文件\n     * @param <K> 返回的资源\n     */\n    public interface ImageLoadDetailListener<T, K> {\n    \n        /**\n         * 图片加载成功回调\n         *\n         * @param uri      图片url 或资源id 或 文件\n         * @param view     目标载体，不传则为空\n         * @param resource 返回的资源,GlideDrawable或者Bitmap或者GifDrawable,ImageView.setImageRecourse设置\n         */\n        void onLoadingComplete(T uri, ImageView view, K resource);\n    \n        /**\n         * 图片加载异常返回\n         *\n         * @param source        图片地址、File、资源id\n         * @param errorDrawable 加载错误占位图\n         * @param e             异常信息\n         */\n        void onLoadingError(T source, Drawable errorDrawable, Exception e);\n    \n        /**\n         * 加载开始\n         *\n         * @param source      图片来源\n         * @param placeHolder 开始加载占位图\n         */\n        void onLoadingStart(T source, Drawable placeHolder);\n    \n    }\n\n\n    /**\n     * 根据上下文和 url获取 Glide的DrawableTypeRequest\n     *\n     * @param context 上下文\n     * @param url     图片连接\n     * @param <T>     Context类型\n     * @param <K>     url类型\n     * @return 返回DrawableTypeRequst<K> 类型\n     */\n    private static <T, K> DrawableTypeRequest<K> getDrawableTypeRequest(T context, K url) {\n        DrawableTypeRequest<K> type = null;\n        try {\n            if (context instanceof android.support.v4.app.Fragment) {\n                type = Glide.with((android.support.v4.app.Fragment) context).load(url);\n            } else if (context instanceof android.app.Fragment) {\n                type = Glide.with((android.app.Fragment) context).load(url);\n            } else if (context instanceof Activity) {    //包括FragmentActivity\n                type = Glide.with((Activity) context).load(url);\n            } else if (context instanceof Context) {\n                type = Glide.with((Context) context).load(url);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    \n        return type;\n    }\n\n\n    /**\n     * 图片加载监听类\n     *\n     * @param <T> 图片链接 的类型\n     * @param <K> 图片资源返回类型\n     * @param <Z> 返回的图片url\n     */\n    private static class GlideListener<T, K, Z> implements RequestListener<T, K> {\n    \n        ImageLoadListener<Z, K> imageLoadListener = null;\n        Z url;\n        ImageView imageView = null;\n    \n        GlideListener(ImageLoadListener<Z, K> imageLoadListener, Z url, ImageView view) {\n            this.imageLoadListener = imageLoadListener;\n            this.url = url;\n            this.imageView = view;\n        }\n    \n        GlideListener(ImageLoadListener<Z, K> imageLoadListener, Z url) {\n            this.imageLoadListener = imageLoadListener;\n            this.url = url;\n        }\n    \n        GlideListener(Z url) {\n            this.url = url;\n        }\n    \n        @Override\n        public boolean onResourceReady(K resource, T model, Target<K> target, boolean isFromMemoryCache, boolean isFirstResource) {\n            if (null != imageLoadListener) {\n                if (imageView != null) {\n                    imageLoadListener.onLoadingComplete(url, imageView, resource);\n                } else {\n                    imageLoadListener.onLoadingComplete(url, null, resource);\n                }\n            }\n    \n            return false;\n        }\n    \n        @Override\n        public boolean onException(Exception e, T model, Target<K> target, boolean isFirstResource) {\n    \n            //LogUtil.e(\"Glide图片加载失败:\"+e + \" 地址为:\"+url);\n    \n            if (imageLoadListener != null) {\n                imageLoadListener.onLoadingError(url, e);\n            }\n            return false;\n        }\n    }\n\n\n    /**\n     * 获取存储器上的图片,回调返回GlideDrawable\n     *\n     * @param context           上下文年\n     * @param file              文件File\n     * @param imageLoadListener 回调监听器\n     */\n    public static <T> DrawableRequestBuilder<File> loadImage(T context, @NonNull File file, @NonNull ImageLoadListener<File, GlideDrawable> imageLoadListener) {\n        DrawableTypeRequest<File> type = getDrawableTypeRequest(context, file);\n        if (type != null) {\n            return type.listener(new GlideListener<File, GlideDrawable, File>(imageLoadListener, file));\n        } else {\n            return null;\n        }\n    }\n    \n    /**\n     * 获取资源中的图片，回调返回GlideDrawable\n     *\n     * @param context           上下文\n     * @param resourceId        资源id\n     * @param imageLoadListener 回调监听器\n     */\n    public static <T> DrawableRequestBuilder<Integer> loadImage(T context, @DrawableRes int resourceId, @NonNull ImageLoadListener<Integer, GlideDrawable> imageLoadListener) {\n        DrawableTypeRequest<Integer> type = getDrawableTypeRequest(context, resourceId);\n        if (type != null) {\n            return type.listener(new GlideListener<Integer, GlideDrawable, Integer>(imageLoadListener, resourceId));\n        } else {\n            return null;\n        }\n    \n    }\n    \n    /**\n     * 获取网络图片，回调返回 GlideDrawable\n     *\n     * @param context           上下文\n     * @param url               图片url\n     * @param imageLoadListener 回调监听器\n     */\n    public static <T> DrawableRequestBuilder<String> loadImage(T context, @NonNull final String url, @NonNull ImageLoadListener<String, GlideDrawable> imageLoadListener) {\n        DrawableTypeRequest<String> type = getDrawableTypeRequest(context, url);\n        if (type != null) {\n            return type.listener(new GlideListener<String, GlideDrawable, String>(imageLoadListener, url));\n        } else {\n            return null;\n        }\n    \n    }\n    \n    /**\n     * 加载存储器上的图片到目标载体\n     *\n     * @param file      文件File\n     * @param imageView 要显示到的图片ImageView\n     */\n    public static Target<GlideDrawable> loadImage(@NonNull final File file, @NonNull ImageView imageView, ImageLoadListener<File, GlideDrawable> imageLoadListener) {\n        return getDrawableTypeRequest(imageView.getContext(), file)\n                .diskCacheStrategy(DiskCacheStrategy.NONE)//禁用磁盘缓存\n                .skipMemoryCache(true)//跳过内存缓存\n                .dontAnimate()\n                .listener(new GlideListener<File, GlideDrawable, File>(imageLoadListener, file, imageView))\n                .into(imageView);\n    }\n    \n    /**\n     * 加载资源中的图片到目标载体\n     *\n     * @param resourceId 资源id\n     * @param imageView  图片View\n     */\n    public static Target<GlideDrawable> loadImage(@DrawableRes int resourceId, @NonNull ImageView imageView, ImageLoadListener<Integer, GlideDrawable> imageLoadListener) {\n        return getDrawableTypeRequest(imageView.getContext(), resourceId)\n                .listener(new GlideListener<Integer, GlideDrawable, Integer>(imageLoadListener, resourceId, imageView))\n                .into(imageView);\n    }\n\n\n    /**\n     * 加载成圆形头像到普通ImageView，有动画效果\n     *\n     * @param url               图片url\n     * @param imageView         要显示到的ImageView\n     * @param imageLoadListener 加载回调监听器\n     * @param parms             设置占位符和加载失败图片(可变参数默认两张,第一张为占位符,第二张是默认图片)\n     * @return 返回Target<GlideDrawable>\n     */\n    public static Target<GlideDrawable> loadCircleImage(@NonNull String url, @NonNull ImageView imageView, ImageLoadListener<String, GlideDrawable> imageLoadListener, int... parms) {\n        DrawableTypeRequest<String> type = getDrawableTypeRequest(imageView.getContext(), url);\n        if (parms != null && parms.length > 0) {\n            type.placeholder(parms[0]);   //占位符\n            if (parms.length > 1) {\n                type.error(parms[1]);    //图片加载失败显示图片\n            }\n        }\n        type.transform(new CircleTransform(imageView.getContext()));\n        return type.listener(new GlideListener<String, GlideDrawable, String>(imageLoadListener, url, imageView))\n                .into(imageView);\n    \n    }\n\n\n    /**\n     * 加载网络图片到指定Imageview，支持CircleImageView\n     *\n     * @param url               图片url\n     * @param imageView         要显示的Imageview\n     * @param imageLoadListener 图片加载回调\n     * @param parms             第一个是error的图片\n     */\n    public static <T> Target<GlideDrawable> loadImage(T context, @NonNull String url, @NonNull ImageView imageView, ImageLoadListener<String, GlideDrawable> imageLoadListener, int... parms) {\n        DrawableTypeRequest<String> type = getDrawableTypeRequest(context, url);\n        if (type != null) {\n            type.asBitmap();\n            if (parms != null && parms.length > 0) {\n                type.placeholder(parms[0]);   //占位符\n                if (parms.length > 1) {\n                    type.error(parms[1]);    //图片加载失败显示图片\n                }\n            }\n    \n            //单张CircleImageView不允许动画，不然会不显示,\n            if (imageView instanceof nfzr.zr.nf.nfzr.com.nongfaziran.nfzr.view.CircleImageView) {\n                type.dontAnimate();\n            }\n            return type\n                    .listener(new GlideListener<String, GlideDrawable, String>(imageLoadListener, url, imageView))\n                    .into(imageView);\n        } else {\n            return null;\n        }\n    \n    }\n    \n    /**\n     * 加载一帧视频，添加圆角\n     *\n     * @param url       图片地址\n     * @param imageView 要加载到的ImageView\n     */\n    public static Target<GlideDrawable> loadImageFormVideo(@NonNull String url, @NonNull ImageView imageView) {\n        return getDrawableTypeRequest(imageView.getContext(), url)\n                .override(SizeUtil.dp2px(150), SizeUtil.dp2px(150))\n                //.placeholder(android.R.drawable.picture_frame)   //占位图\n                .dontAnimate()\n                .into(imageView);\n    }\n\n\n    public static <T> Target<GlideDrawable> loadImageDetail(final T context, @NonNull final String url, @NonNull final ImageView imageView, final Drawable drawable, final ImageLoadDetailListener<String, GlideDrawable> imageLoadListener) {\n        DrawableTypeRequest<String> type = getDrawableTypeRequest(context, url);\n        if (type != null) {\n            return type.into(new SimpleTarget<GlideDrawable>() {\n                @Override\n                public void onResourceReady(GlideDrawable resource, GlideAnimation<? super GlideDrawable> glideAnimation) {\n                    if (imageView != null && resource != null) {\n                        imageView.setImageDrawable(resource);\n                    }\n                    if (imageLoadListener != null) {\n                        imageLoadListener.onLoadingComplete(url, imageView, resource);\n                    }\n    \n                }\n    \n                @Override\n                public void onStart() {\n                    super.onStart();\n                    if (drawable != null && imageView != null) {\n                        imageView.setImageDrawable(drawable);\n                    }\n    \n                }\n    \n                @Override\n                public void onLoadStarted(Drawable placeholder) {\n                    super.onLoadStarted(placeholder);\n                    if (imageLoadListener != null) {\n                        imageLoadListener.onLoadingStart(url, placeholder);\n                    }\n    \n                }\n    \n                @Override\n                public void onLoadFailed(Exception e, Drawable errorDrawable) {\n                    super.onLoadFailed(e, errorDrawable);\n                    if (imageLoadListener != null) {\n                        imageLoadListener.onLoadingError(url, errorDrawable, e);\n                    }\n                }\n            });\n        } else {\n            return null;\n        }\n    \n    }\n\n\n    /**\n     * 加载bitmap，回调返回 Bitmap\n     *\n     * @param context           上下文\n     * @param url               图片url\n     * @param imageLoadListener 图片加载监听器\n     * @param <T>               上下文类型\n     */\n    public static <T> BitmapRequestBuilder<String, Bitmap> loadImageBitmap(T context, @NonNull String url,@NonNull ImageLoadListener<String, Bitmap> imageLoadListener) {\n        DrawableTypeRequest<String> type = getDrawableTypeRequest(context, url);\n        if (type != null) {\n            return type.asBitmap()\n                    .listener(new GlideListener<String, Bitmap, String>(imageLoadListener, url));\n        }else{\n            return null;\n        }\n    }\n\n\n    /**\n     * 加载GifDrawable，回调返回 GifDrawable\n     *\n     * @param context           上下文\n     * @param url               图片url\n     * @param imageLoadListener 图片加载监听器\n     */\n    public static <T> GifRequestBuilder<String> loadImageGif(T context, @NonNull String url,@NonNull ImageLoadListener<String, GifDrawable> imageLoadListener) {\n        DrawableTypeRequest<String> type = getDrawableTypeRequest(context, url);\n        if (type != null) {\n            return type.asGif()\n                    .diskCacheStrategy(DiskCacheStrategy.SOURCE)\n                    .listener(new GlideListener<String, GifDrawable, String>(imageLoadListener, url));\n    \n        }else{\n            return null;\n        }\n    }\n\n\n    /**\n     * 加载Gif的一张图片到ImageView\n     *\n     * @param url               图片url\n     * @param imageLoadListener 图片加载监听器\n     *                          @param imageView \n     *                          @param drawable 缩略图，可以为空\n     */\n    public static Target<Bitmap> loadImageGifSingle(@NonNull String url, @NonNull ImageView imageView, ImageLoadListener<String, Bitmap> imageLoadListener, Drawable drawable) {\n      \n        DrawableTypeRequest<String> type = getDrawableTypeRequest(imageView.getContext(),url);\n        return type.asBitmap()\n                .placeholder(drawable)\n                .diskCacheStrategy(DiskCacheStrategy.SOURCE)\n                .listener(new GlideListener<String, Bitmap, String>(imageLoadListener, url))\n                .into(imageView);\n    }\n\n\n    /**\n     * 加载gif图片到指定ImageView\n     *\n     * @param url               图片Url\n     * @param imageView         图片View\n     * @param imageLoadListener 图片加载监听器\n     */\n    public static Target<GifDrawable> loadImageGif(@NonNull String url, @NonNull ImageView imageView, ImageLoadListener<String, GifDrawable> imageLoadListener) {\n        DrawableTypeRequest<String> type = getDrawableTypeRequest(imageView.getContext(),url);\n        return type.asGif()\n                .diskCacheStrategy(DiskCacheStrategy.SOURCE)\n                .listener(new GlideListener<String, GifDrawable, String>(imageLoadListener, url, imageView))\n                .into(imageView);\n    }\n\n\n    /**\n     * 释放内存\n     *\n     * @param context 上下文\n     */\n    public static void clearMemory(Context context) {\n        Glide.get(context).clearMemory();\n    }\n\n\n    /**\n     * 取消所有正在下载或等待下载的任务。\n     *\n     * @param context 上下文\n     */\n    public static void cancelAllTasks(Context context) {\n        Glide.with(context).pauseRequests();\n    }\n    \n    /**\n     * 恢复所有任务\n     */\n    public static void resumeAllTasks(Context context) {\n        Glide.with(context).resumeRequests();\n    }\n    \n    /**\n     * 清除磁盘缓存\n     *\n     * @param context 上下文\n     */\n    public static void clearDiskCache(final Context context) {\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                Glide.get(context).clearDiskCache();\n            }\n        }).start();\n    }\n\n\n    /**\n     * 清除所有缓存\n     *\n     * @param context 上下文\n     */\n    public static void cleanAll(Context context) {\n        clearDiskCache(context);\n        clearMemory(context);\n    }\n\n    public class CircleTransform extends BitmapTransformation {\n    public CircleTransform(Context context) {\n        super(context);\n    }\n    \n    @Override protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) {\n        return circleCrop(pool, toTransform);\n    }\n    \n    private static Bitmap circleCrop(BitmapPool pool, Bitmap source) {\n        if (source == null) return null;\n    \n        int size = Math.min(source.getWidth(), source.getHeight());\n        int x = (source.getWidth() - size) / 2;\n        int y = (source.getHeight() - size) / 2;\n    \n        Bitmap squared = Bitmap.createBitmap(source, x, y, size, size);\n    \n        Bitmap result = pool.get(size, size, Bitmap.Config.ARGB_8888);\n        if (result == null) {\n            result = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\n        }\n    \n        Canvas canvas = new Canvas(result);\n        Paint paint = new Paint();\n        paint.setShader(new BitmapShader(squared, BitmapShader.TileMode.CLAMP, BitmapShader.TileMode.CLAMP));\n        paint.setAntiAlias(true);\n        float r = size / 2f;\n        canvas.drawCircle(r, r, r, paint);\n        return result;\n    }\n    \n    @Override public String getId() {\n        return getClass().getName();\n    }\n    }\n\nDrawable转bigmap\n\n    public class BitmapUtils {\n    public static Bitmap drawableToBitmap(Drawable drawable) {\n        Bitmap bitmap = Bitmap.createBitmap(\n                drawable.getIntrinsicWidth(),\n                drawable.getIntrinsicHeight(),\n                drawable.getOpacity() != PixelFormat.OPAQUE ? Bitmap.Config.ARGB_8888\n                        : Bitmap.Config.RGB_565);\n        Canvas canvas = new Canvas(bitmap);\n        //canvas.setBitmap(bitmap);\n        drawable.setBounds(0, 0, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());\n        drawable.draw(canvas);\n        return bitmap;\n    }\n    }\n","source":"_posts/保存图片到本地.md","raw":"---\ntitle: 保存图片到本地\ndate: 2016-08-21 10:14:21\ntags: \n- Android\ncategories: Android\n---\n\n一个很常见的需求,图片保存到本地,矫正图片角度，通知图库更新\n<!--more-->\n> 步骤\n\n1. 使用Gilde获取图片的Drawable\n2. Drawable转成Bitmap\n3. bigtmap压缩并通过流写入\n4. 通知系统图库更新\n\n> 代码块\n\n- 保存图片,流写入,压缩\n- \n        public static void saveImageToGallery(Context context, Bitmap bmp) {\n        File appDir = new File(Environment.getExternalStorageDirectory(), \"fengandev\");\n        if (!appDir.exists()) {\n            appDir.mkdir();\n        }\n        String fileName = System.currentTimeMillis() + \".jpg\";\n        File file = new File(appDir, fileName);\n        try {\n            FileOutputStream fos = new FileOutputStream(file);\n            bmp.compress(Bitmap.CompressFormat.JPEG, 100, fos);\n            fos.flush();\n            fos.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        \n        // 其次把文件插入到系统图库\n        try {\n            MediaStore.Images.Media.insertImage(context.getContentResolver(),\n                    file.getAbsolutePath(), fileName, null);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n        // 最后通知图库更新\n        context.sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, Uri.fromFile(new File(file.getPath()))));\n        ToastUtil.showShort(\"保存到\" + file.getPath());\n    }`\n> 通过glide回调,获取图片Drawable\n\n\n\t\t  mTvSave.setOnClickListener(new View.OnClickListener() {\n\t        @Override\n\t        public void onClick(View v) {\n\t            showLoadding();\n\t            GlideUtils.loadImage(Utils.getContext(), imaUrl), mIvImg,new GlideUtils.ImageLoadListener<String, GlideDrawable>() {\n\t                @Override\n\t                public void onLoadingComplete(String uri, ImageView view, GlideDrawable resource) {\n\t                    FileUtils.saveImageToGallery(Utils.getContext(), BitmapUtils.drawableToBitmap(resource));\n\t                }\n\t\n\t                @Override\n\t                public void onLoadingError(String source, Exception e) {\n\t                    showState(\"保存失败\",0);\n\t                }\n\t            });\n\t        }\n\t    });\n\n> 分享一个Glide封装\n\n  * Glide封装类\n\n\n    public abstract class GlideUtils {\n    /**\n     * 简单图片加载回调\n     *\n     * @param <T> 图片url 或资源id 或 文件\n     * @param <K> 返回的资源,GlideDrawable或者Bitmap或者GifDrawable,ImageView.setImageRecourse设置\n     */\n    public interface ImageLoadListener<T, K> {\n    \n        /**\n         * 图片加载成功回调\n         *\n         * @param uri      图片url 或资源id 或 文件\n         * @param view     目标载体，不传则为空\n         * @param resource 返回的资源,GlideDrawable或者Bitmap或者GifDrawable,ImageView.setImageRecourse设置\n         */\n        void onLoadingComplete(T uri, ImageView view, K resource);\n    \n        /**\n         * 图片加载异常返回\n         *\n         * @param source 图片地址、File、资源id\n         * @param e      异常信息\n         */\n        void onLoadingError(T source, Exception e);\n    \n    }\n\n\n    /**\n     * 详细加载图片加载回调\n     *\n     * @param <T> 图片url 或资源id 或 文件\n     * @param <K> 返回的资源\n     */\n    public interface ImageLoadDetailListener<T, K> {\n    \n        /**\n         * 图片加载成功回调\n         *\n         * @param uri      图片url 或资源id 或 文件\n         * @param view     目标载体，不传则为空\n         * @param resource 返回的资源,GlideDrawable或者Bitmap或者GifDrawable,ImageView.setImageRecourse设置\n         */\n        void onLoadingComplete(T uri, ImageView view, K resource);\n    \n        /**\n         * 图片加载异常返回\n         *\n         * @param source        图片地址、File、资源id\n         * @param errorDrawable 加载错误占位图\n         * @param e             异常信息\n         */\n        void onLoadingError(T source, Drawable errorDrawable, Exception e);\n    \n        /**\n         * 加载开始\n         *\n         * @param source      图片来源\n         * @param placeHolder 开始加载占位图\n         */\n        void onLoadingStart(T source, Drawable placeHolder);\n    \n    }\n\n\n    /**\n     * 根据上下文和 url获取 Glide的DrawableTypeRequest\n     *\n     * @param context 上下文\n     * @param url     图片连接\n     * @param <T>     Context类型\n     * @param <K>     url类型\n     * @return 返回DrawableTypeRequst<K> 类型\n     */\n    private static <T, K> DrawableTypeRequest<K> getDrawableTypeRequest(T context, K url) {\n        DrawableTypeRequest<K> type = null;\n        try {\n            if (context instanceof android.support.v4.app.Fragment) {\n                type = Glide.with((android.support.v4.app.Fragment) context).load(url);\n            } else if (context instanceof android.app.Fragment) {\n                type = Glide.with((android.app.Fragment) context).load(url);\n            } else if (context instanceof Activity) {    //包括FragmentActivity\n                type = Glide.with((Activity) context).load(url);\n            } else if (context instanceof Context) {\n                type = Glide.with((Context) context).load(url);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    \n        return type;\n    }\n\n\n    /**\n     * 图片加载监听类\n     *\n     * @param <T> 图片链接 的类型\n     * @param <K> 图片资源返回类型\n     * @param <Z> 返回的图片url\n     */\n    private static class GlideListener<T, K, Z> implements RequestListener<T, K> {\n    \n        ImageLoadListener<Z, K> imageLoadListener = null;\n        Z url;\n        ImageView imageView = null;\n    \n        GlideListener(ImageLoadListener<Z, K> imageLoadListener, Z url, ImageView view) {\n            this.imageLoadListener = imageLoadListener;\n            this.url = url;\n            this.imageView = view;\n        }\n    \n        GlideListener(ImageLoadListener<Z, K> imageLoadListener, Z url) {\n            this.imageLoadListener = imageLoadListener;\n            this.url = url;\n        }\n    \n        GlideListener(Z url) {\n            this.url = url;\n        }\n    \n        @Override\n        public boolean onResourceReady(K resource, T model, Target<K> target, boolean isFromMemoryCache, boolean isFirstResource) {\n            if (null != imageLoadListener) {\n                if (imageView != null) {\n                    imageLoadListener.onLoadingComplete(url, imageView, resource);\n                } else {\n                    imageLoadListener.onLoadingComplete(url, null, resource);\n                }\n            }\n    \n            return false;\n        }\n    \n        @Override\n        public boolean onException(Exception e, T model, Target<K> target, boolean isFirstResource) {\n    \n            //LogUtil.e(\"Glide图片加载失败:\"+e + \" 地址为:\"+url);\n    \n            if (imageLoadListener != null) {\n                imageLoadListener.onLoadingError(url, e);\n            }\n            return false;\n        }\n    }\n\n\n    /**\n     * 获取存储器上的图片,回调返回GlideDrawable\n     *\n     * @param context           上下文年\n     * @param file              文件File\n     * @param imageLoadListener 回调监听器\n     */\n    public static <T> DrawableRequestBuilder<File> loadImage(T context, @NonNull File file, @NonNull ImageLoadListener<File, GlideDrawable> imageLoadListener) {\n        DrawableTypeRequest<File> type = getDrawableTypeRequest(context, file);\n        if (type != null) {\n            return type.listener(new GlideListener<File, GlideDrawable, File>(imageLoadListener, file));\n        } else {\n            return null;\n        }\n    }\n    \n    /**\n     * 获取资源中的图片，回调返回GlideDrawable\n     *\n     * @param context           上下文\n     * @param resourceId        资源id\n     * @param imageLoadListener 回调监听器\n     */\n    public static <T> DrawableRequestBuilder<Integer> loadImage(T context, @DrawableRes int resourceId, @NonNull ImageLoadListener<Integer, GlideDrawable> imageLoadListener) {\n        DrawableTypeRequest<Integer> type = getDrawableTypeRequest(context, resourceId);\n        if (type != null) {\n            return type.listener(new GlideListener<Integer, GlideDrawable, Integer>(imageLoadListener, resourceId));\n        } else {\n            return null;\n        }\n    \n    }\n    \n    /**\n     * 获取网络图片，回调返回 GlideDrawable\n     *\n     * @param context           上下文\n     * @param url               图片url\n     * @param imageLoadListener 回调监听器\n     */\n    public static <T> DrawableRequestBuilder<String> loadImage(T context, @NonNull final String url, @NonNull ImageLoadListener<String, GlideDrawable> imageLoadListener) {\n        DrawableTypeRequest<String> type = getDrawableTypeRequest(context, url);\n        if (type != null) {\n            return type.listener(new GlideListener<String, GlideDrawable, String>(imageLoadListener, url));\n        } else {\n            return null;\n        }\n    \n    }\n    \n    /**\n     * 加载存储器上的图片到目标载体\n     *\n     * @param file      文件File\n     * @param imageView 要显示到的图片ImageView\n     */\n    public static Target<GlideDrawable> loadImage(@NonNull final File file, @NonNull ImageView imageView, ImageLoadListener<File, GlideDrawable> imageLoadListener) {\n        return getDrawableTypeRequest(imageView.getContext(), file)\n                .diskCacheStrategy(DiskCacheStrategy.NONE)//禁用磁盘缓存\n                .skipMemoryCache(true)//跳过内存缓存\n                .dontAnimate()\n                .listener(new GlideListener<File, GlideDrawable, File>(imageLoadListener, file, imageView))\n                .into(imageView);\n    }\n    \n    /**\n     * 加载资源中的图片到目标载体\n     *\n     * @param resourceId 资源id\n     * @param imageView  图片View\n     */\n    public static Target<GlideDrawable> loadImage(@DrawableRes int resourceId, @NonNull ImageView imageView, ImageLoadListener<Integer, GlideDrawable> imageLoadListener) {\n        return getDrawableTypeRequest(imageView.getContext(), resourceId)\n                .listener(new GlideListener<Integer, GlideDrawable, Integer>(imageLoadListener, resourceId, imageView))\n                .into(imageView);\n    }\n\n\n    /**\n     * 加载成圆形头像到普通ImageView，有动画效果\n     *\n     * @param url               图片url\n     * @param imageView         要显示到的ImageView\n     * @param imageLoadListener 加载回调监听器\n     * @param parms             设置占位符和加载失败图片(可变参数默认两张,第一张为占位符,第二张是默认图片)\n     * @return 返回Target<GlideDrawable>\n     */\n    public static Target<GlideDrawable> loadCircleImage(@NonNull String url, @NonNull ImageView imageView, ImageLoadListener<String, GlideDrawable> imageLoadListener, int... parms) {\n        DrawableTypeRequest<String> type = getDrawableTypeRequest(imageView.getContext(), url);\n        if (parms != null && parms.length > 0) {\n            type.placeholder(parms[0]);   //占位符\n            if (parms.length > 1) {\n                type.error(parms[1]);    //图片加载失败显示图片\n            }\n        }\n        type.transform(new CircleTransform(imageView.getContext()));\n        return type.listener(new GlideListener<String, GlideDrawable, String>(imageLoadListener, url, imageView))\n                .into(imageView);\n    \n    }\n\n\n    /**\n     * 加载网络图片到指定Imageview，支持CircleImageView\n     *\n     * @param url               图片url\n     * @param imageView         要显示的Imageview\n     * @param imageLoadListener 图片加载回调\n     * @param parms             第一个是error的图片\n     */\n    public static <T> Target<GlideDrawable> loadImage(T context, @NonNull String url, @NonNull ImageView imageView, ImageLoadListener<String, GlideDrawable> imageLoadListener, int... parms) {\n        DrawableTypeRequest<String> type = getDrawableTypeRequest(context, url);\n        if (type != null) {\n            type.asBitmap();\n            if (parms != null && parms.length > 0) {\n                type.placeholder(parms[0]);   //占位符\n                if (parms.length > 1) {\n                    type.error(parms[1]);    //图片加载失败显示图片\n                }\n            }\n    \n            //单张CircleImageView不允许动画，不然会不显示,\n            if (imageView instanceof nfzr.zr.nf.nfzr.com.nongfaziran.nfzr.view.CircleImageView) {\n                type.dontAnimate();\n            }\n            return type\n                    .listener(new GlideListener<String, GlideDrawable, String>(imageLoadListener, url, imageView))\n                    .into(imageView);\n        } else {\n            return null;\n        }\n    \n    }\n    \n    /**\n     * 加载一帧视频，添加圆角\n     *\n     * @param url       图片地址\n     * @param imageView 要加载到的ImageView\n     */\n    public static Target<GlideDrawable> loadImageFormVideo(@NonNull String url, @NonNull ImageView imageView) {\n        return getDrawableTypeRequest(imageView.getContext(), url)\n                .override(SizeUtil.dp2px(150), SizeUtil.dp2px(150))\n                //.placeholder(android.R.drawable.picture_frame)   //占位图\n                .dontAnimate()\n                .into(imageView);\n    }\n\n\n    public static <T> Target<GlideDrawable> loadImageDetail(final T context, @NonNull final String url, @NonNull final ImageView imageView, final Drawable drawable, final ImageLoadDetailListener<String, GlideDrawable> imageLoadListener) {\n        DrawableTypeRequest<String> type = getDrawableTypeRequest(context, url);\n        if (type != null) {\n            return type.into(new SimpleTarget<GlideDrawable>() {\n                @Override\n                public void onResourceReady(GlideDrawable resource, GlideAnimation<? super GlideDrawable> glideAnimation) {\n                    if (imageView != null && resource != null) {\n                        imageView.setImageDrawable(resource);\n                    }\n                    if (imageLoadListener != null) {\n                        imageLoadListener.onLoadingComplete(url, imageView, resource);\n                    }\n    \n                }\n    \n                @Override\n                public void onStart() {\n                    super.onStart();\n                    if (drawable != null && imageView != null) {\n                        imageView.setImageDrawable(drawable);\n                    }\n    \n                }\n    \n                @Override\n                public void onLoadStarted(Drawable placeholder) {\n                    super.onLoadStarted(placeholder);\n                    if (imageLoadListener != null) {\n                        imageLoadListener.onLoadingStart(url, placeholder);\n                    }\n    \n                }\n    \n                @Override\n                public void onLoadFailed(Exception e, Drawable errorDrawable) {\n                    super.onLoadFailed(e, errorDrawable);\n                    if (imageLoadListener != null) {\n                        imageLoadListener.onLoadingError(url, errorDrawable, e);\n                    }\n                }\n            });\n        } else {\n            return null;\n        }\n    \n    }\n\n\n    /**\n     * 加载bitmap，回调返回 Bitmap\n     *\n     * @param context           上下文\n     * @param url               图片url\n     * @param imageLoadListener 图片加载监听器\n     * @param <T>               上下文类型\n     */\n    public static <T> BitmapRequestBuilder<String, Bitmap> loadImageBitmap(T context, @NonNull String url,@NonNull ImageLoadListener<String, Bitmap> imageLoadListener) {\n        DrawableTypeRequest<String> type = getDrawableTypeRequest(context, url);\n        if (type != null) {\n            return type.asBitmap()\n                    .listener(new GlideListener<String, Bitmap, String>(imageLoadListener, url));\n        }else{\n            return null;\n        }\n    }\n\n\n    /**\n     * 加载GifDrawable，回调返回 GifDrawable\n     *\n     * @param context           上下文\n     * @param url               图片url\n     * @param imageLoadListener 图片加载监听器\n     */\n    public static <T> GifRequestBuilder<String> loadImageGif(T context, @NonNull String url,@NonNull ImageLoadListener<String, GifDrawable> imageLoadListener) {\n        DrawableTypeRequest<String> type = getDrawableTypeRequest(context, url);\n        if (type != null) {\n            return type.asGif()\n                    .diskCacheStrategy(DiskCacheStrategy.SOURCE)\n                    .listener(new GlideListener<String, GifDrawable, String>(imageLoadListener, url));\n    \n        }else{\n            return null;\n        }\n    }\n\n\n    /**\n     * 加载Gif的一张图片到ImageView\n     *\n     * @param url               图片url\n     * @param imageLoadListener 图片加载监听器\n     *                          @param imageView \n     *                          @param drawable 缩略图，可以为空\n     */\n    public static Target<Bitmap> loadImageGifSingle(@NonNull String url, @NonNull ImageView imageView, ImageLoadListener<String, Bitmap> imageLoadListener, Drawable drawable) {\n      \n        DrawableTypeRequest<String> type = getDrawableTypeRequest(imageView.getContext(),url);\n        return type.asBitmap()\n                .placeholder(drawable)\n                .diskCacheStrategy(DiskCacheStrategy.SOURCE)\n                .listener(new GlideListener<String, Bitmap, String>(imageLoadListener, url))\n                .into(imageView);\n    }\n\n\n    /**\n     * 加载gif图片到指定ImageView\n     *\n     * @param url               图片Url\n     * @param imageView         图片View\n     * @param imageLoadListener 图片加载监听器\n     */\n    public static Target<GifDrawable> loadImageGif(@NonNull String url, @NonNull ImageView imageView, ImageLoadListener<String, GifDrawable> imageLoadListener) {\n        DrawableTypeRequest<String> type = getDrawableTypeRequest(imageView.getContext(),url);\n        return type.asGif()\n                .diskCacheStrategy(DiskCacheStrategy.SOURCE)\n                .listener(new GlideListener<String, GifDrawable, String>(imageLoadListener, url, imageView))\n                .into(imageView);\n    }\n\n\n    /**\n     * 释放内存\n     *\n     * @param context 上下文\n     */\n    public static void clearMemory(Context context) {\n        Glide.get(context).clearMemory();\n    }\n\n\n    /**\n     * 取消所有正在下载或等待下载的任务。\n     *\n     * @param context 上下文\n     */\n    public static void cancelAllTasks(Context context) {\n        Glide.with(context).pauseRequests();\n    }\n    \n    /**\n     * 恢复所有任务\n     */\n    public static void resumeAllTasks(Context context) {\n        Glide.with(context).resumeRequests();\n    }\n    \n    /**\n     * 清除磁盘缓存\n     *\n     * @param context 上下文\n     */\n    public static void clearDiskCache(final Context context) {\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                Glide.get(context).clearDiskCache();\n            }\n        }).start();\n    }\n\n\n    /**\n     * 清除所有缓存\n     *\n     * @param context 上下文\n     */\n    public static void cleanAll(Context context) {\n        clearDiskCache(context);\n        clearMemory(context);\n    }\n\n    public class CircleTransform extends BitmapTransformation {\n    public CircleTransform(Context context) {\n        super(context);\n    }\n    \n    @Override protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) {\n        return circleCrop(pool, toTransform);\n    }\n    \n    private static Bitmap circleCrop(BitmapPool pool, Bitmap source) {\n        if (source == null) return null;\n    \n        int size = Math.min(source.getWidth(), source.getHeight());\n        int x = (source.getWidth() - size) / 2;\n        int y = (source.getHeight() - size) / 2;\n    \n        Bitmap squared = Bitmap.createBitmap(source, x, y, size, size);\n    \n        Bitmap result = pool.get(size, size, Bitmap.Config.ARGB_8888);\n        if (result == null) {\n            result = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\n        }\n    \n        Canvas canvas = new Canvas(result);\n        Paint paint = new Paint();\n        paint.setShader(new BitmapShader(squared, BitmapShader.TileMode.CLAMP, BitmapShader.TileMode.CLAMP));\n        paint.setAntiAlias(true);\n        float r = size / 2f;\n        canvas.drawCircle(r, r, r, paint);\n        return result;\n    }\n    \n    @Override public String getId() {\n        return getClass().getName();\n    }\n    }\n\nDrawable转bigmap\n\n    public class BitmapUtils {\n    public static Bitmap drawableToBitmap(Drawable drawable) {\n        Bitmap bitmap = Bitmap.createBitmap(\n                drawable.getIntrinsicWidth(),\n                drawable.getIntrinsicHeight(),\n                drawable.getOpacity() != PixelFormat.OPAQUE ? Bitmap.Config.ARGB_8888\n                        : Bitmap.Config.RGB_565);\n        Canvas canvas = new Canvas(bitmap);\n        //canvas.setBitmap(bitmap);\n        drawable.setBounds(0, 0, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());\n        drawable.draw(canvas);\n        return bitmap;\n    }\n    }\n","slug":"保存图片到本地","published":1,"updated":"2018-07-19T01:47:31.238Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6n8002o1kyg3n3aftdk","content":"<p>一个很常见的需求,图片保存到本地,矫正图片角度，通知图库更新<br><a id=\"more\"></a></p>\n<blockquote>\n<p>步骤</p>\n</blockquote>\n<ol>\n<li>使用Gilde获取图片的Drawable</li>\n<li>Drawable转成Bitmap</li>\n<li>bigtmap压缩并通过流写入</li>\n<li>通知系统图库更新</li>\n</ol>\n<blockquote>\n<p>代码块</p>\n</blockquote>\n<ul>\n<li>保存图片,流写入,压缩</li>\n<li><pre><code>public static void saveImageToGallery(Context context, Bitmap bmp) {\nFile appDir = new File(Environment.getExternalStorageDirectory(), &quot;fengandev&quot;);\nif (!appDir.exists()) {\n    appDir.mkdir();\n}\nString fileName = System.currentTimeMillis() + &quot;.jpg&quot;;\nFile file = new File(appDir, fileName);\ntry {\n    FileOutputStream fos = new FileOutputStream(file);\n    bmp.compress(Bitmap.CompressFormat.JPEG, 100, fos);\n    fos.flush();\n    fos.close();\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n}\n\n// 其次把文件插入到系统图库\ntry {\n    MediaStore.Images.Media.insertImage(context.getContentResolver(),\n            file.getAbsolutePath(), fileName, null);\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n}\n// 最后通知图库更新\ncontext.sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, Uri.fromFile(new File(file.getPath()))));\nToastUtil.showShort(&quot;保存到&quot; + file.getPath());\n</code></pre><p>  }`</p>\n<blockquote>\n<p>通过glide回调,获取图片Drawable</p>\n</blockquote>\n</li>\n</ul>\n<pre><code>  mTvSave.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n        showLoadding();\n        GlideUtils.loadImage(Utils.getContext(), imaUrl), mIvImg,new GlideUtils.ImageLoadListener&lt;String, GlideDrawable&gt;() {\n            @Override\n            public void onLoadingComplete(String uri, ImageView view, GlideDrawable resource) {\n                FileUtils.saveImageToGallery(Utils.getContext(), BitmapUtils.drawableToBitmap(resource));\n            }\n\n            @Override\n            public void onLoadingError(String source, Exception e) {\n                showState(&quot;保存失败&quot;,0);\n            }\n        });\n    }\n});\n</code></pre><blockquote>\n<p>分享一个Glide封装</p>\n</blockquote>\n<ul>\n<li>Glide封装类</li>\n</ul>\n<pre><code>public abstract class GlideUtils {\n/**\n * 简单图片加载回调\n *\n * @param &lt;T&gt; 图片url 或资源id 或 文件\n * @param &lt;K&gt; 返回的资源,GlideDrawable或者Bitmap或者GifDrawable,ImageView.setImageRecourse设置\n */\npublic interface ImageLoadListener&lt;T, K&gt; {\n\n    /**\n     * 图片加载成功回调\n     *\n     * @param uri      图片url 或资源id 或 文件\n     * @param view     目标载体，不传则为空\n     * @param resource 返回的资源,GlideDrawable或者Bitmap或者GifDrawable,ImageView.setImageRecourse设置\n     */\n    void onLoadingComplete(T uri, ImageView view, K resource);\n\n    /**\n     * 图片加载异常返回\n     *\n     * @param source 图片地址、File、资源id\n     * @param e      异常信息\n     */\n    void onLoadingError(T source, Exception e);\n\n}\n\n\n/**\n * 详细加载图片加载回调\n *\n * @param &lt;T&gt; 图片url 或资源id 或 文件\n * @param &lt;K&gt; 返回的资源\n */\npublic interface ImageLoadDetailListener&lt;T, K&gt; {\n\n    /**\n     * 图片加载成功回调\n     *\n     * @param uri      图片url 或资源id 或 文件\n     * @param view     目标载体，不传则为空\n     * @param resource 返回的资源,GlideDrawable或者Bitmap或者GifDrawable,ImageView.setImageRecourse设置\n     */\n    void onLoadingComplete(T uri, ImageView view, K resource);\n\n    /**\n     * 图片加载异常返回\n     *\n     * @param source        图片地址、File、资源id\n     * @param errorDrawable 加载错误占位图\n     * @param e             异常信息\n     */\n    void onLoadingError(T source, Drawable errorDrawable, Exception e);\n\n    /**\n     * 加载开始\n     *\n     * @param source      图片来源\n     * @param placeHolder 开始加载占位图\n     */\n    void onLoadingStart(T source, Drawable placeHolder);\n\n}\n\n\n/**\n * 根据上下文和 url获取 Glide的DrawableTypeRequest\n *\n * @param context 上下文\n * @param url     图片连接\n * @param &lt;T&gt;     Context类型\n * @param &lt;K&gt;     url类型\n * @return 返回DrawableTypeRequst&lt;K&gt; 类型\n */\nprivate static &lt;T, K&gt; DrawableTypeRequest&lt;K&gt; getDrawableTypeRequest(T context, K url) {\n    DrawableTypeRequest&lt;K&gt; type = null;\n    try {\n        if (context instanceof android.support.v4.app.Fragment) {\n            type = Glide.with((android.support.v4.app.Fragment) context).load(url);\n        } else if (context instanceof android.app.Fragment) {\n            type = Glide.with((android.app.Fragment) context).load(url);\n        } else if (context instanceof Activity) {    //包括FragmentActivity\n            type = Glide.with((Activity) context).load(url);\n        } else if (context instanceof Context) {\n            type = Glide.with((Context) context).load(url);\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n\n    return type;\n}\n\n\n/**\n * 图片加载监听类\n *\n * @param &lt;T&gt; 图片链接 的类型\n * @param &lt;K&gt; 图片资源返回类型\n * @param &lt;Z&gt; 返回的图片url\n */\nprivate static class GlideListener&lt;T, K, Z&gt; implements RequestListener&lt;T, K&gt; {\n\n    ImageLoadListener&lt;Z, K&gt; imageLoadListener = null;\n    Z url;\n    ImageView imageView = null;\n\n    GlideListener(ImageLoadListener&lt;Z, K&gt; imageLoadListener, Z url, ImageView view) {\n        this.imageLoadListener = imageLoadListener;\n        this.url = url;\n        this.imageView = view;\n    }\n\n    GlideListener(ImageLoadListener&lt;Z, K&gt; imageLoadListener, Z url) {\n        this.imageLoadListener = imageLoadListener;\n        this.url = url;\n    }\n\n    GlideListener(Z url) {\n        this.url = url;\n    }\n\n    @Override\n    public boolean onResourceReady(K resource, T model, Target&lt;K&gt; target, boolean isFromMemoryCache, boolean isFirstResource) {\n        if (null != imageLoadListener) {\n            if (imageView != null) {\n                imageLoadListener.onLoadingComplete(url, imageView, resource);\n            } else {\n                imageLoadListener.onLoadingComplete(url, null, resource);\n            }\n        }\n\n        return false;\n    }\n\n    @Override\n    public boolean onException(Exception e, T model, Target&lt;K&gt; target, boolean isFirstResource) {\n\n        //LogUtil.e(&quot;Glide图片加载失败:&quot;+e + &quot; 地址为:&quot;+url);\n\n        if (imageLoadListener != null) {\n            imageLoadListener.onLoadingError(url, e);\n        }\n        return false;\n    }\n}\n\n\n/**\n * 获取存储器上的图片,回调返回GlideDrawable\n *\n * @param context           上下文年\n * @param file              文件File\n * @param imageLoadListener 回调监听器\n */\npublic static &lt;T&gt; DrawableRequestBuilder&lt;File&gt; loadImage(T context, @NonNull File file, @NonNull ImageLoadListener&lt;File, GlideDrawable&gt; imageLoadListener) {\n    DrawableTypeRequest&lt;File&gt; type = getDrawableTypeRequest(context, file);\n    if (type != null) {\n        return type.listener(new GlideListener&lt;File, GlideDrawable, File&gt;(imageLoadListener, file));\n    } else {\n        return null;\n    }\n}\n\n/**\n * 获取资源中的图片，回调返回GlideDrawable\n *\n * @param context           上下文\n * @param resourceId        资源id\n * @param imageLoadListener 回调监听器\n */\npublic static &lt;T&gt; DrawableRequestBuilder&lt;Integer&gt; loadImage(T context, @DrawableRes int resourceId, @NonNull ImageLoadListener&lt;Integer, GlideDrawable&gt; imageLoadListener) {\n    DrawableTypeRequest&lt;Integer&gt; type = getDrawableTypeRequest(context, resourceId);\n    if (type != null) {\n        return type.listener(new GlideListener&lt;Integer, GlideDrawable, Integer&gt;(imageLoadListener, resourceId));\n    } else {\n        return null;\n    }\n\n}\n\n/**\n * 获取网络图片，回调返回 GlideDrawable\n *\n * @param context           上下文\n * @param url               图片url\n * @param imageLoadListener 回调监听器\n */\npublic static &lt;T&gt; DrawableRequestBuilder&lt;String&gt; loadImage(T context, @NonNull final String url, @NonNull ImageLoadListener&lt;String, GlideDrawable&gt; imageLoadListener) {\n    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(context, url);\n    if (type != null) {\n        return type.listener(new GlideListener&lt;String, GlideDrawable, String&gt;(imageLoadListener, url));\n    } else {\n        return null;\n    }\n\n}\n\n/**\n * 加载存储器上的图片到目标载体\n *\n * @param file      文件File\n * @param imageView 要显示到的图片ImageView\n */\npublic static Target&lt;GlideDrawable&gt; loadImage(@NonNull final File file, @NonNull ImageView imageView, ImageLoadListener&lt;File, GlideDrawable&gt; imageLoadListener) {\n    return getDrawableTypeRequest(imageView.getContext(), file)\n            .diskCacheStrategy(DiskCacheStrategy.NONE)//禁用磁盘缓存\n            .skipMemoryCache(true)//跳过内存缓存\n            .dontAnimate()\n            .listener(new GlideListener&lt;File, GlideDrawable, File&gt;(imageLoadListener, file, imageView))\n            .into(imageView);\n}\n\n/**\n * 加载资源中的图片到目标载体\n *\n * @param resourceId 资源id\n * @param imageView  图片View\n */\npublic static Target&lt;GlideDrawable&gt; loadImage(@DrawableRes int resourceId, @NonNull ImageView imageView, ImageLoadListener&lt;Integer, GlideDrawable&gt; imageLoadListener) {\n    return getDrawableTypeRequest(imageView.getContext(), resourceId)\n            .listener(new GlideListener&lt;Integer, GlideDrawable, Integer&gt;(imageLoadListener, resourceId, imageView))\n            .into(imageView);\n}\n\n\n/**\n * 加载成圆形头像到普通ImageView，有动画效果\n *\n * @param url               图片url\n * @param imageView         要显示到的ImageView\n * @param imageLoadListener 加载回调监听器\n * @param parms             设置占位符和加载失败图片(可变参数默认两张,第一张为占位符,第二张是默认图片)\n * @return 返回Target&lt;GlideDrawable&gt;\n */\npublic static Target&lt;GlideDrawable&gt; loadCircleImage(@NonNull String url, @NonNull ImageView imageView, ImageLoadListener&lt;String, GlideDrawable&gt; imageLoadListener, int... parms) {\n    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(imageView.getContext(), url);\n    if (parms != null &amp;&amp; parms.length &gt; 0) {\n        type.placeholder(parms[0]);   //占位符\n        if (parms.length &gt; 1) {\n            type.error(parms[1]);    //图片加载失败显示图片\n        }\n    }\n    type.transform(new CircleTransform(imageView.getContext()));\n    return type.listener(new GlideListener&lt;String, GlideDrawable, String&gt;(imageLoadListener, url, imageView))\n            .into(imageView);\n\n}\n\n\n/**\n * 加载网络图片到指定Imageview，支持CircleImageView\n *\n * @param url               图片url\n * @param imageView         要显示的Imageview\n * @param imageLoadListener 图片加载回调\n * @param parms             第一个是error的图片\n */\npublic static &lt;T&gt; Target&lt;GlideDrawable&gt; loadImage(T context, @NonNull String url, @NonNull ImageView imageView, ImageLoadListener&lt;String, GlideDrawable&gt; imageLoadListener, int... parms) {\n    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(context, url);\n    if (type != null) {\n        type.asBitmap();\n        if (parms != null &amp;&amp; parms.length &gt; 0) {\n            type.placeholder(parms[0]);   //占位符\n            if (parms.length &gt; 1) {\n                type.error(parms[1]);    //图片加载失败显示图片\n            }\n        }\n\n        //单张CircleImageView不允许动画，不然会不显示,\n        if (imageView instanceof nfzr.zr.nf.nfzr.com.nongfaziran.nfzr.view.CircleImageView) {\n            type.dontAnimate();\n        }\n        return type\n                .listener(new GlideListener&lt;String, GlideDrawable, String&gt;(imageLoadListener, url, imageView))\n                .into(imageView);\n    } else {\n        return null;\n    }\n\n}\n\n/**\n * 加载一帧视频，添加圆角\n *\n * @param url       图片地址\n * @param imageView 要加载到的ImageView\n */\npublic static Target&lt;GlideDrawable&gt; loadImageFormVideo(@NonNull String url, @NonNull ImageView imageView) {\n    return getDrawableTypeRequest(imageView.getContext(), url)\n            .override(SizeUtil.dp2px(150), SizeUtil.dp2px(150))\n            //.placeholder(android.R.drawable.picture_frame)   //占位图\n            .dontAnimate()\n            .into(imageView);\n}\n\n\npublic static &lt;T&gt; Target&lt;GlideDrawable&gt; loadImageDetail(final T context, @NonNull final String url, @NonNull final ImageView imageView, final Drawable drawable, final ImageLoadDetailListener&lt;String, GlideDrawable&gt; imageLoadListener) {\n    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(context, url);\n    if (type != null) {\n        return type.into(new SimpleTarget&lt;GlideDrawable&gt;() {\n            @Override\n            public void onResourceReady(GlideDrawable resource, GlideAnimation&lt;? super GlideDrawable&gt; glideAnimation) {\n                if (imageView != null &amp;&amp; resource != null) {\n                    imageView.setImageDrawable(resource);\n                }\n                if (imageLoadListener != null) {\n                    imageLoadListener.onLoadingComplete(url, imageView, resource);\n                }\n\n            }\n\n            @Override\n            public void onStart() {\n                super.onStart();\n                if (drawable != null &amp;&amp; imageView != null) {\n                    imageView.setImageDrawable(drawable);\n                }\n\n            }\n\n            @Override\n            public void onLoadStarted(Drawable placeholder) {\n                super.onLoadStarted(placeholder);\n                if (imageLoadListener != null) {\n                    imageLoadListener.onLoadingStart(url, placeholder);\n                }\n\n            }\n\n            @Override\n            public void onLoadFailed(Exception e, Drawable errorDrawable) {\n                super.onLoadFailed(e, errorDrawable);\n                if (imageLoadListener != null) {\n                    imageLoadListener.onLoadingError(url, errorDrawable, e);\n                }\n            }\n        });\n    } else {\n        return null;\n    }\n\n}\n\n\n/**\n * 加载bitmap，回调返回 Bitmap\n *\n * @param context           上下文\n * @param url               图片url\n * @param imageLoadListener 图片加载监听器\n * @param &lt;T&gt;               上下文类型\n */\npublic static &lt;T&gt; BitmapRequestBuilder&lt;String, Bitmap&gt; loadImageBitmap(T context, @NonNull String url,@NonNull ImageLoadListener&lt;String, Bitmap&gt; imageLoadListener) {\n    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(context, url);\n    if (type != null) {\n        return type.asBitmap()\n                .listener(new GlideListener&lt;String, Bitmap, String&gt;(imageLoadListener, url));\n    }else{\n        return null;\n    }\n}\n\n\n/**\n * 加载GifDrawable，回调返回 GifDrawable\n *\n * @param context           上下文\n * @param url               图片url\n * @param imageLoadListener 图片加载监听器\n */\npublic static &lt;T&gt; GifRequestBuilder&lt;String&gt; loadImageGif(T context, @NonNull String url,@NonNull ImageLoadListener&lt;String, GifDrawable&gt; imageLoadListener) {\n    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(context, url);\n    if (type != null) {\n        return type.asGif()\n                .diskCacheStrategy(DiskCacheStrategy.SOURCE)\n                .listener(new GlideListener&lt;String, GifDrawable, String&gt;(imageLoadListener, url));\n\n    }else{\n        return null;\n    }\n}\n\n\n/**\n * 加载Gif的一张图片到ImageView\n *\n * @param url               图片url\n * @param imageLoadListener 图片加载监听器\n *                          @param imageView \n *                          @param drawable 缩略图，可以为空\n */\npublic static Target&lt;Bitmap&gt; loadImageGifSingle(@NonNull String url, @NonNull ImageView imageView, ImageLoadListener&lt;String, Bitmap&gt; imageLoadListener, Drawable drawable) {\n\n    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(imageView.getContext(),url);\n    return type.asBitmap()\n            .placeholder(drawable)\n            .diskCacheStrategy(DiskCacheStrategy.SOURCE)\n            .listener(new GlideListener&lt;String, Bitmap, String&gt;(imageLoadListener, url))\n            .into(imageView);\n}\n\n\n/**\n * 加载gif图片到指定ImageView\n *\n * @param url               图片Url\n * @param imageView         图片View\n * @param imageLoadListener 图片加载监听器\n */\npublic static Target&lt;GifDrawable&gt; loadImageGif(@NonNull String url, @NonNull ImageView imageView, ImageLoadListener&lt;String, GifDrawable&gt; imageLoadListener) {\n    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(imageView.getContext(),url);\n    return type.asGif()\n            .diskCacheStrategy(DiskCacheStrategy.SOURCE)\n            .listener(new GlideListener&lt;String, GifDrawable, String&gt;(imageLoadListener, url, imageView))\n            .into(imageView);\n}\n\n\n/**\n * 释放内存\n *\n * @param context 上下文\n */\npublic static void clearMemory(Context context) {\n    Glide.get(context).clearMemory();\n}\n\n\n/**\n * 取消所有正在下载或等待下载的任务。\n *\n * @param context 上下文\n */\npublic static void cancelAllTasks(Context context) {\n    Glide.with(context).pauseRequests();\n}\n\n/**\n * 恢复所有任务\n */\npublic static void resumeAllTasks(Context context) {\n    Glide.with(context).resumeRequests();\n}\n\n/**\n * 清除磁盘缓存\n *\n * @param context 上下文\n */\npublic static void clearDiskCache(final Context context) {\n    new Thread(new Runnable() {\n        @Override\n        public void run() {\n            Glide.get(context).clearDiskCache();\n        }\n    }).start();\n}\n\n\n/**\n * 清除所有缓存\n *\n * @param context 上下文\n */\npublic static void cleanAll(Context context) {\n    clearDiskCache(context);\n    clearMemory(context);\n}\n\npublic class CircleTransform extends BitmapTransformation {\npublic CircleTransform(Context context) {\n    super(context);\n}\n\n@Override protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) {\n    return circleCrop(pool, toTransform);\n}\n\nprivate static Bitmap circleCrop(BitmapPool pool, Bitmap source) {\n    if (source == null) return null;\n\n    int size = Math.min(source.getWidth(), source.getHeight());\n    int x = (source.getWidth() - size) / 2;\n    int y = (source.getHeight() - size) / 2;\n\n    Bitmap squared = Bitmap.createBitmap(source, x, y, size, size);\n\n    Bitmap result = pool.get(size, size, Bitmap.Config.ARGB_8888);\n    if (result == null) {\n        result = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\n    }\n\n    Canvas canvas = new Canvas(result);\n    Paint paint = new Paint();\n    paint.setShader(new BitmapShader(squared, BitmapShader.TileMode.CLAMP, BitmapShader.TileMode.CLAMP));\n    paint.setAntiAlias(true);\n    float r = size / 2f;\n    canvas.drawCircle(r, r, r, paint);\n    return result;\n}\n\n@Override public String getId() {\n    return getClass().getName();\n}\n}\n</code></pre><p>Drawable转bigmap</p>\n<pre><code>public class BitmapUtils {\npublic static Bitmap drawableToBitmap(Drawable drawable) {\n    Bitmap bitmap = Bitmap.createBitmap(\n            drawable.getIntrinsicWidth(),\n            drawable.getIntrinsicHeight(),\n            drawable.getOpacity() != PixelFormat.OPAQUE ? Bitmap.Config.ARGB_8888\n                    : Bitmap.Config.RGB_565);\n    Canvas canvas = new Canvas(bitmap);\n    //canvas.setBitmap(bitmap);\n    drawable.setBounds(0, 0, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());\n    drawable.draw(canvas);\n    return bitmap;\n}\n}\n</code></pre>","excerpt":"<p>一个很常见的需求,图片保存到本地,矫正图片角度，通知图库更新<br>","more":"</p>\n<blockquote>\n<p>步骤</p>\n</blockquote>\n<ol>\n<li>使用Gilde获取图片的Drawable</li>\n<li>Drawable转成Bitmap</li>\n<li>bigtmap压缩并通过流写入</li>\n<li>通知系统图库更新</li>\n</ol>\n<blockquote>\n<p>代码块</p>\n</blockquote>\n<ul>\n<li>保存图片,流写入,压缩</li>\n<li><pre><code>public static void saveImageToGallery(Context context, Bitmap bmp) {\nFile appDir = new File(Environment.getExternalStorageDirectory(), &quot;fengandev&quot;);\nif (!appDir.exists()) {\n    appDir.mkdir();\n}\nString fileName = System.currentTimeMillis() + &quot;.jpg&quot;;\nFile file = new File(appDir, fileName);\ntry {\n    FileOutputStream fos = new FileOutputStream(file);\n    bmp.compress(Bitmap.CompressFormat.JPEG, 100, fos);\n    fos.flush();\n    fos.close();\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n}\n\n// 其次把文件插入到系统图库\ntry {\n    MediaStore.Images.Media.insertImage(context.getContentResolver(),\n            file.getAbsolutePath(), fileName, null);\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n}\n// 最后通知图库更新\ncontext.sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, Uri.fromFile(new File(file.getPath()))));\nToastUtil.showShort(&quot;保存到&quot; + file.getPath());\n</code></pre><p>  }`</p>\n<blockquote>\n<p>通过glide回调,获取图片Drawable</p>\n</blockquote>\n</li>\n</ul>\n<pre><code>  mTvSave.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n        showLoadding();\n        GlideUtils.loadImage(Utils.getContext(), imaUrl), mIvImg,new GlideUtils.ImageLoadListener&lt;String, GlideDrawable&gt;() {\n            @Override\n            public void onLoadingComplete(String uri, ImageView view, GlideDrawable resource) {\n                FileUtils.saveImageToGallery(Utils.getContext(), BitmapUtils.drawableToBitmap(resource));\n            }\n\n            @Override\n            public void onLoadingError(String source, Exception e) {\n                showState(&quot;保存失败&quot;,0);\n            }\n        });\n    }\n});\n</code></pre><blockquote>\n<p>分享一个Glide封装</p>\n</blockquote>\n<ul>\n<li>Glide封装类</li>\n</ul>\n<pre><code>public abstract class GlideUtils {\n/**\n * 简单图片加载回调\n *\n * @param &lt;T&gt; 图片url 或资源id 或 文件\n * @param &lt;K&gt; 返回的资源,GlideDrawable或者Bitmap或者GifDrawable,ImageView.setImageRecourse设置\n */\npublic interface ImageLoadListener&lt;T, K&gt; {\n\n    /**\n     * 图片加载成功回调\n     *\n     * @param uri      图片url 或资源id 或 文件\n     * @param view     目标载体，不传则为空\n     * @param resource 返回的资源,GlideDrawable或者Bitmap或者GifDrawable,ImageView.setImageRecourse设置\n     */\n    void onLoadingComplete(T uri, ImageView view, K resource);\n\n    /**\n     * 图片加载异常返回\n     *\n     * @param source 图片地址、File、资源id\n     * @param e      异常信息\n     */\n    void onLoadingError(T source, Exception e);\n\n}\n\n\n/**\n * 详细加载图片加载回调\n *\n * @param &lt;T&gt; 图片url 或资源id 或 文件\n * @param &lt;K&gt; 返回的资源\n */\npublic interface ImageLoadDetailListener&lt;T, K&gt; {\n\n    /**\n     * 图片加载成功回调\n     *\n     * @param uri      图片url 或资源id 或 文件\n     * @param view     目标载体，不传则为空\n     * @param resource 返回的资源,GlideDrawable或者Bitmap或者GifDrawable,ImageView.setImageRecourse设置\n     */\n    void onLoadingComplete(T uri, ImageView view, K resource);\n\n    /**\n     * 图片加载异常返回\n     *\n     * @param source        图片地址、File、资源id\n     * @param errorDrawable 加载错误占位图\n     * @param e             异常信息\n     */\n    void onLoadingError(T source, Drawable errorDrawable, Exception e);\n\n    /**\n     * 加载开始\n     *\n     * @param source      图片来源\n     * @param placeHolder 开始加载占位图\n     */\n    void onLoadingStart(T source, Drawable placeHolder);\n\n}\n\n\n/**\n * 根据上下文和 url获取 Glide的DrawableTypeRequest\n *\n * @param context 上下文\n * @param url     图片连接\n * @param &lt;T&gt;     Context类型\n * @param &lt;K&gt;     url类型\n * @return 返回DrawableTypeRequst&lt;K&gt; 类型\n */\nprivate static &lt;T, K&gt; DrawableTypeRequest&lt;K&gt; getDrawableTypeRequest(T context, K url) {\n    DrawableTypeRequest&lt;K&gt; type = null;\n    try {\n        if (context instanceof android.support.v4.app.Fragment) {\n            type = Glide.with((android.support.v4.app.Fragment) context).load(url);\n        } else if (context instanceof android.app.Fragment) {\n            type = Glide.with((android.app.Fragment) context).load(url);\n        } else if (context instanceof Activity) {    //包括FragmentActivity\n            type = Glide.with((Activity) context).load(url);\n        } else if (context instanceof Context) {\n            type = Glide.with((Context) context).load(url);\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n\n    return type;\n}\n\n\n/**\n * 图片加载监听类\n *\n * @param &lt;T&gt; 图片链接 的类型\n * @param &lt;K&gt; 图片资源返回类型\n * @param &lt;Z&gt; 返回的图片url\n */\nprivate static class GlideListener&lt;T, K, Z&gt; implements RequestListener&lt;T, K&gt; {\n\n    ImageLoadListener&lt;Z, K&gt; imageLoadListener = null;\n    Z url;\n    ImageView imageView = null;\n\n    GlideListener(ImageLoadListener&lt;Z, K&gt; imageLoadListener, Z url, ImageView view) {\n        this.imageLoadListener = imageLoadListener;\n        this.url = url;\n        this.imageView = view;\n    }\n\n    GlideListener(ImageLoadListener&lt;Z, K&gt; imageLoadListener, Z url) {\n        this.imageLoadListener = imageLoadListener;\n        this.url = url;\n    }\n\n    GlideListener(Z url) {\n        this.url = url;\n    }\n\n    @Override\n    public boolean onResourceReady(K resource, T model, Target&lt;K&gt; target, boolean isFromMemoryCache, boolean isFirstResource) {\n        if (null != imageLoadListener) {\n            if (imageView != null) {\n                imageLoadListener.onLoadingComplete(url, imageView, resource);\n            } else {\n                imageLoadListener.onLoadingComplete(url, null, resource);\n            }\n        }\n\n        return false;\n    }\n\n    @Override\n    public boolean onException(Exception e, T model, Target&lt;K&gt; target, boolean isFirstResource) {\n\n        //LogUtil.e(&quot;Glide图片加载失败:&quot;+e + &quot; 地址为:&quot;+url);\n\n        if (imageLoadListener != null) {\n            imageLoadListener.onLoadingError(url, e);\n        }\n        return false;\n    }\n}\n\n\n/**\n * 获取存储器上的图片,回调返回GlideDrawable\n *\n * @param context           上下文年\n * @param file              文件File\n * @param imageLoadListener 回调监听器\n */\npublic static &lt;T&gt; DrawableRequestBuilder&lt;File&gt; loadImage(T context, @NonNull File file, @NonNull ImageLoadListener&lt;File, GlideDrawable&gt; imageLoadListener) {\n    DrawableTypeRequest&lt;File&gt; type = getDrawableTypeRequest(context, file);\n    if (type != null) {\n        return type.listener(new GlideListener&lt;File, GlideDrawable, File&gt;(imageLoadListener, file));\n    } else {\n        return null;\n    }\n}\n\n/**\n * 获取资源中的图片，回调返回GlideDrawable\n *\n * @param context           上下文\n * @param resourceId        资源id\n * @param imageLoadListener 回调监听器\n */\npublic static &lt;T&gt; DrawableRequestBuilder&lt;Integer&gt; loadImage(T context, @DrawableRes int resourceId, @NonNull ImageLoadListener&lt;Integer, GlideDrawable&gt; imageLoadListener) {\n    DrawableTypeRequest&lt;Integer&gt; type = getDrawableTypeRequest(context, resourceId);\n    if (type != null) {\n        return type.listener(new GlideListener&lt;Integer, GlideDrawable, Integer&gt;(imageLoadListener, resourceId));\n    } else {\n        return null;\n    }\n\n}\n\n/**\n * 获取网络图片，回调返回 GlideDrawable\n *\n * @param context           上下文\n * @param url               图片url\n * @param imageLoadListener 回调监听器\n */\npublic static &lt;T&gt; DrawableRequestBuilder&lt;String&gt; loadImage(T context, @NonNull final String url, @NonNull ImageLoadListener&lt;String, GlideDrawable&gt; imageLoadListener) {\n    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(context, url);\n    if (type != null) {\n        return type.listener(new GlideListener&lt;String, GlideDrawable, String&gt;(imageLoadListener, url));\n    } else {\n        return null;\n    }\n\n}\n\n/**\n * 加载存储器上的图片到目标载体\n *\n * @param file      文件File\n * @param imageView 要显示到的图片ImageView\n */\npublic static Target&lt;GlideDrawable&gt; loadImage(@NonNull final File file, @NonNull ImageView imageView, ImageLoadListener&lt;File, GlideDrawable&gt; imageLoadListener) {\n    return getDrawableTypeRequest(imageView.getContext(), file)\n            .diskCacheStrategy(DiskCacheStrategy.NONE)//禁用磁盘缓存\n            .skipMemoryCache(true)//跳过内存缓存\n            .dontAnimate()\n            .listener(new GlideListener&lt;File, GlideDrawable, File&gt;(imageLoadListener, file, imageView))\n            .into(imageView);\n}\n\n/**\n * 加载资源中的图片到目标载体\n *\n * @param resourceId 资源id\n * @param imageView  图片View\n */\npublic static Target&lt;GlideDrawable&gt; loadImage(@DrawableRes int resourceId, @NonNull ImageView imageView, ImageLoadListener&lt;Integer, GlideDrawable&gt; imageLoadListener) {\n    return getDrawableTypeRequest(imageView.getContext(), resourceId)\n            .listener(new GlideListener&lt;Integer, GlideDrawable, Integer&gt;(imageLoadListener, resourceId, imageView))\n            .into(imageView);\n}\n\n\n/**\n * 加载成圆形头像到普通ImageView，有动画效果\n *\n * @param url               图片url\n * @param imageView         要显示到的ImageView\n * @param imageLoadListener 加载回调监听器\n * @param parms             设置占位符和加载失败图片(可变参数默认两张,第一张为占位符,第二张是默认图片)\n * @return 返回Target&lt;GlideDrawable&gt;\n */\npublic static Target&lt;GlideDrawable&gt; loadCircleImage(@NonNull String url, @NonNull ImageView imageView, ImageLoadListener&lt;String, GlideDrawable&gt; imageLoadListener, int... parms) {\n    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(imageView.getContext(), url);\n    if (parms != null &amp;&amp; parms.length &gt; 0) {\n        type.placeholder(parms[0]);   //占位符\n        if (parms.length &gt; 1) {\n            type.error(parms[1]);    //图片加载失败显示图片\n        }\n    }\n    type.transform(new CircleTransform(imageView.getContext()));\n    return type.listener(new GlideListener&lt;String, GlideDrawable, String&gt;(imageLoadListener, url, imageView))\n            .into(imageView);\n\n}\n\n\n/**\n * 加载网络图片到指定Imageview，支持CircleImageView\n *\n * @param url               图片url\n * @param imageView         要显示的Imageview\n * @param imageLoadListener 图片加载回调\n * @param parms             第一个是error的图片\n */\npublic static &lt;T&gt; Target&lt;GlideDrawable&gt; loadImage(T context, @NonNull String url, @NonNull ImageView imageView, ImageLoadListener&lt;String, GlideDrawable&gt; imageLoadListener, int... parms) {\n    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(context, url);\n    if (type != null) {\n        type.asBitmap();\n        if (parms != null &amp;&amp; parms.length &gt; 0) {\n            type.placeholder(parms[0]);   //占位符\n            if (parms.length &gt; 1) {\n                type.error(parms[1]);    //图片加载失败显示图片\n            }\n        }\n\n        //单张CircleImageView不允许动画，不然会不显示,\n        if (imageView instanceof nfzr.zr.nf.nfzr.com.nongfaziran.nfzr.view.CircleImageView) {\n            type.dontAnimate();\n        }\n        return type\n                .listener(new GlideListener&lt;String, GlideDrawable, String&gt;(imageLoadListener, url, imageView))\n                .into(imageView);\n    } else {\n        return null;\n    }\n\n}\n\n/**\n * 加载一帧视频，添加圆角\n *\n * @param url       图片地址\n * @param imageView 要加载到的ImageView\n */\npublic static Target&lt;GlideDrawable&gt; loadImageFormVideo(@NonNull String url, @NonNull ImageView imageView) {\n    return getDrawableTypeRequest(imageView.getContext(), url)\n            .override(SizeUtil.dp2px(150), SizeUtil.dp2px(150))\n            //.placeholder(android.R.drawable.picture_frame)   //占位图\n            .dontAnimate()\n            .into(imageView);\n}\n\n\npublic static &lt;T&gt; Target&lt;GlideDrawable&gt; loadImageDetail(final T context, @NonNull final String url, @NonNull final ImageView imageView, final Drawable drawable, final ImageLoadDetailListener&lt;String, GlideDrawable&gt; imageLoadListener) {\n    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(context, url);\n    if (type != null) {\n        return type.into(new SimpleTarget&lt;GlideDrawable&gt;() {\n            @Override\n            public void onResourceReady(GlideDrawable resource, GlideAnimation&lt;? super GlideDrawable&gt; glideAnimation) {\n                if (imageView != null &amp;&amp; resource != null) {\n                    imageView.setImageDrawable(resource);\n                }\n                if (imageLoadListener != null) {\n                    imageLoadListener.onLoadingComplete(url, imageView, resource);\n                }\n\n            }\n\n            @Override\n            public void onStart() {\n                super.onStart();\n                if (drawable != null &amp;&amp; imageView != null) {\n                    imageView.setImageDrawable(drawable);\n                }\n\n            }\n\n            @Override\n            public void onLoadStarted(Drawable placeholder) {\n                super.onLoadStarted(placeholder);\n                if (imageLoadListener != null) {\n                    imageLoadListener.onLoadingStart(url, placeholder);\n                }\n\n            }\n\n            @Override\n            public void onLoadFailed(Exception e, Drawable errorDrawable) {\n                super.onLoadFailed(e, errorDrawable);\n                if (imageLoadListener != null) {\n                    imageLoadListener.onLoadingError(url, errorDrawable, e);\n                }\n            }\n        });\n    } else {\n        return null;\n    }\n\n}\n\n\n/**\n * 加载bitmap，回调返回 Bitmap\n *\n * @param context           上下文\n * @param url               图片url\n * @param imageLoadListener 图片加载监听器\n * @param &lt;T&gt;               上下文类型\n */\npublic static &lt;T&gt; BitmapRequestBuilder&lt;String, Bitmap&gt; loadImageBitmap(T context, @NonNull String url,@NonNull ImageLoadListener&lt;String, Bitmap&gt; imageLoadListener) {\n    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(context, url);\n    if (type != null) {\n        return type.asBitmap()\n                .listener(new GlideListener&lt;String, Bitmap, String&gt;(imageLoadListener, url));\n    }else{\n        return null;\n    }\n}\n\n\n/**\n * 加载GifDrawable，回调返回 GifDrawable\n *\n * @param context           上下文\n * @param url               图片url\n * @param imageLoadListener 图片加载监听器\n */\npublic static &lt;T&gt; GifRequestBuilder&lt;String&gt; loadImageGif(T context, @NonNull String url,@NonNull ImageLoadListener&lt;String, GifDrawable&gt; imageLoadListener) {\n    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(context, url);\n    if (type != null) {\n        return type.asGif()\n                .diskCacheStrategy(DiskCacheStrategy.SOURCE)\n                .listener(new GlideListener&lt;String, GifDrawable, String&gt;(imageLoadListener, url));\n\n    }else{\n        return null;\n    }\n}\n\n\n/**\n * 加载Gif的一张图片到ImageView\n *\n * @param url               图片url\n * @param imageLoadListener 图片加载监听器\n *                          @param imageView \n *                          @param drawable 缩略图，可以为空\n */\npublic static Target&lt;Bitmap&gt; loadImageGifSingle(@NonNull String url, @NonNull ImageView imageView, ImageLoadListener&lt;String, Bitmap&gt; imageLoadListener, Drawable drawable) {\n\n    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(imageView.getContext(),url);\n    return type.asBitmap()\n            .placeholder(drawable)\n            .diskCacheStrategy(DiskCacheStrategy.SOURCE)\n            .listener(new GlideListener&lt;String, Bitmap, String&gt;(imageLoadListener, url))\n            .into(imageView);\n}\n\n\n/**\n * 加载gif图片到指定ImageView\n *\n * @param url               图片Url\n * @param imageView         图片View\n * @param imageLoadListener 图片加载监听器\n */\npublic static Target&lt;GifDrawable&gt; loadImageGif(@NonNull String url, @NonNull ImageView imageView, ImageLoadListener&lt;String, GifDrawable&gt; imageLoadListener) {\n    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(imageView.getContext(),url);\n    return type.asGif()\n            .diskCacheStrategy(DiskCacheStrategy.SOURCE)\n            .listener(new GlideListener&lt;String, GifDrawable, String&gt;(imageLoadListener, url, imageView))\n            .into(imageView);\n}\n\n\n/**\n * 释放内存\n *\n * @param context 上下文\n */\npublic static void clearMemory(Context context) {\n    Glide.get(context).clearMemory();\n}\n\n\n/**\n * 取消所有正在下载或等待下载的任务。\n *\n * @param context 上下文\n */\npublic static void cancelAllTasks(Context context) {\n    Glide.with(context).pauseRequests();\n}\n\n/**\n * 恢复所有任务\n */\npublic static void resumeAllTasks(Context context) {\n    Glide.with(context).resumeRequests();\n}\n\n/**\n * 清除磁盘缓存\n *\n * @param context 上下文\n */\npublic static void clearDiskCache(final Context context) {\n    new Thread(new Runnable() {\n        @Override\n        public void run() {\n            Glide.get(context).clearDiskCache();\n        }\n    }).start();\n}\n\n\n/**\n * 清除所有缓存\n *\n * @param context 上下文\n */\npublic static void cleanAll(Context context) {\n    clearDiskCache(context);\n    clearMemory(context);\n}\n\npublic class CircleTransform extends BitmapTransformation {\npublic CircleTransform(Context context) {\n    super(context);\n}\n\n@Override protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) {\n    return circleCrop(pool, toTransform);\n}\n\nprivate static Bitmap circleCrop(BitmapPool pool, Bitmap source) {\n    if (source == null) return null;\n\n    int size = Math.min(source.getWidth(), source.getHeight());\n    int x = (source.getWidth() - size) / 2;\n    int y = (source.getHeight() - size) / 2;\n\n    Bitmap squared = Bitmap.createBitmap(source, x, y, size, size);\n\n    Bitmap result = pool.get(size, size, Bitmap.Config.ARGB_8888);\n    if (result == null) {\n        result = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\n    }\n\n    Canvas canvas = new Canvas(result);\n    Paint paint = new Paint();\n    paint.setShader(new BitmapShader(squared, BitmapShader.TileMode.CLAMP, BitmapShader.TileMode.CLAMP));\n    paint.setAntiAlias(true);\n    float r = size / 2f;\n    canvas.drawCircle(r, r, r, paint);\n    return result;\n}\n\n@Override public String getId() {\n    return getClass().getName();\n}\n}\n</code></pre><p>Drawable转bigmap</p>\n<pre><code>public class BitmapUtils {\npublic static Bitmap drawableToBitmap(Drawable drawable) {\n    Bitmap bitmap = Bitmap.createBitmap(\n            drawable.getIntrinsicWidth(),\n            drawable.getIntrinsicHeight(),\n            drawable.getOpacity() != PixelFormat.OPAQUE ? Bitmap.Config.ARGB_8888\n                    : Bitmap.Config.RGB_565);\n    Canvas canvas = new Canvas(bitmap);\n    //canvas.setBitmap(bitmap);\n    drawable.setBounds(0, 0, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());\n    drawable.draw(canvas);\n    return bitmap;\n}\n}\n</code></pre>"},{"title":"回顾集合体系","date":"2015-12-26T03:11:19.000Z","_content":"\n集合体系整理\n\n<!--more-->\n\n#### 前言\n\n- 面向对象语言对事物的体现都是以对象的形式，所以为了方便对多个对象进行操作，就需要对对象进行存储\n- 数组虽然可以存储对象，但是长度上固定的\n- 集合的长度是可变的\n- 数组中**可以**存储基本数据类型\n- 集合中**只能**存储对象\n\n#### 集合体系图\n\n![](https://ws3.sinaimg.cn/large/006tKfTcgy1fmwkdnlaooj30i80budid.jpg)\n\n![集合体系图](https://ws1.sinaimg.cn/large/006tKfTcgy1fmwjo9kq19j31kw15d15f.jpg)\n\n#### Iterator接口\n\n- Iterator接口，这是一个用于遍历集合中元素的接口\n- 主要包含hashNext(),next(),remove()三种方法\n- 它的一个子接口LinkedIterator在它的基础上又添加了三种方法，分别是add(),previous(),hasPrevious()\n- Iterator接口，那么在遍历集合中元素的时候，只能往后遍历，被遍历后的元素不会在遍历到，通常无序集合实现的都是这个接口，比如HashSet，HashMap\n- 元素有序的集合，实现的一般都是LinkedIterator接口，实现这个接口的集合可以双向遍历，既可以通过next()访问下一个元素，又可以通过previous()访问前一个元素，比如ArrayList。\n\n#### Collection接口\n\n- Collection是集合类根接口，衍生出两个子类接口List和Set\n- Collection定义了集合框架的共性功能\n\n![Collection接口体系图](https://ws1.sinaimg.cn/large/006tKfTcgy1fmwjn5w2rrj31a00ls122.jpg)\n\n##### List接口\n\nList里存放的对象是有序的，同时也是可以重复的，List关注的是索引，拥有一系列和索引相关的方法，查询速度快。因为往list集合里插入或删除数据时，会伴随着后面数据的移动，所有插入删除数据速度慢。\n\n- **ArrayList：**线程不安全，查询速度快，元素有序，可重复\n- **Vector：**线程安全，但速度慢，已被ArrayList替代\n- **LinkedList：**链表结构，增删速度快\n\nLinkedList经常用在增删操作较多而查询操作很少的情况下，ArrayList则相反\n\n##### Set接口\n\nSet里存放的对象是无序（存入和取出的顺序不一定一致），不能重复的，集合中的对象不按特定的方式排序，只是简单地把对象加入集合中。\n\n- **HashSet：**：\n\n1. 底层数据结构是哈希表。是线程不安全的。不同步\n2. 通过元素的两个方法，hashCode和equals来保证唯一性\n3. 如果元素的HashCode值相同，才会判断equals是否为true。\n4. 如果元素的hashcode值不同，不会调用equals。\n5. 无序\n\n- **TreeSet：**\n\n1. 有序\n2. 线程不安全，可以对Set集合中的元素进行排序\n3. 通过compareTo或者compare方法来保证元素的唯一性，元素以二叉树的形式存放。\n\n#### Map接口\n\n- Map提供了一种映射关系，元素是以键值对（key-value）的形式存储的，能根据key快速查找value；\n- Map中的键值对以Entry类型的对象实例形式存在；\n- key值不能重复，value值可以重复；\n\n##### HashMap\n\n底层是哈希表数据结构，允许使用 null 值和 null 键，该集合是不同步的。将hashtable替代，jdk1.2.效率高。\n\n###### **[HashMap原理：](http://tracylihui.github.io/2015/07/01/Java%E9%9B%86%E5%90%88%E5%AD%A6%E4%B9%A01%EF%BC%9AHashMap%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/)**\n\n- HashMap底层就是一个数组结构，数组中的每一项又是一个链表。当新建一个HashMap的时候，就会初始化一个数组。\n\n\n- 数组中的每一项又是一个Entry，其中包含了key和value，也就是键值对，另外还包含了一个next的Entry指针\n\n\n- 因为持有下一个Entry指针，所以构成链表\n- 往HashMap中put元素的时候，先根据key的hashCode重新计算hash值\n- 根据hash值得到这个元素在数组中的位置（即下标）\n- 如果数组该位置上已经存放有其他元素了，那么在这个位置上的元素将以链表的形式存放，新加入的放在链头，最先加入的放在链尾。\n- 如果数组该位置上没有元素，就直接将该元素放到此数组中的该位置上\n- 从HashMap中get元素时，首先计算key的hashCode，找到数组中对应位置的某一元素，然后通过key的equals方法在对应位置的链表中找到需要的元素。\n\n###### 一句话原理总结：\n\n简单来说，HashMap在底层将key-value当作一个整体处理，这个整体就是一个Entry对象。HashMap底层采用一个Entry[]数组来保存所有的key-value，每个Entry包含了key-value，还包含了next的Entry指针，因此构成一个链表。当要存储一个Entry对象时，会根据hash算法决定在数组中的存储位置，再根据equals方法，决定其在该数组位置上的链表的存储位置；在需要取出一个Entry时，也会根据hash算法找到其在这个数组的存储位置，再根据equel方法，从该位置找到对应的Entry对象。\n\n###### hashmap两种遍历方式\n\n第一种：\n\n```java\nMap map = new HashMap();\n　　Iterator iter = map.entrySet().iterator();\n　　while (iter.hasNext()) {\n　　Map.Entry entry = (Map.Entry) iter.next();\n　　Object key = entry.getKey();\n　　Object val = entry.getValue();\n　　}\n```\n\n第二种：\n\n```java\n　Map map = new HashMap();\n　　Iterator iter = map.keySet().iterator();\n　　while (iter.hasNext()) {\n　　Object key = iter.next();\n　　Object val = map.get(key);\n　　}\n```\n\n###### 浅析ConcurrentHashMap\n\n- public V get(Object key)不涉及到锁，也就是说获得对象时没有使用锁；\n- put、remove方法要使用锁，但并不一定有锁争用，原因在于ConcurrentHashMap将缓存的变量分到多个Segment，每个Segment上有一个锁，只要多个线程访问的不是一个Segment就没有锁争用，就没有堵塞，各线程用各自的锁，ConcurrentHashMap缺省情况下生成16个Segment，也就是允许16个线程并发的更新而尽量没有锁争用；\n- Hashtable对get,put,remove都使用了同步操作，也就是说如果有线程正在遍历集合，其他的线程就暂时不能使用该集合了，这样无疑就很容易对性能和吞吐量造成影响。而ConcurrentHashMap则不同，它只对put,remove操作使用了同步操作，get操作并不影响\n- Hashtable在使用iterator遍历的时候，如果其他线程，包括本线程对Hashtable进行了put，remove等更新操作的话，就会抛出ConcurrentModificationException异常，但如果使用ConcurrentHashMap的话，就不用考虑这方面的问题了\n\n###### 浅析HashMap，HashTable，ConcurrentHashMap\n\n- HashMap如上所诉，不同步，线程不安全，不使用用与多线程高并发情况下\n- Hashtable，被遗弃的类，线程安全是因为在所有方法上都加了synchronized来实现线程安全，导致多线程访问效率低\n- Synchronized Map（通过Collections.synchronizedMap()来包装一个hashmap）和hashtable区别不大，唯一区别就是没有被遗弃\n- ConcurrentHashMap，默认允许16个线程读写这个map，不像Hashtable和Synchronized Map一样，没有锁整个整个map，而是划分了多个段（Segment），只会锁需要操作的那一段数据\n\n[点击查看详细博客](https://www.jianshu.com/p/c00308c32de4)\n\n[点击查看相关博客](http://blog.csdn.net/heng615975867/article/details/52799213)\n\n##### **TreeMap**\n\n底层是二叉树数据结构。线程不同步。可以用于给map集合中的键进行排序。\n\n#### 集合输出（遍历）\n\n- Iterator： 迭代输出，使用最多的输出方式\n- ListIterator：是Iterator的子接口，专门用于输出List中的内容。\n- foreach输出：JDK1.5之后提供的新功能，可以输出数组或集合。\n- for循环\n\n#### 集合的工具类\n\nCollections:集合框架的工具类。里面定义的都是静态方法。\n\n　　Collections和Collection有什么区别？\n\n　　　　Collection是集合框架中的一个顶层接口，它里面定义了单列集合的共性方法。\n\n　　　　　　它有两个常用的子接口，\n\n　　　　　　——List：对元素都有定义索引。有序的。可以重复元素。\n\n　　　　　　——Set：不可以重复元素。无序。\n\n　　　　Collections是集合框架中的一个工具类。该类中的方法都是静态的。\n\n　　　　　　提供的方法中有可以对list集合进行排序，二分查找等方法。\n\n　　　　　　通常常用的集合都是线程不安全的。因为要提高效率。\n\n　　　　　　如果多线程操作这些集合时，可以通过该工具类中的同步方法，将线程不安全的集合，转换成安全的。\n\n#### 总结\n\nList：add/remove/get/set。\n\n　　　　1，ArrayList：其实就是数组，容量一大，频繁增删就是噩梦，适合随机查找；\n\n　　　　2，LinkedList：增加了push/[pop|remove|pull]，其实都是removeFirst；\n\n　　　　3，Vector：历史遗留产物，同步版的ArrayList，代码和ArrayList太像；\n\n　　　　4，Stack：继承自Vector。Java里其实没有纯粹的Stack，可以自己实现，用组合的方式，封装一下LinkedList即可；\n\n　　　　5，Queue：本来是单独的一类，不过在SUN的JDK里就是用LinkedList来提供这个功能的，主要方法是offer/pull/peek，因此归到这里呢。\n\n　　Set：add/remove。可以用迭代器或者转换成list。\n\n　　　　1，HashSet：内部采用HashMap实现的；\n\n　　　　2，LinkedHashSet：采用LinkedHashMap实现；\n\n　　　　3，TreeSet：TreeMap。\n\n　　Map：put/get/remove。\n\n　　　　1，HashMap/HashTable：散列表，和ArrayList一样采用数组实现，超过初始容量会对性能有损耗；\n\n　　　　2，LinkedHashMap：继承自HashMap，但通过重写嵌套类HashMap.Entry实现了链表结构，同样有容量的问题；\n\n　　　　3，Properties：是继承的HashTable。\n\n　　　　顺便说一下Arrays.asList，这个方法的实现依赖一个嵌套类，这个嵌套类也叫ArrayList！\n\n#### 手写集合\n\n##### ArrayList\n\n```java\n/** \n * 手写ArrayList  \n */  \npublic class MyArrayList{  \n  \n  \n    private Object[] value = null;  \n  \n    private int size = 0;  \n  \n    MyArrayList() {  \n        value = new Object[10];  \n    }  \n  \n  \n    public boolean add(Object obj){  \n        if(size == value.length)  \n            expansion();  \n        value[size++]=obj;  \n        return true;  \n    }  \n  \n  \n    public Object get(int index){  \n        return value[index];  \n    }  \n  \n    public void remove(Object obj){  \n        Object[] obj2 = new Object[size];  \n        int index = 0;  \n        int id = 0;  \n        for (int i = 0; i <= size; i++) {  \n            if(!(value[i].toString().equals(obj.toString()))){  \n                obj2[index] = value[i];  \n                index ++;  \n            }else{  \n                id ++ ;  \n                if(id == 1)  \n                    size --;  \n                else{  \n                    obj2[index] = value[i];  \n                    index ++;  \n                }  \n            }  \n        }  \n        value = obj2;  \n    }  \n  \n    @SuppressWarnings(\"null\")  \n    public void set(int index,Object obj){  \n        Object[] newObj = new Object[size];;  \n        for (int i = 0; i < size; i++) {  \n            if(i == index)  \n                newObj[i] = obj;  \n            else  \n                newObj[i] = value[i];  \n        }  \n        value = newObj;  \n    }  \n  \n    public int size(){  \n        return size;  \n    }  \n  \n    private boolean expansion() {  \n        Object[] temp = new Object[value.length + 5];  \n        temp = value.clone();  \n        /** \n        * 注意：clone只对一维数组起作用，而不能用于二维数组， 因为java没有二维数组的概念，而只有数组的数组，二维 \n        * 数组存储的是几个一维数组的引用，而使用clone也只是 拷贝了这几个引用，说白了还是原来那几个一维数组对象。 \n        * 如果想用于二维数组，那么就遍历其中的一维数组，挨个 拷贝一维数组到目标二维数组中的一维数组下。 \n        */  \n        value = temp;  \n        return true;  \n    }  \n  \n  \n    public void clear(){  \n        size = 0;  \n        value = null;  \n    }  \n  \n    public static void main(String[] args) {  \n        MyArrayList ma = new MyArrayList();  \n        ma.add(\"hello\");  \n        ma.add(\"world\");  \n        ma.add(\"java\");  \n        System.out.println(ma.get(1));  \n        System.out.println(ma.size());  \n        ma.set(1, \"new\");  \n        System.out.println(ma.get(1));  \n        System.out.println(ma.size());  \n    }  \n  \n}  \n```\n\n- LinkedList\n\n```java\npublic class MyLinkedList<AnyType> {\n    private static class Node<AnyType>{\n        public AnyType data;\n        public Node<AnyType> prev;\n        public Node<AnyType> next;\n        public Node(AnyType d, Node<AnyType> p, Node<AnyType> n){\n            data = d;\n            prev = p;\n            next = n;\n        }\n    }\n\n    private int theSize;\n    private int modCount;\n    private Node<AnyType> beginMarker;\n    private Node<AnyType> endMarker;\n\n    public MyLinkedList(){\n        clear();\n    }\n\n    public void clear(){\n        beginMarker = new Node<AnyType>(null, null, null);\n        endMarker = new Node<AnyType>(null, beginMarker, null);\n        beginMarker.next = endMarker;\n        theSize = 0;\n    }\n\n    public int size(){\n        return theSize;\n    }\n    public boolean add(AnyType x){\n        add(size(), x);\n        return true;\n    }\n\n    public void add(int idx, AnyType x){\n        addBefore(getNode(idx), x);\n    }\n\n    public AnyType get(int idx){\n        return getNode(idx).data;\n    }\n\n    private void addBefore(Node<AnyType> p, AnyType x){\n        Node<AnyType> newNode = new Node<AnyType>(x, p.prev, p);\n        newNode.prev.next = newNode;\n        p.prev = newNode;\n        theSize++;\n        modCount++;\n    }\n\n    private Node<AnyType> getNode(int idx){\n        Node<AnyType> p;\n\n        if(idx < 0 || idx > size()){\n            System.out.println(\"IndexOutOfBoundsException\");\n        }\n\n        if(idx <= size()/2){\n            System.out.println(idx);\n            p = beginMarker.next;\n            for(int i = 0; i < idx; i++){\n                p = p.next;\n            }\n        }else{\n            p = endMarker;\n            for(int i = size(); i > idx; i--){\n                p = p.prev;\n            }\n        }\n\n        return p;\n\n    }\n\n    public boolean find(AnyType x){\n        Node<AnyType> p = beginMarker.next;\n        for(int i = 0; i < size(); i++){\n            if(p.data == x){\n                return true;\n            }\n            p = p.next;\n        }\n        return false;\n    }\n\n\n    public String toString(){\n        String s = \"\";\n        Node<AnyType> p = beginMarker.next;\n        for(int i = 0; i < size(); i++){\n            s += p.data +\",\";\n            p = p.next;\n        }\n        return s;\n    }\n\n\n}\n```","source":"_posts/回顾集合体系.md","raw":"---\ntitle: 回顾集合体系\ndate: 2015-12-26 11:11:19\ntags: \n- Android\ncategories: Android\n---\n\n集合体系整理\n\n<!--more-->\n\n#### 前言\n\n- 面向对象语言对事物的体现都是以对象的形式，所以为了方便对多个对象进行操作，就需要对对象进行存储\n- 数组虽然可以存储对象，但是长度上固定的\n- 集合的长度是可变的\n- 数组中**可以**存储基本数据类型\n- 集合中**只能**存储对象\n\n#### 集合体系图\n\n![](https://ws3.sinaimg.cn/large/006tKfTcgy1fmwkdnlaooj30i80budid.jpg)\n\n![集合体系图](https://ws1.sinaimg.cn/large/006tKfTcgy1fmwjo9kq19j31kw15d15f.jpg)\n\n#### Iterator接口\n\n- Iterator接口，这是一个用于遍历集合中元素的接口\n- 主要包含hashNext(),next(),remove()三种方法\n- 它的一个子接口LinkedIterator在它的基础上又添加了三种方法，分别是add(),previous(),hasPrevious()\n- Iterator接口，那么在遍历集合中元素的时候，只能往后遍历，被遍历后的元素不会在遍历到，通常无序集合实现的都是这个接口，比如HashSet，HashMap\n- 元素有序的集合，实现的一般都是LinkedIterator接口，实现这个接口的集合可以双向遍历，既可以通过next()访问下一个元素，又可以通过previous()访问前一个元素，比如ArrayList。\n\n#### Collection接口\n\n- Collection是集合类根接口，衍生出两个子类接口List和Set\n- Collection定义了集合框架的共性功能\n\n![Collection接口体系图](https://ws1.sinaimg.cn/large/006tKfTcgy1fmwjn5w2rrj31a00ls122.jpg)\n\n##### List接口\n\nList里存放的对象是有序的，同时也是可以重复的，List关注的是索引，拥有一系列和索引相关的方法，查询速度快。因为往list集合里插入或删除数据时，会伴随着后面数据的移动，所有插入删除数据速度慢。\n\n- **ArrayList：**线程不安全，查询速度快，元素有序，可重复\n- **Vector：**线程安全，但速度慢，已被ArrayList替代\n- **LinkedList：**链表结构，增删速度快\n\nLinkedList经常用在增删操作较多而查询操作很少的情况下，ArrayList则相反\n\n##### Set接口\n\nSet里存放的对象是无序（存入和取出的顺序不一定一致），不能重复的，集合中的对象不按特定的方式排序，只是简单地把对象加入集合中。\n\n- **HashSet：**：\n\n1. 底层数据结构是哈希表。是线程不安全的。不同步\n2. 通过元素的两个方法，hashCode和equals来保证唯一性\n3. 如果元素的HashCode值相同，才会判断equals是否为true。\n4. 如果元素的hashcode值不同，不会调用equals。\n5. 无序\n\n- **TreeSet：**\n\n1. 有序\n2. 线程不安全，可以对Set集合中的元素进行排序\n3. 通过compareTo或者compare方法来保证元素的唯一性，元素以二叉树的形式存放。\n\n#### Map接口\n\n- Map提供了一种映射关系，元素是以键值对（key-value）的形式存储的，能根据key快速查找value；\n- Map中的键值对以Entry类型的对象实例形式存在；\n- key值不能重复，value值可以重复；\n\n##### HashMap\n\n底层是哈希表数据结构，允许使用 null 值和 null 键，该集合是不同步的。将hashtable替代，jdk1.2.效率高。\n\n###### **[HashMap原理：](http://tracylihui.github.io/2015/07/01/Java%E9%9B%86%E5%90%88%E5%AD%A6%E4%B9%A01%EF%BC%9AHashMap%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/)**\n\n- HashMap底层就是一个数组结构，数组中的每一项又是一个链表。当新建一个HashMap的时候，就会初始化一个数组。\n\n\n- 数组中的每一项又是一个Entry，其中包含了key和value，也就是键值对，另外还包含了一个next的Entry指针\n\n\n- 因为持有下一个Entry指针，所以构成链表\n- 往HashMap中put元素的时候，先根据key的hashCode重新计算hash值\n- 根据hash值得到这个元素在数组中的位置（即下标）\n- 如果数组该位置上已经存放有其他元素了，那么在这个位置上的元素将以链表的形式存放，新加入的放在链头，最先加入的放在链尾。\n- 如果数组该位置上没有元素，就直接将该元素放到此数组中的该位置上\n- 从HashMap中get元素时，首先计算key的hashCode，找到数组中对应位置的某一元素，然后通过key的equals方法在对应位置的链表中找到需要的元素。\n\n###### 一句话原理总结：\n\n简单来说，HashMap在底层将key-value当作一个整体处理，这个整体就是一个Entry对象。HashMap底层采用一个Entry[]数组来保存所有的key-value，每个Entry包含了key-value，还包含了next的Entry指针，因此构成一个链表。当要存储一个Entry对象时，会根据hash算法决定在数组中的存储位置，再根据equals方法，决定其在该数组位置上的链表的存储位置；在需要取出一个Entry时，也会根据hash算法找到其在这个数组的存储位置，再根据equel方法，从该位置找到对应的Entry对象。\n\n###### hashmap两种遍历方式\n\n第一种：\n\n```java\nMap map = new HashMap();\n　　Iterator iter = map.entrySet().iterator();\n　　while (iter.hasNext()) {\n　　Map.Entry entry = (Map.Entry) iter.next();\n　　Object key = entry.getKey();\n　　Object val = entry.getValue();\n　　}\n```\n\n第二种：\n\n```java\n　Map map = new HashMap();\n　　Iterator iter = map.keySet().iterator();\n　　while (iter.hasNext()) {\n　　Object key = iter.next();\n　　Object val = map.get(key);\n　　}\n```\n\n###### 浅析ConcurrentHashMap\n\n- public V get(Object key)不涉及到锁，也就是说获得对象时没有使用锁；\n- put、remove方法要使用锁，但并不一定有锁争用，原因在于ConcurrentHashMap将缓存的变量分到多个Segment，每个Segment上有一个锁，只要多个线程访问的不是一个Segment就没有锁争用，就没有堵塞，各线程用各自的锁，ConcurrentHashMap缺省情况下生成16个Segment，也就是允许16个线程并发的更新而尽量没有锁争用；\n- Hashtable对get,put,remove都使用了同步操作，也就是说如果有线程正在遍历集合，其他的线程就暂时不能使用该集合了，这样无疑就很容易对性能和吞吐量造成影响。而ConcurrentHashMap则不同，它只对put,remove操作使用了同步操作，get操作并不影响\n- Hashtable在使用iterator遍历的时候，如果其他线程，包括本线程对Hashtable进行了put，remove等更新操作的话，就会抛出ConcurrentModificationException异常，但如果使用ConcurrentHashMap的话，就不用考虑这方面的问题了\n\n###### 浅析HashMap，HashTable，ConcurrentHashMap\n\n- HashMap如上所诉，不同步，线程不安全，不使用用与多线程高并发情况下\n- Hashtable，被遗弃的类，线程安全是因为在所有方法上都加了synchronized来实现线程安全，导致多线程访问效率低\n- Synchronized Map（通过Collections.synchronizedMap()来包装一个hashmap）和hashtable区别不大，唯一区别就是没有被遗弃\n- ConcurrentHashMap，默认允许16个线程读写这个map，不像Hashtable和Synchronized Map一样，没有锁整个整个map，而是划分了多个段（Segment），只会锁需要操作的那一段数据\n\n[点击查看详细博客](https://www.jianshu.com/p/c00308c32de4)\n\n[点击查看相关博客](http://blog.csdn.net/heng615975867/article/details/52799213)\n\n##### **TreeMap**\n\n底层是二叉树数据结构。线程不同步。可以用于给map集合中的键进行排序。\n\n#### 集合输出（遍历）\n\n- Iterator： 迭代输出，使用最多的输出方式\n- ListIterator：是Iterator的子接口，专门用于输出List中的内容。\n- foreach输出：JDK1.5之后提供的新功能，可以输出数组或集合。\n- for循环\n\n#### 集合的工具类\n\nCollections:集合框架的工具类。里面定义的都是静态方法。\n\n　　Collections和Collection有什么区别？\n\n　　　　Collection是集合框架中的一个顶层接口，它里面定义了单列集合的共性方法。\n\n　　　　　　它有两个常用的子接口，\n\n　　　　　　——List：对元素都有定义索引。有序的。可以重复元素。\n\n　　　　　　——Set：不可以重复元素。无序。\n\n　　　　Collections是集合框架中的一个工具类。该类中的方法都是静态的。\n\n　　　　　　提供的方法中有可以对list集合进行排序，二分查找等方法。\n\n　　　　　　通常常用的集合都是线程不安全的。因为要提高效率。\n\n　　　　　　如果多线程操作这些集合时，可以通过该工具类中的同步方法，将线程不安全的集合，转换成安全的。\n\n#### 总结\n\nList：add/remove/get/set。\n\n　　　　1，ArrayList：其实就是数组，容量一大，频繁增删就是噩梦，适合随机查找；\n\n　　　　2，LinkedList：增加了push/[pop|remove|pull]，其实都是removeFirst；\n\n　　　　3，Vector：历史遗留产物，同步版的ArrayList，代码和ArrayList太像；\n\n　　　　4，Stack：继承自Vector。Java里其实没有纯粹的Stack，可以自己实现，用组合的方式，封装一下LinkedList即可；\n\n　　　　5，Queue：本来是单独的一类，不过在SUN的JDK里就是用LinkedList来提供这个功能的，主要方法是offer/pull/peek，因此归到这里呢。\n\n　　Set：add/remove。可以用迭代器或者转换成list。\n\n　　　　1，HashSet：内部采用HashMap实现的；\n\n　　　　2，LinkedHashSet：采用LinkedHashMap实现；\n\n　　　　3，TreeSet：TreeMap。\n\n　　Map：put/get/remove。\n\n　　　　1，HashMap/HashTable：散列表，和ArrayList一样采用数组实现，超过初始容量会对性能有损耗；\n\n　　　　2，LinkedHashMap：继承自HashMap，但通过重写嵌套类HashMap.Entry实现了链表结构，同样有容量的问题；\n\n　　　　3，Properties：是继承的HashTable。\n\n　　　　顺便说一下Arrays.asList，这个方法的实现依赖一个嵌套类，这个嵌套类也叫ArrayList！\n\n#### 手写集合\n\n##### ArrayList\n\n```java\n/** \n * 手写ArrayList  \n */  \npublic class MyArrayList{  \n  \n  \n    private Object[] value = null;  \n  \n    private int size = 0;  \n  \n    MyArrayList() {  \n        value = new Object[10];  \n    }  \n  \n  \n    public boolean add(Object obj){  \n        if(size == value.length)  \n            expansion();  \n        value[size++]=obj;  \n        return true;  \n    }  \n  \n  \n    public Object get(int index){  \n        return value[index];  \n    }  \n  \n    public void remove(Object obj){  \n        Object[] obj2 = new Object[size];  \n        int index = 0;  \n        int id = 0;  \n        for (int i = 0; i <= size; i++) {  \n            if(!(value[i].toString().equals(obj.toString()))){  \n                obj2[index] = value[i];  \n                index ++;  \n            }else{  \n                id ++ ;  \n                if(id == 1)  \n                    size --;  \n                else{  \n                    obj2[index] = value[i];  \n                    index ++;  \n                }  \n            }  \n        }  \n        value = obj2;  \n    }  \n  \n    @SuppressWarnings(\"null\")  \n    public void set(int index,Object obj){  \n        Object[] newObj = new Object[size];;  \n        for (int i = 0; i < size; i++) {  \n            if(i == index)  \n                newObj[i] = obj;  \n            else  \n                newObj[i] = value[i];  \n        }  \n        value = newObj;  \n    }  \n  \n    public int size(){  \n        return size;  \n    }  \n  \n    private boolean expansion() {  \n        Object[] temp = new Object[value.length + 5];  \n        temp = value.clone();  \n        /** \n        * 注意：clone只对一维数组起作用，而不能用于二维数组， 因为java没有二维数组的概念，而只有数组的数组，二维 \n        * 数组存储的是几个一维数组的引用，而使用clone也只是 拷贝了这几个引用，说白了还是原来那几个一维数组对象。 \n        * 如果想用于二维数组，那么就遍历其中的一维数组，挨个 拷贝一维数组到目标二维数组中的一维数组下。 \n        */  \n        value = temp;  \n        return true;  \n    }  \n  \n  \n    public void clear(){  \n        size = 0;  \n        value = null;  \n    }  \n  \n    public static void main(String[] args) {  \n        MyArrayList ma = new MyArrayList();  \n        ma.add(\"hello\");  \n        ma.add(\"world\");  \n        ma.add(\"java\");  \n        System.out.println(ma.get(1));  \n        System.out.println(ma.size());  \n        ma.set(1, \"new\");  \n        System.out.println(ma.get(1));  \n        System.out.println(ma.size());  \n    }  \n  \n}  \n```\n\n- LinkedList\n\n```java\npublic class MyLinkedList<AnyType> {\n    private static class Node<AnyType>{\n        public AnyType data;\n        public Node<AnyType> prev;\n        public Node<AnyType> next;\n        public Node(AnyType d, Node<AnyType> p, Node<AnyType> n){\n            data = d;\n            prev = p;\n            next = n;\n        }\n    }\n\n    private int theSize;\n    private int modCount;\n    private Node<AnyType> beginMarker;\n    private Node<AnyType> endMarker;\n\n    public MyLinkedList(){\n        clear();\n    }\n\n    public void clear(){\n        beginMarker = new Node<AnyType>(null, null, null);\n        endMarker = new Node<AnyType>(null, beginMarker, null);\n        beginMarker.next = endMarker;\n        theSize = 0;\n    }\n\n    public int size(){\n        return theSize;\n    }\n    public boolean add(AnyType x){\n        add(size(), x);\n        return true;\n    }\n\n    public void add(int idx, AnyType x){\n        addBefore(getNode(idx), x);\n    }\n\n    public AnyType get(int idx){\n        return getNode(idx).data;\n    }\n\n    private void addBefore(Node<AnyType> p, AnyType x){\n        Node<AnyType> newNode = new Node<AnyType>(x, p.prev, p);\n        newNode.prev.next = newNode;\n        p.prev = newNode;\n        theSize++;\n        modCount++;\n    }\n\n    private Node<AnyType> getNode(int idx){\n        Node<AnyType> p;\n\n        if(idx < 0 || idx > size()){\n            System.out.println(\"IndexOutOfBoundsException\");\n        }\n\n        if(idx <= size()/2){\n            System.out.println(idx);\n            p = beginMarker.next;\n            for(int i = 0; i < idx; i++){\n                p = p.next;\n            }\n        }else{\n            p = endMarker;\n            for(int i = size(); i > idx; i--){\n                p = p.prev;\n            }\n        }\n\n        return p;\n\n    }\n\n    public boolean find(AnyType x){\n        Node<AnyType> p = beginMarker.next;\n        for(int i = 0; i < size(); i++){\n            if(p.data == x){\n                return true;\n            }\n            p = p.next;\n        }\n        return false;\n    }\n\n\n    public String toString(){\n        String s = \"\";\n        Node<AnyType> p = beginMarker.next;\n        for(int i = 0; i < size(); i++){\n            s += p.data +\",\";\n            p = p.next;\n        }\n        return s;\n    }\n\n\n}\n```","slug":"回顾集合体系","published":1,"updated":"2018-07-19T01:49:44.607Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6n9002r1kygdfrgab5b","content":"<p>集合体系整理</p>\n<a id=\"more\"></a>\n<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><ul>\n<li>面向对象语言对事物的体现都是以对象的形式，所以为了方便对多个对象进行操作，就需要对对象进行存储</li>\n<li>数组虽然可以存储对象，但是长度上固定的</li>\n<li>集合的长度是可变的</li>\n<li>数组中<strong>可以</strong>存储基本数据类型</li>\n<li>集合中<strong>只能</strong>存储对象</li>\n</ul>\n<h4 id=\"集合体系图\"><a href=\"#集合体系图\" class=\"headerlink\" title=\"集合体系图\"></a>集合体系图</h4><p><img src=\"https://ws3.sinaimg.cn/large/006tKfTcgy1fmwkdnlaooj30i80budid.jpg\" alt=\"\"></p>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tKfTcgy1fmwjo9kq19j31kw15d15f.jpg\" alt=\"集合体系图\"></p>\n<h4 id=\"Iterator接口\"><a href=\"#Iterator接口\" class=\"headerlink\" title=\"Iterator接口\"></a>Iterator接口</h4><ul>\n<li>Iterator接口，这是一个用于遍历集合中元素的接口</li>\n<li>主要包含hashNext(),next(),remove()三种方法</li>\n<li>它的一个子接口LinkedIterator在它的基础上又添加了三种方法，分别是add(),previous(),hasPrevious()</li>\n<li>Iterator接口，那么在遍历集合中元素的时候，只能往后遍历，被遍历后的元素不会在遍历到，通常无序集合实现的都是这个接口，比如HashSet，HashMap</li>\n<li>元素有序的集合，实现的一般都是LinkedIterator接口，实现这个接口的集合可以双向遍历，既可以通过next()访问下一个元素，又可以通过previous()访问前一个元素，比如ArrayList。</li>\n</ul>\n<h4 id=\"Collection接口\"><a href=\"#Collection接口\" class=\"headerlink\" title=\"Collection接口\"></a>Collection接口</h4><ul>\n<li>Collection是集合类根接口，衍生出两个子类接口List和Set</li>\n<li>Collection定义了集合框架的共性功能</li>\n</ul>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tKfTcgy1fmwjn5w2rrj31a00ls122.jpg\" alt=\"Collection接口体系图\"></p>\n<h5 id=\"List接口\"><a href=\"#List接口\" class=\"headerlink\" title=\"List接口\"></a>List接口</h5><p>List里存放的对象是有序的，同时也是可以重复的，List关注的是索引，拥有一系列和索引相关的方法，查询速度快。因为往list集合里插入或删除数据时，会伴随着后面数据的移动，所有插入删除数据速度慢。</p>\n<ul>\n<li><strong>ArrayList：</strong>线程不安全，查询速度快，元素有序，可重复</li>\n<li><strong>Vector：</strong>线程安全，但速度慢，已被ArrayList替代</li>\n<li><strong>LinkedList：</strong>链表结构，增删速度快</li>\n</ul>\n<p>LinkedList经常用在增删操作较多而查询操作很少的情况下，ArrayList则相反</p>\n<h5 id=\"Set接口\"><a href=\"#Set接口\" class=\"headerlink\" title=\"Set接口\"></a>Set接口</h5><p>Set里存放的对象是无序（存入和取出的顺序不一定一致），不能重复的，集合中的对象不按特定的方式排序，只是简单地把对象加入集合中。</p>\n<ul>\n<li><strong>HashSet：</strong>：</li>\n</ul>\n<ol>\n<li>底层数据结构是哈希表。是线程不安全的。不同步</li>\n<li>通过元素的两个方法，hashCode和equals来保证唯一性</li>\n<li>如果元素的HashCode值相同，才会判断equals是否为true。</li>\n<li>如果元素的hashcode值不同，不会调用equals。</li>\n<li>无序</li>\n</ol>\n<ul>\n<li><strong>TreeSet：</strong></li>\n</ul>\n<ol>\n<li>有序</li>\n<li>线程不安全，可以对Set集合中的元素进行排序</li>\n<li>通过compareTo或者compare方法来保证元素的唯一性，元素以二叉树的形式存放。</li>\n</ol>\n<h4 id=\"Map接口\"><a href=\"#Map接口\" class=\"headerlink\" title=\"Map接口\"></a>Map接口</h4><ul>\n<li>Map提供了一种映射关系，元素是以键值对（key-value）的形式存储的，能根据key快速查找value；</li>\n<li>Map中的键值对以Entry类型的对象实例形式存在；</li>\n<li>key值不能重复，value值可以重复；</li>\n</ul>\n<h5 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h5><p>底层是哈希表数据结构，允许使用 null 值和 null 键，该集合是不同步的。将hashtable替代，jdk1.2.效率高。</p>\n<h6 id=\"HashMap原理：\"><a href=\"#HashMap原理：\" class=\"headerlink\" title=\"HashMap原理：\"></a><strong><a href=\"http://tracylihui.github.io/2015/07/01/Java%E9%9B%86%E5%90%88%E5%AD%A6%E4%B9%A01%EF%BC%9AHashMap%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/\" target=\"_blank\" rel=\"external\">HashMap原理：</a></strong></h6><ul>\n<li>HashMap底层就是一个数组结构，数组中的每一项又是一个链表。当新建一个HashMap的时候，就会初始化一个数组。</li>\n</ul>\n<ul>\n<li>数组中的每一项又是一个Entry，其中包含了key和value，也就是键值对，另外还包含了一个next的Entry指针</li>\n</ul>\n<ul>\n<li>因为持有下一个Entry指针，所以构成链表</li>\n<li>往HashMap中put元素的时候，先根据key的hashCode重新计算hash值</li>\n<li>根据hash值得到这个元素在数组中的位置（即下标）</li>\n<li>如果数组该位置上已经存放有其他元素了，那么在这个位置上的元素将以链表的形式存放，新加入的放在链头，最先加入的放在链尾。</li>\n<li>如果数组该位置上没有元素，就直接将该元素放到此数组中的该位置上</li>\n<li>从HashMap中get元素时，首先计算key的hashCode，找到数组中对应位置的某一元素，然后通过key的equals方法在对应位置的链表中找到需要的元素。</li>\n</ul>\n<h6 id=\"一句话原理总结：\"><a href=\"#一句话原理总结：\" class=\"headerlink\" title=\"一句话原理总结：\"></a>一句话原理总结：</h6><p>简单来说，HashMap在底层将key-value当作一个整体处理，这个整体就是一个Entry对象。HashMap底层采用一个Entry[]数组来保存所有的key-value，每个Entry包含了key-value，还包含了next的Entry指针，因此构成一个链表。当要存储一个Entry对象时，会根据hash算法决定在数组中的存储位置，再根据equals方法，决定其在该数组位置上的链表的存储位置；在需要取出一个Entry时，也会根据hash算法找到其在这个数组的存储位置，再根据equel方法，从该位置找到对应的Entry对象。</p>\n<h6 id=\"hashmap两种遍历方式\"><a href=\"#hashmap两种遍历方式\" class=\"headerlink\" title=\"hashmap两种遍历方式\"></a>hashmap两种遍历方式</h6><p>第一种：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Map map = <span class=\"keyword\">new</span> HashMap();</div><div class=\"line\">　　Iterator iter = map.entrySet().iterator();</div><div class=\"line\">　　<span class=\"keyword\">while</span> (iter.hasNext()) &#123;</div><div class=\"line\">　　Map.Entry entry = (Map.Entry) iter.next();</div><div class=\"line\">　　Object key = entry.getKey();</div><div class=\"line\">　　Object val = entry.getValue();</div><div class=\"line\">　　&#125;</div></pre></td></tr></table></figure>\n<p>第二种：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">　Map map = <span class=\"keyword\">new</span> HashMap();</div><div class=\"line\">　　Iterator iter = map.keySet().iterator();</div><div class=\"line\">　　<span class=\"keyword\">while</span> (iter.hasNext()) &#123;</div><div class=\"line\">　　Object key = iter.next();</div><div class=\"line\">　　Object val = map.get(key);</div><div class=\"line\">　　&#125;</div></pre></td></tr></table></figure>\n<h6 id=\"浅析ConcurrentHashMap\"><a href=\"#浅析ConcurrentHashMap\" class=\"headerlink\" title=\"浅析ConcurrentHashMap\"></a>浅析ConcurrentHashMap</h6><ul>\n<li>public V get(Object key)不涉及到锁，也就是说获得对象时没有使用锁；</li>\n<li>put、remove方法要使用锁，但并不一定有锁争用，原因在于ConcurrentHashMap将缓存的变量分到多个Segment，每个Segment上有一个锁，只要多个线程访问的不是一个Segment就没有锁争用，就没有堵塞，各线程用各自的锁，ConcurrentHashMap缺省情况下生成16个Segment，也就是允许16个线程并发的更新而尽量没有锁争用；</li>\n<li>Hashtable对get,put,remove都使用了同步操作，也就是说如果有线程正在遍历集合，其他的线程就暂时不能使用该集合了，这样无疑就很容易对性能和吞吐量造成影响。而ConcurrentHashMap则不同，它只对put,remove操作使用了同步操作，get操作并不影响</li>\n<li>Hashtable在使用iterator遍历的时候，如果其他线程，包括本线程对Hashtable进行了put，remove等更新操作的话，就会抛出ConcurrentModificationException异常，但如果使用ConcurrentHashMap的话，就不用考虑这方面的问题了</li>\n</ul>\n<h6 id=\"浅析HashMap，HashTable，ConcurrentHashMap\"><a href=\"#浅析HashMap，HashTable，ConcurrentHashMap\" class=\"headerlink\" title=\"浅析HashMap，HashTable，ConcurrentHashMap\"></a>浅析HashMap，HashTable，ConcurrentHashMap</h6><ul>\n<li>HashMap如上所诉，不同步，线程不安全，不使用用与多线程高并发情况下</li>\n<li>Hashtable，被遗弃的类，线程安全是因为在所有方法上都加了synchronized来实现线程安全，导致多线程访问效率低</li>\n<li>Synchronized Map（通过Collections.synchronizedMap()来包装一个hashmap）和hashtable区别不大，唯一区别就是没有被遗弃</li>\n<li>ConcurrentHashMap，默认允许16个线程读写这个map，不像Hashtable和Synchronized Map一样，没有锁整个整个map，而是划分了多个段（Segment），只会锁需要操作的那一段数据</li>\n</ul>\n<p><a href=\"https://www.jianshu.com/p/c00308c32de4\" target=\"_blank\" rel=\"external\">点击查看详细博客</a></p>\n<p><a href=\"http://blog.csdn.net/heng615975867/article/details/52799213\" target=\"_blank\" rel=\"external\">点击查看相关博客</a></p>\n<h5 id=\"TreeMap\"><a href=\"#TreeMap\" class=\"headerlink\" title=\"TreeMap\"></a><strong>TreeMap</strong></h5><p>底层是二叉树数据结构。线程不同步。可以用于给map集合中的键进行排序。</p>\n<h4 id=\"集合输出（遍历）\"><a href=\"#集合输出（遍历）\" class=\"headerlink\" title=\"集合输出（遍历）\"></a>集合输出（遍历）</h4><ul>\n<li>Iterator： 迭代输出，使用最多的输出方式</li>\n<li>ListIterator：是Iterator的子接口，专门用于输出List中的内容。</li>\n<li>foreach输出：JDK1.5之后提供的新功能，可以输出数组或集合。</li>\n<li>for循环</li>\n</ul>\n<h4 id=\"集合的工具类\"><a href=\"#集合的工具类\" class=\"headerlink\" title=\"集合的工具类\"></a>集合的工具类</h4><p>Collections:集合框架的工具类。里面定义的都是静态方法。</p>\n<p>　　Collections和Collection有什么区别？</p>\n<p>　　　　Collection是集合框架中的一个顶层接口，它里面定义了单列集合的共性方法。</p>\n<p>　　　　　　它有两个常用的子接口，</p>\n<p>　　　　　　——List：对元素都有定义索引。有序的。可以重复元素。</p>\n<p>　　　　　　——Set：不可以重复元素。无序。</p>\n<p>　　　　Collections是集合框架中的一个工具类。该类中的方法都是静态的。</p>\n<p>　　　　　　提供的方法中有可以对list集合进行排序，二分查找等方法。</p>\n<p>　　　　　　通常常用的集合都是线程不安全的。因为要提高效率。</p>\n<p>　　　　　　如果多线程操作这些集合时，可以通过该工具类中的同步方法，将线程不安全的集合，转换成安全的。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>List：add/remove/get/set。</p>\n<p>　　　　1，ArrayList：其实就是数组，容量一大，频繁增删就是噩梦，适合随机查找；</p>\n<p>　　　　2，LinkedList：增加了push/[pop|remove|pull]，其实都是removeFirst；</p>\n<p>　　　　3，Vector：历史遗留产物，同步版的ArrayList，代码和ArrayList太像；</p>\n<p>　　　　4，Stack：继承自Vector。Java里其实没有纯粹的Stack，可以自己实现，用组合的方式，封装一下LinkedList即可；</p>\n<p>　　　　5，Queue：本来是单独的一类，不过在SUN的JDK里就是用LinkedList来提供这个功能的，主要方法是offer/pull/peek，因此归到这里呢。</p>\n<p>　　Set：add/remove。可以用迭代器或者转换成list。</p>\n<p>　　　　1，HashSet：内部采用HashMap实现的；</p>\n<p>　　　　2，LinkedHashSet：采用LinkedHashMap实现；</p>\n<p>　　　　3，TreeSet：TreeMap。</p>\n<p>　　Map：put/get/remove。</p>\n<p>　　　　1，HashMap/HashTable：散列表，和ArrayList一样采用数组实现，超过初始容量会对性能有损耗；</p>\n<p>　　　　2，LinkedHashMap：继承自HashMap，但通过重写嵌套类HashMap.Entry实现了链表结构，同样有容量的问题；</p>\n<p>　　　　3，Properties：是继承的HashTable。</p>\n<p>　　　　顺便说一下Arrays.asList，这个方法的实现依赖一个嵌套类，这个嵌套类也叫ArrayList！</p>\n<h4 id=\"手写集合\"><a href=\"#手写集合\" class=\"headerlink\" title=\"手写集合\"></a>手写集合</h4><h5 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** </span></div><div class=\"line\"> * 手写ArrayList  </div><div class=\"line\"> */  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyArrayList</span></span>&#123;  </div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">private</span> Object[] value = <span class=\"keyword\">null</span>;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size = <span class=\"number\">0</span>;  </div><div class=\"line\">  </div><div class=\"line\">    MyArrayList() &#123;  </div><div class=\"line\">        value = <span class=\"keyword\">new</span> Object[<span class=\"number\">10</span>];  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(Object obj)</span></span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span>(size == value.length)  </div><div class=\"line\">            expansion();  </div><div class=\"line\">        value[size++]=obj;  </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> value[index];  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(Object obj)</span></span>&#123;  </div><div class=\"line\">        Object[] obj2 = <span class=\"keyword\">new</span> Object[size];  </div><div class=\"line\">        <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;  </div><div class=\"line\">        <span class=\"keyword\">int</span> id = <span class=\"number\">0</span>;  </div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= size; i++) &#123;  </div><div class=\"line\">            <span class=\"keyword\">if</span>(!(value[i].toString().equals(obj.toString())))&#123;  </div><div class=\"line\">                obj2[index] = value[i];  </div><div class=\"line\">                index ++;  </div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;  </div><div class=\"line\">                id ++ ;  </div><div class=\"line\">                <span class=\"keyword\">if</span>(id == <span class=\"number\">1</span>)  </div><div class=\"line\">                    size --;  </div><div class=\"line\">                <span class=\"keyword\">else</span>&#123;  </div><div class=\"line\">                    obj2[index] = value[i];  </div><div class=\"line\">                    index ++;  </div><div class=\"line\">                &#125;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        value = obj2;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"null\"</span>)  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> index,Object obj)</span></span>&#123;  </div><div class=\"line\">        Object[] newObj = <span class=\"keyword\">new</span> Object[size];;  </div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;  </div><div class=\"line\">            <span class=\"keyword\">if</span>(i == index)  </div><div class=\"line\">                newObj[i] = obj;  </div><div class=\"line\">            <span class=\"keyword\">else</span>  </div><div class=\"line\">                newObj[i] = value[i];  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        value = newObj;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> size;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">expansion</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        Object[] temp = <span class=\"keyword\">new</span> Object[value.length + <span class=\"number\">5</span>];  </div><div class=\"line\">        temp = value.clone();  </div><div class=\"line\">        <span class=\"comment\">/** </span></div><div class=\"line\">        * 注意：clone只对一维数组起作用，而不能用于二维数组， 因为java没有二维数组的概念，而只有数组的数组，二维 </div><div class=\"line\">        * 数组存储的是几个一维数组的引用，而使用clone也只是 拷贝了这几个引用，说白了还是原来那几个一维数组对象。 </div><div class=\"line\">        * 如果想用于二维数组，那么就遍历其中的一维数组，挨个 拷贝一维数组到目标二维数组中的一维数组下。 </div><div class=\"line\">        */  </div><div class=\"line\">        value = temp;  </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">        size = <span class=\"number\">0</span>;  </div><div class=\"line\">        value = <span class=\"keyword\">null</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </div><div class=\"line\">        MyArrayList ma = <span class=\"keyword\">new</span> MyArrayList();  </div><div class=\"line\">        ma.add(<span class=\"string\">\"hello\"</span>);  </div><div class=\"line\">        ma.add(<span class=\"string\">\"world\"</span>);  </div><div class=\"line\">        ma.add(<span class=\"string\">\"java\"</span>);  </div><div class=\"line\">        System.out.println(ma.get(<span class=\"number\">1</span>));  </div><div class=\"line\">        System.out.println(ma.size());  </div><div class=\"line\">        ma.set(<span class=\"number\">1</span>, <span class=\"string\">\"new\"</span>);  </div><div class=\"line\">        System.out.println(ma.get(<span class=\"number\">1</span>));  </div><div class=\"line\">        System.out.println(ma.size());  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>LinkedList</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLinkedList</span>&lt;<span class=\"title\">AnyType</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">AnyType</span>&gt;</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> AnyType data;</div><div class=\"line\">        <span class=\"keyword\">public</span> Node&lt;AnyType&gt; prev;</div><div class=\"line\">        <span class=\"keyword\">public</span> Node&lt;AnyType&gt; next;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(AnyType d, Node&lt;AnyType&gt; p, Node&lt;AnyType&gt; n)</span></span>&#123;</div><div class=\"line\">            data = d;</div><div class=\"line\">            prev = p;</div><div class=\"line\">            next = n;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> theSize;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> modCount;</div><div class=\"line\">    <span class=\"keyword\">private</span> Node&lt;AnyType&gt; beginMarker;</div><div class=\"line\">    <span class=\"keyword\">private</span> Node&lt;AnyType&gt; endMarker;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyLinkedList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        clear();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        beginMarker = <span class=\"keyword\">new</span> Node&lt;AnyType&gt;(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">        endMarker = <span class=\"keyword\">new</span> Node&lt;AnyType&gt;(<span class=\"keyword\">null</span>, beginMarker, <span class=\"keyword\">null</span>);</div><div class=\"line\">        beginMarker.next = endMarker;</div><div class=\"line\">        theSize = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> theSize;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(AnyType x)</span></span>&#123;</div><div class=\"line\">        add(size(), x);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> idx, AnyType x)</span></span>&#123;</div><div class=\"line\">        addBefore(getNode(idx), x);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> AnyType <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> idx)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> getNode(idx).data;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addBefore</span><span class=\"params\">(Node&lt;AnyType&gt; p, AnyType x)</span></span>&#123;</div><div class=\"line\">        Node&lt;AnyType&gt; newNode = <span class=\"keyword\">new</span> Node&lt;AnyType&gt;(x, p.prev, p);</div><div class=\"line\">        newNode.prev.next = newNode;</div><div class=\"line\">        p.prev = newNode;</div><div class=\"line\">        theSize++;</div><div class=\"line\">        modCount++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node&lt;AnyType&gt; <span class=\"title\">getNode</span><span class=\"params\">(<span class=\"keyword\">int</span> idx)</span></span>&#123;</div><div class=\"line\">        Node&lt;AnyType&gt; p;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>(idx &lt; <span class=\"number\">0</span> || idx &gt; size())&#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"IndexOutOfBoundsException\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>(idx &lt;= size()/<span class=\"number\">2</span>)&#123;</div><div class=\"line\">            System.out.println(idx);</div><div class=\"line\">            p = beginMarker.next;</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; idx; i++)&#123;</div><div class=\"line\">                p = p.next;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            p = endMarker;</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = size(); i &gt; idx; i--)&#123;</div><div class=\"line\">                p = p.prev;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> p;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">find</span><span class=\"params\">(AnyType x)</span></span>&#123;</div><div class=\"line\">        Node&lt;AnyType&gt; p = beginMarker.next;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size(); i++)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(p.data == x)&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            p = p.next;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        String s = <span class=\"string\">\"\"</span>;</div><div class=\"line\">        Node&lt;AnyType&gt; p = beginMarker.next;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size(); i++)&#123;</div><div class=\"line\">            s += p.data +<span class=\"string\">\",\"</span>;</div><div class=\"line\">            p = p.next;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> s;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"<p>集合体系整理</p>","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><ul>\n<li>面向对象语言对事物的体现都是以对象的形式，所以为了方便对多个对象进行操作，就需要对对象进行存储</li>\n<li>数组虽然可以存储对象，但是长度上固定的</li>\n<li>集合的长度是可变的</li>\n<li>数组中<strong>可以</strong>存储基本数据类型</li>\n<li>集合中<strong>只能</strong>存储对象</li>\n</ul>\n<h4 id=\"集合体系图\"><a href=\"#集合体系图\" class=\"headerlink\" title=\"集合体系图\"></a>集合体系图</h4><p><img src=\"https://ws3.sinaimg.cn/large/006tKfTcgy1fmwkdnlaooj30i80budid.jpg\" alt=\"\"></p>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tKfTcgy1fmwjo9kq19j31kw15d15f.jpg\" alt=\"集合体系图\"></p>\n<h4 id=\"Iterator接口\"><a href=\"#Iterator接口\" class=\"headerlink\" title=\"Iterator接口\"></a>Iterator接口</h4><ul>\n<li>Iterator接口，这是一个用于遍历集合中元素的接口</li>\n<li>主要包含hashNext(),next(),remove()三种方法</li>\n<li>它的一个子接口LinkedIterator在它的基础上又添加了三种方法，分别是add(),previous(),hasPrevious()</li>\n<li>Iterator接口，那么在遍历集合中元素的时候，只能往后遍历，被遍历后的元素不会在遍历到，通常无序集合实现的都是这个接口，比如HashSet，HashMap</li>\n<li>元素有序的集合，实现的一般都是LinkedIterator接口，实现这个接口的集合可以双向遍历，既可以通过next()访问下一个元素，又可以通过previous()访问前一个元素，比如ArrayList。</li>\n</ul>\n<h4 id=\"Collection接口\"><a href=\"#Collection接口\" class=\"headerlink\" title=\"Collection接口\"></a>Collection接口</h4><ul>\n<li>Collection是集合类根接口，衍生出两个子类接口List和Set</li>\n<li>Collection定义了集合框架的共性功能</li>\n</ul>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tKfTcgy1fmwjn5w2rrj31a00ls122.jpg\" alt=\"Collection接口体系图\"></p>\n<h5 id=\"List接口\"><a href=\"#List接口\" class=\"headerlink\" title=\"List接口\"></a>List接口</h5><p>List里存放的对象是有序的，同时也是可以重复的，List关注的是索引，拥有一系列和索引相关的方法，查询速度快。因为往list集合里插入或删除数据时，会伴随着后面数据的移动，所有插入删除数据速度慢。</p>\n<ul>\n<li><strong>ArrayList：</strong>线程不安全，查询速度快，元素有序，可重复</li>\n<li><strong>Vector：</strong>线程安全，但速度慢，已被ArrayList替代</li>\n<li><strong>LinkedList：</strong>链表结构，增删速度快</li>\n</ul>\n<p>LinkedList经常用在增删操作较多而查询操作很少的情况下，ArrayList则相反</p>\n<h5 id=\"Set接口\"><a href=\"#Set接口\" class=\"headerlink\" title=\"Set接口\"></a>Set接口</h5><p>Set里存放的对象是无序（存入和取出的顺序不一定一致），不能重复的，集合中的对象不按特定的方式排序，只是简单地把对象加入集合中。</p>\n<ul>\n<li><strong>HashSet：</strong>：</li>\n</ul>\n<ol>\n<li>底层数据结构是哈希表。是线程不安全的。不同步</li>\n<li>通过元素的两个方法，hashCode和equals来保证唯一性</li>\n<li>如果元素的HashCode值相同，才会判断equals是否为true。</li>\n<li>如果元素的hashcode值不同，不会调用equals。</li>\n<li>无序</li>\n</ol>\n<ul>\n<li><strong>TreeSet：</strong></li>\n</ul>\n<ol>\n<li>有序</li>\n<li>线程不安全，可以对Set集合中的元素进行排序</li>\n<li>通过compareTo或者compare方法来保证元素的唯一性，元素以二叉树的形式存放。</li>\n</ol>\n<h4 id=\"Map接口\"><a href=\"#Map接口\" class=\"headerlink\" title=\"Map接口\"></a>Map接口</h4><ul>\n<li>Map提供了一种映射关系，元素是以键值对（key-value）的形式存储的，能根据key快速查找value；</li>\n<li>Map中的键值对以Entry类型的对象实例形式存在；</li>\n<li>key值不能重复，value值可以重复；</li>\n</ul>\n<h5 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h5><p>底层是哈希表数据结构，允许使用 null 值和 null 键，该集合是不同步的。将hashtable替代，jdk1.2.效率高。</p>\n<h6 id=\"HashMap原理：\"><a href=\"#HashMap原理：\" class=\"headerlink\" title=\"HashMap原理：\"></a><strong><a href=\"http://tracylihui.github.io/2015/07/01/Java%E9%9B%86%E5%90%88%E5%AD%A6%E4%B9%A01%EF%BC%9AHashMap%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/\">HashMap原理：</a></strong></h6><ul>\n<li>HashMap底层就是一个数组结构，数组中的每一项又是一个链表。当新建一个HashMap的时候，就会初始化一个数组。</li>\n</ul>\n<ul>\n<li>数组中的每一项又是一个Entry，其中包含了key和value，也就是键值对，另外还包含了一个next的Entry指针</li>\n</ul>\n<ul>\n<li>因为持有下一个Entry指针，所以构成链表</li>\n<li>往HashMap中put元素的时候，先根据key的hashCode重新计算hash值</li>\n<li>根据hash值得到这个元素在数组中的位置（即下标）</li>\n<li>如果数组该位置上已经存放有其他元素了，那么在这个位置上的元素将以链表的形式存放，新加入的放在链头，最先加入的放在链尾。</li>\n<li>如果数组该位置上没有元素，就直接将该元素放到此数组中的该位置上</li>\n<li>从HashMap中get元素时，首先计算key的hashCode，找到数组中对应位置的某一元素，然后通过key的equals方法在对应位置的链表中找到需要的元素。</li>\n</ul>\n<h6 id=\"一句话原理总结：\"><a href=\"#一句话原理总结：\" class=\"headerlink\" title=\"一句话原理总结：\"></a>一句话原理总结：</h6><p>简单来说，HashMap在底层将key-value当作一个整体处理，这个整体就是一个Entry对象。HashMap底层采用一个Entry[]数组来保存所有的key-value，每个Entry包含了key-value，还包含了next的Entry指针，因此构成一个链表。当要存储一个Entry对象时，会根据hash算法决定在数组中的存储位置，再根据equals方法，决定其在该数组位置上的链表的存储位置；在需要取出一个Entry时，也会根据hash算法找到其在这个数组的存储位置，再根据equel方法，从该位置找到对应的Entry对象。</p>\n<h6 id=\"hashmap两种遍历方式\"><a href=\"#hashmap两种遍历方式\" class=\"headerlink\" title=\"hashmap两种遍历方式\"></a>hashmap两种遍历方式</h6><p>第一种：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Map map = <span class=\"keyword\">new</span> HashMap();</div><div class=\"line\">　　Iterator iter = map.entrySet().iterator();</div><div class=\"line\">　　<span class=\"keyword\">while</span> (iter.hasNext()) &#123;</div><div class=\"line\">　　Map.Entry entry = (Map.Entry) iter.next();</div><div class=\"line\">　　Object key = entry.getKey();</div><div class=\"line\">　　Object val = entry.getValue();</div><div class=\"line\">　　&#125;</div></pre></td></tr></table></figure>\n<p>第二种：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">　Map map = <span class=\"keyword\">new</span> HashMap();</div><div class=\"line\">　　Iterator iter = map.keySet().iterator();</div><div class=\"line\">　　<span class=\"keyword\">while</span> (iter.hasNext()) &#123;</div><div class=\"line\">　　Object key = iter.next();</div><div class=\"line\">　　Object val = map.get(key);</div><div class=\"line\">　　&#125;</div></pre></td></tr></table></figure>\n<h6 id=\"浅析ConcurrentHashMap\"><a href=\"#浅析ConcurrentHashMap\" class=\"headerlink\" title=\"浅析ConcurrentHashMap\"></a>浅析ConcurrentHashMap</h6><ul>\n<li>public V get(Object key)不涉及到锁，也就是说获得对象时没有使用锁；</li>\n<li>put、remove方法要使用锁，但并不一定有锁争用，原因在于ConcurrentHashMap将缓存的变量分到多个Segment，每个Segment上有一个锁，只要多个线程访问的不是一个Segment就没有锁争用，就没有堵塞，各线程用各自的锁，ConcurrentHashMap缺省情况下生成16个Segment，也就是允许16个线程并发的更新而尽量没有锁争用；</li>\n<li>Hashtable对get,put,remove都使用了同步操作，也就是说如果有线程正在遍历集合，其他的线程就暂时不能使用该集合了，这样无疑就很容易对性能和吞吐量造成影响。而ConcurrentHashMap则不同，它只对put,remove操作使用了同步操作，get操作并不影响</li>\n<li>Hashtable在使用iterator遍历的时候，如果其他线程，包括本线程对Hashtable进行了put，remove等更新操作的话，就会抛出ConcurrentModificationException异常，但如果使用ConcurrentHashMap的话，就不用考虑这方面的问题了</li>\n</ul>\n<h6 id=\"浅析HashMap，HashTable，ConcurrentHashMap\"><a href=\"#浅析HashMap，HashTable，ConcurrentHashMap\" class=\"headerlink\" title=\"浅析HashMap，HashTable，ConcurrentHashMap\"></a>浅析HashMap，HashTable，ConcurrentHashMap</h6><ul>\n<li>HashMap如上所诉，不同步，线程不安全，不使用用与多线程高并发情况下</li>\n<li>Hashtable，被遗弃的类，线程安全是因为在所有方法上都加了synchronized来实现线程安全，导致多线程访问效率低</li>\n<li>Synchronized Map（通过Collections.synchronizedMap()来包装一个hashmap）和hashtable区别不大，唯一区别就是没有被遗弃</li>\n<li>ConcurrentHashMap，默认允许16个线程读写这个map，不像Hashtable和Synchronized Map一样，没有锁整个整个map，而是划分了多个段（Segment），只会锁需要操作的那一段数据</li>\n</ul>\n<p><a href=\"https://www.jianshu.com/p/c00308c32de4\">点击查看详细博客</a></p>\n<p><a href=\"http://blog.csdn.net/heng615975867/article/details/52799213\">点击查看相关博客</a></p>\n<h5 id=\"TreeMap\"><a href=\"#TreeMap\" class=\"headerlink\" title=\"TreeMap\"></a><strong>TreeMap</strong></h5><p>底层是二叉树数据结构。线程不同步。可以用于给map集合中的键进行排序。</p>\n<h4 id=\"集合输出（遍历）\"><a href=\"#集合输出（遍历）\" class=\"headerlink\" title=\"集合输出（遍历）\"></a>集合输出（遍历）</h4><ul>\n<li>Iterator： 迭代输出，使用最多的输出方式</li>\n<li>ListIterator：是Iterator的子接口，专门用于输出List中的内容。</li>\n<li>foreach输出：JDK1.5之后提供的新功能，可以输出数组或集合。</li>\n<li>for循环</li>\n</ul>\n<h4 id=\"集合的工具类\"><a href=\"#集合的工具类\" class=\"headerlink\" title=\"集合的工具类\"></a>集合的工具类</h4><p>Collections:集合框架的工具类。里面定义的都是静态方法。</p>\n<p>　　Collections和Collection有什么区别？</p>\n<p>　　　　Collection是集合框架中的一个顶层接口，它里面定义了单列集合的共性方法。</p>\n<p>　　　　　　它有两个常用的子接口，</p>\n<p>　　　　　　——List：对元素都有定义索引。有序的。可以重复元素。</p>\n<p>　　　　　　——Set：不可以重复元素。无序。</p>\n<p>　　　　Collections是集合框架中的一个工具类。该类中的方法都是静态的。</p>\n<p>　　　　　　提供的方法中有可以对list集合进行排序，二分查找等方法。</p>\n<p>　　　　　　通常常用的集合都是线程不安全的。因为要提高效率。</p>\n<p>　　　　　　如果多线程操作这些集合时，可以通过该工具类中的同步方法，将线程不安全的集合，转换成安全的。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>List：add/remove/get/set。</p>\n<p>　　　　1，ArrayList：其实就是数组，容量一大，频繁增删就是噩梦，适合随机查找；</p>\n<p>　　　　2，LinkedList：增加了push/[pop|remove|pull]，其实都是removeFirst；</p>\n<p>　　　　3，Vector：历史遗留产物，同步版的ArrayList，代码和ArrayList太像；</p>\n<p>　　　　4，Stack：继承自Vector。Java里其实没有纯粹的Stack，可以自己实现，用组合的方式，封装一下LinkedList即可；</p>\n<p>　　　　5，Queue：本来是单独的一类，不过在SUN的JDK里就是用LinkedList来提供这个功能的，主要方法是offer/pull/peek，因此归到这里呢。</p>\n<p>　　Set：add/remove。可以用迭代器或者转换成list。</p>\n<p>　　　　1，HashSet：内部采用HashMap实现的；</p>\n<p>　　　　2，LinkedHashSet：采用LinkedHashMap实现；</p>\n<p>　　　　3，TreeSet：TreeMap。</p>\n<p>　　Map：put/get/remove。</p>\n<p>　　　　1，HashMap/HashTable：散列表，和ArrayList一样采用数组实现，超过初始容量会对性能有损耗；</p>\n<p>　　　　2，LinkedHashMap：继承自HashMap，但通过重写嵌套类HashMap.Entry实现了链表结构，同样有容量的问题；</p>\n<p>　　　　3，Properties：是继承的HashTable。</p>\n<p>　　　　顺便说一下Arrays.asList，这个方法的实现依赖一个嵌套类，这个嵌套类也叫ArrayList！</p>\n<h4 id=\"手写集合\"><a href=\"#手写集合\" class=\"headerlink\" title=\"手写集合\"></a>手写集合</h4><h5 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** </div><div class=\"line\"> * 手写ArrayList  </div><div class=\"line\"> */</span>  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyArrayList</span></span>&#123;  </div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">private</span> Object[] value = <span class=\"keyword\">null</span>;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size = <span class=\"number\">0</span>;  </div><div class=\"line\">  </div><div class=\"line\">    MyArrayList() &#123;  </div><div class=\"line\">        value = <span class=\"keyword\">new</span> Object[<span class=\"number\">10</span>];  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(Object obj)</span></span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span>(size == value.length)  </div><div class=\"line\">            expansion();  </div><div class=\"line\">        value[size++]=obj;  </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> value[index];  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(Object obj)</span></span>&#123;  </div><div class=\"line\">        Object[] obj2 = <span class=\"keyword\">new</span> Object[size];  </div><div class=\"line\">        <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;  </div><div class=\"line\">        <span class=\"keyword\">int</span> id = <span class=\"number\">0</span>;  </div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= size; i++) &#123;  </div><div class=\"line\">            <span class=\"keyword\">if</span>(!(value[i].toString().equals(obj.toString())))&#123;  </div><div class=\"line\">                obj2[index] = value[i];  </div><div class=\"line\">                index ++;  </div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;  </div><div class=\"line\">                id ++ ;  </div><div class=\"line\">                <span class=\"keyword\">if</span>(id == <span class=\"number\">1</span>)  </div><div class=\"line\">                    size --;  </div><div class=\"line\">                <span class=\"keyword\">else</span>&#123;  </div><div class=\"line\">                    obj2[index] = value[i];  </div><div class=\"line\">                    index ++;  </div><div class=\"line\">                &#125;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        value = obj2;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"null\"</span>)  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> index,Object obj)</span></span>&#123;  </div><div class=\"line\">        Object[] newObj = <span class=\"keyword\">new</span> Object[size];;  </div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;  </div><div class=\"line\">            <span class=\"keyword\">if</span>(i == index)  </div><div class=\"line\">                newObj[i] = obj;  </div><div class=\"line\">            <span class=\"keyword\">else</span>  </div><div class=\"line\">                newObj[i] = value[i];  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        value = newObj;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> size;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">expansion</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        Object[] temp = <span class=\"keyword\">new</span> Object[value.length + <span class=\"number\">5</span>];  </div><div class=\"line\">        temp = value.clone();  </div><div class=\"line\">        <span class=\"comment\">/** </div><div class=\"line\">        * 注意：clone只对一维数组起作用，而不能用于二维数组， 因为java没有二维数组的概念，而只有数组的数组，二维 </div><div class=\"line\">        * 数组存储的是几个一维数组的引用，而使用clone也只是 拷贝了这几个引用，说白了还是原来那几个一维数组对象。 </div><div class=\"line\">        * 如果想用于二维数组，那么就遍历其中的一维数组，挨个 拷贝一维数组到目标二维数组中的一维数组下。 </div><div class=\"line\">        */</span>  </div><div class=\"line\">        value = temp;  </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">        size = <span class=\"number\">0</span>;  </div><div class=\"line\">        value = <span class=\"keyword\">null</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </div><div class=\"line\">        MyArrayList ma = <span class=\"keyword\">new</span> MyArrayList();  </div><div class=\"line\">        ma.add(<span class=\"string\">\"hello\"</span>);  </div><div class=\"line\">        ma.add(<span class=\"string\">\"world\"</span>);  </div><div class=\"line\">        ma.add(<span class=\"string\">\"java\"</span>);  </div><div class=\"line\">        System.out.println(ma.get(<span class=\"number\">1</span>));  </div><div class=\"line\">        System.out.println(ma.size());  </div><div class=\"line\">        ma.set(<span class=\"number\">1</span>, <span class=\"string\">\"new\"</span>);  </div><div class=\"line\">        System.out.println(ma.get(<span class=\"number\">1</span>));  </div><div class=\"line\">        System.out.println(ma.size());  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>LinkedList</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLinkedList</span>&lt;<span class=\"title\">AnyType</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">AnyType</span>&gt;</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> AnyType data;</div><div class=\"line\">        <span class=\"keyword\">public</span> Node&lt;AnyType&gt; prev;</div><div class=\"line\">        <span class=\"keyword\">public</span> Node&lt;AnyType&gt; next;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(AnyType d, Node&lt;AnyType&gt; p, Node&lt;AnyType&gt; n)</span></span>&#123;</div><div class=\"line\">            data = d;</div><div class=\"line\">            prev = p;</div><div class=\"line\">            next = n;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> theSize;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> modCount;</div><div class=\"line\">    <span class=\"keyword\">private</span> Node&lt;AnyType&gt; beginMarker;</div><div class=\"line\">    <span class=\"keyword\">private</span> Node&lt;AnyType&gt; endMarker;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyLinkedList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        clear();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        beginMarker = <span class=\"keyword\">new</span> Node&lt;AnyType&gt;(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">        endMarker = <span class=\"keyword\">new</span> Node&lt;AnyType&gt;(<span class=\"keyword\">null</span>, beginMarker, <span class=\"keyword\">null</span>);</div><div class=\"line\">        beginMarker.next = endMarker;</div><div class=\"line\">        theSize = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> theSize;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(AnyType x)</span></span>&#123;</div><div class=\"line\">        add(size(), x);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> idx, AnyType x)</span></span>&#123;</div><div class=\"line\">        addBefore(getNode(idx), x);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> AnyType <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> idx)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> getNode(idx).data;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addBefore</span><span class=\"params\">(Node&lt;AnyType&gt; p, AnyType x)</span></span>&#123;</div><div class=\"line\">        Node&lt;AnyType&gt; newNode = <span class=\"keyword\">new</span> Node&lt;AnyType&gt;(x, p.prev, p);</div><div class=\"line\">        newNode.prev.next = newNode;</div><div class=\"line\">        p.prev = newNode;</div><div class=\"line\">        theSize++;</div><div class=\"line\">        modCount++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node&lt;AnyType&gt; <span class=\"title\">getNode</span><span class=\"params\">(<span class=\"keyword\">int</span> idx)</span></span>&#123;</div><div class=\"line\">        Node&lt;AnyType&gt; p;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>(idx &lt; <span class=\"number\">0</span> || idx &gt; size())&#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"IndexOutOfBoundsException\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>(idx &lt;= size()/<span class=\"number\">2</span>)&#123;</div><div class=\"line\">            System.out.println(idx);</div><div class=\"line\">            p = beginMarker.next;</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; idx; i++)&#123;</div><div class=\"line\">                p = p.next;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            p = endMarker;</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = size(); i &gt; idx; i--)&#123;</div><div class=\"line\">                p = p.prev;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> p;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">find</span><span class=\"params\">(AnyType x)</span></span>&#123;</div><div class=\"line\">        Node&lt;AnyType&gt; p = beginMarker.next;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size(); i++)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(p.data == x)&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            p = p.next;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        String s = <span class=\"string\">\"\"</span>;</div><div class=\"line\">        Node&lt;AnyType&gt; p = beginMarker.next;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size(); i++)&#123;</div><div class=\"line\">            s += p.data +<span class=\"string\">\",\"</span>;</div><div class=\"line\">            p = p.next;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> s;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"图片上传,角度不正确","date":"2015-08-08T03:39:51.000Z","_content":"部分机型（三星）的上传后,图片是默认旋转了90°\n<!--more-->\n> 解决问题\n\n直接进入正题\n##### 当我们上传图片需要做的处理 #####\n- 压缩\n- 判断角度是否正确\n- 如果不角度不对,纠正角度\n- 其他(加水印什么的看具体需求)\n\n解决\n以下代码块\n​    \n\t /**\n\t * 压缩图片，处理某些手机拍照角度旋转的问题\n\t * @param context\n\t * @param filePath\n\t * @param file\n\t * @param q\n\t * @return\n\t * @throws FileNotFoundException\n\t */\n\tpublic static File compressImage(Context context, String filePath, File file, int q) throws FileNotFoundException {\n\t    Bitmap bm = getSmallBitmap(filePath);\n\t    int degree = readPictureDegree(filePath);\n\t    LogUtil.e(\"fengan\", \"degree==\" + degree);\n\t    if (degree != 0) {//旋转照片角度\n\t        bm = rotateBitmap(bm, degree);\n\t    }\n\t    FileOutputStream out = new FileOutputStream(file);\n\t    bm.compress(Bitmap.CompressFormat.JPEG, q, out);\n\t    return file;\n\t}`\n\n\n\n\n    /**\n     * 获取图片角度\n     * @param path\n     * @return\n     */\n    public static int readPictureDegree(String path) {\n        int degree = 0;\n        try {\n            ExifInterface exifInterface = new ExifInterface(path);\n            int orientation = exifInterface.getAttributeInt(\n                    ExifInterface.TAG_ORIENTATION,\n                    ExifInterface.ORIENTATION_NORMAL);\n            switch (orientation) {\n                case ExifInterface.ORIENTATION_ROTATE_90:\n                    degree = 90;\n                    break;\n                case ExifInterface.ORIENTATION_ROTATE_180:\n                    degree = 180;\n                    break;\n                case ExifInterface.ORIENTATION_ROTATE_270:\n                    degree = 270;\n                    break;\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return degree;\n    }\n    \n     /**\n     * 旋转照片\n     * @param bitmap\n     * @param degress\n     * @return\n     */\n    public static Bitmap rotateBitmap(Bitmap bitmap, int degress) {\n        if (bitmap != null) {\n            Matrix m = new Matrix();\n            m.postRotate(degress);\n            bitmap = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(),\n                    bitmap.getHeight(), m, true);\n            return bitmap;\n        }\n        return bitmap;\n    }\n        /**\n     * 根据路径获得突破并压缩返回bitmap用于显示\n     *\n     * @return\n     */\n    public static Bitmap getSmallBitmap(String filePath) {\n        final BitmapFactory.Options options = new BitmapFactory.Options();\n        options.inJustDecodeBounds = true;\n        BitmapFactory.decodeFile(filePath, options);\n    \n        // Calculate inSampleSize\n        options.inSampleSize = calculateInSampleSize(options, 480, 800);\n    \n        // Decode bitmap with inSampleSize set\n        options.inJustDecodeBounds = false;\n    \n        return BitmapFactory.decodeFile(filePath, options);\n    }\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=490602392&auto=1&height=66\"></iframe>","source":"_posts/图片上传-角度不正确.md","raw":"---\ntitle: '图片上传,角度不正确'\ndate: 2015-08-08 11:39:51\ntags: \n- Android\ncategories: Android\n---\n部分机型（三星）的上传后,图片是默认旋转了90°\n<!--more-->\n> 解决问题\n\n直接进入正题\n##### 当我们上传图片需要做的处理 #####\n- 压缩\n- 判断角度是否正确\n- 如果不角度不对,纠正角度\n- 其他(加水印什么的看具体需求)\n\n解决\n以下代码块\n​    \n\t /**\n\t * 压缩图片，处理某些手机拍照角度旋转的问题\n\t * @param context\n\t * @param filePath\n\t * @param file\n\t * @param q\n\t * @return\n\t * @throws FileNotFoundException\n\t */\n\tpublic static File compressImage(Context context, String filePath, File file, int q) throws FileNotFoundException {\n\t    Bitmap bm = getSmallBitmap(filePath);\n\t    int degree = readPictureDegree(filePath);\n\t    LogUtil.e(\"fengan\", \"degree==\" + degree);\n\t    if (degree != 0) {//旋转照片角度\n\t        bm = rotateBitmap(bm, degree);\n\t    }\n\t    FileOutputStream out = new FileOutputStream(file);\n\t    bm.compress(Bitmap.CompressFormat.JPEG, q, out);\n\t    return file;\n\t}`\n\n\n\n\n    /**\n     * 获取图片角度\n     * @param path\n     * @return\n     */\n    public static int readPictureDegree(String path) {\n        int degree = 0;\n        try {\n            ExifInterface exifInterface = new ExifInterface(path);\n            int orientation = exifInterface.getAttributeInt(\n                    ExifInterface.TAG_ORIENTATION,\n                    ExifInterface.ORIENTATION_NORMAL);\n            switch (orientation) {\n                case ExifInterface.ORIENTATION_ROTATE_90:\n                    degree = 90;\n                    break;\n                case ExifInterface.ORIENTATION_ROTATE_180:\n                    degree = 180;\n                    break;\n                case ExifInterface.ORIENTATION_ROTATE_270:\n                    degree = 270;\n                    break;\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return degree;\n    }\n    \n     /**\n     * 旋转照片\n     * @param bitmap\n     * @param degress\n     * @return\n     */\n    public static Bitmap rotateBitmap(Bitmap bitmap, int degress) {\n        if (bitmap != null) {\n            Matrix m = new Matrix();\n            m.postRotate(degress);\n            bitmap = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(),\n                    bitmap.getHeight(), m, true);\n            return bitmap;\n        }\n        return bitmap;\n    }\n        /**\n     * 根据路径获得突破并压缩返回bitmap用于显示\n     *\n     * @return\n     */\n    public static Bitmap getSmallBitmap(String filePath) {\n        final BitmapFactory.Options options = new BitmapFactory.Options();\n        options.inJustDecodeBounds = true;\n        BitmapFactory.decodeFile(filePath, options);\n    \n        // Calculate inSampleSize\n        options.inSampleSize = calculateInSampleSize(options, 480, 800);\n    \n        // Decode bitmap with inSampleSize set\n        options.inJustDecodeBounds = false;\n    \n        return BitmapFactory.decodeFile(filePath, options);\n    }\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=490602392&auto=1&height=66\"></iframe>","slug":"图片上传-角度不正确","published":1,"updated":"2018-07-19T02:07:49.799Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6na002u1kygl8ytxh5l","content":"<p>部分机型（三星）的上传后,图片是默认旋转了90°<br><a id=\"more\"></a></p>\n<blockquote>\n<p>解决问题</p>\n</blockquote>\n<p>直接进入正题</p>\n<h5 id=\"当我们上传图片需要做的处理\"><a href=\"#当我们上传图片需要做的处理\" class=\"headerlink\" title=\"当我们上传图片需要做的处理\"></a>当我们上传图片需要做的处理</h5><ul>\n<li>压缩</li>\n<li>判断角度是否正确</li>\n<li>如果不角度不对,纠正角度</li>\n<li>其他(加水印什么的看具体需求)</li>\n</ul>\n<p>解决<br>以下代码块<br>​<br>     /**</p>\n<pre><code> * 压缩图片，处理某些手机拍照角度旋转的问题\n * @param context\n * @param filePath\n * @param file\n * @param q\n * @return\n * @throws FileNotFoundException\n */\npublic static File compressImage(Context context, String filePath, File file, int q) throws FileNotFoundException {\n    Bitmap bm = getSmallBitmap(filePath);\n    int degree = readPictureDegree(filePath);\n    LogUtil.e(&quot;fengan&quot;, &quot;degree==&quot; + degree);\n    if (degree != 0) {//旋转照片角度\n        bm = rotateBitmap(bm, degree);\n    }\n    FileOutputStream out = new FileOutputStream(file);\n    bm.compress(Bitmap.CompressFormat.JPEG, q, out);\n    return file;\n}`\n\n\n\n\n/**\n * 获取图片角度\n * @param path\n * @return\n */\npublic static int readPictureDegree(String path) {\n    int degree = 0;\n    try {\n        ExifInterface exifInterface = new ExifInterface(path);\n        int orientation = exifInterface.getAttributeInt(\n                ExifInterface.TAG_ORIENTATION,\n                ExifInterface.ORIENTATION_NORMAL);\n        switch (orientation) {\n            case ExifInterface.ORIENTATION_ROTATE_90:\n                degree = 90;\n                break;\n            case ExifInterface.ORIENTATION_ROTATE_180:\n                degree = 180;\n                break;\n            case ExifInterface.ORIENTATION_ROTATE_270:\n                degree = 270;\n                break;\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return degree;\n}\n\n /**\n * 旋转照片\n * @param bitmap\n * @param degress\n * @return\n */\npublic static Bitmap rotateBitmap(Bitmap bitmap, int degress) {\n    if (bitmap != null) {\n        Matrix m = new Matrix();\n        m.postRotate(degress);\n        bitmap = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(),\n                bitmap.getHeight(), m, true);\n        return bitmap;\n    }\n    return bitmap;\n}\n    /**\n * 根据路径获得突破并压缩返回bitmap用于显示\n *\n * @return\n */\npublic static Bitmap getSmallBitmap(String filePath) {\n    final BitmapFactory.Options options = new BitmapFactory.Options();\n    options.inJustDecodeBounds = true;\n    BitmapFactory.decodeFile(filePath, options);\n\n    // Calculate inSampleSize\n    options.inSampleSize = calculateInSampleSize(options, 480, 800);\n\n    // Decode bitmap with inSampleSize set\n    options.inJustDecodeBounds = false;\n\n    return BitmapFactory.decodeFile(filePath, options);\n}\n</code></pre><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=490602392&auto=1&height=66\"></iframe>","excerpt":"<p>部分机型（三星）的上传后,图片是默认旋转了90°<br>","more":"</p>\n<blockquote>\n<p>解决问题</p>\n</blockquote>\n<p>直接进入正题</p>\n<h5 id=\"当我们上传图片需要做的处理\"><a href=\"#当我们上传图片需要做的处理\" class=\"headerlink\" title=\"当我们上传图片需要做的处理\"></a>当我们上传图片需要做的处理</h5><ul>\n<li>压缩</li>\n<li>判断角度是否正确</li>\n<li>如果不角度不对,纠正角度</li>\n<li>其他(加水印什么的看具体需求)</li>\n</ul>\n<p>解决<br>以下代码块<br>​<br>     /**</p>\n<pre><code> * 压缩图片，处理某些手机拍照角度旋转的问题\n * @param context\n * @param filePath\n * @param file\n * @param q\n * @return\n * @throws FileNotFoundException\n */\npublic static File compressImage(Context context, String filePath, File file, int q) throws FileNotFoundException {\n    Bitmap bm = getSmallBitmap(filePath);\n    int degree = readPictureDegree(filePath);\n    LogUtil.e(&quot;fengan&quot;, &quot;degree==&quot; + degree);\n    if (degree != 0) {//旋转照片角度\n        bm = rotateBitmap(bm, degree);\n    }\n    FileOutputStream out = new FileOutputStream(file);\n    bm.compress(Bitmap.CompressFormat.JPEG, q, out);\n    return file;\n}`\n\n\n\n\n/**\n * 获取图片角度\n * @param path\n * @return\n */\npublic static int readPictureDegree(String path) {\n    int degree = 0;\n    try {\n        ExifInterface exifInterface = new ExifInterface(path);\n        int orientation = exifInterface.getAttributeInt(\n                ExifInterface.TAG_ORIENTATION,\n                ExifInterface.ORIENTATION_NORMAL);\n        switch (orientation) {\n            case ExifInterface.ORIENTATION_ROTATE_90:\n                degree = 90;\n                break;\n            case ExifInterface.ORIENTATION_ROTATE_180:\n                degree = 180;\n                break;\n            case ExifInterface.ORIENTATION_ROTATE_270:\n                degree = 270;\n                break;\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return degree;\n}\n\n /**\n * 旋转照片\n * @param bitmap\n * @param degress\n * @return\n */\npublic static Bitmap rotateBitmap(Bitmap bitmap, int degress) {\n    if (bitmap != null) {\n        Matrix m = new Matrix();\n        m.postRotate(degress);\n        bitmap = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(),\n                bitmap.getHeight(), m, true);\n        return bitmap;\n    }\n    return bitmap;\n}\n    /**\n * 根据路径获得突破并压缩返回bitmap用于显示\n *\n * @return\n */\npublic static Bitmap getSmallBitmap(String filePath) {\n    final BitmapFactory.Options options = new BitmapFactory.Options();\n    options.inJustDecodeBounds = true;\n    BitmapFactory.decodeFile(filePath, options);\n\n    // Calculate inSampleSize\n    options.inSampleSize = calculateInSampleSize(options, 480, 800);\n\n    // Decode bitmap with inSampleSize set\n    options.inJustDecodeBounds = false;\n\n    return BitmapFactory.decodeFile(filePath, options);\n}\n</code></pre><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=490602392&auto=1&height=66\"></iframe>"},{"title":"浅析Dalvik和ART的区别","date":"2018-03-05T07:00:14.000Z","password":null,"_content":"\nDalvik是Google公司自己设计用于Android平台的虚拟机，Dalvik经过优化，更加适合Android平台（具体优点见下面和JVM比较）。\n\n2014年6月谷歌I/O大会上，Android L(5.0)改动幅度比较大，删除了Dalvik，而是用ART代替。\n\n之前对本块的知识理解比较零散，再此本文总结下Dalvik和ART的原理，和二者的区别，以及Jvm和Dalvik的区别，以及Android的Apk编译打包的流程\n\n<!--more-->\n\n### Dalvik的相关知识\n\n- **Google**公司自己设计**用于Android平台**的**java虚拟机**\n- 支持.dex（即Dalvik Executable）格式的java应用程序运行\n- 基于寄存器，寄存器CPU的一部分（适合内存和处理器有限的系统）\n- 允许有限的内存同时运行多个Dalvik虚拟机的实例\n- 每个Dalvik应用作为一个独立的Linux进程执行，防止一个程序崩溃导致所有程序崩溃\n\n![](https://ws1.sinaimg.cn/large/006tNc79ly1fp1zktmabmj30hm0r6780.jpg)\n\n### Jvm的相关知识\n\n- 基于栈（内存的一部分）\n- javac把程序源码编译成JAVA字节码后，JVM通过逐条解释字节码翻译成机器指令\n\n### Dalvik和Jvm的区别与联系\n\n#### 图表区别\n\n|        |  本质   |   字节码文件    |  效率  |\n| :----: | :---: | :--------: | :--: |\n| Dalvik | 基于寄存器 |  一个.Dex文件  |  高   |\n|  Jvm   |  基于栈  | 多个.class文件 |  低   |\n\n#### 首要区别\n\n- DVM基于寄存器，Jvm基于栈，基于寄存器的编译花费时间更短（在.dex字节码中，变量会赋值给65535个可用寄存器中的任何一个，Dalvik指令直接操作这些寄存器，而不是访问堆栈中的元素。）\n- dex字节码更适合于内存和处理器速度有限的系统\n- 基于寄存器的Dalvik实现虽然牺牲了一些**平台无关性**，但是它在代码的执行效率上要更胜一筹。\n- 每一个Android 的App是独立跑在一个VM中的。因此一个App crash只会影响到自身的VM，不会影响到其他。Dalvik经过优化，允许在有限的内存中同时运行多个虚拟机的实例，并且每一个 Dalvik应用作为一个独立的Linux进程执行。\n\n#### 字节码区别\n\n- JVM字节码由.class组成，每个java文件对应一个.class\n- DVM字节码只包含一个.dex文件，这个文件包含了程序中所有的类\n\n![图解.class和.dex文件生成过程](https://ws1.sinaimg.cn/large/006tNc79ly1fp1zfxzxttj30jq0o8tau.jpg)\n\n**Dalvik可执行文件体积小。Android SDK中有一个叫dx的工具负责将Java字节码转换为Dalvik字节码。**\n\n简单来讲，dex格式文件就是将多个class文件中公有的部分统一存放，去除冗余信息。\n\n### ART的相关知识（Android Runtime）\n\nAndroid Runtime（缩写为 ART），是一种在Android操作系统上的运行环境，由Google公司研发，并在2013年作为Android 4.4系统中的一项测试功能正式对外发布，在Android 5.0及后续Android版本中作为正式的运行时库取代了以往的Dalvik虚拟机。ART能够把应用程序的字节码转换为机器码，是Android所使用的一种新的虚拟机。它与Dalvik的主要不同在于：Dalvik采用的是JIT技术，而ART采用Ahead-of-time（AOT）技术。 ART同时也改善了性能、垃圾回收(Garbage Collection)、应用程序除错以及性能分析。\n\nJIT最早在Android 2.2系统中引进到Dalvik虚拟机中，在应用程序启动时，JIT通过进行连续的性能分析来优化程序代码的执行，在程序运行的过程中，Dalvik虚拟机在不断的进行将字节码编译成机器码的工作。 与Dalvik虚拟机不同的是，ART引入了AOT这种预编译技术，在应用程序安装的过程中，ART就已经将所有的字节码重新编译成了机器码。应用程序运行过程中无需进行实时的编译工作，只需要进行直接调用。因此，ART极大的提高了应用程序的运行效率，同时也减少了手机的电量消耗，提高了移动设备的续航能力，在垃圾回收等机制上也有了较大的提升。 为了保证向下兼容，ART使用了相同的Dalvik字节码文件（dex），即在应用程序目录下保留了dex文件供旧程序调用然而.odex文件则替换成了可执行与可链接格式（ELF）可执行文件。一旦一个程序被ART的dex2oat命令编译，那么这个程序将会指通过ELF可执行文件来运行。因此，相对于Dalvik虚拟机模式，ART模式下Android应用程序的安装需要消耗更多的时间，同时也会占用更大的储存空间（指内部储存，用于储存编译后的代码）,但节省了很多Dalvik虚拟机用于实时编译的时间。\n\nGoogle公司在Android 4.4中带来的ART模式仅仅是ART的一个预览版，系统默认仍然使用的是Dalvik虚拟机，4.4上面提供的预览版ART相对于Android 5.0以后的ART运行时库有较大的不同，尤其体现在兼容性上。\n\n总结一下上诉内容：\n\n- Android 4.4系统后出现（预览版），系统默认仍然使用的是Dalvik虚拟机，5.0以后是正式版取代了Dalvik虚拟机\n- ART能够把应用程序的字节码转换为机器码，是Android所使用的一种新的虚拟机\n- 为了保证向下兼容，ART使用了相同的Dalvik字节码文件（dex）（而在安装过程中，会通过dex2oat工具生成OAT文件，具体见下面分析）\n\n### Android运行时ART加载OAT文件过程分析\n\n[查看其他博客分析](http://blog.csdn.net/luoshengyang/article/details/39307813)\n\n- ART核心是OAT文件\n- 是APK在安装的过程中，会通过dex2oat工具生成一个OAT文件\n- APK安装过程中生成的OAT文件的输入只有一个DEX文件，也就是来自于打包在要安装的APK文件里面的classes.dex文件（实际上，一个OAT文件是可以由若干个DEX生成的）\n- OAT文件是一种Android私有ELF\n- 它不仅包含有从DEX文件翻译而来的本地机器指令，还包含有原来的DEX文件内容\n\n### Dalvik和ART的区别与联系\n\n- Dalvik和ART使用的的都是.dex字节码，事实上我们把apk解压后确实只有classes.dex文件，但是在ART虚拟机在安装过程中通过dex2oat工具将一个或者诺干个dex生成一个OAT文件\n- ART（Ahead-of-time   AOT预编译技术）：应用程序在**安装过程**中，ART将所有的字节码重新编译成了机器码，所以应用程序**运行中**无需进行实时编译工作，只需要进行直接调用，因此，ART极大的提高了应用程序的运行效率，同时也减少了手机的电量消耗，提高了移动设备的续航能力，在垃圾回收等机制上也有了较大的提升，但是安装需要更多的内存空间（存储编译后的代码）和时间，节省了很多Dalvik虚拟机用于实时编译的时间\n- Dalvik（Just-in-time  JIT即时编译技术）：（jvm也是JIT即时编译），在Dalvik下，**应用每次运行**都需要通过即时编译器（JIT）将**字节码转换为机器码**，即每次都要编译加运行。虽然安装过程比较快，但是拖慢了应用每次启动的速度\n\n|        |    编译技术    | （时机）字节码编译机器码 |   占用空间    | 安装时间 | 运行效率（） |\n| :----: | :--------: | :----------: | :-------: | ---- | :----: |\n| Dalvik | JIT（即时编译）  |    首次安装时     |     小     | 快    |   慢    |\n|  ART   | AOT（预编译技术） |   应用每次启动时    | 大（10-20%） | 满    |   快    |\n\n### 几张截图总结\n\n[查看原文](http://blog.csdn.net/jason0539/article/details/50440669)\n\n![](https://ws1.sinaimg.cn/large/006tNc79ly1fp230bcp69j31ie11m4e4.jpg)\n\n![](https://ws3.sinaimg.cn/large/006tKfTcgy1fp230q7envj31hw0l277h.jpg)","source":"_posts/浅析Dalvik和ART的区别.md","raw":"---\ntitle: 浅析Dalvik和ART的区别\ndate: 2018-03-05 15:00:14\ntags: \n- Android\ncategories: Android\npassword: \n---\n\nDalvik是Google公司自己设计用于Android平台的虚拟机，Dalvik经过优化，更加适合Android平台（具体优点见下面和JVM比较）。\n\n2014年6月谷歌I/O大会上，Android L(5.0)改动幅度比较大，删除了Dalvik，而是用ART代替。\n\n之前对本块的知识理解比较零散，再此本文总结下Dalvik和ART的原理，和二者的区别，以及Jvm和Dalvik的区别，以及Android的Apk编译打包的流程\n\n<!--more-->\n\n### Dalvik的相关知识\n\n- **Google**公司自己设计**用于Android平台**的**java虚拟机**\n- 支持.dex（即Dalvik Executable）格式的java应用程序运行\n- 基于寄存器，寄存器CPU的一部分（适合内存和处理器有限的系统）\n- 允许有限的内存同时运行多个Dalvik虚拟机的实例\n- 每个Dalvik应用作为一个独立的Linux进程执行，防止一个程序崩溃导致所有程序崩溃\n\n![](https://ws1.sinaimg.cn/large/006tNc79ly1fp1zktmabmj30hm0r6780.jpg)\n\n### Jvm的相关知识\n\n- 基于栈（内存的一部分）\n- javac把程序源码编译成JAVA字节码后，JVM通过逐条解释字节码翻译成机器指令\n\n### Dalvik和Jvm的区别与联系\n\n#### 图表区别\n\n|        |  本质   |   字节码文件    |  效率  |\n| :----: | :---: | :--------: | :--: |\n| Dalvik | 基于寄存器 |  一个.Dex文件  |  高   |\n|  Jvm   |  基于栈  | 多个.class文件 |  低   |\n\n#### 首要区别\n\n- DVM基于寄存器，Jvm基于栈，基于寄存器的编译花费时间更短（在.dex字节码中，变量会赋值给65535个可用寄存器中的任何一个，Dalvik指令直接操作这些寄存器，而不是访问堆栈中的元素。）\n- dex字节码更适合于内存和处理器速度有限的系统\n- 基于寄存器的Dalvik实现虽然牺牲了一些**平台无关性**，但是它在代码的执行效率上要更胜一筹。\n- 每一个Android 的App是独立跑在一个VM中的。因此一个App crash只会影响到自身的VM，不会影响到其他。Dalvik经过优化，允许在有限的内存中同时运行多个虚拟机的实例，并且每一个 Dalvik应用作为一个独立的Linux进程执行。\n\n#### 字节码区别\n\n- JVM字节码由.class组成，每个java文件对应一个.class\n- DVM字节码只包含一个.dex文件，这个文件包含了程序中所有的类\n\n![图解.class和.dex文件生成过程](https://ws1.sinaimg.cn/large/006tNc79ly1fp1zfxzxttj30jq0o8tau.jpg)\n\n**Dalvik可执行文件体积小。Android SDK中有一个叫dx的工具负责将Java字节码转换为Dalvik字节码。**\n\n简单来讲，dex格式文件就是将多个class文件中公有的部分统一存放，去除冗余信息。\n\n### ART的相关知识（Android Runtime）\n\nAndroid Runtime（缩写为 ART），是一种在Android操作系统上的运行环境，由Google公司研发，并在2013年作为Android 4.4系统中的一项测试功能正式对外发布，在Android 5.0及后续Android版本中作为正式的运行时库取代了以往的Dalvik虚拟机。ART能够把应用程序的字节码转换为机器码，是Android所使用的一种新的虚拟机。它与Dalvik的主要不同在于：Dalvik采用的是JIT技术，而ART采用Ahead-of-time（AOT）技术。 ART同时也改善了性能、垃圾回收(Garbage Collection)、应用程序除错以及性能分析。\n\nJIT最早在Android 2.2系统中引进到Dalvik虚拟机中，在应用程序启动时，JIT通过进行连续的性能分析来优化程序代码的执行，在程序运行的过程中，Dalvik虚拟机在不断的进行将字节码编译成机器码的工作。 与Dalvik虚拟机不同的是，ART引入了AOT这种预编译技术，在应用程序安装的过程中，ART就已经将所有的字节码重新编译成了机器码。应用程序运行过程中无需进行实时的编译工作，只需要进行直接调用。因此，ART极大的提高了应用程序的运行效率，同时也减少了手机的电量消耗，提高了移动设备的续航能力，在垃圾回收等机制上也有了较大的提升。 为了保证向下兼容，ART使用了相同的Dalvik字节码文件（dex），即在应用程序目录下保留了dex文件供旧程序调用然而.odex文件则替换成了可执行与可链接格式（ELF）可执行文件。一旦一个程序被ART的dex2oat命令编译，那么这个程序将会指通过ELF可执行文件来运行。因此，相对于Dalvik虚拟机模式，ART模式下Android应用程序的安装需要消耗更多的时间，同时也会占用更大的储存空间（指内部储存，用于储存编译后的代码）,但节省了很多Dalvik虚拟机用于实时编译的时间。\n\nGoogle公司在Android 4.4中带来的ART模式仅仅是ART的一个预览版，系统默认仍然使用的是Dalvik虚拟机，4.4上面提供的预览版ART相对于Android 5.0以后的ART运行时库有较大的不同，尤其体现在兼容性上。\n\n总结一下上诉内容：\n\n- Android 4.4系统后出现（预览版），系统默认仍然使用的是Dalvik虚拟机，5.0以后是正式版取代了Dalvik虚拟机\n- ART能够把应用程序的字节码转换为机器码，是Android所使用的一种新的虚拟机\n- 为了保证向下兼容，ART使用了相同的Dalvik字节码文件（dex）（而在安装过程中，会通过dex2oat工具生成OAT文件，具体见下面分析）\n\n### Android运行时ART加载OAT文件过程分析\n\n[查看其他博客分析](http://blog.csdn.net/luoshengyang/article/details/39307813)\n\n- ART核心是OAT文件\n- 是APK在安装的过程中，会通过dex2oat工具生成一个OAT文件\n- APK安装过程中生成的OAT文件的输入只有一个DEX文件，也就是来自于打包在要安装的APK文件里面的classes.dex文件（实际上，一个OAT文件是可以由若干个DEX生成的）\n- OAT文件是一种Android私有ELF\n- 它不仅包含有从DEX文件翻译而来的本地机器指令，还包含有原来的DEX文件内容\n\n### Dalvik和ART的区别与联系\n\n- Dalvik和ART使用的的都是.dex字节码，事实上我们把apk解压后确实只有classes.dex文件，但是在ART虚拟机在安装过程中通过dex2oat工具将一个或者诺干个dex生成一个OAT文件\n- ART（Ahead-of-time   AOT预编译技术）：应用程序在**安装过程**中，ART将所有的字节码重新编译成了机器码，所以应用程序**运行中**无需进行实时编译工作，只需要进行直接调用，因此，ART极大的提高了应用程序的运行效率，同时也减少了手机的电量消耗，提高了移动设备的续航能力，在垃圾回收等机制上也有了较大的提升，但是安装需要更多的内存空间（存储编译后的代码）和时间，节省了很多Dalvik虚拟机用于实时编译的时间\n- Dalvik（Just-in-time  JIT即时编译技术）：（jvm也是JIT即时编译），在Dalvik下，**应用每次运行**都需要通过即时编译器（JIT）将**字节码转换为机器码**，即每次都要编译加运行。虽然安装过程比较快，但是拖慢了应用每次启动的速度\n\n|        |    编译技术    | （时机）字节码编译机器码 |   占用空间    | 安装时间 | 运行效率（） |\n| :----: | :--------: | :----------: | :-------: | ---- | :----: |\n| Dalvik | JIT（即时编译）  |    首次安装时     |     小     | 快    |   慢    |\n|  ART   | AOT（预编译技术） |   应用每次启动时    | 大（10-20%） | 满    |   快    |\n\n### 几张截图总结\n\n[查看原文](http://blog.csdn.net/jason0539/article/details/50440669)\n\n![](https://ws1.sinaimg.cn/large/006tNc79ly1fp230bcp69j31ie11m4e4.jpg)\n\n![](https://ws3.sinaimg.cn/large/006tKfTcgy1fp230q7envj31hw0l277h.jpg)","slug":"浅析Dalvik和ART的区别","published":1,"updated":"2018-07-19T01:50:03.927Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6nc002x1kygdkxc2m9w","content":"<p>Dalvik是Google公司自己设计用于Android平台的虚拟机，Dalvik经过优化，更加适合Android平台（具体优点见下面和JVM比较）。</p>\n<p>2014年6月谷歌I/O大会上，Android L(5.0)改动幅度比较大，删除了Dalvik，而是用ART代替。</p>\n<p>之前对本块的知识理解比较零散，再此本文总结下Dalvik和ART的原理，和二者的区别，以及Jvm和Dalvik的区别，以及Android的Apk编译打包的流程</p>\n<a id=\"more\"></a>\n<h3 id=\"Dalvik的相关知识\"><a href=\"#Dalvik的相关知识\" class=\"headerlink\" title=\"Dalvik的相关知识\"></a>Dalvik的相关知识</h3><ul>\n<li><strong>Google</strong>公司自己设计<strong>用于Android平台</strong>的<strong>java虚拟机</strong></li>\n<li>支持.dex（即Dalvik Executable）格式的java应用程序运行</li>\n<li>基于寄存器，寄存器CPU的一部分（适合内存和处理器有限的系统）</li>\n<li>允许有限的内存同时运行多个Dalvik虚拟机的实例</li>\n<li>每个Dalvik应用作为一个独立的Linux进程执行，防止一个程序崩溃导致所有程序崩溃</li>\n</ul>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tNc79ly1fp1zktmabmj30hm0r6780.jpg\" alt=\"\"></p>\n<h3 id=\"Jvm的相关知识\"><a href=\"#Jvm的相关知识\" class=\"headerlink\" title=\"Jvm的相关知识\"></a>Jvm的相关知识</h3><ul>\n<li>基于栈（内存的一部分）</li>\n<li>javac把程序源码编译成JAVA字节码后，JVM通过逐条解释字节码翻译成机器指令</li>\n</ul>\n<h3 id=\"Dalvik和Jvm的区别与联系\"><a href=\"#Dalvik和Jvm的区别与联系\" class=\"headerlink\" title=\"Dalvik和Jvm的区别与联系\"></a>Dalvik和Jvm的区别与联系</h3><h4 id=\"图表区别\"><a href=\"#图表区别\" class=\"headerlink\" title=\"图表区别\"></a>图表区别</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">本质</th>\n<th style=\"text-align:center\">字节码文件</th>\n<th style=\"text-align:center\">效率</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Dalvik</td>\n<td style=\"text-align:center\">基于寄存器</td>\n<td style=\"text-align:center\">一个.Dex文件</td>\n<td style=\"text-align:center\">高</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Jvm</td>\n<td style=\"text-align:center\">基于栈</td>\n<td style=\"text-align:center\">多个.class文件</td>\n<td style=\"text-align:center\">低</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"首要区别\"><a href=\"#首要区别\" class=\"headerlink\" title=\"首要区别\"></a>首要区别</h4><ul>\n<li>DVM基于寄存器，Jvm基于栈，基于寄存器的编译花费时间更短（在.dex字节码中，变量会赋值给65535个可用寄存器中的任何一个，Dalvik指令直接操作这些寄存器，而不是访问堆栈中的元素。）</li>\n<li>dex字节码更适合于内存和处理器速度有限的系统</li>\n<li>基于寄存器的Dalvik实现虽然牺牲了一些<strong>平台无关性</strong>，但是它在代码的执行效率上要更胜一筹。</li>\n<li>每一个Android 的App是独立跑在一个VM中的。因此一个App crash只会影响到自身的VM，不会影响到其他。Dalvik经过优化，允许在有限的内存中同时运行多个虚拟机的实例，并且每一个 Dalvik应用作为一个独立的Linux进程执行。</li>\n</ul>\n<h4 id=\"字节码区别\"><a href=\"#字节码区别\" class=\"headerlink\" title=\"字节码区别\"></a>字节码区别</h4><ul>\n<li>JVM字节码由.class组成，每个java文件对应一个.class</li>\n<li>DVM字节码只包含一个.dex文件，这个文件包含了程序中所有的类</li>\n</ul>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tNc79ly1fp1zfxzxttj30jq0o8tau.jpg\" alt=\"图解.class和.dex文件生成过程\"></p>\n<p><strong>Dalvik可执行文件体积小。Android SDK中有一个叫dx的工具负责将Java字节码转换为Dalvik字节码。</strong></p>\n<p>简单来讲，dex格式文件就是将多个class文件中公有的部分统一存放，去除冗余信息。</p>\n<h3 id=\"ART的相关知识（Android-Runtime）\"><a href=\"#ART的相关知识（Android-Runtime）\" class=\"headerlink\" title=\"ART的相关知识（Android Runtime）\"></a>ART的相关知识（Android Runtime）</h3><p>Android Runtime（缩写为 ART），是一种在Android操作系统上的运行环境，由Google公司研发，并在2013年作为Android 4.4系统中的一项测试功能正式对外发布，在Android 5.0及后续Android版本中作为正式的运行时库取代了以往的Dalvik虚拟机。ART能够把应用程序的字节码转换为机器码，是Android所使用的一种新的虚拟机。它与Dalvik的主要不同在于：Dalvik采用的是JIT技术，而ART采用Ahead-of-time（AOT）技术。 ART同时也改善了性能、垃圾回收(Garbage Collection)、应用程序除错以及性能分析。</p>\n<p>JIT最早在Android 2.2系统中引进到Dalvik虚拟机中，在应用程序启动时，JIT通过进行连续的性能分析来优化程序代码的执行，在程序运行的过程中，Dalvik虚拟机在不断的进行将字节码编译成机器码的工作。 与Dalvik虚拟机不同的是，ART引入了AOT这种预编译技术，在应用程序安装的过程中，ART就已经将所有的字节码重新编译成了机器码。应用程序运行过程中无需进行实时的编译工作，只需要进行直接调用。因此，ART极大的提高了应用程序的运行效率，同时也减少了手机的电量消耗，提高了移动设备的续航能力，在垃圾回收等机制上也有了较大的提升。 为了保证向下兼容，ART使用了相同的Dalvik字节码文件（dex），即在应用程序目录下保留了dex文件供旧程序调用然而.odex文件则替换成了可执行与可链接格式（ELF）可执行文件。一旦一个程序被ART的dex2oat命令编译，那么这个程序将会指通过ELF可执行文件来运行。因此，相对于Dalvik虚拟机模式，ART模式下Android应用程序的安装需要消耗更多的时间，同时也会占用更大的储存空间（指内部储存，用于储存编译后的代码）,但节省了很多Dalvik虚拟机用于实时编译的时间。</p>\n<p>Google公司在Android 4.4中带来的ART模式仅仅是ART的一个预览版，系统默认仍然使用的是Dalvik虚拟机，4.4上面提供的预览版ART相对于Android 5.0以后的ART运行时库有较大的不同，尤其体现在兼容性上。</p>\n<p>总结一下上诉内容：</p>\n<ul>\n<li>Android 4.4系统后出现（预览版），系统默认仍然使用的是Dalvik虚拟机，5.0以后是正式版取代了Dalvik虚拟机</li>\n<li>ART能够把应用程序的字节码转换为机器码，是Android所使用的一种新的虚拟机</li>\n<li>为了保证向下兼容，ART使用了相同的Dalvik字节码文件（dex）（而在安装过程中，会通过dex2oat工具生成OAT文件，具体见下面分析）</li>\n</ul>\n<h3 id=\"Android运行时ART加载OAT文件过程分析\"><a href=\"#Android运行时ART加载OAT文件过程分析\" class=\"headerlink\" title=\"Android运行时ART加载OAT文件过程分析\"></a>Android运行时ART加载OAT文件过程分析</h3><p><a href=\"http://blog.csdn.net/luoshengyang/article/details/39307813\" target=\"_blank\" rel=\"external\">查看其他博客分析</a></p>\n<ul>\n<li>ART核心是OAT文件</li>\n<li>是APK在安装的过程中，会通过dex2oat工具生成一个OAT文件</li>\n<li>APK安装过程中生成的OAT文件的输入只有一个DEX文件，也就是来自于打包在要安装的APK文件里面的classes.dex文件（实际上，一个OAT文件是可以由若干个DEX生成的）</li>\n<li>OAT文件是一种Android私有ELF</li>\n<li>它不仅包含有从DEX文件翻译而来的本地机器指令，还包含有原来的DEX文件内容</li>\n</ul>\n<h3 id=\"Dalvik和ART的区别与联系\"><a href=\"#Dalvik和ART的区别与联系\" class=\"headerlink\" title=\"Dalvik和ART的区别与联系\"></a>Dalvik和ART的区别与联系</h3><ul>\n<li>Dalvik和ART使用的的都是.dex字节码，事实上我们把apk解压后确实只有classes.dex文件，但是在ART虚拟机在安装过程中通过dex2oat工具将一个或者诺干个dex生成一个OAT文件</li>\n<li>ART（Ahead-of-time   AOT预编译技术）：应用程序在<strong>安装过程</strong>中，ART将所有的字节码重新编译成了机器码，所以应用程序<strong>运行中</strong>无需进行实时编译工作，只需要进行直接调用，因此，ART极大的提高了应用程序的运行效率，同时也减少了手机的电量消耗，提高了移动设备的续航能力，在垃圾回收等机制上也有了较大的提升，但是安装需要更多的内存空间（存储编译后的代码）和时间，节省了很多Dalvik虚拟机用于实时编译的时间</li>\n<li>Dalvik（Just-in-time  JIT即时编译技术）：（jvm也是JIT即时编译），在Dalvik下，<strong>应用每次运行</strong>都需要通过即时编译器（JIT）将<strong>字节码转换为机器码</strong>，即每次都要编译加运行。虽然安装过程比较快，但是拖慢了应用每次启动的速度</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">编译技术</th>\n<th style=\"text-align:center\">（时机）字节码编译机器码</th>\n<th style=\"text-align:center\">占用空间</th>\n<th>安装时间</th>\n<th style=\"text-align:center\">运行效率（）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Dalvik</td>\n<td style=\"text-align:center\">JIT（即时编译）</td>\n<td style=\"text-align:center\">首次安装时</td>\n<td style=\"text-align:center\">小</td>\n<td>快</td>\n<td style=\"text-align:center\">慢</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ART</td>\n<td style=\"text-align:center\">AOT（预编译技术）</td>\n<td style=\"text-align:center\">应用每次启动时</td>\n<td style=\"text-align:center\">大（10-20%）</td>\n<td>满</td>\n<td style=\"text-align:center\">快</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"几张截图总结\"><a href=\"#几张截图总结\" class=\"headerlink\" title=\"几张截图总结\"></a>几张截图总结</h3><p><a href=\"http://blog.csdn.net/jason0539/article/details/50440669\" target=\"_blank\" rel=\"external\">查看原文</a></p>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tNc79ly1fp230bcp69j31ie11m4e4.jpg\" alt=\"\"></p>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tKfTcgy1fp230q7envj31hw0l277h.jpg\" alt=\"\"></p>\n","excerpt":"<p>Dalvik是Google公司自己设计用于Android平台的虚拟机，Dalvik经过优化，更加适合Android平台（具体优点见下面和JVM比较）。</p>\n<p>2014年6月谷歌I/O大会上，Android L(5.0)改动幅度比较大，删除了Dalvik，而是用ART代替。</p>\n<p>之前对本块的知识理解比较零散，再此本文总结下Dalvik和ART的原理，和二者的区别，以及Jvm和Dalvik的区别，以及Android的Apk编译打包的流程</p>","more":"<h3 id=\"Dalvik的相关知识\"><a href=\"#Dalvik的相关知识\" class=\"headerlink\" title=\"Dalvik的相关知识\"></a>Dalvik的相关知识</h3><ul>\n<li><strong>Google</strong>公司自己设计<strong>用于Android平台</strong>的<strong>java虚拟机</strong></li>\n<li>支持.dex（即Dalvik Executable）格式的java应用程序运行</li>\n<li>基于寄存器，寄存器CPU的一部分（适合内存和处理器有限的系统）</li>\n<li>允许有限的内存同时运行多个Dalvik虚拟机的实例</li>\n<li>每个Dalvik应用作为一个独立的Linux进程执行，防止一个程序崩溃导致所有程序崩溃</li>\n</ul>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tNc79ly1fp1zktmabmj30hm0r6780.jpg\" alt=\"\"></p>\n<h3 id=\"Jvm的相关知识\"><a href=\"#Jvm的相关知识\" class=\"headerlink\" title=\"Jvm的相关知识\"></a>Jvm的相关知识</h3><ul>\n<li>基于栈（内存的一部分）</li>\n<li>javac把程序源码编译成JAVA字节码后，JVM通过逐条解释字节码翻译成机器指令</li>\n</ul>\n<h3 id=\"Dalvik和Jvm的区别与联系\"><a href=\"#Dalvik和Jvm的区别与联系\" class=\"headerlink\" title=\"Dalvik和Jvm的区别与联系\"></a>Dalvik和Jvm的区别与联系</h3><h4 id=\"图表区别\"><a href=\"#图表区别\" class=\"headerlink\" title=\"图表区别\"></a>图表区别</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">本质</th>\n<th style=\"text-align:center\">字节码文件</th>\n<th style=\"text-align:center\">效率</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Dalvik</td>\n<td style=\"text-align:center\">基于寄存器</td>\n<td style=\"text-align:center\">一个.Dex文件</td>\n<td style=\"text-align:center\">高</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Jvm</td>\n<td style=\"text-align:center\">基于栈</td>\n<td style=\"text-align:center\">多个.class文件</td>\n<td style=\"text-align:center\">低</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"首要区别\"><a href=\"#首要区别\" class=\"headerlink\" title=\"首要区别\"></a>首要区别</h4><ul>\n<li>DVM基于寄存器，Jvm基于栈，基于寄存器的编译花费时间更短（在.dex字节码中，变量会赋值给65535个可用寄存器中的任何一个，Dalvik指令直接操作这些寄存器，而不是访问堆栈中的元素。）</li>\n<li>dex字节码更适合于内存和处理器速度有限的系统</li>\n<li>基于寄存器的Dalvik实现虽然牺牲了一些<strong>平台无关性</strong>，但是它在代码的执行效率上要更胜一筹。</li>\n<li>每一个Android 的App是独立跑在一个VM中的。因此一个App crash只会影响到自身的VM，不会影响到其他。Dalvik经过优化，允许在有限的内存中同时运行多个虚拟机的实例，并且每一个 Dalvik应用作为一个独立的Linux进程执行。</li>\n</ul>\n<h4 id=\"字节码区别\"><a href=\"#字节码区别\" class=\"headerlink\" title=\"字节码区别\"></a>字节码区别</h4><ul>\n<li>JVM字节码由.class组成，每个java文件对应一个.class</li>\n<li>DVM字节码只包含一个.dex文件，这个文件包含了程序中所有的类</li>\n</ul>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tNc79ly1fp1zfxzxttj30jq0o8tau.jpg\" alt=\"图解.class和.dex文件生成过程\"></p>\n<p><strong>Dalvik可执行文件体积小。Android SDK中有一个叫dx的工具负责将Java字节码转换为Dalvik字节码。</strong></p>\n<p>简单来讲，dex格式文件就是将多个class文件中公有的部分统一存放，去除冗余信息。</p>\n<h3 id=\"ART的相关知识（Android-Runtime）\"><a href=\"#ART的相关知识（Android-Runtime）\" class=\"headerlink\" title=\"ART的相关知识（Android Runtime）\"></a>ART的相关知识（Android Runtime）</h3><p>Android Runtime（缩写为 ART），是一种在Android操作系统上的运行环境，由Google公司研发，并在2013年作为Android 4.4系统中的一项测试功能正式对外发布，在Android 5.0及后续Android版本中作为正式的运行时库取代了以往的Dalvik虚拟机。ART能够把应用程序的字节码转换为机器码，是Android所使用的一种新的虚拟机。它与Dalvik的主要不同在于：Dalvik采用的是JIT技术，而ART采用Ahead-of-time（AOT）技术。 ART同时也改善了性能、垃圾回收(Garbage Collection)、应用程序除错以及性能分析。</p>\n<p>JIT最早在Android 2.2系统中引进到Dalvik虚拟机中，在应用程序启动时，JIT通过进行连续的性能分析来优化程序代码的执行，在程序运行的过程中，Dalvik虚拟机在不断的进行将字节码编译成机器码的工作。 与Dalvik虚拟机不同的是，ART引入了AOT这种预编译技术，在应用程序安装的过程中，ART就已经将所有的字节码重新编译成了机器码。应用程序运行过程中无需进行实时的编译工作，只需要进行直接调用。因此，ART极大的提高了应用程序的运行效率，同时也减少了手机的电量消耗，提高了移动设备的续航能力，在垃圾回收等机制上也有了较大的提升。 为了保证向下兼容，ART使用了相同的Dalvik字节码文件（dex），即在应用程序目录下保留了dex文件供旧程序调用然而.odex文件则替换成了可执行与可链接格式（ELF）可执行文件。一旦一个程序被ART的dex2oat命令编译，那么这个程序将会指通过ELF可执行文件来运行。因此，相对于Dalvik虚拟机模式，ART模式下Android应用程序的安装需要消耗更多的时间，同时也会占用更大的储存空间（指内部储存，用于储存编译后的代码）,但节省了很多Dalvik虚拟机用于实时编译的时间。</p>\n<p>Google公司在Android 4.4中带来的ART模式仅仅是ART的一个预览版，系统默认仍然使用的是Dalvik虚拟机，4.4上面提供的预览版ART相对于Android 5.0以后的ART运行时库有较大的不同，尤其体现在兼容性上。</p>\n<p>总结一下上诉内容：</p>\n<ul>\n<li>Android 4.4系统后出现（预览版），系统默认仍然使用的是Dalvik虚拟机，5.0以后是正式版取代了Dalvik虚拟机</li>\n<li>ART能够把应用程序的字节码转换为机器码，是Android所使用的一种新的虚拟机</li>\n<li>为了保证向下兼容，ART使用了相同的Dalvik字节码文件（dex）（而在安装过程中，会通过dex2oat工具生成OAT文件，具体见下面分析）</li>\n</ul>\n<h3 id=\"Android运行时ART加载OAT文件过程分析\"><a href=\"#Android运行时ART加载OAT文件过程分析\" class=\"headerlink\" title=\"Android运行时ART加载OAT文件过程分析\"></a>Android运行时ART加载OAT文件过程分析</h3><p><a href=\"http://blog.csdn.net/luoshengyang/article/details/39307813\">查看其他博客分析</a></p>\n<ul>\n<li>ART核心是OAT文件</li>\n<li>是APK在安装的过程中，会通过dex2oat工具生成一个OAT文件</li>\n<li>APK安装过程中生成的OAT文件的输入只有一个DEX文件，也就是来自于打包在要安装的APK文件里面的classes.dex文件（实际上，一个OAT文件是可以由若干个DEX生成的）</li>\n<li>OAT文件是一种Android私有ELF</li>\n<li>它不仅包含有从DEX文件翻译而来的本地机器指令，还包含有原来的DEX文件内容</li>\n</ul>\n<h3 id=\"Dalvik和ART的区别与联系\"><a href=\"#Dalvik和ART的区别与联系\" class=\"headerlink\" title=\"Dalvik和ART的区别与联系\"></a>Dalvik和ART的区别与联系</h3><ul>\n<li>Dalvik和ART使用的的都是.dex字节码，事实上我们把apk解压后确实只有classes.dex文件，但是在ART虚拟机在安装过程中通过dex2oat工具将一个或者诺干个dex生成一个OAT文件</li>\n<li>ART（Ahead-of-time   AOT预编译技术）：应用程序在<strong>安装过程</strong>中，ART将所有的字节码重新编译成了机器码，所以应用程序<strong>运行中</strong>无需进行实时编译工作，只需要进行直接调用，因此，ART极大的提高了应用程序的运行效率，同时也减少了手机的电量消耗，提高了移动设备的续航能力，在垃圾回收等机制上也有了较大的提升，但是安装需要更多的内存空间（存储编译后的代码）和时间，节省了很多Dalvik虚拟机用于实时编译的时间</li>\n<li>Dalvik（Just-in-time  JIT即时编译技术）：（jvm也是JIT即时编译），在Dalvik下，<strong>应用每次运行</strong>都需要通过即时编译器（JIT）将<strong>字节码转换为机器码</strong>，即每次都要编译加运行。虽然安装过程比较快，但是拖慢了应用每次启动的速度</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">编译技术</th>\n<th style=\"text-align:center\">（时机）字节码编译机器码</th>\n<th style=\"text-align:center\">占用空间</th>\n<th>安装时间</th>\n<th style=\"text-align:center\">运行效率（）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Dalvik</td>\n<td style=\"text-align:center\">JIT（即时编译）</td>\n<td style=\"text-align:center\">首次安装时</td>\n<td style=\"text-align:center\">小</td>\n<td>快</td>\n<td style=\"text-align:center\">慢</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ART</td>\n<td style=\"text-align:center\">AOT（预编译技术）</td>\n<td style=\"text-align:center\">应用每次启动时</td>\n<td style=\"text-align:center\">大（10-20%）</td>\n<td>满</td>\n<td style=\"text-align:center\">快</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"几张截图总结\"><a href=\"#几张截图总结\" class=\"headerlink\" title=\"几张截图总结\"></a>几张截图总结</h3><p><a href=\"http://blog.csdn.net/jason0539/article/details/50440669\">查看原文</a></p>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tNc79ly1fp230bcp69j31ie11m4e4.jpg\" alt=\"\"></p>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tKfTcgy1fp230q7envj31hw0l277h.jpg\" alt=\"\"></p>"},{"title":"^_^夏日～","date":"2018-07-28T08:28:43.000Z","password":null,"_content":"\n**夏日的夜晚**\n\n夏日的夜晚，猫坐在床边\n\n你吹着头发，不说话就很甜\n\n想和你一起看星空，只谈夜色和微风\n\n没有工作，没有早起\n\n只有甜甜的梦\n\n和梦里的你 ^_^ ～","source":"_posts/夏日.md","raw":"---\ntitle: ^_^夏日～\ndate: 2018-07-28 16:28:43\ntags:\n- Life\ncategories: Life\npassword:\n---\n\n**夏日的夜晚**\n\n夏日的夜晚，猫坐在床边\n\n你吹着头发，不说话就很甜\n\n想和你一起看星空，只谈夜色和微风\n\n没有工作，没有早起\n\n只有甜甜的梦\n\n和梦里的你 ^_^ ～","slug":"夏日","published":1,"updated":"2018-07-28T08:37:17.639Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6nd00301kygrcegb0mc","content":"<p><strong>夏日的夜晚</strong></p>\n<p>夏日的夜晚，猫坐在床边</p>\n<p>你吹着头发，不说话就很甜</p>\n<p>想和你一起看星空，只谈夜色和微风</p>\n<p>没有工作，没有早起</p>\n<p>只有甜甜的梦</p>\n<p>和梦里的你 ^_^ ～</p>\n","excerpt":"","more":"<p><strong>夏日的夜晚</strong></p>\n<p>夏日的夜晚，猫坐在床边</p>\n<p>你吹着头发，不说话就很甜</p>\n<p>想和你一起看星空，只谈夜色和微风</p>\n<p>没有工作，没有早起</p>\n<p>只有甜甜的梦</p>\n<p>和梦里的你 ^_^ ～</p>\n"},{"title":"浅析volatile关键字","date":"2017-03-07T06:51:10.000Z","password":null,"_content":"\n在看java并发的书的时候，看到了关于java的单例模式使用了volatile关键字，但是对volatile关键字的真正含义一直很模糊，本文就尝试浅析总结一下volatile的作用和具体用法。\n\n<!--more-->\n\n### 单例模式中的volatile关键字\n\n[查看原文](http://blog.csdn.net/u011248395/article/details/71087379)\n\n```java\npublic class TestInstance {\n\n    private volatile static TestInstance instance;\n\n    public static TestInstance getInstance() { //1\n        if (instance == null) {                  //2\n            synchronized (TestInstance.class) {//3\n                if (instance == null) { //4\n                    instance = new TestInstance();//5\n                }\n            }\n        }\n        return instance;//6\n    }\n}\n```\n\n**在并发情况下，如果没有volatile关键字，在第5行会出现问题**\n\n instance = new TestInstance();//5\t可以分解以下三部\n\n1，申请内存\n\n2，通过构造方法初始化对象\n\n3，将对象指向申请的内存\n\n但当A线程进行第五部初始化的时候，可能是因为构造函数里面的操作太多，所以A线程还没有初始化完毕，但已经被赋值了，也就是以上的顺序由1-2-3变成了1-3-2。此时B线程进来判断TestInstance不为null，错以为已经实例化完毕返回了一个未初始化的对象（因为构造函数未完全，初始设置值未完全的对象），就出问题了。如果声明称volatile，2和3步骤不会被排序\n\n### volatile的作用与特点\n\n通过上诉单例模式中volatile的使用，那么volatile关键字具体的作用到底是什么呢？\n\n首先看一张图\n\n![多线程中，主内存和线程工作内存关系](https://ws4.sinaimg.cn/large/006tNc79ly1fp4by9i6z9j31gc0n2qf8.jpg)\n\n由上图，需要知道的几点\n\n- java内存模型规定了所有的变量都存储在主内存中\n\n- Java内存模型分为**主内存**，和**工作内存**\n\n- 主内存是所有的线程所共享的，工作内存是每个线程自己有一个，不是共享的。\n\n- 线程的**工作内存**中保存了被该线程使用到的变量的**主内存副本拷贝**\n\n- 线程对变量的所有操作（读取、赋值），都必须在工作内存中进行，而不能直接读写主内存中的变量\n\n- 不同线程之间也**无法直接访问对方工作内存**中的变量\n\n  基于上诉的主内存和工作内存的描述，那么\n\n  **volatile**的作用：\n\n  volatile赋予了变量可见——**禁止编译器对成员变量进行优化，它修饰的成员变量在每次被线程访问时，都强迫从内存中重读该成员变量的值；而且，当成员变量发生变化时，强迫线程将变化值回写到共享内存，这样在任何时刻两个不同线程总是看到某一成员变量的同一个值**，这就是保证了可见性。\n\n  ​\n\n  从网上看见了一篇博客可以很好的说明，我将相关部分截了个图如下：\n\n  ![](https://ws1.sinaimg.cn/large/006tNc79ly1fp4c550vj9j311g174wnw.jpg)\n\n#### 多线程的三个特性\n\n[相关文章](https://www.cnblogs.com/chihirotan/p/6486436.html)\n\n- **原子性（Atomicity）**\n\n```\n原子性是指一个原子操作在cpu中不可以暂停然后再调度，既不被中断操作，要不执行完成，要不就不执行。原子操作保证了原子性问题。\n```\n\n需要注意的是：**i++不是原子操作**：\n\nx++（包含三个原子操作）a.将变量x 值取出放在寄存器中 b.将将寄存器中的值+1 c.将寄存器中的值赋值给x\n\n```\nsynchronized块之间的操作也具备原子性\n```\n\n- **可见性(Visibility)**\n\n```\n可见性就是指当一个线程修改了线程共享变量的值，其它线程能够立即得知这个修改。无论是普通变量还是volatile变量都是如此，普通变量与volatile变量的区别是volatile的特殊规则保证了新值能立即同步到主内存，以及每使用前立即从内存刷新。因为我们可以说volatile保证了线程操作时变量的可见性，而普通变量则不能保证这一点。\n```\n\n- **有序性(Ordering)**\n\n```\nJava内存模型中的程序天然有序性可以总结为一句话：如果在本线程内观察，所有操作都是有序的；如果在一个线程中观察另一个线程，所有操作都是无序的。前半句是指“线程内表现为串行语义”，后半句是指“指令重排序”现象和“工作内存主主内存同步延迟”现象。（比如上述单例模式中对象初始化的顺序对另外一个线程来讲可能会错序）\n```\n\n\n\n### volatile和synchronized的区别和联系\n\n[相关文章](https://www.cnblogs.com/hapjin/p/5492880.html)\n\n用法上：\n\n- synchronized往往作用于方法或代码块\n- volatile往往修饰变量。\n\n实现机制：\n\n- synchronized是利用锁实现互斥访问，多线程访问会阻塞\n- Volatile没有利用锁，而是利用内存共享，强制线程每次从主内存中讲到变量，而不是从线程的私有内存中读取变量，多线程访问不回阻塞\n\n区别：\n\n- syncchronized不仅保证了可见性，还保证了原子性，因为只有获得锁对象的线程才能进入同步代码块，从而保证同步代码块的所有语句全部都能执行。多个线程争抢syncchronized锁对象的时候，会出现阻塞\n- volatile只保证了可见性，不能保证原子性，不可保证同步，多个线程同时访问不会发生阻塞\n\n\n- ​\n\n### volatile关键字的正确使用（一句话概括volatile）\n\n一个线程修改某个变量后，其他线程需要知道这个变量修改后的最新的值，此时就需要使用volatile，保证多线程访问的是主内存的值，而不是访问各自线程的工作内存的副本值（其实仍然访问的是副本值，只不过副本值有修改后立即刷新到主内存中）也就是说保证了线程的可见性，但是不能像syncchronized保证原子性，volatile没有利用锁的机制，多线程访问时不会发生阻塞，也就是说volatile修饰的变量可以保证在一个线程中修改的时候，其他线程可以继续访问，一旦该变量修改完毕，其他线程再获取的一定是修改后的最新的值\n\n### synchronized同步的死锁是怎么产生的\n\n多线程死锁案例：\n\n![多线程死锁案例](https://ws1.sinaimg.cn/large/006tNc79gy1fp4eo3argaj30te14ab0o.jpg)\n\n什么是死锁：\n\n多个线程同时被阻塞,它们中的一个或者全部都在等待某个资源被释放.由于线程被无限期地阻塞,因此程序不能正常运行\n\n\n\n[多线程相关知识](https://www.cnblogs.com/chihirotan/p/6486436.html)","source":"_posts/浅析volatile关键字.md","raw":"---\ntitle: 浅析volatile关键字\ndate: 2017-03-07 14:51:10\ntags: \n- Android\ncategories: Android\npassword: \n---\n\n在看java并发的书的时候，看到了关于java的单例模式使用了volatile关键字，但是对volatile关键字的真正含义一直很模糊，本文就尝试浅析总结一下volatile的作用和具体用法。\n\n<!--more-->\n\n### 单例模式中的volatile关键字\n\n[查看原文](http://blog.csdn.net/u011248395/article/details/71087379)\n\n```java\npublic class TestInstance {\n\n    private volatile static TestInstance instance;\n\n    public static TestInstance getInstance() { //1\n        if (instance == null) {                  //2\n            synchronized (TestInstance.class) {//3\n                if (instance == null) { //4\n                    instance = new TestInstance();//5\n                }\n            }\n        }\n        return instance;//6\n    }\n}\n```\n\n**在并发情况下，如果没有volatile关键字，在第5行会出现问题**\n\n instance = new TestInstance();//5\t可以分解以下三部\n\n1，申请内存\n\n2，通过构造方法初始化对象\n\n3，将对象指向申请的内存\n\n但当A线程进行第五部初始化的时候，可能是因为构造函数里面的操作太多，所以A线程还没有初始化完毕，但已经被赋值了，也就是以上的顺序由1-2-3变成了1-3-2。此时B线程进来判断TestInstance不为null，错以为已经实例化完毕返回了一个未初始化的对象（因为构造函数未完全，初始设置值未完全的对象），就出问题了。如果声明称volatile，2和3步骤不会被排序\n\n### volatile的作用与特点\n\n通过上诉单例模式中volatile的使用，那么volatile关键字具体的作用到底是什么呢？\n\n首先看一张图\n\n![多线程中，主内存和线程工作内存关系](https://ws4.sinaimg.cn/large/006tNc79ly1fp4by9i6z9j31gc0n2qf8.jpg)\n\n由上图，需要知道的几点\n\n- java内存模型规定了所有的变量都存储在主内存中\n\n- Java内存模型分为**主内存**，和**工作内存**\n\n- 主内存是所有的线程所共享的，工作内存是每个线程自己有一个，不是共享的。\n\n- 线程的**工作内存**中保存了被该线程使用到的变量的**主内存副本拷贝**\n\n- 线程对变量的所有操作（读取、赋值），都必须在工作内存中进行，而不能直接读写主内存中的变量\n\n- 不同线程之间也**无法直接访问对方工作内存**中的变量\n\n  基于上诉的主内存和工作内存的描述，那么\n\n  **volatile**的作用：\n\n  volatile赋予了变量可见——**禁止编译器对成员变量进行优化，它修饰的成员变量在每次被线程访问时，都强迫从内存中重读该成员变量的值；而且，当成员变量发生变化时，强迫线程将变化值回写到共享内存，这样在任何时刻两个不同线程总是看到某一成员变量的同一个值**，这就是保证了可见性。\n\n  ​\n\n  从网上看见了一篇博客可以很好的说明，我将相关部分截了个图如下：\n\n  ![](https://ws1.sinaimg.cn/large/006tNc79ly1fp4c550vj9j311g174wnw.jpg)\n\n#### 多线程的三个特性\n\n[相关文章](https://www.cnblogs.com/chihirotan/p/6486436.html)\n\n- **原子性（Atomicity）**\n\n```\n原子性是指一个原子操作在cpu中不可以暂停然后再调度，既不被中断操作，要不执行完成，要不就不执行。原子操作保证了原子性问题。\n```\n\n需要注意的是：**i++不是原子操作**：\n\nx++（包含三个原子操作）a.将变量x 值取出放在寄存器中 b.将将寄存器中的值+1 c.将寄存器中的值赋值给x\n\n```\nsynchronized块之间的操作也具备原子性\n```\n\n- **可见性(Visibility)**\n\n```\n可见性就是指当一个线程修改了线程共享变量的值，其它线程能够立即得知这个修改。无论是普通变量还是volatile变量都是如此，普通变量与volatile变量的区别是volatile的特殊规则保证了新值能立即同步到主内存，以及每使用前立即从内存刷新。因为我们可以说volatile保证了线程操作时变量的可见性，而普通变量则不能保证这一点。\n```\n\n- **有序性(Ordering)**\n\n```\nJava内存模型中的程序天然有序性可以总结为一句话：如果在本线程内观察，所有操作都是有序的；如果在一个线程中观察另一个线程，所有操作都是无序的。前半句是指“线程内表现为串行语义”，后半句是指“指令重排序”现象和“工作内存主主内存同步延迟”现象。（比如上述单例模式中对象初始化的顺序对另外一个线程来讲可能会错序）\n```\n\n\n\n### volatile和synchronized的区别和联系\n\n[相关文章](https://www.cnblogs.com/hapjin/p/5492880.html)\n\n用法上：\n\n- synchronized往往作用于方法或代码块\n- volatile往往修饰变量。\n\n实现机制：\n\n- synchronized是利用锁实现互斥访问，多线程访问会阻塞\n- Volatile没有利用锁，而是利用内存共享，强制线程每次从主内存中讲到变量，而不是从线程的私有内存中读取变量，多线程访问不回阻塞\n\n区别：\n\n- syncchronized不仅保证了可见性，还保证了原子性，因为只有获得锁对象的线程才能进入同步代码块，从而保证同步代码块的所有语句全部都能执行。多个线程争抢syncchronized锁对象的时候，会出现阻塞\n- volatile只保证了可见性，不能保证原子性，不可保证同步，多个线程同时访问不会发生阻塞\n\n\n- ​\n\n### volatile关键字的正确使用（一句话概括volatile）\n\n一个线程修改某个变量后，其他线程需要知道这个变量修改后的最新的值，此时就需要使用volatile，保证多线程访问的是主内存的值，而不是访问各自线程的工作内存的副本值（其实仍然访问的是副本值，只不过副本值有修改后立即刷新到主内存中）也就是说保证了线程的可见性，但是不能像syncchronized保证原子性，volatile没有利用锁的机制，多线程访问时不会发生阻塞，也就是说volatile修饰的变量可以保证在一个线程中修改的时候，其他线程可以继续访问，一旦该变量修改完毕，其他线程再获取的一定是修改后的最新的值\n\n### synchronized同步的死锁是怎么产生的\n\n多线程死锁案例：\n\n![多线程死锁案例](https://ws1.sinaimg.cn/large/006tNc79gy1fp4eo3argaj30te14ab0o.jpg)\n\n什么是死锁：\n\n多个线程同时被阻塞,它们中的一个或者全部都在等待某个资源被释放.由于线程被无限期地阻塞,因此程序不能正常运行\n\n\n\n[多线程相关知识](https://www.cnblogs.com/chihirotan/p/6486436.html)","slug":"浅析volatile关键字","published":1,"updated":"2018-07-19T01:50:29.933Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6ne00331kygkk55pkjd","content":"<p>在看java并发的书的时候，看到了关于java的单例模式使用了volatile关键字，但是对volatile关键字的真正含义一直很模糊，本文就尝试浅析总结一下volatile的作用和具体用法。</p>\n<a id=\"more\"></a>\n<h3 id=\"单例模式中的volatile关键字\"><a href=\"#单例模式中的volatile关键字\" class=\"headerlink\" title=\"单例模式中的volatile关键字\"></a>单例模式中的volatile关键字</h3><p><a href=\"http://blog.csdn.net/u011248395/article/details/71087379\" target=\"_blank\" rel=\"external\">查看原文</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestInstance</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> TestInstance instance;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> TestInstance <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">//1</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;                  <span class=\"comment\">//2</span></div><div class=\"line\">            <span class=\"keyword\">synchronized</span> (TestInstance.class) &#123;<span class=\"comment\">//3</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">//4</span></div><div class=\"line\">                    instance = <span class=\"keyword\">new</span> TestInstance();<span class=\"comment\">//5</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;<span class=\"comment\">//6</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>在并发情况下，如果没有volatile关键字，在第5行会出现问题</strong></p>\n<p> instance = new TestInstance();//5    可以分解以下三部</p>\n<p>1，申请内存</p>\n<p>2，通过构造方法初始化对象</p>\n<p>3，将对象指向申请的内存</p>\n<p>但当A线程进行第五部初始化的时候，可能是因为构造函数里面的操作太多，所以A线程还没有初始化完毕，但已经被赋值了，也就是以上的顺序由1-2-3变成了1-3-2。此时B线程进来判断TestInstance不为null，错以为已经实例化完毕返回了一个未初始化的对象（因为构造函数未完全，初始设置值未完全的对象），就出问题了。如果声明称volatile，2和3步骤不会被排序</p>\n<h3 id=\"volatile的作用与特点\"><a href=\"#volatile的作用与特点\" class=\"headerlink\" title=\"volatile的作用与特点\"></a>volatile的作用与特点</h3><p>通过上诉单例模式中volatile的使用，那么volatile关键字具体的作用到底是什么呢？</p>\n<p>首先看一张图</p>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tNc79ly1fp4by9i6z9j31gc0n2qf8.jpg\" alt=\"多线程中，主内存和线程工作内存关系\"></p>\n<p>由上图，需要知道的几点</p>\n<ul>\n<li><p>java内存模型规定了所有的变量都存储在主内存中</p>\n</li>\n<li><p>Java内存模型分为<strong>主内存</strong>，和<strong>工作内存</strong></p>\n</li>\n<li><p>主内存是所有的线程所共享的，工作内存是每个线程自己有一个，不是共享的。</p>\n</li>\n<li><p>线程的<strong>工作内存</strong>中保存了被该线程使用到的变量的<strong>主内存副本拷贝</strong></p>\n</li>\n<li><p>线程对变量的所有操作（读取、赋值），都必须在工作内存中进行，而不能直接读写主内存中的变量</p>\n</li>\n<li><p>不同线程之间也<strong>无法直接访问对方工作内存</strong>中的变量</p>\n<p>基于上诉的主内存和工作内存的描述，那么</p>\n<p><strong>volatile</strong>的作用：</p>\n<p>volatile赋予了变量可见——<strong>禁止编译器对成员变量进行优化，它修饰的成员变量在每次被线程访问时，都强迫从内存中重读该成员变量的值；而且，当成员变量发生变化时，强迫线程将变化值回写到共享内存，这样在任何时刻两个不同线程总是看到某一成员变量的同一个值</strong>，这就是保证了可见性。</p>\n<p>​</p>\n<p>从网上看见了一篇博客可以很好的说明，我将相关部分截了个图如下：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tNc79ly1fp4c550vj9j311g174wnw.jpg\" alt=\"\"></p>\n</li>\n</ul>\n<h4 id=\"多线程的三个特性\"><a href=\"#多线程的三个特性\" class=\"headerlink\" title=\"多线程的三个特性\"></a>多线程的三个特性</h4><p><a href=\"https://www.cnblogs.com/chihirotan/p/6486436.html\" target=\"_blank\" rel=\"external\">相关文章</a></p>\n<ul>\n<li><strong>原子性（Atomicity）</strong></li>\n</ul>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">原子性是指一个原子操作在<span class=\"meta\">cpu</span>中不可以暂停然后再调度，既不被中断操作，要不执行完成，要不就不执行。原子操作保证了原子性问题。</div></pre></td></tr></table></figure>\n<p>需要注意的是：<strong>i++不是原子操作</strong>：</p>\n<p>x++（包含三个原子操作）a.将变量x 值取出放在寄存器中 b.将将寄存器中的值+1 c.将寄存器中的值赋值给x</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">synchronized</span>块之间的操作也具备原子性</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>可见性(Visibility)</strong></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">可见性就是指当一个线程修改了线程共享变量的值，其它线程能够立即得知这个修改。无论是普通变量还是<span class=\"keyword\">volatile</span>变量都是如此，普通变量与<span class=\"keyword\">volatile</span>变量的区别是<span class=\"keyword\">volatile</span>的特殊规则保证了新值能立即同步到主内存，以及每使用前立即从内存刷新。因为我们可以说<span class=\"keyword\">volatile</span>保证了线程操作时变量的可见性，而普通变量则不能保证这一点。</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>有序性(Ordering)</strong></li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Java内存模型中的程序天然有序性可以总结为一句话：如果在本线程内观察，所有操作都是有序的；如果在一个线程中观察另一个线程，所有操作都是无序的。前半句是指“线程内表现为串行语义”，后半句是指“指令重排序”现象和“工作内存主主内存同步延迟”现象。（比如上述单例模式中对象初始化的顺序对另外一个线程来讲可能会错序）</div></pre></td></tr></table></figure>\n<h3 id=\"volatile和synchronized的区别和联系\"><a href=\"#volatile和synchronized的区别和联系\" class=\"headerlink\" title=\"volatile和synchronized的区别和联系\"></a>volatile和synchronized的区别和联系</h3><p><a href=\"https://www.cnblogs.com/hapjin/p/5492880.html\" target=\"_blank\" rel=\"external\">相关文章</a></p>\n<p>用法上：</p>\n<ul>\n<li>synchronized往往作用于方法或代码块</li>\n<li>volatile往往修饰变量。</li>\n</ul>\n<p>实现机制：</p>\n<ul>\n<li>synchronized是利用锁实现互斥访问，多线程访问会阻塞</li>\n<li>Volatile没有利用锁，而是利用内存共享，强制线程每次从主内存中讲到变量，而不是从线程的私有内存中读取变量，多线程访问不回阻塞</li>\n</ul>\n<p>区别：</p>\n<ul>\n<li>syncchronized不仅保证了可见性，还保证了原子性，因为只有获得锁对象的线程才能进入同步代码块，从而保证同步代码块的所有语句全部都能执行。多个线程争抢syncchronized锁对象的时候，会出现阻塞</li>\n<li>volatile只保证了可见性，不能保证原子性，不可保证同步，多个线程同时访问不会发生阻塞</li>\n</ul>\n<ul>\n<li>​</li>\n</ul>\n<h3 id=\"volatile关键字的正确使用（一句话概括volatile）\"><a href=\"#volatile关键字的正确使用（一句话概括volatile）\" class=\"headerlink\" title=\"volatile关键字的正确使用（一句话概括volatile）\"></a>volatile关键字的正确使用（一句话概括volatile）</h3><p>一个线程修改某个变量后，其他线程需要知道这个变量修改后的最新的值，此时就需要使用volatile，保证多线程访问的是主内存的值，而不是访问各自线程的工作内存的副本值（其实仍然访问的是副本值，只不过副本值有修改后立即刷新到主内存中）也就是说保证了线程的可见性，但是不能像syncchronized保证原子性，volatile没有利用锁的机制，多线程访问时不会发生阻塞，也就是说volatile修饰的变量可以保证在一个线程中修改的时候，其他线程可以继续访问，一旦该变量修改完毕，其他线程再获取的一定是修改后的最新的值</p>\n<h3 id=\"synchronized同步的死锁是怎么产生的\"><a href=\"#synchronized同步的死锁是怎么产生的\" class=\"headerlink\" title=\"synchronized同步的死锁是怎么产生的\"></a>synchronized同步的死锁是怎么产生的</h3><p>多线程死锁案例：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tNc79gy1fp4eo3argaj30te14ab0o.jpg\" alt=\"多线程死锁案例\"></p>\n<p>什么是死锁：</p>\n<p>多个线程同时被阻塞,它们中的一个或者全部都在等待某个资源被释放.由于线程被无限期地阻塞,因此程序不能正常运行</p>\n<p><a href=\"https://www.cnblogs.com/chihirotan/p/6486436.html\" target=\"_blank\" rel=\"external\">多线程相关知识</a></p>\n","excerpt":"<p>在看java并发的书的时候，看到了关于java的单例模式使用了volatile关键字，但是对volatile关键字的真正含义一直很模糊，本文就尝试浅析总结一下volatile的作用和具体用法。</p>","more":"<h3 id=\"单例模式中的volatile关键字\"><a href=\"#单例模式中的volatile关键字\" class=\"headerlink\" title=\"单例模式中的volatile关键字\"></a>单例模式中的volatile关键字</h3><p><a href=\"http://blog.csdn.net/u011248395/article/details/71087379\">查看原文</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestInstance</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> TestInstance instance;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> TestInstance <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">//1</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;                  <span class=\"comment\">//2</span></div><div class=\"line\">            <span class=\"keyword\">synchronized</span> (TestInstance.class) &#123;<span class=\"comment\">//3</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">//4</span></div><div class=\"line\">                    instance = <span class=\"keyword\">new</span> TestInstance();<span class=\"comment\">//5</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;<span class=\"comment\">//6</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>在并发情况下，如果没有volatile关键字，在第5行会出现问题</strong></p>\n<p> instance = new TestInstance();//5    可以分解以下三部</p>\n<p>1，申请内存</p>\n<p>2，通过构造方法初始化对象</p>\n<p>3，将对象指向申请的内存</p>\n<p>但当A线程进行第五部初始化的时候，可能是因为构造函数里面的操作太多，所以A线程还没有初始化完毕，但已经被赋值了，也就是以上的顺序由1-2-3变成了1-3-2。此时B线程进来判断TestInstance不为null，错以为已经实例化完毕返回了一个未初始化的对象（因为构造函数未完全，初始设置值未完全的对象），就出问题了。如果声明称volatile，2和3步骤不会被排序</p>\n<h3 id=\"volatile的作用与特点\"><a href=\"#volatile的作用与特点\" class=\"headerlink\" title=\"volatile的作用与特点\"></a>volatile的作用与特点</h3><p>通过上诉单例模式中volatile的使用，那么volatile关键字具体的作用到底是什么呢？</p>\n<p>首先看一张图</p>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tNc79ly1fp4by9i6z9j31gc0n2qf8.jpg\" alt=\"多线程中，主内存和线程工作内存关系\"></p>\n<p>由上图，需要知道的几点</p>\n<ul>\n<li><p>java内存模型规定了所有的变量都存储在主内存中</p>\n</li>\n<li><p>Java内存模型分为<strong>主内存</strong>，和<strong>工作内存</strong></p>\n</li>\n<li><p>主内存是所有的线程所共享的，工作内存是每个线程自己有一个，不是共享的。</p>\n</li>\n<li><p>线程的<strong>工作内存</strong>中保存了被该线程使用到的变量的<strong>主内存副本拷贝</strong></p>\n</li>\n<li><p>线程对变量的所有操作（读取、赋值），都必须在工作内存中进行，而不能直接读写主内存中的变量</p>\n</li>\n<li><p>不同线程之间也<strong>无法直接访问对方工作内存</strong>中的变量</p>\n<p>基于上诉的主内存和工作内存的描述，那么</p>\n<p><strong>volatile</strong>的作用：</p>\n<p>volatile赋予了变量可见——<strong>禁止编译器对成员变量进行优化，它修饰的成员变量在每次被线程访问时，都强迫从内存中重读该成员变量的值；而且，当成员变量发生变化时，强迫线程将变化值回写到共享内存，这样在任何时刻两个不同线程总是看到某一成员变量的同一个值</strong>，这就是保证了可见性。</p>\n<p>​</p>\n<p>从网上看见了一篇博客可以很好的说明，我将相关部分截了个图如下：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tNc79ly1fp4c550vj9j311g174wnw.jpg\" alt=\"\"></p>\n</li>\n</ul>\n<h4 id=\"多线程的三个特性\"><a href=\"#多线程的三个特性\" class=\"headerlink\" title=\"多线程的三个特性\"></a>多线程的三个特性</h4><p><a href=\"https://www.cnblogs.com/chihirotan/p/6486436.html\">相关文章</a></p>\n<ul>\n<li><strong>原子性（Atomicity）</strong></li>\n</ul>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">原子性是指一个原子操作在<span class=\"meta\">cpu</span>中不可以暂停然后再调度，既不被中断操作，要不执行完成，要不就不执行。原子操作保证了原子性问题。</div></pre></td></tr></table></figure>\n<p>需要注意的是：<strong>i++不是原子操作</strong>：</p>\n<p>x++（包含三个原子操作）a.将变量x 值取出放在寄存器中 b.将将寄存器中的值+1 c.将寄存器中的值赋值给x</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">synchronized</span>块之间的操作也具备原子性</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>可见性(Visibility)</strong></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">可见性就是指当一个线程修改了线程共享变量的值，其它线程能够立即得知这个修改。无论是普通变量还是<span class=\"keyword\">volatile</span>变量都是如此，普通变量与<span class=\"keyword\">volatile</span>变量的区别是<span class=\"keyword\">volatile</span>的特殊规则保证了新值能立即同步到主内存，以及每使用前立即从内存刷新。因为我们可以说<span class=\"keyword\">volatile</span>保证了线程操作时变量的可见性，而普通变量则不能保证这一点。</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>有序性(Ordering)</strong></li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Java内存模型中的程序天然有序性可以总结为一句话：如果在本线程内观察，所有操作都是有序的；如果在一个线程中观察另一个线程，所有操作都是无序的。前半句是指“线程内表现为串行语义”，后半句是指“指令重排序”现象和“工作内存主主内存同步延迟”现象。（比如上述单例模式中对象初始化的顺序对另外一个线程来讲可能会错序）</div></pre></td></tr></table></figure>\n<h3 id=\"volatile和synchronized的区别和联系\"><a href=\"#volatile和synchronized的区别和联系\" class=\"headerlink\" title=\"volatile和synchronized的区别和联系\"></a>volatile和synchronized的区别和联系</h3><p><a href=\"https://www.cnblogs.com/hapjin/p/5492880.html\">相关文章</a></p>\n<p>用法上：</p>\n<ul>\n<li>synchronized往往作用于方法或代码块</li>\n<li>volatile往往修饰变量。</li>\n</ul>\n<p>实现机制：</p>\n<ul>\n<li>synchronized是利用锁实现互斥访问，多线程访问会阻塞</li>\n<li>Volatile没有利用锁，而是利用内存共享，强制线程每次从主内存中讲到变量，而不是从线程的私有内存中读取变量，多线程访问不回阻塞</li>\n</ul>\n<p>区别：</p>\n<ul>\n<li>syncchronized不仅保证了可见性，还保证了原子性，因为只有获得锁对象的线程才能进入同步代码块，从而保证同步代码块的所有语句全部都能执行。多个线程争抢syncchronized锁对象的时候，会出现阻塞</li>\n<li>volatile只保证了可见性，不能保证原子性，不可保证同步，多个线程同时访问不会发生阻塞</li>\n</ul>\n<ul>\n<li>​</li>\n</ul>\n<h3 id=\"volatile关键字的正确使用（一句话概括volatile）\"><a href=\"#volatile关键字的正确使用（一句话概括volatile）\" class=\"headerlink\" title=\"volatile关键字的正确使用（一句话概括volatile）\"></a>volatile关键字的正确使用（一句话概括volatile）</h3><p>一个线程修改某个变量后，其他线程需要知道这个变量修改后的最新的值，此时就需要使用volatile，保证多线程访问的是主内存的值，而不是访问各自线程的工作内存的副本值（其实仍然访问的是副本值，只不过副本值有修改后立即刷新到主内存中）也就是说保证了线程的可见性，但是不能像syncchronized保证原子性，volatile没有利用锁的机制，多线程访问时不会发生阻塞，也就是说volatile修饰的变量可以保证在一个线程中修改的时候，其他线程可以继续访问，一旦该变量修改完毕，其他线程再获取的一定是修改后的最新的值</p>\n<h3 id=\"synchronized同步的死锁是怎么产生的\"><a href=\"#synchronized同步的死锁是怎么产生的\" class=\"headerlink\" title=\"synchronized同步的死锁是怎么产生的\"></a>synchronized同步的死锁是怎么产生的</h3><p>多线程死锁案例：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tNc79gy1fp4eo3argaj30te14ab0o.jpg\" alt=\"多线程死锁案例\"></p>\n<p>什么是死锁：</p>\n<p>多个线程同时被阻塞,它们中的一个或者全部都在等待某个资源被释放.由于线程被无限期地阻塞,因此程序不能正常运行</p>\n<p><a href=\"https://www.cnblogs.com/chihirotan/p/6486436.html\">多线程相关知识</a></p>"},{"title":"线程安全的CopyOnWriteArrayList","date":"2017-02-15T16:28:47.000Z","password":123456,"_content":"\n最近翻阅EventBus源码，在subscribe方法中，看到了CopyOnWriteArrayList这个类，一时竟不知其原理是什么，本文简要记录一下CopyOnWriteArrayList的相关介绍\n\n<!--more-->\n\n### 先看一段EventBus的subscribe（）的代码\n\n![](http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/vj1ty.png)\n\n这段代码是EventBus中subscribe方法，里面涉及到了subscriptionsByEventType的遍历过程中按照优先级排序\n\n关于EventBus的具体源码我将在后面会整理，这里我们只关注CopyOnWriteArrayList即可\n\n可以看到，在遍历的过程中，调用了`subscriptions.add(i,newSubscription)`来按照优先级进行排序，我相信任何一个懂java的都知道如果使用普通Arraylist，都会报错（并发修改异常），那么我们下面来证实一下\n\n### 不使用CopyOnWriteArrayList\n\n先写一段代码证明`CopyOnWriteArrayList`确实是线程安全的。\n\n> ReadThread.java\n\n```java\nimport java.util.List;\n\npublic class ReadThread implements Runnable {\n    private List<Integer> list;\n\n    public ReadThread(List<Integer> list) {\n        this.list = list;\n    }\n\n    @Override\n    public void run() {\n        for (Integer ele : list) {\n            System.out.println(\"ReadThread:\"+ele);\n        }\n    }\n}\n```\n\n> WriteThread.java\n\n```java\nimport java.util.List;\n\npublic class WriteThread implements Runnable {\n    private List<Integer> list;\n\n    public WriteThread(List<Integer> list) {\n        this.list = list;\n    }\n\n    @Override\n    public void run() {\n        this.list.add(9);\n    }\n}\n```\n\n> TestCopyOnWriteArrayList.java\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.concurrent.CopyOnWriteArrayList;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class TestCopyOnWriteArrayList {\n\n    private void test() {\n        //1、初始化CopyOnWriteArrayList\n        List<Integer> tempList = Arrays.asList(new Integer [] {1,2});\n        CopyOnWriteArrayList<Integer> copyList = new CopyOnWriteArrayList<>(tempList);\n\n\n        //2、模拟多线程对list进行读和写\n        ExecutorService executorService = Executors.newFixedThreadPool(10);\n        executorService.execute(new ReadThread(copyList));\n        executorService.execute(new WriteThread(copyList));\n        executorService.execute(new WriteThread(copyList));\n        executorService.execute(new WriteThread(copyList));\n        executorService.execute(new ReadThread(copyList));\n        executorService.execute(new WriteThread(copyList));\n        executorService.execute(new ReadThread(copyList));\n        executorService.execute(new WriteThread(copyList));\n\n        System.out.println(\"copyList size:\"+copyList.size());\n    }\n\n\n    public static void main(String[] args) {\n        new TestCopyOnWriteArrayList().test();\n    }\n}\n```\n\n运行上面的代码，没有报出\n\njava.util.ConcurrentModificationException\n\n说明了CopyOnWriteArrayList并发多线程的环境下，仍然能很好的工作。\n\n### CopyOnWriteArrayList如何做到线程安全\n\n`CopyOnWriteArrayList`使用了一种叫**写时复制**的方法，当有新元素添加到`CopyOnWriteArrayList`时，先从原有的数组中拷贝一份出来，然后在新的数组做写操作，写完之后，再将原来的数组引用指向到新数组。\n\n当有新元素加入的时候，如下图，创建新数组，并往新数组中加入一个新元素,这个时候，array这个引用仍然是指向原数组的。\n\n![](http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/7cbd4.png)\n\n当元素在新数组添加成功后，将array这个引用指向新数组。\n\n![](http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/bmcdz.png)\n\n\n\n\n\n### CopyOnWriteArrayList的源码\n\n```java\npublic boolean add(E e) {\n    //1、先加锁\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        Object[] elements = getArray();\n        int len = elements.length;\n        //2、拷贝数组\n        Object[] newElements = Arrays.copyOf(elements, len + 1);\n        //3、将元素加入到新数组中\n        newElements[len] = e;\n        //4、将array引用指向到新数组\n        setArray(newElements);\n        return true;\n    } finally {\n       //5、解锁\n        lock.unlock();\n    }\n}\n```\n\n由于所有的写操作都是在新数组进行的，这个时候如果有线程并发的写，则通过锁来控制，如果有线程并发的读，则分几种情况： \n1、如果写操作未完成，那么直接读取原数组的数据； \n2、如果写操作完成，但是引用还未指向新数组，那么也是读取原数组数据； \n3、如果写操作完成，并且引用已经指向了新的数组，那么直接从新数组中读取数据。\n\n可见，`CopyOnWriteArrayList`的**读操作**是可以不用**加锁**的。\n\n### CopyOnWriteArrayList使用场景\n\n通过上面的分析，`CopyOnWriteArrayList` 有几个缺点： \n1、由于写操作的时候，需要拷贝数组，会消耗内存，如果原数组的内容比较多的情况下，可能导致`young gc`或者`full gc`\n\n2、不能用于**实时读**的场景，像拷贝数组、新增元素都需要时间，所以调用一个`set`操作后，读取到数据可能还是旧的,虽然`CopyOnWriteArrayList` 能做到**最终一致性**,但是还是没法满足实时性要求；\n\n`CopyOnWriteArrayList` 合适**读多写少**的场景，不过这类慎用 \n因为谁也没法保证`CopyOnWriteArrayList` 到底要放置多少数据，万一数据稍微有点多，每次add/set都要重新复制数组，这个代价实在太高昂了。在高性能的互联网应用中，这种操作分分钟引起故障。\n\n### 思想\n\n如上面的分析CopyOnWriteArrayList表达的一些思想： \n1、读写分离，读和写分开 \n2、最终一致性 \n3、使用另外开辟空间的思路，来解决并发冲突\n\n参考文章：\n\n[1](http://blog.csdn.net/linsongbin1/article/details/54581787)","source":"_posts/线程安全的CopyOnWriteArrayList.md","raw":"---\ntitle: 线程安全的CopyOnWriteArrayList\ndate: 2017-02-16 00:28:47\ntags: \n- Android\ncategories: Android\npassword: 123456\n---\n\n最近翻阅EventBus源码，在subscribe方法中，看到了CopyOnWriteArrayList这个类，一时竟不知其原理是什么，本文简要记录一下CopyOnWriteArrayList的相关介绍\n\n<!--more-->\n\n### 先看一段EventBus的subscribe（）的代码\n\n![](http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/vj1ty.png)\n\n这段代码是EventBus中subscribe方法，里面涉及到了subscriptionsByEventType的遍历过程中按照优先级排序\n\n关于EventBus的具体源码我将在后面会整理，这里我们只关注CopyOnWriteArrayList即可\n\n可以看到，在遍历的过程中，调用了`subscriptions.add(i,newSubscription)`来按照优先级进行排序，我相信任何一个懂java的都知道如果使用普通Arraylist，都会报错（并发修改异常），那么我们下面来证实一下\n\n### 不使用CopyOnWriteArrayList\n\n先写一段代码证明`CopyOnWriteArrayList`确实是线程安全的。\n\n> ReadThread.java\n\n```java\nimport java.util.List;\n\npublic class ReadThread implements Runnable {\n    private List<Integer> list;\n\n    public ReadThread(List<Integer> list) {\n        this.list = list;\n    }\n\n    @Override\n    public void run() {\n        for (Integer ele : list) {\n            System.out.println(\"ReadThread:\"+ele);\n        }\n    }\n}\n```\n\n> WriteThread.java\n\n```java\nimport java.util.List;\n\npublic class WriteThread implements Runnable {\n    private List<Integer> list;\n\n    public WriteThread(List<Integer> list) {\n        this.list = list;\n    }\n\n    @Override\n    public void run() {\n        this.list.add(9);\n    }\n}\n```\n\n> TestCopyOnWriteArrayList.java\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.concurrent.CopyOnWriteArrayList;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class TestCopyOnWriteArrayList {\n\n    private void test() {\n        //1、初始化CopyOnWriteArrayList\n        List<Integer> tempList = Arrays.asList(new Integer [] {1,2});\n        CopyOnWriteArrayList<Integer> copyList = new CopyOnWriteArrayList<>(tempList);\n\n\n        //2、模拟多线程对list进行读和写\n        ExecutorService executorService = Executors.newFixedThreadPool(10);\n        executorService.execute(new ReadThread(copyList));\n        executorService.execute(new WriteThread(copyList));\n        executorService.execute(new WriteThread(copyList));\n        executorService.execute(new WriteThread(copyList));\n        executorService.execute(new ReadThread(copyList));\n        executorService.execute(new WriteThread(copyList));\n        executorService.execute(new ReadThread(copyList));\n        executorService.execute(new WriteThread(copyList));\n\n        System.out.println(\"copyList size:\"+copyList.size());\n    }\n\n\n    public static void main(String[] args) {\n        new TestCopyOnWriteArrayList().test();\n    }\n}\n```\n\n运行上面的代码，没有报出\n\njava.util.ConcurrentModificationException\n\n说明了CopyOnWriteArrayList并发多线程的环境下，仍然能很好的工作。\n\n### CopyOnWriteArrayList如何做到线程安全\n\n`CopyOnWriteArrayList`使用了一种叫**写时复制**的方法，当有新元素添加到`CopyOnWriteArrayList`时，先从原有的数组中拷贝一份出来，然后在新的数组做写操作，写完之后，再将原来的数组引用指向到新数组。\n\n当有新元素加入的时候，如下图，创建新数组，并往新数组中加入一个新元素,这个时候，array这个引用仍然是指向原数组的。\n\n![](http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/7cbd4.png)\n\n当元素在新数组添加成功后，将array这个引用指向新数组。\n\n![](http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/bmcdz.png)\n\n\n\n\n\n### CopyOnWriteArrayList的源码\n\n```java\npublic boolean add(E e) {\n    //1、先加锁\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        Object[] elements = getArray();\n        int len = elements.length;\n        //2、拷贝数组\n        Object[] newElements = Arrays.copyOf(elements, len + 1);\n        //3、将元素加入到新数组中\n        newElements[len] = e;\n        //4、将array引用指向到新数组\n        setArray(newElements);\n        return true;\n    } finally {\n       //5、解锁\n        lock.unlock();\n    }\n}\n```\n\n由于所有的写操作都是在新数组进行的，这个时候如果有线程并发的写，则通过锁来控制，如果有线程并发的读，则分几种情况： \n1、如果写操作未完成，那么直接读取原数组的数据； \n2、如果写操作完成，但是引用还未指向新数组，那么也是读取原数组数据； \n3、如果写操作完成，并且引用已经指向了新的数组，那么直接从新数组中读取数据。\n\n可见，`CopyOnWriteArrayList`的**读操作**是可以不用**加锁**的。\n\n### CopyOnWriteArrayList使用场景\n\n通过上面的分析，`CopyOnWriteArrayList` 有几个缺点： \n1、由于写操作的时候，需要拷贝数组，会消耗内存，如果原数组的内容比较多的情况下，可能导致`young gc`或者`full gc`\n\n2、不能用于**实时读**的场景，像拷贝数组、新增元素都需要时间，所以调用一个`set`操作后，读取到数据可能还是旧的,虽然`CopyOnWriteArrayList` 能做到**最终一致性**,但是还是没法满足实时性要求；\n\n`CopyOnWriteArrayList` 合适**读多写少**的场景，不过这类慎用 \n因为谁也没法保证`CopyOnWriteArrayList` 到底要放置多少数据，万一数据稍微有点多，每次add/set都要重新复制数组，这个代价实在太高昂了。在高性能的互联网应用中，这种操作分分钟引起故障。\n\n### 思想\n\n如上面的分析CopyOnWriteArrayList表达的一些思想： \n1、读写分离，读和写分开 \n2、最终一致性 \n3、使用另外开辟空间的思路，来解决并发冲突\n\n参考文章：\n\n[1](http://blog.csdn.net/linsongbin1/article/details/54581787)","slug":"线程安全的CopyOnWriteArrayList","published":1,"updated":"2018-07-19T02:07:42.880Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6ng00381kygasy19z7r","content":"<p>最近翻阅EventBus源码，在subscribe方法中，看到了CopyOnWriteArrayList这个类，一时竟不知其原理是什么，本文简要记录一下CopyOnWriteArrayList的相关介绍</p>\n<a id=\"more\"></a>\n<h3 id=\"先看一段EventBus的subscribe（）的代码\"><a href=\"#先看一段EventBus的subscribe（）的代码\" class=\"headerlink\" title=\"先看一段EventBus的subscribe（）的代码\"></a>先看一段EventBus的subscribe（）的代码</h3><p><img src=\"http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/vj1ty.png\" alt=\"\"></p>\n<p>这段代码是EventBus中subscribe方法，里面涉及到了subscriptionsByEventType的遍历过程中按照优先级排序</p>\n<p>关于EventBus的具体源码我将在后面会整理，这里我们只关注CopyOnWriteArrayList即可</p>\n<p>可以看到，在遍历的过程中，调用了<code>subscriptions.add(i,newSubscription)</code>来按照优先级进行排序，我相信任何一个懂java的都知道如果使用普通Arraylist，都会报错（并发修改异常），那么我们下面来证实一下</p>\n<h3 id=\"不使用CopyOnWriteArrayList\"><a href=\"#不使用CopyOnWriteArrayList\" class=\"headerlink\" title=\"不使用CopyOnWriteArrayList\"></a>不使用CopyOnWriteArrayList</h3><p>先写一段代码证明<code>CopyOnWriteArrayList</code>确实是线程安全的。</p>\n<blockquote>\n<p>ReadThread.java</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReadThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;Integer&gt; list;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ReadThread</span><span class=\"params\">(List&lt;Integer&gt; list)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.list = list;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (Integer ele : list) &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"ReadThread:\"</span>+ele);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>WriteThread.java</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WriteThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;Integer&gt; list;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WriteThread</span><span class=\"params\">(List&lt;Integer&gt; list)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.list = list;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.list.add(<span class=\"number\">9</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>TestCopyOnWriteArrayList.java</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CopyOnWriteArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestCopyOnWriteArrayList</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//1、初始化CopyOnWriteArrayList</span></div><div class=\"line\">        List&lt;Integer&gt; tempList = Arrays.asList(<span class=\"keyword\">new</span> Integer [] &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;);</div><div class=\"line\">        CopyOnWriteArrayList&lt;Integer&gt; copyList = <span class=\"keyword\">new</span> CopyOnWriteArrayList&lt;&gt;(tempList);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//2、模拟多线程对list进行读和写</span></div><div class=\"line\">        ExecutorService executorService = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</div><div class=\"line\">        executorService.execute(<span class=\"keyword\">new</span> ReadThread(copyList));</div><div class=\"line\">        executorService.execute(<span class=\"keyword\">new</span> WriteThread(copyList));</div><div class=\"line\">        executorService.execute(<span class=\"keyword\">new</span> WriteThread(copyList));</div><div class=\"line\">        executorService.execute(<span class=\"keyword\">new</span> WriteThread(copyList));</div><div class=\"line\">        executorService.execute(<span class=\"keyword\">new</span> ReadThread(copyList));</div><div class=\"line\">        executorService.execute(<span class=\"keyword\">new</span> WriteThread(copyList));</div><div class=\"line\">        executorService.execute(<span class=\"keyword\">new</span> ReadThread(copyList));</div><div class=\"line\">        executorService.execute(<span class=\"keyword\">new</span> WriteThread(copyList));</div><div class=\"line\"></div><div class=\"line\">        System.out.println(<span class=\"string\">\"copyList size:\"</span>+copyList.size());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">new</span> TestCopyOnWriteArrayList().test();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行上面的代码，没有报出</p>\n<p>java.util.ConcurrentModificationException</p>\n<p>说明了CopyOnWriteArrayList并发多线程的环境下，仍然能很好的工作。</p>\n<h3 id=\"CopyOnWriteArrayList如何做到线程安全\"><a href=\"#CopyOnWriteArrayList如何做到线程安全\" class=\"headerlink\" title=\"CopyOnWriteArrayList如何做到线程安全\"></a>CopyOnWriteArrayList如何做到线程安全</h3><p><code>CopyOnWriteArrayList</code>使用了一种叫<strong>写时复制</strong>的方法，当有新元素添加到<code>CopyOnWriteArrayList</code>时，先从原有的数组中拷贝一份出来，然后在新的数组做写操作，写完之后，再将原来的数组引用指向到新数组。</p>\n<p>当有新元素加入的时候，如下图，创建新数组，并往新数组中加入一个新元素,这个时候，array这个引用仍然是指向原数组的。</p>\n<p><img src=\"http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/7cbd4.png\" alt=\"\"></p>\n<p>当元素在新数组添加成功后，将array这个引用指向新数组。</p>\n<p><img src=\"http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/bmcdz.png\" alt=\"\"></p>\n<h3 id=\"CopyOnWriteArrayList的源码\"><a href=\"#CopyOnWriteArrayList的源码\" class=\"headerlink\" title=\"CopyOnWriteArrayList的源码\"></a>CopyOnWriteArrayList的源码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//1、先加锁</span></div><div class=\"line\">    <span class=\"keyword\">final</span> ReentrantLock lock = <span class=\"keyword\">this</span>.lock;</div><div class=\"line\">    lock.lock();</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        Object[] elements = getArray();</div><div class=\"line\">        <span class=\"keyword\">int</span> len = elements.length;</div><div class=\"line\">        <span class=\"comment\">//2、拷贝数组</span></div><div class=\"line\">        Object[] newElements = Arrays.copyOf(elements, len + <span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"comment\">//3、将元素加入到新数组中</span></div><div class=\"line\">        newElements[len] = e;</div><div class=\"line\">        <span class=\"comment\">//4、将array引用指向到新数组</span></div><div class=\"line\">        setArray(newElements);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">       <span class=\"comment\">//5、解锁</span></div><div class=\"line\">        lock.unlock();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>由于所有的写操作都是在新数组进行的，这个时候如果有线程并发的写，则通过锁来控制，如果有线程并发的读，则分几种情况：<br>1、如果写操作未完成，那么直接读取原数组的数据；<br>2、如果写操作完成，但是引用还未指向新数组，那么也是读取原数组数据；<br>3、如果写操作完成，并且引用已经指向了新的数组，那么直接从新数组中读取数据。</p>\n<p>可见，<code>CopyOnWriteArrayList</code>的<strong>读操作</strong>是可以不用<strong>加锁</strong>的。</p>\n<h3 id=\"CopyOnWriteArrayList使用场景\"><a href=\"#CopyOnWriteArrayList使用场景\" class=\"headerlink\" title=\"CopyOnWriteArrayList使用场景\"></a>CopyOnWriteArrayList使用场景</h3><p>通过上面的分析，<code>CopyOnWriteArrayList</code> 有几个缺点：<br>1、由于写操作的时候，需要拷贝数组，会消耗内存，如果原数组的内容比较多的情况下，可能导致<code>young gc</code>或者<code>full gc</code></p>\n<p>2、不能用于<strong>实时读</strong>的场景，像拷贝数组、新增元素都需要时间，所以调用一个<code>set</code>操作后，读取到数据可能还是旧的,虽然<code>CopyOnWriteArrayList</code> 能做到<strong>最终一致性</strong>,但是还是没法满足实时性要求；</p>\n<p><code>CopyOnWriteArrayList</code> 合适<strong>读多写少</strong>的场景，不过这类慎用<br>因为谁也没法保证<code>CopyOnWriteArrayList</code> 到底要放置多少数据，万一数据稍微有点多，每次add/set都要重新复制数组，这个代价实在太高昂了。在高性能的互联网应用中，这种操作分分钟引起故障。</p>\n<h3 id=\"思想\"><a href=\"#思想\" class=\"headerlink\" title=\"思想\"></a>思想</h3><p>如上面的分析CopyOnWriteArrayList表达的一些思想：<br>1、读写分离，读和写分开<br>2、最终一致性<br>3、使用另外开辟空间的思路，来解决并发冲突</p>\n<p>参考文章：</p>\n<p><a href=\"http://blog.csdn.net/linsongbin1/article/details/54581787\" target=\"_blank\" rel=\"external\">1</a></p>\n","excerpt":"<p>最近翻阅EventBus源码，在subscribe方法中，看到了CopyOnWriteArrayList这个类，一时竟不知其原理是什么，本文简要记录一下CopyOnWriteArrayList的相关介绍</p>","more":"<h3 id=\"先看一段EventBus的subscribe（）的代码\"><a href=\"#先看一段EventBus的subscribe（）的代码\" class=\"headerlink\" title=\"先看一段EventBus的subscribe（）的代码\"></a>先看一段EventBus的subscribe（）的代码</h3><p><img src=\"http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/vj1ty.png\" alt=\"\"></p>\n<p>这段代码是EventBus中subscribe方法，里面涉及到了subscriptionsByEventType的遍历过程中按照优先级排序</p>\n<p>关于EventBus的具体源码我将在后面会整理，这里我们只关注CopyOnWriteArrayList即可</p>\n<p>可以看到，在遍历的过程中，调用了<code>subscriptions.add(i,newSubscription)</code>来按照优先级进行排序，我相信任何一个懂java的都知道如果使用普通Arraylist，都会报错（并发修改异常），那么我们下面来证实一下</p>\n<h3 id=\"不使用CopyOnWriteArrayList\"><a href=\"#不使用CopyOnWriteArrayList\" class=\"headerlink\" title=\"不使用CopyOnWriteArrayList\"></a>不使用CopyOnWriteArrayList</h3><p>先写一段代码证明<code>CopyOnWriteArrayList</code>确实是线程安全的。</p>\n<blockquote>\n<p>ReadThread.java</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReadThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;Integer&gt; list;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ReadThread</span><span class=\"params\">(List&lt;Integer&gt; list)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.list = list;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (Integer ele : list) &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"ReadThread:\"</span>+ele);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>WriteThread.java</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WriteThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;Integer&gt; list;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WriteThread</span><span class=\"params\">(List&lt;Integer&gt; list)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.list = list;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.list.add(<span class=\"number\">9</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>TestCopyOnWriteArrayList.java</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CopyOnWriteArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestCopyOnWriteArrayList</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//1、初始化CopyOnWriteArrayList</span></div><div class=\"line\">        List&lt;Integer&gt; tempList = Arrays.asList(<span class=\"keyword\">new</span> Integer [] &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;);</div><div class=\"line\">        CopyOnWriteArrayList&lt;Integer&gt; copyList = <span class=\"keyword\">new</span> CopyOnWriteArrayList&lt;&gt;(tempList);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//2、模拟多线程对list进行读和写</span></div><div class=\"line\">        ExecutorService executorService = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</div><div class=\"line\">        executorService.execute(<span class=\"keyword\">new</span> ReadThread(copyList));</div><div class=\"line\">        executorService.execute(<span class=\"keyword\">new</span> WriteThread(copyList));</div><div class=\"line\">        executorService.execute(<span class=\"keyword\">new</span> WriteThread(copyList));</div><div class=\"line\">        executorService.execute(<span class=\"keyword\">new</span> WriteThread(copyList));</div><div class=\"line\">        executorService.execute(<span class=\"keyword\">new</span> ReadThread(copyList));</div><div class=\"line\">        executorService.execute(<span class=\"keyword\">new</span> WriteThread(copyList));</div><div class=\"line\">        executorService.execute(<span class=\"keyword\">new</span> ReadThread(copyList));</div><div class=\"line\">        executorService.execute(<span class=\"keyword\">new</span> WriteThread(copyList));</div><div class=\"line\"></div><div class=\"line\">        System.out.println(<span class=\"string\">\"copyList size:\"</span>+copyList.size());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">new</span> TestCopyOnWriteArrayList().test();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行上面的代码，没有报出</p>\n<p>java.util.ConcurrentModificationException</p>\n<p>说明了CopyOnWriteArrayList并发多线程的环境下，仍然能很好的工作。</p>\n<h3 id=\"CopyOnWriteArrayList如何做到线程安全\"><a href=\"#CopyOnWriteArrayList如何做到线程安全\" class=\"headerlink\" title=\"CopyOnWriteArrayList如何做到线程安全\"></a>CopyOnWriteArrayList如何做到线程安全</h3><p><code>CopyOnWriteArrayList</code>使用了一种叫<strong>写时复制</strong>的方法，当有新元素添加到<code>CopyOnWriteArrayList</code>时，先从原有的数组中拷贝一份出来，然后在新的数组做写操作，写完之后，再将原来的数组引用指向到新数组。</p>\n<p>当有新元素加入的时候，如下图，创建新数组，并往新数组中加入一个新元素,这个时候，array这个引用仍然是指向原数组的。</p>\n<p><img src=\"http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/7cbd4.png\" alt=\"\"></p>\n<p>当元素在新数组添加成功后，将array这个引用指向新数组。</p>\n<p><img src=\"http://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/bmcdz.png\" alt=\"\"></p>\n<h3 id=\"CopyOnWriteArrayList的源码\"><a href=\"#CopyOnWriteArrayList的源码\" class=\"headerlink\" title=\"CopyOnWriteArrayList的源码\"></a>CopyOnWriteArrayList的源码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//1、先加锁</span></div><div class=\"line\">    <span class=\"keyword\">final</span> ReentrantLock lock = <span class=\"keyword\">this</span>.lock;</div><div class=\"line\">    lock.lock();</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        Object[] elements = getArray();</div><div class=\"line\">        <span class=\"keyword\">int</span> len = elements.length;</div><div class=\"line\">        <span class=\"comment\">//2、拷贝数组</span></div><div class=\"line\">        Object[] newElements = Arrays.copyOf(elements, len + <span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"comment\">//3、将元素加入到新数组中</span></div><div class=\"line\">        newElements[len] = e;</div><div class=\"line\">        <span class=\"comment\">//4、将array引用指向到新数组</span></div><div class=\"line\">        setArray(newElements);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">       <span class=\"comment\">//5、解锁</span></div><div class=\"line\">        lock.unlock();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>由于所有的写操作都是在新数组进行的，这个时候如果有线程并发的写，则通过锁来控制，如果有线程并发的读，则分几种情况：<br>1、如果写操作未完成，那么直接读取原数组的数据；<br>2、如果写操作完成，但是引用还未指向新数组，那么也是读取原数组数据；<br>3、如果写操作完成，并且引用已经指向了新的数组，那么直接从新数组中读取数据。</p>\n<p>可见，<code>CopyOnWriteArrayList</code>的<strong>读操作</strong>是可以不用<strong>加锁</strong>的。</p>\n<h3 id=\"CopyOnWriteArrayList使用场景\"><a href=\"#CopyOnWriteArrayList使用场景\" class=\"headerlink\" title=\"CopyOnWriteArrayList使用场景\"></a>CopyOnWriteArrayList使用场景</h3><p>通过上面的分析，<code>CopyOnWriteArrayList</code> 有几个缺点：<br>1、由于写操作的时候，需要拷贝数组，会消耗内存，如果原数组的内容比较多的情况下，可能导致<code>young gc</code>或者<code>full gc</code></p>\n<p>2、不能用于<strong>实时读</strong>的场景，像拷贝数组、新增元素都需要时间，所以调用一个<code>set</code>操作后，读取到数据可能还是旧的,虽然<code>CopyOnWriteArrayList</code> 能做到<strong>最终一致性</strong>,但是还是没法满足实时性要求；</p>\n<p><code>CopyOnWriteArrayList</code> 合适<strong>读多写少</strong>的场景，不过这类慎用<br>因为谁也没法保证<code>CopyOnWriteArrayList</code> 到底要放置多少数据，万一数据稍微有点多，每次add/set都要重新复制数组，这个代价实在太高昂了。在高性能的互联网应用中，这种操作分分钟引起故障。</p>\n<h3 id=\"思想\"><a href=\"#思想\" class=\"headerlink\" title=\"思想\"></a>思想</h3><p>如上面的分析CopyOnWriteArrayList表达的一些思想：<br>1、读写分离，读和写分开<br>2、最终一致性<br>3、使用另外开辟空间的思路，来解决并发冲突</p>\n<p>参考文章：</p>\n<p><a href=\"http://blog.csdn.net/linsongbin1/article/details/54581787\">1</a></p>"},{"title":"设计模式之单例模式","date":"2016-12-15T01:43:45.000Z","_content":"\nAndroid中单例模式整理记录\n\n<!--more-->\n\n- 什么是单例模式\n\n使用时，单例模式的对象只有一个实例存在，不允许自由的构造对象\n\n- 单例模式使用场景\n\n确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例\n\n… ...\n\n- 如何使用单例\n\n1. 私有构造函数，禁止外部使用构造函数创建对象\n2. 通过一个静态方法或者枚举来提供返回单例实例\n3. 确保单例类的对象在反序列化的时候不会重新构建对象\n4. 确保在多线程下，也只有一个实例\n\n- 单例模式分类\n\n### 1,饿汉式\n\n```java\npublic class Singleton {\n    private static Singleton instance = new Singleton();\n\n    private Singleton() {\n    }\n\n    private Singleton getInstance() {\n        return instance;\n    }\n    \n}\n```\n\n### 2,懒汉式\n\n```java\npublic class Singleton {\n    private static Singleton instance ;\n\n    private Singleton() {\n    }\n\n    private synchronized Singleton getInstance() {\n        if (instance == null) {\n            instance = new Singleton();\n        }\n        return instance;\n    }\n}\n```\n\n> 饿汉式和懒汉式的区别\n\n饿汉式：在声明静态对象的时候就初始化\n\n懒汉式：声明一个静态变量，并且在用户第一次调用getInstance的时候进行初始化\n\n​\t\t优点：单例在使用的时候才会初始化，一定程度上节约了资源\n\n​                缺点：第一次加载的时候会初始化，反应稍慢，最大的问题是每次调用getInstance都进行同步，造成了不必要的同步开销，一般不介意这么用。\n\n### 3,Double check lock（DCL）\n\n```java\npublic class Singleton {\n    private static Singleton instance;\n\n    private Singleton() {\n    }\n\n    private synchronized Singleton getInstance() {\n        if (instance == null) {\n            synchronized (Singleton.class) {\n                instance = new Singleton();\n            }\n        }\n        return instance;\n    }\n}\n```\n\nDCL  :\n\n介绍DCL 在getInstance 方法中 对instance 进行两次判空：相信很多人对此都有些疑惑。为什么要判断两次，第一个判空是为了避免不必要的同步，第二层判断是为了在null 情况下创建实例。instance=new Singleton(); 语句看起来是有代码，单实际是一个原子操作，最终会被编译成多条汇编指令，大致做了三件事：\n\n1.给Singleton 分配内存\n\n2.调用Singleton 的构造函数，初始化成员字段\n\n3.将instance 对象指向分配的内存空间（此时instance 就不是null 了）但是jdk 1.5 以后java 编译器允许乱序执行 。所以执行顺序可能是1-3-2 或者 1-2-3.如果是前者先执行3 的话 切换到其他线程，instance 此时 已经是非空了，此线程就会直接取走instance ，直接使用，这样就回出错。DCL 失效。解决方法 SUN 官方已经给我们了。将instance 定义成 privatevolatilestatic Singleton instance =null: \n\n即可DCL 的优点，资源利用率高，第一次执行getInstance 时才会被实例化，效率高。缺点：第一次加载反应慢，也由于java 内存 模型的原因偶尔会失败，在高并发环境下，有一定缺陷，虽然发生概率很小。(很常用)\n\n### 4.静态内部类单例模式\n\n```java\npublic class Singleton {\n\n    private Singleton() {\n    }\n\n    private synchronized Singleton getInstance() {\n        return SingletonHolder.instance;\n    }\n\n    private static class SingletonHolder {\n        private static final Singleton instance = new Singleton();\n    }\n}\n```\n\n加载singleton 类时不会初始化instance 只有在调用getInstance 方法时，才会导致instance 被初始化,这个方法不仅能够确保线程安全，也能够保证 单例对象的唯一性,同时也延迟了单例的实例化，是**推荐使用**的单例模式实现方式。\n\n### 5，防止反序列化过程中创建多个对象\n\n加入下列方法\n\n```java\nprotected Singleton readResolve() throws ObjectStreamException {\n    return SingletonHolder.instance;\n}\n```\n\n而当实现了readResolve方法后，jvm就会有readResolve返回指定对象，也就保证了单例性。实验证明，如果没有声明readResolve方法，存入对象的hashcode和取出对象的hashcode不一致。\n\n推荐下列方式（如果需要序列化的话）：\n\n```java\npublic class Singleton implements Serializable {\n\n    private Singleton() {\n    }\n\n    private synchronized Singleton getInstance() {\n        return SingletonHolder.instance;\n    }\n\n    private static class SingletonHolder {\n        private static volatile final Singleton instance = new Singleton();\n    }\n\n    protected Singleton readResolve() throws ObjectStreamException {\n        return SingletonHolder.instance;\n    }\n}\n```\n\n### 6,volatile关键字的使用\n\n当一个变量定义为 volatile 之后，将具备两种特性：\n\n　　1.保证此变量对所有的线程的可见性，这里的“可见性”，当一个线程修改了这个变量的值，volatile 保证了新值能立即同步到主内存，以及每次使用前立即从主内存刷新。但普通变量做不到这点，普通变量的值在线程间传递均需要通过主内存（详见：[Java内存模型](http://www.cnblogs.com/zhengbin/p/6407137.html)）来完成。\n\n　　2.禁止指令重排序优化。有volatile修饰的变量，赋值后多执行了一个“load addl $0x0, (%esp)”操作，这个操作相当于一个**内存屏障**（指令重排序时不能把后面的指令重排序到内存屏障之前的位置），只有一个CPU访问内存时，并不需要内存屏障；（什么是指令重排序：是指CPU采用了允许将多条指令不按程序规定的顺序分开发送给各相应电路单元处理）。\n\nvolatile 性能：\n\n　　volatile 的读性能消耗与普通变量几乎相同，但是写操作稍慢，因为它需要在本地代码中插入许多内存屏障指令来保证处理器不发生乱序执行。\n\n### 7,Android源码或者框架使用\n\n- ImageLoader\n- EventBus\n- InputMethodManager\n- AccessibilityManager\n- ActivityManager(自定义关闭所有Activity的工具类)\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=471797594&auto=1&height=66\"></iframe>","source":"_posts/设计模式之单例模式.md","raw":"---\ntitle: 设计模式之单例模式\ndate: 2016-12-15 09:43:45\ntags: \n- Android\ncategories: Android\n---\n\nAndroid中单例模式整理记录\n\n<!--more-->\n\n- 什么是单例模式\n\n使用时，单例模式的对象只有一个实例存在，不允许自由的构造对象\n\n- 单例模式使用场景\n\n确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例\n\n… ...\n\n- 如何使用单例\n\n1. 私有构造函数，禁止外部使用构造函数创建对象\n2. 通过一个静态方法或者枚举来提供返回单例实例\n3. 确保单例类的对象在反序列化的时候不会重新构建对象\n4. 确保在多线程下，也只有一个实例\n\n- 单例模式分类\n\n### 1,饿汉式\n\n```java\npublic class Singleton {\n    private static Singleton instance = new Singleton();\n\n    private Singleton() {\n    }\n\n    private Singleton getInstance() {\n        return instance;\n    }\n    \n}\n```\n\n### 2,懒汉式\n\n```java\npublic class Singleton {\n    private static Singleton instance ;\n\n    private Singleton() {\n    }\n\n    private synchronized Singleton getInstance() {\n        if (instance == null) {\n            instance = new Singleton();\n        }\n        return instance;\n    }\n}\n```\n\n> 饿汉式和懒汉式的区别\n\n饿汉式：在声明静态对象的时候就初始化\n\n懒汉式：声明一个静态变量，并且在用户第一次调用getInstance的时候进行初始化\n\n​\t\t优点：单例在使用的时候才会初始化，一定程度上节约了资源\n\n​                缺点：第一次加载的时候会初始化，反应稍慢，最大的问题是每次调用getInstance都进行同步，造成了不必要的同步开销，一般不介意这么用。\n\n### 3,Double check lock（DCL）\n\n```java\npublic class Singleton {\n    private static Singleton instance;\n\n    private Singleton() {\n    }\n\n    private synchronized Singleton getInstance() {\n        if (instance == null) {\n            synchronized (Singleton.class) {\n                instance = new Singleton();\n            }\n        }\n        return instance;\n    }\n}\n```\n\nDCL  :\n\n介绍DCL 在getInstance 方法中 对instance 进行两次判空：相信很多人对此都有些疑惑。为什么要判断两次，第一个判空是为了避免不必要的同步，第二层判断是为了在null 情况下创建实例。instance=new Singleton(); 语句看起来是有代码，单实际是一个原子操作，最终会被编译成多条汇编指令，大致做了三件事：\n\n1.给Singleton 分配内存\n\n2.调用Singleton 的构造函数，初始化成员字段\n\n3.将instance 对象指向分配的内存空间（此时instance 就不是null 了）但是jdk 1.5 以后java 编译器允许乱序执行 。所以执行顺序可能是1-3-2 或者 1-2-3.如果是前者先执行3 的话 切换到其他线程，instance 此时 已经是非空了，此线程就会直接取走instance ，直接使用，这样就回出错。DCL 失效。解决方法 SUN 官方已经给我们了。将instance 定义成 privatevolatilestatic Singleton instance =null: \n\n即可DCL 的优点，资源利用率高，第一次执行getInstance 时才会被实例化，效率高。缺点：第一次加载反应慢，也由于java 内存 模型的原因偶尔会失败，在高并发环境下，有一定缺陷，虽然发生概率很小。(很常用)\n\n### 4.静态内部类单例模式\n\n```java\npublic class Singleton {\n\n    private Singleton() {\n    }\n\n    private synchronized Singleton getInstance() {\n        return SingletonHolder.instance;\n    }\n\n    private static class SingletonHolder {\n        private static final Singleton instance = new Singleton();\n    }\n}\n```\n\n加载singleton 类时不会初始化instance 只有在调用getInstance 方法时，才会导致instance 被初始化,这个方法不仅能够确保线程安全，也能够保证 单例对象的唯一性,同时也延迟了单例的实例化，是**推荐使用**的单例模式实现方式。\n\n### 5，防止反序列化过程中创建多个对象\n\n加入下列方法\n\n```java\nprotected Singleton readResolve() throws ObjectStreamException {\n    return SingletonHolder.instance;\n}\n```\n\n而当实现了readResolve方法后，jvm就会有readResolve返回指定对象，也就保证了单例性。实验证明，如果没有声明readResolve方法，存入对象的hashcode和取出对象的hashcode不一致。\n\n推荐下列方式（如果需要序列化的话）：\n\n```java\npublic class Singleton implements Serializable {\n\n    private Singleton() {\n    }\n\n    private synchronized Singleton getInstance() {\n        return SingletonHolder.instance;\n    }\n\n    private static class SingletonHolder {\n        private static volatile final Singleton instance = new Singleton();\n    }\n\n    protected Singleton readResolve() throws ObjectStreamException {\n        return SingletonHolder.instance;\n    }\n}\n```\n\n### 6,volatile关键字的使用\n\n当一个变量定义为 volatile 之后，将具备两种特性：\n\n　　1.保证此变量对所有的线程的可见性，这里的“可见性”，当一个线程修改了这个变量的值，volatile 保证了新值能立即同步到主内存，以及每次使用前立即从主内存刷新。但普通变量做不到这点，普通变量的值在线程间传递均需要通过主内存（详见：[Java内存模型](http://www.cnblogs.com/zhengbin/p/6407137.html)）来完成。\n\n　　2.禁止指令重排序优化。有volatile修饰的变量，赋值后多执行了一个“load addl $0x0, (%esp)”操作，这个操作相当于一个**内存屏障**（指令重排序时不能把后面的指令重排序到内存屏障之前的位置），只有一个CPU访问内存时，并不需要内存屏障；（什么是指令重排序：是指CPU采用了允许将多条指令不按程序规定的顺序分开发送给各相应电路单元处理）。\n\nvolatile 性能：\n\n　　volatile 的读性能消耗与普通变量几乎相同，但是写操作稍慢，因为它需要在本地代码中插入许多内存屏障指令来保证处理器不发生乱序执行。\n\n### 7,Android源码或者框架使用\n\n- ImageLoader\n- EventBus\n- InputMethodManager\n- AccessibilityManager\n- ActivityManager(自定义关闭所有Activity的工具类)\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=471797594&auto=1&height=66\"></iframe>","slug":"设计模式之单例模式","published":1,"updated":"2018-07-19T01:52:33.284Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6ng003b1kygdn69ejtp","content":"<p>Android中单例模式整理记录</p>\n<a id=\"more\"></a>\n<ul>\n<li>什么是单例模式</li>\n</ul>\n<p>使用时，单例模式的对象只有一个实例存在，不允许自由的构造对象</p>\n<ul>\n<li>单例模式使用场景</li>\n</ul>\n<p>确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例</p>\n<p>… …</p>\n<ul>\n<li>如何使用单例</li>\n</ul>\n<ol>\n<li>私有构造函数，禁止外部使用构造函数创建对象</li>\n<li>通过一个静态方法或者枚举来提供返回单例实例</li>\n<li>确保单例类的对象在反序列化的时候不会重新构建对象</li>\n<li>确保在多线程下，也只有一个实例</li>\n</ol>\n<ul>\n<li>单例模式分类</li>\n</ul>\n<h3 id=\"1-饿汉式\"><a href=\"#1-饿汉式\" class=\"headerlink\" title=\"1,饿汉式\"></a>1,饿汉式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"2-懒汉式\"><a href=\"#2-懒汉式\" class=\"headerlink\" title=\"2,懒汉式\"></a>2,懒汉式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>饿汉式和懒汉式的区别</p>\n</blockquote>\n<p>饿汉式：在声明静态对象的时候就初始化</p>\n<p>懒汉式：声明一个静态变量，并且在用户第一次调用getInstance的时候进行初始化</p>\n<p>​        优点：单例在使用的时候才会初始化，一定程度上节约了资源</p>\n<p>​                缺点：第一次加载的时候会初始化，反应稍慢，最大的问题是每次调用getInstance都进行同步，造成了不必要的同步开销，一般不介意这么用。</p>\n<h3 id=\"3-Double-check-lock（DCL）\"><a href=\"#3-Double-check-lock（DCL）\" class=\"headerlink\" title=\"3,Double check lock（DCL）\"></a>3,Double check lock（DCL）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">synchronized</span> (Singleton.class) &#123;</div><div class=\"line\">                instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>DCL  :</p>\n<p>介绍DCL 在getInstance 方法中 对instance 进行两次判空：相信很多人对此都有些疑惑。为什么要判断两次，第一个判空是为了避免不必要的同步，第二层判断是为了在null 情况下创建实例。instance=new Singleton(); 语句看起来是有代码，单实际是一个原子操作，最终会被编译成多条汇编指令，大致做了三件事：</p>\n<p>1.给Singleton 分配内存</p>\n<p>2.调用Singleton 的构造函数，初始化成员字段</p>\n<p>3.将instance 对象指向分配的内存空间（此时instance 就不是null 了）但是jdk 1.5 以后java 编译器允许乱序执行 。所以执行顺序可能是1-3-2 或者 1-2-3.如果是前者先执行3 的话 切换到其他线程，instance 此时 已经是非空了，此线程就会直接取走instance ，直接使用，这样就回出错。DCL 失效。解决方法 SUN 官方已经给我们了。将instance 定义成 privatevolatilestatic Singleton instance =null: </p>\n<p>即可DCL 的优点，资源利用率高，第一次执行getInstance 时才会被实例化，效率高。缺点：第一次加载反应慢，也由于java 内存 模型的原因偶尔会失败，在高并发环境下，有一定缺陷，虽然发生概率很小。(很常用)</p>\n<h3 id=\"4-静态内部类单例模式\"><a href=\"#4-静态内部类单例模式\" class=\"headerlink\" title=\"4.静态内部类单例模式\"></a>4.静态内部类单例模式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> SingletonHolder.instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHolder</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>加载singleton 类时不会初始化instance 只有在调用getInstance 方法时，才会导致instance 被初始化,这个方法不仅能够确保线程安全，也能够保证 单例对象的唯一性,同时也延迟了单例的实例化，是<strong>推荐使用</strong>的单例模式实现方式。</p>\n<h3 id=\"5，防止反序列化过程中创建多个对象\"><a href=\"#5，防止反序列化过程中创建多个对象\" class=\"headerlink\" title=\"5，防止反序列化过程中创建多个对象\"></a>5，防止反序列化过程中创建多个对象</h3><p>加入下列方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Singleton <span class=\"title\">readResolve</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ObjectStreamException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> SingletonHolder.instance;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>而当实现了readResolve方法后，jvm就会有readResolve返回指定对象，也就保证了单例性。实验证明，如果没有声明readResolve方法，存入对象的hashcode和取出对象的hashcode不一致。</p>\n<p>推荐下列方式（如果需要序列化的话）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> SingletonHolder.instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHolder</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">final</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Singleton <span class=\"title\">readResolve</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ObjectStreamException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> SingletonHolder.instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"6-volatile关键字的使用\"><a href=\"#6-volatile关键字的使用\" class=\"headerlink\" title=\"6,volatile关键字的使用\"></a>6,volatile关键字的使用</h3><p>当一个变量定义为 volatile 之后，将具备两种特性：</p>\n<p>　　1.保证此变量对所有的线程的可见性，这里的“可见性”，当一个线程修改了这个变量的值，volatile 保证了新值能立即同步到主内存，以及每次使用前立即从主内存刷新。但普通变量做不到这点，普通变量的值在线程间传递均需要通过主内存（详见：<a href=\"http://www.cnblogs.com/zhengbin/p/6407137.html\" target=\"_blank\" rel=\"external\">Java内存模型</a>）来完成。</p>\n<p>　　2.禁止指令重排序优化。有volatile修饰的变量，赋值后多执行了一个“load addl $0x0, (%esp)”操作，这个操作相当于一个<strong>内存屏障</strong>（指令重排序时不能把后面的指令重排序到内存屏障之前的位置），只有一个CPU访问内存时，并不需要内存屏障；（什么是指令重排序：是指CPU采用了允许将多条指令不按程序规定的顺序分开发送给各相应电路单元处理）。</p>\n<p>volatile 性能：</p>\n<p>　　volatile 的读性能消耗与普通变量几乎相同，但是写操作稍慢，因为它需要在本地代码中插入许多内存屏障指令来保证处理器不发生乱序执行。</p>\n<h3 id=\"7-Android源码或者框架使用\"><a href=\"#7-Android源码或者框架使用\" class=\"headerlink\" title=\"7,Android源码或者框架使用\"></a>7,Android源码或者框架使用</h3><ul>\n<li>ImageLoader</li>\n<li>EventBus</li>\n<li>InputMethodManager</li>\n<li>AccessibilityManager</li>\n<li>ActivityManager(自定义关闭所有Activity的工具类)</li>\n</ul>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=471797594&auto=1&height=66\"></iframe>","excerpt":"<p>Android中单例模式整理记录</p>","more":"<ul>\n<li>什么是单例模式</li>\n</ul>\n<p>使用时，单例模式的对象只有一个实例存在，不允许自由的构造对象</p>\n<ul>\n<li>单例模式使用场景</li>\n</ul>\n<p>确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例</p>\n<p>… …</p>\n<ul>\n<li>如何使用单例</li>\n</ul>\n<ol>\n<li>私有构造函数，禁止外部使用构造函数创建对象</li>\n<li>通过一个静态方法或者枚举来提供返回单例实例</li>\n<li>确保单例类的对象在反序列化的时候不会重新构建对象</li>\n<li>确保在多线程下，也只有一个实例</li>\n</ol>\n<ul>\n<li>单例模式分类</li>\n</ul>\n<h3 id=\"1-饿汉式\"><a href=\"#1-饿汉式\" class=\"headerlink\" title=\"1,饿汉式\"></a>1,饿汉式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"2-懒汉式\"><a href=\"#2-懒汉式\" class=\"headerlink\" title=\"2,懒汉式\"></a>2,懒汉式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>饿汉式和懒汉式的区别</p>\n</blockquote>\n<p>饿汉式：在声明静态对象的时候就初始化</p>\n<p>懒汉式：声明一个静态变量，并且在用户第一次调用getInstance的时候进行初始化</p>\n<p>​        优点：单例在使用的时候才会初始化，一定程度上节约了资源</p>\n<p>​                缺点：第一次加载的时候会初始化，反应稍慢，最大的问题是每次调用getInstance都进行同步，造成了不必要的同步开销，一般不介意这么用。</p>\n<h3 id=\"3-Double-check-lock（DCL）\"><a href=\"#3-Double-check-lock（DCL）\" class=\"headerlink\" title=\"3,Double check lock（DCL）\"></a>3,Double check lock（DCL）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">synchronized</span> (Singleton.class) &#123;</div><div class=\"line\">                instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>DCL  :</p>\n<p>介绍DCL 在getInstance 方法中 对instance 进行两次判空：相信很多人对此都有些疑惑。为什么要判断两次，第一个判空是为了避免不必要的同步，第二层判断是为了在null 情况下创建实例。instance=new Singleton(); 语句看起来是有代码，单实际是一个原子操作，最终会被编译成多条汇编指令，大致做了三件事：</p>\n<p>1.给Singleton 分配内存</p>\n<p>2.调用Singleton 的构造函数，初始化成员字段</p>\n<p>3.将instance 对象指向分配的内存空间（此时instance 就不是null 了）但是jdk 1.5 以后java 编译器允许乱序执行 。所以执行顺序可能是1-3-2 或者 1-2-3.如果是前者先执行3 的话 切换到其他线程，instance 此时 已经是非空了，此线程就会直接取走instance ，直接使用，这样就回出错。DCL 失效。解决方法 SUN 官方已经给我们了。将instance 定义成 privatevolatilestatic Singleton instance =null: </p>\n<p>即可DCL 的优点，资源利用率高，第一次执行getInstance 时才会被实例化，效率高。缺点：第一次加载反应慢，也由于java 内存 模型的原因偶尔会失败，在高并发环境下，有一定缺陷，虽然发生概率很小。(很常用)</p>\n<h3 id=\"4-静态内部类单例模式\"><a href=\"#4-静态内部类单例模式\" class=\"headerlink\" title=\"4.静态内部类单例模式\"></a>4.静态内部类单例模式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> SingletonHolder.instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHolder</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>加载singleton 类时不会初始化instance 只有在调用getInstance 方法时，才会导致instance 被初始化,这个方法不仅能够确保线程安全，也能够保证 单例对象的唯一性,同时也延迟了单例的实例化，是<strong>推荐使用</strong>的单例模式实现方式。</p>\n<h3 id=\"5，防止反序列化过程中创建多个对象\"><a href=\"#5，防止反序列化过程中创建多个对象\" class=\"headerlink\" title=\"5，防止反序列化过程中创建多个对象\"></a>5，防止反序列化过程中创建多个对象</h3><p>加入下列方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Singleton <span class=\"title\">readResolve</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ObjectStreamException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> SingletonHolder.instance;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>而当实现了readResolve方法后，jvm就会有readResolve返回指定对象，也就保证了单例性。实验证明，如果没有声明readResolve方法，存入对象的hashcode和取出对象的hashcode不一致。</p>\n<p>推荐下列方式（如果需要序列化的话）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> SingletonHolder.instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHolder</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">final</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Singleton <span class=\"title\">readResolve</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ObjectStreamException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> SingletonHolder.instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"6-volatile关键字的使用\"><a href=\"#6-volatile关键字的使用\" class=\"headerlink\" title=\"6,volatile关键字的使用\"></a>6,volatile关键字的使用</h3><p>当一个变量定义为 volatile 之后，将具备两种特性：</p>\n<p>　　1.保证此变量对所有的线程的可见性，这里的“可见性”，当一个线程修改了这个变量的值，volatile 保证了新值能立即同步到主内存，以及每次使用前立即从主内存刷新。但普通变量做不到这点，普通变量的值在线程间传递均需要通过主内存（详见：<a href=\"http://www.cnblogs.com/zhengbin/p/6407137.html\">Java内存模型</a>）来完成。</p>\n<p>　　2.禁止指令重排序优化。有volatile修饰的变量，赋值后多执行了一个“load addl $0x0, (%esp)”操作，这个操作相当于一个<strong>内存屏障</strong>（指令重排序时不能把后面的指令重排序到内存屏障之前的位置），只有一个CPU访问内存时，并不需要内存屏障；（什么是指令重排序：是指CPU采用了允许将多条指令不按程序规定的顺序分开发送给各相应电路单元处理）。</p>\n<p>volatile 性能：</p>\n<p>　　volatile 的读性能消耗与普通变量几乎相同，但是写操作稍慢，因为它需要在本地代码中插入许多内存屏障指令来保证处理器不发生乱序执行。</p>\n<h3 id=\"7-Android源码或者框架使用\"><a href=\"#7-Android源码或者框架使用\" class=\"headerlink\" title=\"7,Android源码或者框架使用\"></a>7,Android源码或者框架使用</h3><ul>\n<li>ImageLoader</li>\n<li>EventBus</li>\n<li>InputMethodManager</li>\n<li>AccessibilityManager</li>\n<li>ActivityManager(自定义关闭所有Activity的工具类)</li>\n</ul>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=471797594&auto=1&height=66\"></iframe>"},{"title":"祝你今天心情愉快","date":"2015-08-08T03:32:51.000Z","_content":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28138588&auto=1&height=66\"></iframe>","source":"_posts/祝你今天心情愉快.md","raw":"---\ntitle: 祝你今天心情愉快\ndate: 2015-08-08 11:32:51\ntags: \n- Life\ncategories: Life\n---\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28138588&auto=1&height=66\"></iframe>","slug":"祝你今天心情愉快","published":1,"updated":"2018-07-19T02:03:42.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6nh003e1kyguu5ol2i9","content":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=28138588&auto=1&height=66\"></iframe>","excerpt":"","more":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28138588&auto=1&height=66\"></iframe>"},{"title":"设计模式之原型模式","date":"2016-12-19T07:38:23.000Z","_content":"\n原型设计模式的是一种创建型的设计模式，如果创建过程笔记复杂耗时的话，可以考虑使用原型设计模式；通过克隆已有的对象来获取一个新的对象，你可以直接使用它，也可以修改克隆对象的部分属性再使用，使得我们的程序更加高效\n<!--more-->\n##### 使用场景\n\n- 如果一个类的初始化需要很多资源，这个资源包括数据或者硬件资源等，通过原型拷贝已有的对象来避免这些消耗\n- 通过new产生的一个对象需要非常繁琐的数据准备或者权限，这时可以使用原型模式。\n- 一个对象需要提供给其他对象访问，而且各个调用者可能**都**需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用，即保护性拷贝。\n\n##### 如何实现\n\n首先我们得实现Cloneable接口，复写clone方法\n\n```java\npackage com.it.fengan.designpattern.pattern;\n\n/**\n * Created by fengan on 2017/12/22.\n * email:fengan1102@gmail.com\n */\n\npublic class Worker implements Cloneable {\n    private String name;\n    private String des;\n    private double money;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getDes() {\n        return des;\n    }\n\n    public void setDes(String des) {\n        this.des = des;\n    }\n\n    public double getMoney() {\n        return money;\n    }\n\n    public void setMoney(double money) {\n        this.money = money;\n    }\n\n    @Override\n    public String toString() {\n        return \"Worker{\" +\n                \"name='\" + name + '\\'' +\n                \", des='\" + des + '\\'' +\n                \", money=\" + money +\n                '}';\n    }\n\n    @Override\n    public Worker clone() {\n        Worker worker = null;\n        try {\n            worker = (Worker) super.clone();\n            worker.money = this.money;\n            worker.name = this.name;\n            worker.des = this.des;\n\n        } catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n\n        return worker;\n    }\n}\n\n```\n\n**注意**\n\n1. clone这个方法不是Cloneable接口中的（Cloneable是一个空接口）\n2. clone是Object中的方法\n3. Cloneable是一个标识接口，它表明这个类的对象是可以拷贝的\n4. 如果没有实现Cloneable接口却调用了clone()函数将抛出异常。\n\n##### 浅拷贝和深拷贝\n\n**浅拷贝**\n\n```java\n @Override\n    protected User clone() {\n        User user = null;\n        try{\n            user = (User)super.clone();\n        } catch (CloneNotSupportedException e){\n            e.printStackTrace();\n        }\n        return user;\n    }\n```\n\n那么在实现clone方法的时候，需要注意个问题，像上面那样，直接调用\n\n```java\nuser = (User)super.clone();\n```\n\n这样只是简单的拷贝了对象，实际上并不是将原始文档的所有字段都重新构造了一份，而是副本文档的字段引用原始文档的字段。\n\n\n\n![浅拷贝](https://ws3.sinaimg.cn/large/006tKfTcgy1fmplwxu1opj30h60alaan.jpg)\n\n**深拷贝**\n\n```java\n@Override\n    public WordDocument clone() {\n        try {\n            WordDocument doc = (WordDocument) super.clone();\n            doc.mText = this.mText;\n            doc.mImages = (ArrayList<String>) this.mImages.clone();\n            return doc;\n        } catch (CloneNotSupportedException e) {\n\n        }\n        return null;\n    }\n\n```\n\n##### Android中的应用\n\nIntenet源码\n\n```java\n*\n * <p>These are the possible flags that can be used in the Intent via\n * {@link #setFlags} and {@link #addFlags}.  See {@link #setFlags} for a list\n * of all possible flags.\n */\npublic class Intent implements Parcelable, Cloneable {\n    \n    ...\n    @Override\n    public Object clone() {\n        return new Intent(this);\n    }\n\n    public Intent(Intent o) {\n        this.mAction = o.mAction;\n        this.mData = o.mData;\n        this.mType = o.mType;\n        this.mPackage = o.mPackage;\n        this.mComponent = o.mComponent;\n        this.mFlags = o.mFlags;\n        this.mContentUserHint = o.mContentUserHint;\n        if (o.mCategories != null) {\n            this.mCategories = new ArraySet<String>(o.mCategories);\n        }\n        if (o.mExtras != null) {\n            this.mExtras = new Bundle(o.mExtras);\n        }\n        if (o.mSourceBounds != null) {\n            this.mSourceBounds = new Rect(o.mSourceBounds);\n        }\n        if (o.mSelector != null) {\n            this.mSelector = new Intent(o.mSelector);\n        }\n        if (o.mClipData != null) {\n            this.mClipData = new ClipData(o.mClipData);\n        }\n    }\n    ...\n}\n\n```\n\n可以见到，我们的Intent是深度拷贝，而且是直接new一个的深度拷贝。可见其设计初衷不是因为其不是为了解决构建复杂对象的资源消耗问题。\n\n##### 总结\n\n- 原型模式本质上就是对象拷贝，与 C++ 中的拷贝构造函数有些类似，它们之间容易出现的问题也都是深拷贝、浅拷贝。使用原型模式可以**解决构建复杂对象的资源消耗问题**，能够在某些场景下**提升创建对象的效率**。还有一个重要的途径就是保护性拷贝，也就是某个对象对外可能是只读的，为了防止外部对这个只读对象修改，通常可以通过返回一个对象拷贝的形式实现只读的限制。\n- 优点：原型模式是在内存中二进制流的拷贝，要比直接 new 一个对象性能好很多，特别是要在一个循环体内产生大量的对象时，原型模式可以更好滴体现其优点。\n- 缺点：这既是它的优点也是缺点，直接在内存中拷贝，构造函数是不会执行的，在实际开发中应该注意这个潜在问题\n\n","source":"_posts/设计模式之原型模式.md","raw":"---\ntitle: 设计模式之原型模式\ndate: 2016-12-19 15:38:23\ntags: \n- Android\ncategories: Android\n---\n\n原型设计模式的是一种创建型的设计模式，如果创建过程笔记复杂耗时的话，可以考虑使用原型设计模式；通过克隆已有的对象来获取一个新的对象，你可以直接使用它，也可以修改克隆对象的部分属性再使用，使得我们的程序更加高效\n<!--more-->\n##### 使用场景\n\n- 如果一个类的初始化需要很多资源，这个资源包括数据或者硬件资源等，通过原型拷贝已有的对象来避免这些消耗\n- 通过new产生的一个对象需要非常繁琐的数据准备或者权限，这时可以使用原型模式。\n- 一个对象需要提供给其他对象访问，而且各个调用者可能**都**需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用，即保护性拷贝。\n\n##### 如何实现\n\n首先我们得实现Cloneable接口，复写clone方法\n\n```java\npackage com.it.fengan.designpattern.pattern;\n\n/**\n * Created by fengan on 2017/12/22.\n * email:fengan1102@gmail.com\n */\n\npublic class Worker implements Cloneable {\n    private String name;\n    private String des;\n    private double money;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getDes() {\n        return des;\n    }\n\n    public void setDes(String des) {\n        this.des = des;\n    }\n\n    public double getMoney() {\n        return money;\n    }\n\n    public void setMoney(double money) {\n        this.money = money;\n    }\n\n    @Override\n    public String toString() {\n        return \"Worker{\" +\n                \"name='\" + name + '\\'' +\n                \", des='\" + des + '\\'' +\n                \", money=\" + money +\n                '}';\n    }\n\n    @Override\n    public Worker clone() {\n        Worker worker = null;\n        try {\n            worker = (Worker) super.clone();\n            worker.money = this.money;\n            worker.name = this.name;\n            worker.des = this.des;\n\n        } catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n\n        return worker;\n    }\n}\n\n```\n\n**注意**\n\n1. clone这个方法不是Cloneable接口中的（Cloneable是一个空接口）\n2. clone是Object中的方法\n3. Cloneable是一个标识接口，它表明这个类的对象是可以拷贝的\n4. 如果没有实现Cloneable接口却调用了clone()函数将抛出异常。\n\n##### 浅拷贝和深拷贝\n\n**浅拷贝**\n\n```java\n @Override\n    protected User clone() {\n        User user = null;\n        try{\n            user = (User)super.clone();\n        } catch (CloneNotSupportedException e){\n            e.printStackTrace();\n        }\n        return user;\n    }\n```\n\n那么在实现clone方法的时候，需要注意个问题，像上面那样，直接调用\n\n```java\nuser = (User)super.clone();\n```\n\n这样只是简单的拷贝了对象，实际上并不是将原始文档的所有字段都重新构造了一份，而是副本文档的字段引用原始文档的字段。\n\n\n\n![浅拷贝](https://ws3.sinaimg.cn/large/006tKfTcgy1fmplwxu1opj30h60alaan.jpg)\n\n**深拷贝**\n\n```java\n@Override\n    public WordDocument clone() {\n        try {\n            WordDocument doc = (WordDocument) super.clone();\n            doc.mText = this.mText;\n            doc.mImages = (ArrayList<String>) this.mImages.clone();\n            return doc;\n        } catch (CloneNotSupportedException e) {\n\n        }\n        return null;\n    }\n\n```\n\n##### Android中的应用\n\nIntenet源码\n\n```java\n*\n * <p>These are the possible flags that can be used in the Intent via\n * {@link #setFlags} and {@link #addFlags}.  See {@link #setFlags} for a list\n * of all possible flags.\n */\npublic class Intent implements Parcelable, Cloneable {\n    \n    ...\n    @Override\n    public Object clone() {\n        return new Intent(this);\n    }\n\n    public Intent(Intent o) {\n        this.mAction = o.mAction;\n        this.mData = o.mData;\n        this.mType = o.mType;\n        this.mPackage = o.mPackage;\n        this.mComponent = o.mComponent;\n        this.mFlags = o.mFlags;\n        this.mContentUserHint = o.mContentUserHint;\n        if (o.mCategories != null) {\n            this.mCategories = new ArraySet<String>(o.mCategories);\n        }\n        if (o.mExtras != null) {\n            this.mExtras = new Bundle(o.mExtras);\n        }\n        if (o.mSourceBounds != null) {\n            this.mSourceBounds = new Rect(o.mSourceBounds);\n        }\n        if (o.mSelector != null) {\n            this.mSelector = new Intent(o.mSelector);\n        }\n        if (o.mClipData != null) {\n            this.mClipData = new ClipData(o.mClipData);\n        }\n    }\n    ...\n}\n\n```\n\n可以见到，我们的Intent是深度拷贝，而且是直接new一个的深度拷贝。可见其设计初衷不是因为其不是为了解决构建复杂对象的资源消耗问题。\n\n##### 总结\n\n- 原型模式本质上就是对象拷贝，与 C++ 中的拷贝构造函数有些类似，它们之间容易出现的问题也都是深拷贝、浅拷贝。使用原型模式可以**解决构建复杂对象的资源消耗问题**，能够在某些场景下**提升创建对象的效率**。还有一个重要的途径就是保护性拷贝，也就是某个对象对外可能是只读的，为了防止外部对这个只读对象修改，通常可以通过返回一个对象拷贝的形式实现只读的限制。\n- 优点：原型模式是在内存中二进制流的拷贝，要比直接 new 一个对象性能好很多，特别是要在一个循环体内产生大量的对象时，原型模式可以更好滴体现其优点。\n- 缺点：这既是它的优点也是缺点，直接在内存中拷贝，构造函数是不会执行的，在实际开发中应该注意这个潜在问题\n\n","slug":"设计模式之原型模式","published":1,"updated":"2018-07-19T01:54:19.327Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6ni003h1kygi0724rjv","content":"<p>原型设计模式的是一种创建型的设计模式，如果创建过程笔记复杂耗时的话，可以考虑使用原型设计模式；通过克隆已有的对象来获取一个新的对象，你可以直接使用它，也可以修改克隆对象的部分属性再使用，使得我们的程序更加高效<br><a id=\"more\"></a></p>\n<h5 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h5><ul>\n<li>如果一个类的初始化需要很多资源，这个资源包括数据或者硬件资源等，通过原型拷贝已有的对象来避免这些消耗</li>\n<li>通过new产生的一个对象需要非常繁琐的数据准备或者权限，这时可以使用原型模式。</li>\n<li>一个对象需要提供给其他对象访问，而且各个调用者可能<strong>都</strong>需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用，即保护性拷贝。</li>\n</ul>\n<h5 id=\"如何实现\"><a href=\"#如何实现\" class=\"headerlink\" title=\"如何实现\"></a>如何实现</h5><p>首先我们得实现Cloneable接口，复写clone方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.it.fengan.designpattern.pattern;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Created by fengan on 2017/12/22.</div><div class=\"line\"> * email:fengan1102@gmail.com</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Worker</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\">    <span class=\"keyword\">private</span> String des;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> money;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getDes</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> des;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDes</span><span class=\"params\">(String des)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.des = des;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getMoney</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> money;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMoney</span><span class=\"params\">(<span class=\"keyword\">double</span> money)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.money = money;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Worker&#123;\"</span> +</div><div class=\"line\">                <span class=\"string\">\"name='\"</span> + name + <span class=\"string\">'\\''</span> +</div><div class=\"line\">                <span class=\"string\">\", des='\"</span> + des + <span class=\"string\">'\\''</span> +</div><div class=\"line\">                <span class=\"string\">\", money=\"</span> + money +</div><div class=\"line\">                <span class=\"string\">'&#125;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Worker <span class=\"title\">clone</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Worker worker = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            worker = (Worker) <span class=\"keyword\">super</span>.clone();</div><div class=\"line\">            worker.money = <span class=\"keyword\">this</span>.money;</div><div class=\"line\">            worker.name = <span class=\"keyword\">this</span>.name;</div><div class=\"line\">            worker.des = <span class=\"keyword\">this</span>.des;</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> worker;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>注意</strong></p>\n<ol>\n<li>clone这个方法不是Cloneable接口中的（Cloneable是一个空接口）</li>\n<li>clone是Object中的方法</li>\n<li>Cloneable是一个标识接口，它表明这个类的对象是可以拷贝的</li>\n<li>如果没有实现Cloneable接口却调用了clone()函数将抛出异常。</li>\n</ol>\n<h5 id=\"浅拷贝和深拷贝\"><a href=\"#浅拷贝和深拷贝\" class=\"headerlink\" title=\"浅拷贝和深拷贝\"></a>浅拷贝和深拷贝</h5><p><strong>浅拷贝</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> User <span class=\"title\">clone</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       User user = <span class=\"keyword\">null</span>;</div><div class=\"line\">       <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">           user = (User)<span class=\"keyword\">super</span>.clone();</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e)&#123;</div><div class=\"line\">           e.printStackTrace();</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> user;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>那么在实现clone方法的时候，需要注意个问题，像上面那样，直接调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">user = (User)<span class=\"keyword\">super</span>.clone();</div></pre></td></tr></table></figure>\n<p>这样只是简单的拷贝了对象，实际上并不是将原始文档的所有字段都重新构造了一份，而是副本文档的字段引用原始文档的字段。</p>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tKfTcgy1fmplwxu1opj30h60alaan.jpg\" alt=\"浅拷贝\"></p>\n<p><strong>深拷贝</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> WordDocument <span class=\"title\">clone</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            WordDocument doc = (WordDocument) <span class=\"keyword\">super</span>.clone();</div><div class=\"line\">            doc.mText = <span class=\"keyword\">this</span>.mText;</div><div class=\"line\">            doc.mImages = (ArrayList&lt;String&gt;) <span class=\"keyword\">this</span>.mImages.clone();</div><div class=\"line\">            <span class=\"keyword\">return</span> doc;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Android中的应用\"><a href=\"#Android中的应用\" class=\"headerlink\" title=\"Android中的应用\"></a>Android中的应用</h5><p>Intenet源码</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">*</div><div class=\"line\"> * &lt;p&gt;These are the possible flags that can be used in the Intent via</div><div class=\"line\"> * &#123;@link #setFlags&#125; and &#123;@link #addFlags&#125;.  See &#123;@link #setFlags&#125; for a list</div><div class=\"line\"> * of all possible flags.</div><div class=\"line\"> */</div><div class=\"line\">public class Intent implements Parcelable, Cloneable &#123;</div><div class=\"line\">    </div><div class=\"line\">    ...</div><div class=\"line\">    @Override</div><div class=\"line\">    public Object clone() &#123;</div><div class=\"line\">        return new Intent(this);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public Intent(Intent o) &#123;</div><div class=\"line\">        this.mAction = o.mAction;</div><div class=\"line\">        this.mData = o.mData;</div><div class=\"line\">        this.mType = o.mType;</div><div class=\"line\">        this.mPackage = o.mPackage;</div><div class=\"line\">        this.mComponent = o.mComponent;</div><div class=\"line\">        this.mFlags = o.mFlags;</div><div class=\"line\">        this.mContentUserHint = o.mContentUserHint;</div><div class=\"line\">        if (o.mCategories != null) &#123;</div><div class=\"line\">            this.mCategories = new ArraySet&lt;String&gt;(o.mCategories);</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (o.mExtras != null) &#123;</div><div class=\"line\">            this.mExtras = new Bundle(o.mExtras);</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (o.mSourceBounds != null) &#123;</div><div class=\"line\">            this.mSourceBounds = new Rect(o.mSourceBounds);</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (o.mSelector != null) &#123;</div><div class=\"line\">            this.mSelector = new Intent(o.mSelector);</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (o.mClipData != null) &#123;</div><div class=\"line\">            this.mClipData = new ClipData(o.mClipData);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以见到，我们的Intent是深度拷贝，而且是直接new一个的深度拷贝。可见其设计初衷不是因为其不是为了解决构建复杂对象的资源消耗问题。</p>\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><ul>\n<li>原型模式本质上就是对象拷贝，与 C++ 中的拷贝构造函数有些类似，它们之间容易出现的问题也都是深拷贝、浅拷贝。使用原型模式可以<strong>解决构建复杂对象的资源消耗问题</strong>，能够在某些场景下<strong>提升创建对象的效率</strong>。还有一个重要的途径就是保护性拷贝，也就是某个对象对外可能是只读的，为了防止外部对这个只读对象修改，通常可以通过返回一个对象拷贝的形式实现只读的限制。</li>\n<li>优点：原型模式是在内存中二进制流的拷贝，要比直接 new 一个对象性能好很多，特别是要在一个循环体内产生大量的对象时，原型模式可以更好滴体现其优点。</li>\n<li>缺点：这既是它的优点也是缺点，直接在内存中拷贝，构造函数是不会执行的，在实际开发中应该注意这个潜在问题</li>\n</ul>\n","excerpt":"<p>原型设计模式的是一种创建型的设计模式，如果创建过程笔记复杂耗时的话，可以考虑使用原型设计模式；通过克隆已有的对象来获取一个新的对象，你可以直接使用它，也可以修改克隆对象的部分属性再使用，使得我们的程序更加高效<br>","more":"</p>\n<h5 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h5><ul>\n<li>如果一个类的初始化需要很多资源，这个资源包括数据或者硬件资源等，通过原型拷贝已有的对象来避免这些消耗</li>\n<li>通过new产生的一个对象需要非常繁琐的数据准备或者权限，这时可以使用原型模式。</li>\n<li>一个对象需要提供给其他对象访问，而且各个调用者可能<strong>都</strong>需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用，即保护性拷贝。</li>\n</ul>\n<h5 id=\"如何实现\"><a href=\"#如何实现\" class=\"headerlink\" title=\"如何实现\"></a>如何实现</h5><p>首先我们得实现Cloneable接口，复写clone方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.it.fengan.designpattern.pattern;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Created by fengan on 2017/12/22.</div><div class=\"line\"> * email:fengan1102@gmail.com</div><div class=\"line\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Worker</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\">    <span class=\"keyword\">private</span> String des;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> money;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getDes</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> des;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDes</span><span class=\"params\">(String des)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.des = des;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getMoney</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> money;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMoney</span><span class=\"params\">(<span class=\"keyword\">double</span> money)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.money = money;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Worker&#123;\"</span> +</div><div class=\"line\">                <span class=\"string\">\"name='\"</span> + name + <span class=\"string\">'\\''</span> +</div><div class=\"line\">                <span class=\"string\">\", des='\"</span> + des + <span class=\"string\">'\\''</span> +</div><div class=\"line\">                <span class=\"string\">\", money=\"</span> + money +</div><div class=\"line\">                <span class=\"string\">'&#125;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Worker <span class=\"title\">clone</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Worker worker = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            worker = (Worker) <span class=\"keyword\">super</span>.clone();</div><div class=\"line\">            worker.money = <span class=\"keyword\">this</span>.money;</div><div class=\"line\">            worker.name = <span class=\"keyword\">this</span>.name;</div><div class=\"line\">            worker.des = <span class=\"keyword\">this</span>.des;</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> worker;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>注意</strong></p>\n<ol>\n<li>clone这个方法不是Cloneable接口中的（Cloneable是一个空接口）</li>\n<li>clone是Object中的方法</li>\n<li>Cloneable是一个标识接口，它表明这个类的对象是可以拷贝的</li>\n<li>如果没有实现Cloneable接口却调用了clone()函数将抛出异常。</li>\n</ol>\n<h5 id=\"浅拷贝和深拷贝\"><a href=\"#浅拷贝和深拷贝\" class=\"headerlink\" title=\"浅拷贝和深拷贝\"></a>浅拷贝和深拷贝</h5><p><strong>浅拷贝</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> User <span class=\"title\">clone</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       User user = <span class=\"keyword\">null</span>;</div><div class=\"line\">       <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">           user = (User)<span class=\"keyword\">super</span>.clone();</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e)&#123;</div><div class=\"line\">           e.printStackTrace();</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> user;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>那么在实现clone方法的时候，需要注意个问题，像上面那样，直接调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">user = (User)<span class=\"keyword\">super</span>.clone();</div></pre></td></tr></table></figure>\n<p>这样只是简单的拷贝了对象，实际上并不是将原始文档的所有字段都重新构造了一份，而是副本文档的字段引用原始文档的字段。</p>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tKfTcgy1fmplwxu1opj30h60alaan.jpg\" alt=\"浅拷贝\"></p>\n<p><strong>深拷贝</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> WordDocument <span class=\"title\">clone</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            WordDocument doc = (WordDocument) <span class=\"keyword\">super</span>.clone();</div><div class=\"line\">            doc.mText = <span class=\"keyword\">this</span>.mText;</div><div class=\"line\">            doc.mImages = (ArrayList&lt;String&gt;) <span class=\"keyword\">this</span>.mImages.clone();</div><div class=\"line\">            <span class=\"keyword\">return</span> doc;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Android中的应用\"><a href=\"#Android中的应用\" class=\"headerlink\" title=\"Android中的应用\"></a>Android中的应用</h5><p>Intenet源码</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">*</div><div class=\"line\"> * &lt;p&gt;These are the possible flags that can be used in the Intent via</div><div class=\"line\"> * &#123;@link #setFlags&#125; and &#123;@link #addFlags&#125;.  See &#123;@link #setFlags&#125; for a list</div><div class=\"line\"> * of all possible flags.</div><div class=\"line\"> */</div><div class=\"line\">public class Intent implements Parcelable, Cloneable &#123;</div><div class=\"line\">    </div><div class=\"line\">    ...</div><div class=\"line\">    @Override</div><div class=\"line\">    public Object clone() &#123;</div><div class=\"line\">        return new Intent(this);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public Intent(Intent o) &#123;</div><div class=\"line\">        this.mAction = o.mAction;</div><div class=\"line\">        this.mData = o.mData;</div><div class=\"line\">        this.mType = o.mType;</div><div class=\"line\">        this.mPackage = o.mPackage;</div><div class=\"line\">        this.mComponent = o.mComponent;</div><div class=\"line\">        this.mFlags = o.mFlags;</div><div class=\"line\">        this.mContentUserHint = o.mContentUserHint;</div><div class=\"line\">        if (o.mCategories != null) &#123;</div><div class=\"line\">            this.mCategories = new ArraySet&lt;String&gt;(o.mCategories);</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (o.mExtras != null) &#123;</div><div class=\"line\">            this.mExtras = new Bundle(o.mExtras);</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (o.mSourceBounds != null) &#123;</div><div class=\"line\">            this.mSourceBounds = new Rect(o.mSourceBounds);</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (o.mSelector != null) &#123;</div><div class=\"line\">            this.mSelector = new Intent(o.mSelector);</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (o.mClipData != null) &#123;</div><div class=\"line\">            this.mClipData = new ClipData(o.mClipData);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以见到，我们的Intent是深度拷贝，而且是直接new一个的深度拷贝。可见其设计初衷不是因为其不是为了解决构建复杂对象的资源消耗问题。</p>\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><ul>\n<li>原型模式本质上就是对象拷贝，与 C++ 中的拷贝构造函数有些类似，它们之间容易出现的问题也都是深拷贝、浅拷贝。使用原型模式可以<strong>解决构建复杂对象的资源消耗问题</strong>，能够在某些场景下<strong>提升创建对象的效率</strong>。还有一个重要的途径就是保护性拷贝，也就是某个对象对外可能是只读的，为了防止外部对这个只读对象修改，通常可以通过返回一个对象拷贝的形式实现只读的限制。</li>\n<li>优点：原型模式是在内存中二进制流的拷贝，要比直接 new 一个对象性能好很多，特别是要在一个循环体内产生大量的对象时，原型模式可以更好滴体现其优点。</li>\n<li>缺点：这既是它的优点也是缺点，直接在内存中拷贝，构造函数是不会执行的，在实际开发中应该注意这个潜在问题</li>\n</ul>"},{"title":"SharedPreferences的缺陷","date":"2018-07-19T05:44:44.000Z","password":null,"_content":"\nSharedPreferences在Android使用非常普遍，本文记录一下它的不足之处和使用注意事项\n\n<!--more-->\n\n#### 前言\n\n`SharedPreferences`是Android SDK提供的工具，可以存储应用的一些配置信息，这些信息会以键值对的形式保存在`/sdcard/data/data/packageName/shared_prefs/`路径下的一个`xml`文件中。它提供了多种数据类型的存储，包括：`int`、`long`、`boolean`、`float`、`String`以及`Set<String>`。\n\n#### 使用方式\n\n- `context.getSharedPreference(name, mode);`\n- `PreferenceManager.getDefaultSharedPreferences(context);`\n\n这两种方式其实具体实现是一样的，只不过一个是开发者自己定义名字，另一个是使用包名+\"_preference\"作为存储文件名。\n\n#### 问题\n\n若我们大量使用`PreferenceManager.getDefaultSharedPreferences(context);`，将各种配置项全部存储到一个sp中，就可能会导致一个问题：**该文件过大，读取配置项过慢**\n\n所以推荐，根据情况，将不同的配置文件保存在不同的sp中，而不是全部使用默认的sp，导致同一个sp文件过大\n\n1. 第一次从sp中获取值的时候，有可能阻塞主线程，使界面卡顿、掉帧。\n2. 解析sp的时候会产生大量的临时对象，导致频繁GC，引起界面卡顿。\n3. 这些key和value会永远存在于内存之中，占用大量内存。\n\n#### 其他注意\n\n- 被加载进来的这些大对象，会永远存在于内存之中，不会被释放。\n\nContextImpl这个类，在getSharedPreference的时候会把所有的sp放到一个静态变量里面缓存起来：\n\n**static**的sSharedPrefsCache，它保存了你所有使用的sp\n\n```java\n@GuardedBy(\"ContextImpl.class\")\nprivate static ArrayMap<String, ArrayMap<File, SharedPreferencesImpl>>sSharedPrefsCache;\n\nprivate ArrayMap<File, SharedPreferencesImpl> getSharedPreferencesCacheLocked() {\n    if (sSharedPrefsCache == null) {\n        sSharedPrefsCache = new ArrayMap<>();\n    }\n\n    final String packageName = getPackageName();\n    ArrayMap<File, SharedPreferencesImpl> packagePrefs = sSharedPrefsCache.get(packageName);\n    if (packagePrefs == null) {\n        packagePrefs = new ArrayMap<>();\n        sSharedPrefsCache.put(packageName, packagePrefs);\n    }\n\n    return packagePrefs;\n}\n```\n\n- 存储JSON等特殊符号很多的value\n\n在sp里面存json或者HTML；这么做不是不可以，但是，如果这个json相对较大，那么也会引起sp读取速度的急剧下降。\n\nJSON或者HTML格式存放在sp里面的时候，需要转义，这样会带来很多 & 这种特殊符号，sp在解析碰到这个特殊符号的时候会进行特殊的处理，引发额外的字符串拼接以及函数调用开销。而JSON本来就是可以用来做配置文件的，你干嘛又把它放在sp里面呢？\n\n- 多次edit多次apply\n\n```java\nSharedPreferences sp = getSharedPreferences(\"test\", MODE_PRIVATE);\nsp.edit().putString(\"test1\", \"sss\").apply();\nsp.edit().putString(\"test2\", \"sss\").apply();\nsp.edit().putString(\"test3\", \"sss\").apply();\nsp.edit().putString(\"test4\", \"sss\").apply();\n```\n\n每次edit都会创建一个Editor对象，额外占用内存；当然多创建几个对象也影响不了多少；但是，多次apply也会卡界面你造吗？\n\n有童鞋会说，apply不是在别的线程些磁盘的吗，怎么可能卡界面？我带你仔细看一下源码。\n\n```java\npublic void apply() {\n    final MemoryCommitResult mcr = commitToMemory();\n    final Runnable awaitCommit = new Runnable() {\n            public void run() {\n                try {\n                    mcr.writtenToDiskLatch.await();\n                } catch (InterruptedException ignored) {\n                }\n            }\n        };\n\n    QueuedWork.add(awaitCommit);\n\n    Runnable postWriteRunnable = new Runnable() {\n            public void run() {\n                awaitCommit.run();\n                QueuedWork.remove(awaitCommit);\n            }\n        };\n\n    SharedPreferencesImpl.this.enqueueDiskWrite(mcr, postWriteRunnable);\n    notifyListeners(mcr);\n}\n```\n\n注意两点，第一，把一个带有await的runnable添加进了QueueWork类的一个队列；第二，把这个写入任务通过enqueueDiskWrite丢给了一个**只有单个线程**的线程池执行。\n\n到这里一切都OK，在子线程里面写入不会卡UI。但是，你去ActivityThread类的handleStopActivity里看一看：\n\n```java\nprivate void handleStopActivity(IBinder token, boolean show, int configChanges, int seq) {\n\n    // 省略无关。。\n    // Make sure any pending writes are now committed.（确保所有延迟写入完成）\n    if (!r.isPreHoneycomb()) {\n        QueuedWork.waitToFinish();\n    }\n\n    // 省略无关。。\n}\n```\n\n如果在Activity Stop的时候，已经写入完毕了，那么万事大吉，不会有任何等待，这个函数会立马返回。但是，如果你使用了太多次的apply，那么意味着写入队列会有很多写入任务，而那里就只有一个线程在写。当App规模很大的时候，这种情况简直就太常见了\n\n虽然apply是在子线程执行的，但是请不要无节制地apply；commit我就不多说了吧？直接在当前线程写入，如果你在主线程干这个\n\n- SP多进程不可靠\n\nsp有一个貌似可以提供「跨进程」功能的FLAG——MODE_MULTI_PROCESS\n\n文档也说了，这玩意在某些Android版本上不可靠，并且未来也不会提供任何支持，要是用跨进程数据传输需要使用类似ContentProvider的东西。而且，SharedPreference的文档也特别说明：\n\n`Note: This class does not support use across multiple processes.`\n\n```java\n@Override\npublic SharedPreferences getSharedPreferences(File file, int mode) {\n    checkMode(mode);\n    SharedPreferencesImpl sp;\n    synchronized (ContextImpl.class) {\n        final ArrayMap<File, SharedPreferencesImpl> cache = getSharedPreferencesCacheLocked();\n        sp = cache.get(file);\n        if (sp == null) {\n            sp = new SharedPreferencesImpl(file, mode);\n            cache.put(file, sp);\n            return sp;\n        }\n    }\n    if ((mode & Context.MODE_MULTI_PROCESS) != 0 ||\n        getApplicationInfo().targetSdkVersion < android.os.Build.VERSION_CODES.HONEYCOMB) {\n        // If somebody else (some other process) changed the prefs\n        // file behind our back, we reload it.  This has been the\n        // historical (if undocumented) behavior.\n        sp.startReloadIfChangedUnexpectedly();\n    }\n    return sp;\n}\n```\n\n这个flag保证了啥？保证了**在API 11以前**的系统上，如果sp已经被读取进内存，再次获取这个sp的时候，如果有这个flag，会重新读一遍文件，仅此而已\n\n#### 总结\n\n1. 不要存放大的key和value！会引起界面卡、频繁GC、占用内存等等\n2. 毫不相关的配置项就不要丢在一起了！文件越大读取越慢，防止全部放进defalut的sp！\n3. 读取频繁的key和不易变动的key尽量不要放在一起，影响速度。（如果整个文件很小，那么忽略吧，为了这点性能添加维护成本得不偿失）\n4. 不要乱edit和apply，每次edit会创建新的EditorImpl对象，尽量批量修改一次提交！\n5. 尽量不要存放JSON和HTML，这种场景请直接使用json（文件存取）！\n6. Commit发生在UI线程中，apply发生在工作线程中，对于数据的提交最好是批量操作统一提交。虽然apply发生在工作线程（不会因为IO阻塞UI线程）但是如果添加任务较多也有可能带来其他严重后果（参照ActivityThread源码中handleStopActivity方法实现）。\n7. 跨进程通信不可靠\n\n[参考1]: http://www.cnblogs.com/mingfeng002/p/5970221.html\t\"不要滥用SharedPreference\"\n[参考2]: https://blog.csdn.net/andy_jiangbin/article/details/55045577\t\"Android数据存储之SharedPreferences及如何安全存储\"\n[参考3]: https://www.jianshu.com/p/8eb2147c328b\t\"Android之不要滥用SharedPreference\"\n\n","source":"_posts/SharedPreferences的缺陷.md","raw":"---\ntitle: SharedPreferences的缺陷\ndate: 2018-07-19 13:44:44\ntags:\n- Android\ncategories: Android\npassword:\n---\n\nSharedPreferences在Android使用非常普遍，本文记录一下它的不足之处和使用注意事项\n\n<!--more-->\n\n#### 前言\n\n`SharedPreferences`是Android SDK提供的工具，可以存储应用的一些配置信息，这些信息会以键值对的形式保存在`/sdcard/data/data/packageName/shared_prefs/`路径下的一个`xml`文件中。它提供了多种数据类型的存储，包括：`int`、`long`、`boolean`、`float`、`String`以及`Set<String>`。\n\n#### 使用方式\n\n- `context.getSharedPreference(name, mode);`\n- `PreferenceManager.getDefaultSharedPreferences(context);`\n\n这两种方式其实具体实现是一样的，只不过一个是开发者自己定义名字，另一个是使用包名+\"_preference\"作为存储文件名。\n\n#### 问题\n\n若我们大量使用`PreferenceManager.getDefaultSharedPreferences(context);`，将各种配置项全部存储到一个sp中，就可能会导致一个问题：**该文件过大，读取配置项过慢**\n\n所以推荐，根据情况，将不同的配置文件保存在不同的sp中，而不是全部使用默认的sp，导致同一个sp文件过大\n\n1. 第一次从sp中获取值的时候，有可能阻塞主线程，使界面卡顿、掉帧。\n2. 解析sp的时候会产生大量的临时对象，导致频繁GC，引起界面卡顿。\n3. 这些key和value会永远存在于内存之中，占用大量内存。\n\n#### 其他注意\n\n- 被加载进来的这些大对象，会永远存在于内存之中，不会被释放。\n\nContextImpl这个类，在getSharedPreference的时候会把所有的sp放到一个静态变量里面缓存起来：\n\n**static**的sSharedPrefsCache，它保存了你所有使用的sp\n\n```java\n@GuardedBy(\"ContextImpl.class\")\nprivate static ArrayMap<String, ArrayMap<File, SharedPreferencesImpl>>sSharedPrefsCache;\n\nprivate ArrayMap<File, SharedPreferencesImpl> getSharedPreferencesCacheLocked() {\n    if (sSharedPrefsCache == null) {\n        sSharedPrefsCache = new ArrayMap<>();\n    }\n\n    final String packageName = getPackageName();\n    ArrayMap<File, SharedPreferencesImpl> packagePrefs = sSharedPrefsCache.get(packageName);\n    if (packagePrefs == null) {\n        packagePrefs = new ArrayMap<>();\n        sSharedPrefsCache.put(packageName, packagePrefs);\n    }\n\n    return packagePrefs;\n}\n```\n\n- 存储JSON等特殊符号很多的value\n\n在sp里面存json或者HTML；这么做不是不可以，但是，如果这个json相对较大，那么也会引起sp读取速度的急剧下降。\n\nJSON或者HTML格式存放在sp里面的时候，需要转义，这样会带来很多 & 这种特殊符号，sp在解析碰到这个特殊符号的时候会进行特殊的处理，引发额外的字符串拼接以及函数调用开销。而JSON本来就是可以用来做配置文件的，你干嘛又把它放在sp里面呢？\n\n- 多次edit多次apply\n\n```java\nSharedPreferences sp = getSharedPreferences(\"test\", MODE_PRIVATE);\nsp.edit().putString(\"test1\", \"sss\").apply();\nsp.edit().putString(\"test2\", \"sss\").apply();\nsp.edit().putString(\"test3\", \"sss\").apply();\nsp.edit().putString(\"test4\", \"sss\").apply();\n```\n\n每次edit都会创建一个Editor对象，额外占用内存；当然多创建几个对象也影响不了多少；但是，多次apply也会卡界面你造吗？\n\n有童鞋会说，apply不是在别的线程些磁盘的吗，怎么可能卡界面？我带你仔细看一下源码。\n\n```java\npublic void apply() {\n    final MemoryCommitResult mcr = commitToMemory();\n    final Runnable awaitCommit = new Runnable() {\n            public void run() {\n                try {\n                    mcr.writtenToDiskLatch.await();\n                } catch (InterruptedException ignored) {\n                }\n            }\n        };\n\n    QueuedWork.add(awaitCommit);\n\n    Runnable postWriteRunnable = new Runnable() {\n            public void run() {\n                awaitCommit.run();\n                QueuedWork.remove(awaitCommit);\n            }\n        };\n\n    SharedPreferencesImpl.this.enqueueDiskWrite(mcr, postWriteRunnable);\n    notifyListeners(mcr);\n}\n```\n\n注意两点，第一，把一个带有await的runnable添加进了QueueWork类的一个队列；第二，把这个写入任务通过enqueueDiskWrite丢给了一个**只有单个线程**的线程池执行。\n\n到这里一切都OK，在子线程里面写入不会卡UI。但是，你去ActivityThread类的handleStopActivity里看一看：\n\n```java\nprivate void handleStopActivity(IBinder token, boolean show, int configChanges, int seq) {\n\n    // 省略无关。。\n    // Make sure any pending writes are now committed.（确保所有延迟写入完成）\n    if (!r.isPreHoneycomb()) {\n        QueuedWork.waitToFinish();\n    }\n\n    // 省略无关。。\n}\n```\n\n如果在Activity Stop的时候，已经写入完毕了，那么万事大吉，不会有任何等待，这个函数会立马返回。但是，如果你使用了太多次的apply，那么意味着写入队列会有很多写入任务，而那里就只有一个线程在写。当App规模很大的时候，这种情况简直就太常见了\n\n虽然apply是在子线程执行的，但是请不要无节制地apply；commit我就不多说了吧？直接在当前线程写入，如果你在主线程干这个\n\n- SP多进程不可靠\n\nsp有一个貌似可以提供「跨进程」功能的FLAG——MODE_MULTI_PROCESS\n\n文档也说了，这玩意在某些Android版本上不可靠，并且未来也不会提供任何支持，要是用跨进程数据传输需要使用类似ContentProvider的东西。而且，SharedPreference的文档也特别说明：\n\n`Note: This class does not support use across multiple processes.`\n\n```java\n@Override\npublic SharedPreferences getSharedPreferences(File file, int mode) {\n    checkMode(mode);\n    SharedPreferencesImpl sp;\n    synchronized (ContextImpl.class) {\n        final ArrayMap<File, SharedPreferencesImpl> cache = getSharedPreferencesCacheLocked();\n        sp = cache.get(file);\n        if (sp == null) {\n            sp = new SharedPreferencesImpl(file, mode);\n            cache.put(file, sp);\n            return sp;\n        }\n    }\n    if ((mode & Context.MODE_MULTI_PROCESS) != 0 ||\n        getApplicationInfo().targetSdkVersion < android.os.Build.VERSION_CODES.HONEYCOMB) {\n        // If somebody else (some other process) changed the prefs\n        // file behind our back, we reload it.  This has been the\n        // historical (if undocumented) behavior.\n        sp.startReloadIfChangedUnexpectedly();\n    }\n    return sp;\n}\n```\n\n这个flag保证了啥？保证了**在API 11以前**的系统上，如果sp已经被读取进内存，再次获取这个sp的时候，如果有这个flag，会重新读一遍文件，仅此而已\n\n#### 总结\n\n1. 不要存放大的key和value！会引起界面卡、频繁GC、占用内存等等\n2. 毫不相关的配置项就不要丢在一起了！文件越大读取越慢，防止全部放进defalut的sp！\n3. 读取频繁的key和不易变动的key尽量不要放在一起，影响速度。（如果整个文件很小，那么忽略吧，为了这点性能添加维护成本得不偿失）\n4. 不要乱edit和apply，每次edit会创建新的EditorImpl对象，尽量批量修改一次提交！\n5. 尽量不要存放JSON和HTML，这种场景请直接使用json（文件存取）！\n6. Commit发生在UI线程中，apply发生在工作线程中，对于数据的提交最好是批量操作统一提交。虽然apply发生在工作线程（不会因为IO阻塞UI线程）但是如果添加任务较多也有可能带来其他严重后果（参照ActivityThread源码中handleStopActivity方法实现）。\n7. 跨进程通信不可靠\n\n[参考1]: http://www.cnblogs.com/mingfeng002/p/5970221.html\t\"不要滥用SharedPreference\"\n[参考2]: https://blog.csdn.net/andy_jiangbin/article/details/55045577\t\"Android数据存储之SharedPreferences及如何安全存储\"\n[参考3]: https://www.jianshu.com/p/8eb2147c328b\t\"Android之不要滥用SharedPreference\"\n\n","slug":"SharedPreferences的缺陷","published":1,"updated":"2018-07-19T08:05:04.036Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6nk003k1kyggw5pn1q2","content":"<p>SharedPreferences在Android使用非常普遍，本文记录一下它的不足之处和使用注意事项</p>\n<a id=\"more\"></a>\n<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p><code>SharedPreferences</code>是Android SDK提供的工具，可以存储应用的一些配置信息，这些信息会以键值对的形式保存在<code>/sdcard/data/data/packageName/shared_prefs/</code>路径下的一个<code>xml</code>文件中。它提供了多种数据类型的存储，包括：<code>int</code>、<code>long</code>、<code>boolean</code>、<code>float</code>、<code>String</code>以及<code>Set&lt;String&gt;</code>。</p>\n<h4 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h4><ul>\n<li><code>context.getSharedPreference(name, mode);</code></li>\n<li><code>PreferenceManager.getDefaultSharedPreferences(context);</code></li>\n</ul>\n<p>这两种方式其实具体实现是一样的，只不过一个是开发者自己定义名字，另一个是使用包名+”_preference”作为存储文件名。</p>\n<h4 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h4><p>若我们大量使用<code>PreferenceManager.getDefaultSharedPreferences(context);</code>，将各种配置项全部存储到一个sp中，就可能会导致一个问题：<strong>该文件过大，读取配置项过慢</strong></p>\n<p>所以推荐，根据情况，将不同的配置文件保存在不同的sp中，而不是全部使用默认的sp，导致同一个sp文件过大</p>\n<ol>\n<li>第一次从sp中获取值的时候，有可能阻塞主线程，使界面卡顿、掉帧。</li>\n<li>解析sp的时候会产生大量的临时对象，导致频繁GC，引起界面卡顿。</li>\n<li>这些key和value会永远存在于内存之中，占用大量内存。</li>\n</ol>\n<h4 id=\"其他注意\"><a href=\"#其他注意\" class=\"headerlink\" title=\"其他注意\"></a>其他注意</h4><ul>\n<li>被加载进来的这些大对象，会永远存在于内存之中，不会被释放。</li>\n</ul>\n<p>ContextImpl这个类，在getSharedPreference的时候会把所有的sp放到一个静态变量里面缓存起来：</p>\n<p><strong>static</strong>的sSharedPrefsCache，它保存了你所有使用的sp</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@GuardedBy</span>(<span class=\"string\">\"ContextImpl.class\"</span>)</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ArrayMap&lt;String, ArrayMap&lt;File, SharedPreferencesImpl&gt;&gt;sSharedPrefsCache;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ArrayMap&lt;File, SharedPreferencesImpl&gt; <span class=\"title\">getSharedPreferencesCacheLocked</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (sSharedPrefsCache == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        sSharedPrefsCache = <span class=\"keyword\">new</span> ArrayMap&lt;&gt;();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> String packageName = getPackageName();</div><div class=\"line\">    ArrayMap&lt;File, SharedPreferencesImpl&gt; packagePrefs = sSharedPrefsCache.get(packageName);</div><div class=\"line\">    <span class=\"keyword\">if</span> (packagePrefs == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        packagePrefs = <span class=\"keyword\">new</span> ArrayMap&lt;&gt;();</div><div class=\"line\">        sSharedPrefsCache.put(packageName, packagePrefs);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> packagePrefs;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>存储JSON等特殊符号很多的value</li>\n</ul>\n<p>在sp里面存json或者HTML；这么做不是不可以，但是，如果这个json相对较大，那么也会引起sp读取速度的急剧下降。</p>\n<p>JSON或者HTML格式存放在sp里面的时候，需要转义，这样会带来很多 &amp; 这种特殊符号，sp在解析碰到这个特殊符号的时候会进行特殊的处理，引发额外的字符串拼接以及函数调用开销。而JSON本来就是可以用来做配置文件的，你干嘛又把它放在sp里面呢？</p>\n<ul>\n<li>多次edit多次apply</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">SharedPreferences sp = getSharedPreferences(<span class=\"string\">\"test\"</span>, MODE_PRIVATE);</div><div class=\"line\">sp.edit().putString(<span class=\"string\">\"test1\"</span>, <span class=\"string\">\"sss\"</span>).apply();</div><div class=\"line\">sp.edit().putString(<span class=\"string\">\"test2\"</span>, <span class=\"string\">\"sss\"</span>).apply();</div><div class=\"line\">sp.edit().putString(<span class=\"string\">\"test3\"</span>, <span class=\"string\">\"sss\"</span>).apply();</div><div class=\"line\">sp.edit().putString(<span class=\"string\">\"test4\"</span>, <span class=\"string\">\"sss\"</span>).apply();</div></pre></td></tr></table></figure>\n<p>每次edit都会创建一个Editor对象，额外占用内存；当然多创建几个对象也影响不了多少；但是，多次apply也会卡界面你造吗？</p>\n<p>有童鞋会说，apply不是在别的线程些磁盘的吗，怎么可能卡界面？我带你仔细看一下源码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">apply</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> MemoryCommitResult mcr = commitToMemory();</div><div class=\"line\">    <span class=\"keyword\">final</span> Runnable awaitCommit = <span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    mcr.writtenToDiskLatch.await();</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException ignored) &#123;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">    QueuedWork.add(awaitCommit);</div><div class=\"line\"></div><div class=\"line\">    Runnable postWriteRunnable = <span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                awaitCommit.run();</div><div class=\"line\">                QueuedWork.remove(awaitCommit);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">    SharedPreferencesImpl.<span class=\"keyword\">this</span>.enqueueDiskWrite(mcr, postWriteRunnable);</div><div class=\"line\">    notifyListeners(mcr);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意两点，第一，把一个带有await的runnable添加进了QueueWork类的一个队列；第二，把这个写入任务通过enqueueDiskWrite丢给了一个<strong>只有单个线程</strong>的线程池执行。</p>\n<p>到这里一切都OK，在子线程里面写入不会卡UI。但是，你去ActivityThread类的handleStopActivity里看一看：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">handleStopActivity</span><span class=\"params\">(IBinder token, <span class=\"keyword\">boolean</span> show, <span class=\"keyword\">int</span> configChanges, <span class=\"keyword\">int</span> seq)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 省略无关。。</span></div><div class=\"line\">    <span class=\"comment\">// Make sure any pending writes are now committed.（确保所有延迟写入完成）</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!r.isPreHoneycomb()) &#123;</div><div class=\"line\">        QueuedWork.waitToFinish();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 省略无关。。</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果在Activity Stop的时候，已经写入完毕了，那么万事大吉，不会有任何等待，这个函数会立马返回。但是，如果你使用了太多次的apply，那么意味着写入队列会有很多写入任务，而那里就只有一个线程在写。当App规模很大的时候，这种情况简直就太常见了</p>\n<p>虽然apply是在子线程执行的，但是请不要无节制地apply；commit我就不多说了吧？直接在当前线程写入，如果你在主线程干这个</p>\n<ul>\n<li>SP多进程不可靠</li>\n</ul>\n<p>sp有一个貌似可以提供「跨进程」功能的FLAG——MODE_MULTI_PROCESS</p>\n<p>文档也说了，这玩意在某些Android版本上不可靠，并且未来也不会提供任何支持，要是用跨进程数据传输需要使用类似ContentProvider的东西。而且，SharedPreference的文档也特别说明：</p>\n<p><code>Note: This class does not support use across multiple processes.</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> SharedPreferences <span class=\"title\">getSharedPreferences</span><span class=\"params\">(File file, <span class=\"keyword\">int</span> mode)</span> </span>&#123;</div><div class=\"line\">    checkMode(mode);</div><div class=\"line\">    SharedPreferencesImpl sp;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (ContextImpl.class) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> ArrayMap&lt;File, SharedPreferencesImpl&gt; cache = getSharedPreferencesCacheLocked();</div><div class=\"line\">        sp = cache.get(file);</div><div class=\"line\">        <span class=\"keyword\">if</span> (sp == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            sp = <span class=\"keyword\">new</span> SharedPreferencesImpl(file, mode);</div><div class=\"line\">            cache.put(file, sp);</div><div class=\"line\">            <span class=\"keyword\">return</span> sp;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> ((mode &amp; Context.MODE_MULTI_PROCESS) != <span class=\"number\">0</span> ||</div><div class=\"line\">        getApplicationInfo().targetSdkVersion &lt; android.os.Build.VERSION_CODES.HONEYCOMB) &#123;</div><div class=\"line\">        <span class=\"comment\">// If somebody else (some other process) changed the prefs</span></div><div class=\"line\">        <span class=\"comment\">// file behind our back, we reload it.  This has been the</span></div><div class=\"line\">        <span class=\"comment\">// historical (if undocumented) behavior.</span></div><div class=\"line\">        sp.startReloadIfChangedUnexpectedly();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> sp;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个flag保证了啥？保证了<strong>在API 11以前</strong>的系统上，如果sp已经被读取进内存，再次获取这个sp的时候，如果有这个flag，会重新读一遍文件，仅此而已</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ol>\n<li>不要存放大的key和value！会引起界面卡、频繁GC、占用内存等等</li>\n<li>毫不相关的配置项就不要丢在一起了！文件越大读取越慢，防止全部放进defalut的sp！</li>\n<li>读取频繁的key和不易变动的key尽量不要放在一起，影响速度。（如果整个文件很小，那么忽略吧，为了这点性能添加维护成本得不偿失）</li>\n<li>不要乱edit和apply，每次edit会创建新的EditorImpl对象，尽量批量修改一次提交！</li>\n<li>尽量不要存放JSON和HTML，这种场景请直接使用json（文件存取）！</li>\n<li>Commit发生在UI线程中，apply发生在工作线程中，对于数据的提交最好是批量操作统一提交。虽然apply发生在工作线程（不会因为IO阻塞UI线程）但是如果添加任务较多也有可能带来其他严重后果（参照ActivityThread源码中handleStopActivity方法实现）。</li>\n<li>跨进程通信不可靠</li>\n</ol>\n","excerpt":"<p>SharedPreferences在Android使用非常普遍，本文记录一下它的不足之处和使用注意事项</p>","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p><code>SharedPreferences</code>是Android SDK提供的工具，可以存储应用的一些配置信息，这些信息会以键值对的形式保存在<code>/sdcard/data/data/packageName/shared_prefs/</code>路径下的一个<code>xml</code>文件中。它提供了多种数据类型的存储，包括：<code>int</code>、<code>long</code>、<code>boolean</code>、<code>float</code>、<code>String</code>以及<code>Set&lt;String&gt;</code>。</p>\n<h4 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h4><ul>\n<li><code>context.getSharedPreference(name, mode);</code></li>\n<li><code>PreferenceManager.getDefaultSharedPreferences(context);</code></li>\n</ul>\n<p>这两种方式其实具体实现是一样的，只不过一个是开发者自己定义名字，另一个是使用包名+”_preference”作为存储文件名。</p>\n<h4 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h4><p>若我们大量使用<code>PreferenceManager.getDefaultSharedPreferences(context);</code>，将各种配置项全部存储到一个sp中，就可能会导致一个问题：<strong>该文件过大，读取配置项过慢</strong></p>\n<p>所以推荐，根据情况，将不同的配置文件保存在不同的sp中，而不是全部使用默认的sp，导致同一个sp文件过大</p>\n<ol>\n<li>第一次从sp中获取值的时候，有可能阻塞主线程，使界面卡顿、掉帧。</li>\n<li>解析sp的时候会产生大量的临时对象，导致频繁GC，引起界面卡顿。</li>\n<li>这些key和value会永远存在于内存之中，占用大量内存。</li>\n</ol>\n<h4 id=\"其他注意\"><a href=\"#其他注意\" class=\"headerlink\" title=\"其他注意\"></a>其他注意</h4><ul>\n<li>被加载进来的这些大对象，会永远存在于内存之中，不会被释放。</li>\n</ul>\n<p>ContextImpl这个类，在getSharedPreference的时候会把所有的sp放到一个静态变量里面缓存起来：</p>\n<p><strong>static</strong>的sSharedPrefsCache，它保存了你所有使用的sp</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@GuardedBy</span>(<span class=\"string\">\"ContextImpl.class\"</span>)</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ArrayMap&lt;String, ArrayMap&lt;File, SharedPreferencesImpl&gt;&gt;sSharedPrefsCache;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ArrayMap&lt;File, SharedPreferencesImpl&gt; <span class=\"title\">getSharedPreferencesCacheLocked</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (sSharedPrefsCache == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        sSharedPrefsCache = <span class=\"keyword\">new</span> ArrayMap&lt;&gt;();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> String packageName = getPackageName();</div><div class=\"line\">    ArrayMap&lt;File, SharedPreferencesImpl&gt; packagePrefs = sSharedPrefsCache.get(packageName);</div><div class=\"line\">    <span class=\"keyword\">if</span> (packagePrefs == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        packagePrefs = <span class=\"keyword\">new</span> ArrayMap&lt;&gt;();</div><div class=\"line\">        sSharedPrefsCache.put(packageName, packagePrefs);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> packagePrefs;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>存储JSON等特殊符号很多的value</li>\n</ul>\n<p>在sp里面存json或者HTML；这么做不是不可以，但是，如果这个json相对较大，那么也会引起sp读取速度的急剧下降。</p>\n<p>JSON或者HTML格式存放在sp里面的时候，需要转义，这样会带来很多 &amp; 这种特殊符号，sp在解析碰到这个特殊符号的时候会进行特殊的处理，引发额外的字符串拼接以及函数调用开销。而JSON本来就是可以用来做配置文件的，你干嘛又把它放在sp里面呢？</p>\n<ul>\n<li>多次edit多次apply</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">SharedPreferences sp = getSharedPreferences(<span class=\"string\">\"test\"</span>, MODE_PRIVATE);</div><div class=\"line\">sp.edit().putString(<span class=\"string\">\"test1\"</span>, <span class=\"string\">\"sss\"</span>).apply();</div><div class=\"line\">sp.edit().putString(<span class=\"string\">\"test2\"</span>, <span class=\"string\">\"sss\"</span>).apply();</div><div class=\"line\">sp.edit().putString(<span class=\"string\">\"test3\"</span>, <span class=\"string\">\"sss\"</span>).apply();</div><div class=\"line\">sp.edit().putString(<span class=\"string\">\"test4\"</span>, <span class=\"string\">\"sss\"</span>).apply();</div></pre></td></tr></table></figure>\n<p>每次edit都会创建一个Editor对象，额外占用内存；当然多创建几个对象也影响不了多少；但是，多次apply也会卡界面你造吗？</p>\n<p>有童鞋会说，apply不是在别的线程些磁盘的吗，怎么可能卡界面？我带你仔细看一下源码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">apply</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> MemoryCommitResult mcr = commitToMemory();</div><div class=\"line\">    <span class=\"keyword\">final</span> Runnable awaitCommit = <span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    mcr.writtenToDiskLatch.await();</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException ignored) &#123;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">    QueuedWork.add(awaitCommit);</div><div class=\"line\"></div><div class=\"line\">    Runnable postWriteRunnable = <span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                awaitCommit.run();</div><div class=\"line\">                QueuedWork.remove(awaitCommit);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">    SharedPreferencesImpl.<span class=\"keyword\">this</span>.enqueueDiskWrite(mcr, postWriteRunnable);</div><div class=\"line\">    notifyListeners(mcr);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意两点，第一，把一个带有await的runnable添加进了QueueWork类的一个队列；第二，把这个写入任务通过enqueueDiskWrite丢给了一个<strong>只有单个线程</strong>的线程池执行。</p>\n<p>到这里一切都OK，在子线程里面写入不会卡UI。但是，你去ActivityThread类的handleStopActivity里看一看：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">handleStopActivity</span><span class=\"params\">(IBinder token, <span class=\"keyword\">boolean</span> show, <span class=\"keyword\">int</span> configChanges, <span class=\"keyword\">int</span> seq)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 省略无关。。</span></div><div class=\"line\">    <span class=\"comment\">// Make sure any pending writes are now committed.（确保所有延迟写入完成）</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!r.isPreHoneycomb()) &#123;</div><div class=\"line\">        QueuedWork.waitToFinish();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 省略无关。。</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果在Activity Stop的时候，已经写入完毕了，那么万事大吉，不会有任何等待，这个函数会立马返回。但是，如果你使用了太多次的apply，那么意味着写入队列会有很多写入任务，而那里就只有一个线程在写。当App规模很大的时候，这种情况简直就太常见了</p>\n<p>虽然apply是在子线程执行的，但是请不要无节制地apply；commit我就不多说了吧？直接在当前线程写入，如果你在主线程干这个</p>\n<ul>\n<li>SP多进程不可靠</li>\n</ul>\n<p>sp有一个貌似可以提供「跨进程」功能的FLAG——MODE_MULTI_PROCESS</p>\n<p>文档也说了，这玩意在某些Android版本上不可靠，并且未来也不会提供任何支持，要是用跨进程数据传输需要使用类似ContentProvider的东西。而且，SharedPreference的文档也特别说明：</p>\n<p><code>Note: This class does not support use across multiple processes.</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> SharedPreferences <span class=\"title\">getSharedPreferences</span><span class=\"params\">(File file, <span class=\"keyword\">int</span> mode)</span> </span>&#123;</div><div class=\"line\">    checkMode(mode);</div><div class=\"line\">    SharedPreferencesImpl sp;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (ContextImpl.class) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> ArrayMap&lt;File, SharedPreferencesImpl&gt; cache = getSharedPreferencesCacheLocked();</div><div class=\"line\">        sp = cache.get(file);</div><div class=\"line\">        <span class=\"keyword\">if</span> (sp == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            sp = <span class=\"keyword\">new</span> SharedPreferencesImpl(file, mode);</div><div class=\"line\">            cache.put(file, sp);</div><div class=\"line\">            <span class=\"keyword\">return</span> sp;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> ((mode &amp; Context.MODE_MULTI_PROCESS) != <span class=\"number\">0</span> ||</div><div class=\"line\">        getApplicationInfo().targetSdkVersion &lt; android.os.Build.VERSION_CODES.HONEYCOMB) &#123;</div><div class=\"line\">        <span class=\"comment\">// If somebody else (some other process) changed the prefs</span></div><div class=\"line\">        <span class=\"comment\">// file behind our back, we reload it.  This has been the</span></div><div class=\"line\">        <span class=\"comment\">// historical (if undocumented) behavior.</span></div><div class=\"line\">        sp.startReloadIfChangedUnexpectedly();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> sp;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个flag保证了啥？保证了<strong>在API 11以前</strong>的系统上，如果sp已经被读取进内存，再次获取这个sp的时候，如果有这个flag，会重新读一遍文件，仅此而已</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ol>\n<li>不要存放大的key和value！会引起界面卡、频繁GC、占用内存等等</li>\n<li>毫不相关的配置项就不要丢在一起了！文件越大读取越慢，防止全部放进defalut的sp！</li>\n<li>读取频繁的key和不易变动的key尽量不要放在一起，影响速度。（如果整个文件很小，那么忽略吧，为了这点性能添加维护成本得不偿失）</li>\n<li>不要乱edit和apply，每次edit会创建新的EditorImpl对象，尽量批量修改一次提交！</li>\n<li>尽量不要存放JSON和HTML，这种场景请直接使用json（文件存取）！</li>\n<li>Commit发生在UI线程中，apply发生在工作线程中，对于数据的提交最好是批量操作统一提交。虽然apply发生在工作线程（不会因为IO阻塞UI线程）但是如果添加任务较多也有可能带来其他严重后果（参照ActivityThread源码中handleStopActivity方法实现）。</li>\n<li>跨进程通信不可靠</li>\n</ol>"},{"title":"设计模式之建造者模式","date":"2016-12-15T08:45:50.000Z","_content":"\n建造者模式，将一个复杂对象的构建与它的表示分离，使得构建过程可以以分部进行的链式调用来完成\n\n<!--more-->\n\n## 若不用Build模式\n\n### 定义一个Person类\n\n```java\npublic class Person {\n    private String name;\n    private int age;\n    private double height;\n    private double weight;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public double getHeight() {\n        return height;\n    }\n\n    public void setHeight(double height) {\n        this.height = height;\n    }\n\n    public double getWeight() {\n        return weight;\n    }\n\n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n}\n```\n\n### 可能会定义一个构造方法。\n\n```java\npublic Person(String name, int age, double height, double weight) {\n\tthis.name = name;\n\tthis.age = age;\n\tthis.height = height;\n\tthis.weight = weight;\n}\n```\n\n### 对应不同的需求，可能会定义好几种构造方法\n\n```java\npublic Person(String name) {\n\tthis.name = name;\n}\n\npublic Person(String name, int age) {\n\tthis.name = name;\n\tthis.age = age;\n}\n\npublic Person(String name, int age, double height) {\n\tthis.name = name;\n\tthis.age = age;\n\tthis.height = height;\n}\n```\n\n### 使用的时候就变成这样了\n\n```java\nPerson p1=new Person();\nPerson p2=new Person(\"张三\");\nPerson p3=new Person(\"李四\",18);\nPerson p4=new Person(\"王五\",21,180);\nPerson p5=new Person(\"赵六\",17,170,65.4);\n```\n\n### 这样的坏处：\n\n- 构造函数有多个参数，不好确定每个参数具体意思，可读性不强\n- 若参数较多的时候，麻烦\n\n## 若使用Builder模式\n\n### 具体代码实现\n\n```java\npublic class Person {\n    private String name;\n    private int age;\n    private double height;\n    private double weight;\n\n    privatePerson(Builder builder) {\n        this.name=builder.name;\n        this.age=builder.age;\n        this.height=builder.height;\n        this.weight=builder.weight;\n    }\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public double getHeight() {\n        return height;\n    }\n\n    public void setHeight(double height) {\n        this.height = height;\n    }\n\n    public double getWeight() {\n        return weight;\n    }\n\n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n\n    static class Builder{\n        private String name;\n        private int age;\n        private double height;\n        private double weight;\n        public Builder name(String name){\n            this.name=name;\n            return this;\n        }\n        public Builder age(int age){\n            this.age=age;\n            return this;\n        }\n        public Builder height(double height){\n            this.height=height;\n            return this;\n        }\n\n        public Builder weight(double weight){\n            this.weight=weight;\n            return this;\n        }\n\n        public Person build(){\n            return new Person(this);\n        }\n    }\n}\n```\n\n### 大概流程\n\n- 定义静态Builder类\n- Builder类中声明和外部类一样的变量\n- 定义多个set方法，返回结果为Builder本身（this）\n- Builder类中增加build（）方法，返回外部类Person对象\n- 外部类Person中声明一个参数为Builder的构造函数\n\n### 使用\n\n```java\nPerson.Builder builder=new Person.Builder();\nPerson person=builder\n\t\t.name(\"张三\")\n\t\t.age(18)\n\t\t.height(178.5)\n\t\t.weight(67.4)\n\t\t.build();\n```\n\n## Android中哪些地方使用到Builder模式\n\n### 对话框的创建，AlertDialog\n\n```java\nAlertDialog.Builder builder=new AlertDialog.Builder(this);\nAlertDialog dialog=builder.setTitle(\"标题\")\n\t\t.setIcon(android.R.drawable.ic_dialog_alert)\n\t\t.setView(R.layout.myview)\n\t\t.setPositiveButton(R.string.positive, new DialogInterface.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\n\t\t\t}\n\t\t})\n\t\t.setNegativeButton(R.string.negative, new DialogInterface.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\n\t\t\t}\n\t\t})\n\t\t.create();\ndialog.show();\n```\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=487379429&auto=1&height=66\"></iframe>","source":"_posts/设计模式之建造者模式.md","raw":"---\ntitle: 设计模式之建造者模式\ndate: 2016-12-15 16:45:50\ntags: \n- Android\ncategories: Android\n---\n\n建造者模式，将一个复杂对象的构建与它的表示分离，使得构建过程可以以分部进行的链式调用来完成\n\n<!--more-->\n\n## 若不用Build模式\n\n### 定义一个Person类\n\n```java\npublic class Person {\n    private String name;\n    private int age;\n    private double height;\n    private double weight;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public double getHeight() {\n        return height;\n    }\n\n    public void setHeight(double height) {\n        this.height = height;\n    }\n\n    public double getWeight() {\n        return weight;\n    }\n\n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n}\n```\n\n### 可能会定义一个构造方法。\n\n```java\npublic Person(String name, int age, double height, double weight) {\n\tthis.name = name;\n\tthis.age = age;\n\tthis.height = height;\n\tthis.weight = weight;\n}\n```\n\n### 对应不同的需求，可能会定义好几种构造方法\n\n```java\npublic Person(String name) {\n\tthis.name = name;\n}\n\npublic Person(String name, int age) {\n\tthis.name = name;\n\tthis.age = age;\n}\n\npublic Person(String name, int age, double height) {\n\tthis.name = name;\n\tthis.age = age;\n\tthis.height = height;\n}\n```\n\n### 使用的时候就变成这样了\n\n```java\nPerson p1=new Person();\nPerson p2=new Person(\"张三\");\nPerson p3=new Person(\"李四\",18);\nPerson p4=new Person(\"王五\",21,180);\nPerson p5=new Person(\"赵六\",17,170,65.4);\n```\n\n### 这样的坏处：\n\n- 构造函数有多个参数，不好确定每个参数具体意思，可读性不强\n- 若参数较多的时候，麻烦\n\n## 若使用Builder模式\n\n### 具体代码实现\n\n```java\npublic class Person {\n    private String name;\n    private int age;\n    private double height;\n    private double weight;\n\n    privatePerson(Builder builder) {\n        this.name=builder.name;\n        this.age=builder.age;\n        this.height=builder.height;\n        this.weight=builder.weight;\n    }\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public double getHeight() {\n        return height;\n    }\n\n    public void setHeight(double height) {\n        this.height = height;\n    }\n\n    public double getWeight() {\n        return weight;\n    }\n\n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n\n    static class Builder{\n        private String name;\n        private int age;\n        private double height;\n        private double weight;\n        public Builder name(String name){\n            this.name=name;\n            return this;\n        }\n        public Builder age(int age){\n            this.age=age;\n            return this;\n        }\n        public Builder height(double height){\n            this.height=height;\n            return this;\n        }\n\n        public Builder weight(double weight){\n            this.weight=weight;\n            return this;\n        }\n\n        public Person build(){\n            return new Person(this);\n        }\n    }\n}\n```\n\n### 大概流程\n\n- 定义静态Builder类\n- Builder类中声明和外部类一样的变量\n- 定义多个set方法，返回结果为Builder本身（this）\n- Builder类中增加build（）方法，返回外部类Person对象\n- 外部类Person中声明一个参数为Builder的构造函数\n\n### 使用\n\n```java\nPerson.Builder builder=new Person.Builder();\nPerson person=builder\n\t\t.name(\"张三\")\n\t\t.age(18)\n\t\t.height(178.5)\n\t\t.weight(67.4)\n\t\t.build();\n```\n\n## Android中哪些地方使用到Builder模式\n\n### 对话框的创建，AlertDialog\n\n```java\nAlertDialog.Builder builder=new AlertDialog.Builder(this);\nAlertDialog dialog=builder.setTitle(\"标题\")\n\t\t.setIcon(android.R.drawable.ic_dialog_alert)\n\t\t.setView(R.layout.myview)\n\t\t.setPositiveButton(R.string.positive, new DialogInterface.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\n\t\t\t}\n\t\t})\n\t\t.setNegativeButton(R.string.negative, new DialogInterface.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\n\t\t\t}\n\t\t})\n\t\t.create();\ndialog.show();\n```\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=487379429&auto=1&height=66\"></iframe>","slug":"设计模式之建造者模式","published":1,"updated":"2018-07-19T01:53:44.473Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6nl003n1kygbx2xhq7l","content":"<p>建造者模式，将一个复杂对象的构建与它的表示分离，使得构建过程可以以分部进行的链式调用来完成</p>\n<a id=\"more\"></a>\n<h2 id=\"若不用Build模式\"><a href=\"#若不用Build模式\" class=\"headerlink\" title=\"若不用Build模式\"></a>若不用Build模式</h2><h3 id=\"定义一个Person类\"><a href=\"#定义一个Person类\" class=\"headerlink\" title=\"定义一个Person类\"></a>定义一个Person类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> height;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> weight;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> age;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getHeight</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> height;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setHeight</span><span class=\"params\">(<span class=\"keyword\">double</span> height)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.height = height;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getWeight</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> weight;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setWeight</span><span class=\"params\">(<span class=\"keyword\">double</span> weight)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.weight = weight;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"可能会定义一个构造方法。\"><a href=\"#可能会定义一个构造方法。\" class=\"headerlink\" title=\"可能会定义一个构造方法。\"></a>可能会定义一个构造方法。</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age, <span class=\"keyword\">double</span> height, <span class=\"keyword\">double</span> weight)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.height = height;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.weight = weight;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"对应不同的需求，可能会定义好几种构造方法\"><a href=\"#对应不同的需求，可能会定义好几种构造方法\" class=\"headerlink\" title=\"对应不同的需求，可能会定义好几种构造方法\"></a>对应不同的需求，可能会定义好几种构造方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age, <span class=\"keyword\">double</span> height)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.height = height;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"使用的时候就变成这样了\"><a href=\"#使用的时候就变成这样了\" class=\"headerlink\" title=\"使用的时候就变成这样了\"></a>使用的时候就变成这样了</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Person p1=<span class=\"keyword\">new</span> Person();</div><div class=\"line\">Person p2=<span class=\"keyword\">new</span> Person(<span class=\"string\">\"张三\"</span>);</div><div class=\"line\">Person p3=<span class=\"keyword\">new</span> Person(<span class=\"string\">\"李四\"</span>,<span class=\"number\">18</span>);</div><div class=\"line\">Person p4=<span class=\"keyword\">new</span> Person(<span class=\"string\">\"王五\"</span>,<span class=\"number\">21</span>,<span class=\"number\">180</span>);</div><div class=\"line\">Person p5=<span class=\"keyword\">new</span> Person(<span class=\"string\">\"赵六\"</span>,<span class=\"number\">17</span>,<span class=\"number\">170</span>,<span class=\"number\">65.4</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"这样的坏处：\"><a href=\"#这样的坏处：\" class=\"headerlink\" title=\"这样的坏处：\"></a>这样的坏处：</h3><ul>\n<li>构造函数有多个参数，不好确定每个参数具体意思，可读性不强</li>\n<li>若参数较多的时候，麻烦</li>\n</ul>\n<h2 id=\"若使用Builder模式\"><a href=\"#若使用Builder模式\" class=\"headerlink\" title=\"若使用Builder模式\"></a>若使用Builder模式</h2><h3 id=\"具体代码实现\"><a href=\"#具体代码实现\" class=\"headerlink\" title=\"具体代码实现\"></a>具体代码实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> height;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> weight;</div><div class=\"line\"></div><div class=\"line\">    privatePerson(Builder builder) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name=builder.name;</div><div class=\"line\">        <span class=\"keyword\">this</span>.age=builder.age;</div><div class=\"line\">        <span class=\"keyword\">this</span>.height=builder.height;</div><div class=\"line\">        <span class=\"keyword\">this</span>.weight=builder.weight;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> age;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getHeight</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> height;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setHeight</span><span class=\"params\">(<span class=\"keyword\">double</span> height)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.height = height;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getWeight</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> weight;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setWeight</span><span class=\"params\">(<span class=\"keyword\">double</span> weight)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.weight = weight;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> String name;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> height;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> weight;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">name</span><span class=\"params\">(String name)</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.name=name;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">age</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.age=age;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">height</span><span class=\"params\">(<span class=\"keyword\">double</span> height)</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.height=height;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">weight</span><span class=\"params\">(<span class=\"keyword\">double</span> weight)</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.weight=weight;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">build</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Person(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"大概流程\"><a href=\"#大概流程\" class=\"headerlink\" title=\"大概流程\"></a>大概流程</h3><ul>\n<li>定义静态Builder类</li>\n<li>Builder类中声明和外部类一样的变量</li>\n<li>定义多个set方法，返回结果为Builder本身（this）</li>\n<li>Builder类中增加build（）方法，返回外部类Person对象</li>\n<li>外部类Person中声明一个参数为Builder的构造函数</li>\n</ul>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Person.Builder builder=<span class=\"keyword\">new</span> Person.Builder();</div><div class=\"line\">Person person=builder</div><div class=\"line\">\t\t.name(<span class=\"string\">\"张三\"</span>)</div><div class=\"line\">\t\t.age(<span class=\"number\">18</span>)</div><div class=\"line\">\t\t.height(<span class=\"number\">178.5</span>)</div><div class=\"line\">\t\t.weight(<span class=\"number\">67.4</span>)</div><div class=\"line\">\t\t.build();</div></pre></td></tr></table></figure>\n<h2 id=\"Android中哪些地方使用到Builder模式\"><a href=\"#Android中哪些地方使用到Builder模式\" class=\"headerlink\" title=\"Android中哪些地方使用到Builder模式\"></a>Android中哪些地方使用到Builder模式</h2><h3 id=\"对话框的创建，AlertDialog\"><a href=\"#对话框的创建，AlertDialog\" class=\"headerlink\" title=\"对话框的创建，AlertDialog\"></a>对话框的创建，AlertDialog</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">AlertDialog.Builder builder=<span class=\"keyword\">new</span> AlertDialog.Builder(<span class=\"keyword\">this</span>);</div><div class=\"line\">AlertDialog dialog=builder.setTitle(<span class=\"string\">\"标题\"</span>)</div><div class=\"line\">\t\t.setIcon(android.R.drawable.ic_dialog_alert)</div><div class=\"line\">\t\t.setView(R.layout.myview)</div><div class=\"line\">\t\t.setPositiveButton(R.string.positive, <span class=\"keyword\">new</span> DialogInterface.OnClickListener() &#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(DialogInterface dialog, <span class=\"keyword\">int</span> which)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t\t.setNegativeButton(R.string.negative, <span class=\"keyword\">new</span> DialogInterface.OnClickListener() &#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(DialogInterface dialog, <span class=\"keyword\">int</span> which)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t\t.create();</div><div class=\"line\">dialog.show();</div></pre></td></tr></table></figure>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=487379429&auto=1&height=66\"></iframe>","excerpt":"<p>建造者模式，将一个复杂对象的构建与它的表示分离，使得构建过程可以以分部进行的链式调用来完成</p>","more":"<h2 id=\"若不用Build模式\"><a href=\"#若不用Build模式\" class=\"headerlink\" title=\"若不用Build模式\"></a>若不用Build模式</h2><h3 id=\"定义一个Person类\"><a href=\"#定义一个Person类\" class=\"headerlink\" title=\"定义一个Person类\"></a>定义一个Person类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> height;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> weight;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> age;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getHeight</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> height;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setHeight</span><span class=\"params\">(<span class=\"keyword\">double</span> height)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.height = height;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getWeight</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> weight;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setWeight</span><span class=\"params\">(<span class=\"keyword\">double</span> weight)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.weight = weight;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"可能会定义一个构造方法。\"><a href=\"#可能会定义一个构造方法。\" class=\"headerlink\" title=\"可能会定义一个构造方法。\"></a>可能会定义一个构造方法。</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age, <span class=\"keyword\">double</span> height, <span class=\"keyword\">double</span> weight)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.height = height;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.weight = weight;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"对应不同的需求，可能会定义好几种构造方法\"><a href=\"#对应不同的需求，可能会定义好几种构造方法\" class=\"headerlink\" title=\"对应不同的需求，可能会定义好几种构造方法\"></a>对应不同的需求，可能会定义好几种构造方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age, <span class=\"keyword\">double</span> height)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.height = height;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"使用的时候就变成这样了\"><a href=\"#使用的时候就变成这样了\" class=\"headerlink\" title=\"使用的时候就变成这样了\"></a>使用的时候就变成这样了</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Person p1=<span class=\"keyword\">new</span> Person();</div><div class=\"line\">Person p2=<span class=\"keyword\">new</span> Person(<span class=\"string\">\"张三\"</span>);</div><div class=\"line\">Person p3=<span class=\"keyword\">new</span> Person(<span class=\"string\">\"李四\"</span>,<span class=\"number\">18</span>);</div><div class=\"line\">Person p4=<span class=\"keyword\">new</span> Person(<span class=\"string\">\"王五\"</span>,<span class=\"number\">21</span>,<span class=\"number\">180</span>);</div><div class=\"line\">Person p5=<span class=\"keyword\">new</span> Person(<span class=\"string\">\"赵六\"</span>,<span class=\"number\">17</span>,<span class=\"number\">170</span>,<span class=\"number\">65.4</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"这样的坏处：\"><a href=\"#这样的坏处：\" class=\"headerlink\" title=\"这样的坏处：\"></a>这样的坏处：</h3><ul>\n<li>构造函数有多个参数，不好确定每个参数具体意思，可读性不强</li>\n<li>若参数较多的时候，麻烦</li>\n</ul>\n<h2 id=\"若使用Builder模式\"><a href=\"#若使用Builder模式\" class=\"headerlink\" title=\"若使用Builder模式\"></a>若使用Builder模式</h2><h3 id=\"具体代码实现\"><a href=\"#具体代码实现\" class=\"headerlink\" title=\"具体代码实现\"></a>具体代码实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> height;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> weight;</div><div class=\"line\"></div><div class=\"line\">    privatePerson(Builder builder) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name=builder.name;</div><div class=\"line\">        <span class=\"keyword\">this</span>.age=builder.age;</div><div class=\"line\">        <span class=\"keyword\">this</span>.height=builder.height;</div><div class=\"line\">        <span class=\"keyword\">this</span>.weight=builder.weight;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> age;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getHeight</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> height;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setHeight</span><span class=\"params\">(<span class=\"keyword\">double</span> height)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.height = height;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getWeight</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> weight;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setWeight</span><span class=\"params\">(<span class=\"keyword\">double</span> weight)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.weight = weight;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> String name;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> height;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> weight;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">name</span><span class=\"params\">(String name)</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.name=name;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">age</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.age=age;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">height</span><span class=\"params\">(<span class=\"keyword\">double</span> height)</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.height=height;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">weight</span><span class=\"params\">(<span class=\"keyword\">double</span> weight)</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.weight=weight;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">build</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Person(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"大概流程\"><a href=\"#大概流程\" class=\"headerlink\" title=\"大概流程\"></a>大概流程</h3><ul>\n<li>定义静态Builder类</li>\n<li>Builder类中声明和外部类一样的变量</li>\n<li>定义多个set方法，返回结果为Builder本身（this）</li>\n<li>Builder类中增加build（）方法，返回外部类Person对象</li>\n<li>外部类Person中声明一个参数为Builder的构造函数</li>\n</ul>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Person.Builder builder=<span class=\"keyword\">new</span> Person.Builder();</div><div class=\"line\">Person person=builder</div><div class=\"line\">\t\t.name(<span class=\"string\">\"张三\"</span>)</div><div class=\"line\">\t\t.age(<span class=\"number\">18</span>)</div><div class=\"line\">\t\t.height(<span class=\"number\">178.5</span>)</div><div class=\"line\">\t\t.weight(<span class=\"number\">67.4</span>)</div><div class=\"line\">\t\t.build();</div></pre></td></tr></table></figure>\n<h2 id=\"Android中哪些地方使用到Builder模式\"><a href=\"#Android中哪些地方使用到Builder模式\" class=\"headerlink\" title=\"Android中哪些地方使用到Builder模式\"></a>Android中哪些地方使用到Builder模式</h2><h3 id=\"对话框的创建，AlertDialog\"><a href=\"#对话框的创建，AlertDialog\" class=\"headerlink\" title=\"对话框的创建，AlertDialog\"></a>对话框的创建，AlertDialog</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">AlertDialog.Builder builder=<span class=\"keyword\">new</span> AlertDialog.Builder(<span class=\"keyword\">this</span>);</div><div class=\"line\">AlertDialog dialog=builder.setTitle(<span class=\"string\">\"标题\"</span>)</div><div class=\"line\">\t\t.setIcon(android.R.drawable.ic_dialog_alert)</div><div class=\"line\">\t\t.setView(R.layout.myview)</div><div class=\"line\">\t\t.setPositiveButton(R.string.positive, <span class=\"keyword\">new</span> DialogInterface.OnClickListener() &#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(DialogInterface dialog, <span class=\"keyword\">int</span> which)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t\t.setNegativeButton(R.string.negative, <span class=\"keyword\">new</span> DialogInterface.OnClickListener() &#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(DialogInterface dialog, <span class=\"keyword\">int</span> which)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t\t.create();</div><div class=\"line\">dialog.show();</div></pre></td></tr></table></figure>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=487379429&auto=1&height=66\"></iframe>"},{"title":"设计模式之观察者模式","date":"2016-12-19T06:38:23.000Z","_content":"\n\n\n观察者模式，定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变，所有依赖于它的对象都能得到通知并可以自动作出处理\n\n<!--more-->\n\n比如说：报纸的订阅，一旦订阅，当有新的报纸发布，所有的订阅者都会收到消息\n\n## 基本概念\n\n### 组成\n\n1. 观察者：Observer，也叫订阅者，即Subscriber（Rxjava）\n2. 被观察者：Observable\n\n### java中的体现\n\njava中提供了**Observable**和**Observe**接口供我们快速实现这种模式\n\n### 代码实现\n\n- 假如有下面这样的一个实体类\n\n```java\npublic class Weather {\n    private String description;\n\n    public Weather(String description) {\n        this.description = description;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    @Override\n    public String toString() {\n        return \"Weather{\" +\n                \"description='\" + description + '\\'' +\n                '}';\n    }\n}\n```\n\n- 定义观察者接口（因为观察者可能有很多类型，所以我们定义成一个接口，如果想要订阅这个事件，实现这个接口即可，另外一般订阅之后，在实现接口中的方法的参数中会拿到发布的数据，数据的类型不固定所以这个观察者接口需要定义范型）\n\n```java\npublic interface Observer<T> {\n    void onUpdate(Observable<T> observable,T data);\n}\n```\n\n- 定义被观察者对象（可以设计成单例模式，类似EventBus，内部维持一个集合，用来保存观察者对象；register方法和unregister方法用来将观察者对象从集合中添加和移除出来，post方法用来发布，循环遍历集合，依次调用观察者的相关回调方法，并将发布的参数传入）\n\n```java\npackage com.it.fengan.designpattern.pattern;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Created by fengan on 2017/12/12.\n * email:fengan1102@gmail.com\n */\n\npublic class Observable<T> {\n\n    private static Observable observable;\n\n    private Observable() {\n\n    }\n\n    public static Observable getInstance() {\n        if (observable == null) {\n            synchronized (Observable.class) {\n                if (observable == null) {\n                    observable = new Observable();\n                }\n            }\n        }\n        return observable;\n    }\n\n    private List<Observer> observers = new ArrayList<>();\n\n    public void register(Observer<T> observer) {\n        if (observer == null) {\n            throw new RuntimeException(\"observer error\");\n        }\n\n        synchronized (Observable.class) {\n            if (!observers.contains(observer)) {\n                observers.add(observer);\n            }\n        }\n    }\n\n    public void unregister(Observer<T> observer) {\n        observers.remove(observer);\n    }\n\n    public void post(T data) {\n        for (Observer observer : observers) {\n            observer.onUpdate(this, data);\n        }\n    }\n\n}\n```\n\n- 注册和反注册过程\n\n```java\n@Test\n    public void testObserver() {\n        Observer<Weather> objectObserver1 = new Observer<Weather>(){\n\n            @Override\n            public void onUpdate(Observable<Weather> observable, Weather data) {\n                Log.e(\"testObserver\", \"objectObserver1:data=\" + data.toString());\n            }\n        };\n        Observer<Weather> objectObserver2 = new Observer<Weather>(){\n            @Override\n            public void onUpdate(Observable<Weather> observable, Weather data) {\n                Log.e(\"testObserver\", \"objectObserver2:data=\" + data.toString());\n            }\n        };\n        Observable observable = Observable.getInstance();\n        observable.register(objectObserver1);\n        observable.register(objectObserver2);\n        Weather weather = new Weather(\"晴天\");\n        observable.post(weather);\n        observable.unregister(objectObserver2);\n        observable.post(weather);\n    }\n```\n\nlogcat输出\n\n```\n12-19 15:18:44.780 2004-2036/? E/testObserver: objectObserver1:data=Weather{description='晴天'}\n12-19 15:18:44.780 2004-2036/? E/testObserver: objectObserver2:data=Weather{description='晴天'}\n12-19 15:18:44.780 2004-2036/? E/testObserver: objectObserver1:data=Weather{description='晴天'}\n```\n\n## Android中的应用\n\n- 一对一的观察者（一般称之为回调，只有一个观察者）\n\n```java\nButton btn=new Button(this);\nbtn.setOnClickListener(new View.OnClickListener() {\n\t@Override\n\tpublic void onClick(View v) {\n\t\tLog.e(\"TAG\",\"click\");\n\t}\n});\n```\n\n- 只要是set系列的设置监听器的方法最多都只能算回调，但是有一些监听器式add进去的，这种就是观察者模式了（比如RecyclerView中的addOnScrollListener方法）\n\n> RecycleView.java\n\n```java\n\n\nprivate List<OnScrollListener> mScrollListeners;\n\n/**\n * Add a listener that will be notified of any changes in scroll state or position.\n *\n * <p>Components that add a listener should take care to remove it when finished.\n * Other components that take ownership of a view may call {@link #clearOnScrollListeners()}\n * to remove all attached listeners.</p>\n *\n * @param listener listener to set or null to clear\n */\npublic void addOnScrollListener(OnScrollListener listener) {\n    if (mScrollListeners == null) {\n        mScrollListeners = new ArrayList<>();\n    }\n    mScrollListeners.add(listener);\n}\n\n/**\n * Remove a listener that was notified of any changes in scroll state or position.\n *\n * @param listener listener to set or null to clear\n */\npublic void removeOnScrollListener(OnScrollListener listener) {\n    if (mScrollListeners != null) {\n        mScrollListeners.remove(listener);\n    }\n}\n\n/**\n * Remove all secondary listener that were notified of any changes in scroll state or position.\n */\npublic void clearOnScrollListeners() {\n    if (mScrollListeners != null) {\n        mScrollListeners.clear();\n    }\n}\n```\n\n- Android的广播机制，其本质也是观察者模式，这里为了简单方便，直接拿本地广播的代码说明，即LocalBroadcastManager\n\n```java\nLocalBroadcastManager localBroadcastManager=LocalBroadcastManager.getInstance(this);\nlocalBroadcastManager.registerReceiver(BroadcastReceiver receiver, IntentFilter filter);\nlocalBroadcastManager.unregisterReceiver(BroadcastReceiver receiver);\nlocalBroadcastManager.sendBroadcast(Intent intent)\n```\n\n- 开源库（EventBus）\n\n观察者模式的三个典型方法它都具有，即注册，取消注册，发送事件\n\n```java\nEventBus.getDefault().register(Object subscriber);\nEventBus.getDefault().unregister(Object subscriber);\n\nEventBus.getDefault().post(Object event);\n```\n\n- 重量级的库，它就是RxJava\n\n创建一个被观察者\n\n```java\nObservable<String> myObservable = Observable.create(  \n    new Observable.OnSubscribe<String>() {  \n        @Override  \n        public void call(Subscriber<? super String> sub) {  \n            sub.onNext(\"Hello, world!\");  \n            sub.onCompleted();  \n        }  \n    }  \n);\n```\n\n创建一个观察者，也就是订阅者\n\n```java\nSubscriber<String> mySubscriber = new Subscriber<String>() {  \n    @Override  \n    public void onNext(String s) { System.out.println(s); }  \n  \n    @Override  \n    public void onCompleted() { }  \n  \n    @Override  \n    public void onError(Throwable e) { }  \n};\n```\n\n观察者进行事件的订阅\n\n```java\nmyObservable.subscribe(mySubscriber);\n```\n\n\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=453062799&auto=1&height=66\"></iframe>","source":"_posts/设计模式之观察者模式.md","raw":"---\ntitle: 设计模式之观察者模式\ndate: 2016-12-19 14:38:23\ntags: \n- Android\ncategories: Android\n---\n\n\n\n观察者模式，定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变，所有依赖于它的对象都能得到通知并可以自动作出处理\n\n<!--more-->\n\n比如说：报纸的订阅，一旦订阅，当有新的报纸发布，所有的订阅者都会收到消息\n\n## 基本概念\n\n### 组成\n\n1. 观察者：Observer，也叫订阅者，即Subscriber（Rxjava）\n2. 被观察者：Observable\n\n### java中的体现\n\njava中提供了**Observable**和**Observe**接口供我们快速实现这种模式\n\n### 代码实现\n\n- 假如有下面这样的一个实体类\n\n```java\npublic class Weather {\n    private String description;\n\n    public Weather(String description) {\n        this.description = description;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    @Override\n    public String toString() {\n        return \"Weather{\" +\n                \"description='\" + description + '\\'' +\n                '}';\n    }\n}\n```\n\n- 定义观察者接口（因为观察者可能有很多类型，所以我们定义成一个接口，如果想要订阅这个事件，实现这个接口即可，另外一般订阅之后，在实现接口中的方法的参数中会拿到发布的数据，数据的类型不固定所以这个观察者接口需要定义范型）\n\n```java\npublic interface Observer<T> {\n    void onUpdate(Observable<T> observable,T data);\n}\n```\n\n- 定义被观察者对象（可以设计成单例模式，类似EventBus，内部维持一个集合，用来保存观察者对象；register方法和unregister方法用来将观察者对象从集合中添加和移除出来，post方法用来发布，循环遍历集合，依次调用观察者的相关回调方法，并将发布的参数传入）\n\n```java\npackage com.it.fengan.designpattern.pattern;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Created by fengan on 2017/12/12.\n * email:fengan1102@gmail.com\n */\n\npublic class Observable<T> {\n\n    private static Observable observable;\n\n    private Observable() {\n\n    }\n\n    public static Observable getInstance() {\n        if (observable == null) {\n            synchronized (Observable.class) {\n                if (observable == null) {\n                    observable = new Observable();\n                }\n            }\n        }\n        return observable;\n    }\n\n    private List<Observer> observers = new ArrayList<>();\n\n    public void register(Observer<T> observer) {\n        if (observer == null) {\n            throw new RuntimeException(\"observer error\");\n        }\n\n        synchronized (Observable.class) {\n            if (!observers.contains(observer)) {\n                observers.add(observer);\n            }\n        }\n    }\n\n    public void unregister(Observer<T> observer) {\n        observers.remove(observer);\n    }\n\n    public void post(T data) {\n        for (Observer observer : observers) {\n            observer.onUpdate(this, data);\n        }\n    }\n\n}\n```\n\n- 注册和反注册过程\n\n```java\n@Test\n    public void testObserver() {\n        Observer<Weather> objectObserver1 = new Observer<Weather>(){\n\n            @Override\n            public void onUpdate(Observable<Weather> observable, Weather data) {\n                Log.e(\"testObserver\", \"objectObserver1:data=\" + data.toString());\n            }\n        };\n        Observer<Weather> objectObserver2 = new Observer<Weather>(){\n            @Override\n            public void onUpdate(Observable<Weather> observable, Weather data) {\n                Log.e(\"testObserver\", \"objectObserver2:data=\" + data.toString());\n            }\n        };\n        Observable observable = Observable.getInstance();\n        observable.register(objectObserver1);\n        observable.register(objectObserver2);\n        Weather weather = new Weather(\"晴天\");\n        observable.post(weather);\n        observable.unregister(objectObserver2);\n        observable.post(weather);\n    }\n```\n\nlogcat输出\n\n```\n12-19 15:18:44.780 2004-2036/? E/testObserver: objectObserver1:data=Weather{description='晴天'}\n12-19 15:18:44.780 2004-2036/? E/testObserver: objectObserver2:data=Weather{description='晴天'}\n12-19 15:18:44.780 2004-2036/? E/testObserver: objectObserver1:data=Weather{description='晴天'}\n```\n\n## Android中的应用\n\n- 一对一的观察者（一般称之为回调，只有一个观察者）\n\n```java\nButton btn=new Button(this);\nbtn.setOnClickListener(new View.OnClickListener() {\n\t@Override\n\tpublic void onClick(View v) {\n\t\tLog.e(\"TAG\",\"click\");\n\t}\n});\n```\n\n- 只要是set系列的设置监听器的方法最多都只能算回调，但是有一些监听器式add进去的，这种就是观察者模式了（比如RecyclerView中的addOnScrollListener方法）\n\n> RecycleView.java\n\n```java\n\n\nprivate List<OnScrollListener> mScrollListeners;\n\n/**\n * Add a listener that will be notified of any changes in scroll state or position.\n *\n * <p>Components that add a listener should take care to remove it when finished.\n * Other components that take ownership of a view may call {@link #clearOnScrollListeners()}\n * to remove all attached listeners.</p>\n *\n * @param listener listener to set or null to clear\n */\npublic void addOnScrollListener(OnScrollListener listener) {\n    if (mScrollListeners == null) {\n        mScrollListeners = new ArrayList<>();\n    }\n    mScrollListeners.add(listener);\n}\n\n/**\n * Remove a listener that was notified of any changes in scroll state or position.\n *\n * @param listener listener to set or null to clear\n */\npublic void removeOnScrollListener(OnScrollListener listener) {\n    if (mScrollListeners != null) {\n        mScrollListeners.remove(listener);\n    }\n}\n\n/**\n * Remove all secondary listener that were notified of any changes in scroll state or position.\n */\npublic void clearOnScrollListeners() {\n    if (mScrollListeners != null) {\n        mScrollListeners.clear();\n    }\n}\n```\n\n- Android的广播机制，其本质也是观察者模式，这里为了简单方便，直接拿本地广播的代码说明，即LocalBroadcastManager\n\n```java\nLocalBroadcastManager localBroadcastManager=LocalBroadcastManager.getInstance(this);\nlocalBroadcastManager.registerReceiver(BroadcastReceiver receiver, IntentFilter filter);\nlocalBroadcastManager.unregisterReceiver(BroadcastReceiver receiver);\nlocalBroadcastManager.sendBroadcast(Intent intent)\n```\n\n- 开源库（EventBus）\n\n观察者模式的三个典型方法它都具有，即注册，取消注册，发送事件\n\n```java\nEventBus.getDefault().register(Object subscriber);\nEventBus.getDefault().unregister(Object subscriber);\n\nEventBus.getDefault().post(Object event);\n```\n\n- 重量级的库，它就是RxJava\n\n创建一个被观察者\n\n```java\nObservable<String> myObservable = Observable.create(  \n    new Observable.OnSubscribe<String>() {  \n        @Override  \n        public void call(Subscriber<? super String> sub) {  \n            sub.onNext(\"Hello, world!\");  \n            sub.onCompleted();  \n        }  \n    }  \n);\n```\n\n创建一个观察者，也就是订阅者\n\n```java\nSubscriber<String> mySubscriber = new Subscriber<String>() {  \n    @Override  \n    public void onNext(String s) { System.out.println(s); }  \n  \n    @Override  \n    public void onCompleted() { }  \n  \n    @Override  \n    public void onError(Throwable e) { }  \n};\n```\n\n观察者进行事件的订阅\n\n```java\nmyObservable.subscribe(mySubscriber);\n```\n\n\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=453062799&auto=1&height=66\"></iframe>","slug":"设计模式之观察者模式","published":1,"updated":"2018-07-19T01:53:00.705Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6nl003q1kyguwygtl9j","content":"<p>观察者模式，定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变，所有依赖于它的对象都能得到通知并可以自动作出处理</p>\n<a id=\"more\"></a>\n<p>比如说：报纸的订阅，一旦订阅，当有新的报纸发布，所有的订阅者都会收到消息</p>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><h3 id=\"组成\"><a href=\"#组成\" class=\"headerlink\" title=\"组成\"></a>组成</h3><ol>\n<li>观察者：Observer，也叫订阅者，即Subscriber（Rxjava）</li>\n<li>被观察者：Observable</li>\n</ol>\n<h3 id=\"java中的体现\"><a href=\"#java中的体现\" class=\"headerlink\" title=\"java中的体现\"></a>java中的体现</h3><p>java中提供了<strong>Observable</strong>和<strong>Observe</strong>接口供我们快速实现这种模式</p>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><ul>\n<li>假如有下面这样的一个实体类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Weather</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> String description;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Weather</span><span class=\"params\">(String description)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.description = description;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getDescription</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> description;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDescription</span><span class=\"params\">(String description)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.description = description;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Weather&#123;\"</span> +</div><div class=\"line\">                <span class=\"string\">\"description='\"</span> + description + <span class=\"string\">'\\''</span> +</div><div class=\"line\">                <span class=\"string\">'&#125;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>定义观察者接口（因为观察者可能有很多类型，所以我们定义成一个接口，如果想要订阅这个事件，实现这个接口即可，另外一般订阅之后，在实现接口中的方法的参数中会拿到发布的数据，数据的类型不固定所以这个观察者接口需要定义范型）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Observer</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onUpdate</span><span class=\"params\">(Observable&lt;T&gt; observable,T data)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>定义被观察者对象（可以设计成单例模式，类似EventBus，内部维持一个集合，用来保存观察者对象；register方法和unregister方法用来将观察者对象从集合中添加和移除出来，post方法用来发布，循环遍历集合，依次调用观察者的相关回调方法，并将发布的参数传入）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.it.fengan.designpattern.pattern;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Created by fengan on 2017/12/12.</div><div class=\"line\"> * email:fengan1102@gmail.com</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observable</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Observable observable;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Observable</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Observable <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (observable == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">synchronized</span> (Observable.class) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (observable == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    observable = <span class=\"keyword\">new</span> Observable();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> observable;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;Observer&gt; observers = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">register</span><span class=\"params\">(Observer&lt;T&gt; observer)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (observer == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"observer error\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (Observable.class) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!observers.contains(observer)) &#123;</div><div class=\"line\">                observers.add(observer);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">unregister</span><span class=\"params\">(Observer&lt;T&gt; observer)</span> </span>&#123;</div><div class=\"line\">        observers.remove(observer);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">post</span><span class=\"params\">(T data)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (Observer observer : observers) &#123;</div><div class=\"line\">            observer.onUpdate(<span class=\"keyword\">this</span>, data);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>注册和反注册过程</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testObserver</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Observer&lt;Weather&gt; objectObserver1 = <span class=\"keyword\">new</span> Observer&lt;Weather&gt;()&#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUpdate</span><span class=\"params\">(Observable&lt;Weather&gt; observable, Weather data)</span> </span>&#123;</div><div class=\"line\">                Log.e(<span class=\"string\">\"testObserver\"</span>, <span class=\"string\">\"objectObserver1:data=\"</span> + data.toString());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        Observer&lt;Weather&gt; objectObserver2 = <span class=\"keyword\">new</span> Observer&lt;Weather&gt;()&#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUpdate</span><span class=\"params\">(Observable&lt;Weather&gt; observable, Weather data)</span> </span>&#123;</div><div class=\"line\">                Log.e(<span class=\"string\">\"testObserver\"</span>, <span class=\"string\">\"objectObserver2:data=\"</span> + data.toString());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        Observable observable = Observable.getInstance();</div><div class=\"line\">        observable.register(objectObserver1);</div><div class=\"line\">        observable.register(objectObserver2);</div><div class=\"line\">        Weather weather = <span class=\"keyword\">new</span> Weather(<span class=\"string\">\"晴天\"</span>);</div><div class=\"line\">        observable.post(weather);</div><div class=\"line\">        observable.unregister(objectObserver2);</div><div class=\"line\">        observable.post(weather);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>logcat输出</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">12</span><span class=\"number\">-19</span> <span class=\"number\">15</span>:<span class=\"number\">18</span>:<span class=\"number\">44.780</span> <span class=\"number\">2004</span><span class=\"number\">-2036</span><span class=\"regexp\">/? E/</span><span class=\"string\">testObserver:</span> <span class=\"string\">objectObserver1:</span>data=Weather&#123;description=<span class=\"string\">'晴天'</span>&#125;</div><div class=\"line\"><span class=\"number\">12</span><span class=\"number\">-19</span> <span class=\"number\">15</span>:<span class=\"number\">18</span>:<span class=\"number\">44.780</span> <span class=\"number\">2004</span><span class=\"number\">-2036</span><span class=\"regexp\">/? E/</span><span class=\"string\">testObserver:</span> <span class=\"string\">objectObserver2:</span>data=Weather&#123;description=<span class=\"string\">'晴天'</span>&#125;</div><div class=\"line\"><span class=\"number\">12</span><span class=\"number\">-19</span> <span class=\"number\">15</span>:<span class=\"number\">18</span>:<span class=\"number\">44.780</span> <span class=\"number\">2004</span><span class=\"number\">-2036</span><span class=\"regexp\">/? E/</span><span class=\"string\">testObserver:</span> <span class=\"string\">objectObserver1:</span>data=Weather&#123;description=<span class=\"string\">'晴天'</span>&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Android中的应用\"><a href=\"#Android中的应用\" class=\"headerlink\" title=\"Android中的应用\"></a>Android中的应用</h2><ul>\n<li>一对一的观察者（一般称之为回调，只有一个观察者）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Button btn=<span class=\"keyword\">new</span> Button(<span class=\"keyword\">this</span>);</div><div class=\"line\">btn.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">\t\tLog.e(<span class=\"string\">\"TAG\"</span>,<span class=\"string\">\"click\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ul>\n<li>只要是set系列的设置监听器的方法最多都只能算回调，但是有一些监听器式add进去的，这种就是观察者模式了（比如RecyclerView中的addOnScrollListener方法）</li>\n</ul>\n<blockquote>\n<p>RecycleView.java</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> List&lt;OnScrollListener&gt; mScrollListeners;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Add a listener that will be notified of any changes in scroll state or position.</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;p&gt;Components that add a listener should take care to remove it when finished.</div><div class=\"line\"> * Other components that take ownership of a view may call &#123;<span class=\"doctag\">@link</span> #clearOnScrollListeners()&#125;</div><div class=\"line\"> * to remove all attached listeners.&lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> listener listener to set or null to clear</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addOnScrollListener</span><span class=\"params\">(OnScrollListener listener)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mScrollListeners == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        mScrollListeners = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">    &#125;</div><div class=\"line\">    mScrollListeners.add(listener);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Remove a listener that was notified of any changes in scroll state or position.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> listener listener to set or null to clear</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeOnScrollListener</span><span class=\"params\">(OnScrollListener listener)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mScrollListeners != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        mScrollListeners.remove(listener);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Remove all secondary listener that were notified of any changes in scroll state or position.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clearOnScrollListeners</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mScrollListeners != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        mScrollListeners.clear();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Android的广播机制，其本质也是观察者模式，这里为了简单方便，直接拿本地广播的代码说明，即LocalBroadcastManager</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">LocalBroadcastManager localBroadcastManager=LocalBroadcastManager.getInstance(<span class=\"keyword\">this</span>);</div><div class=\"line\">localBroadcastManager.registerReceiver(BroadcastReceiver receiver, IntentFilter filter);</div><div class=\"line\">localBroadcastManager.unregisterReceiver(BroadcastReceiver receiver);</div><div class=\"line\">localBroadcastManager.sendBroadcast(Intent intent)</div></pre></td></tr></table></figure>\n<ul>\n<li>开源库（EventBus）</li>\n</ul>\n<p>观察者模式的三个典型方法它都具有，即注册，取消注册，发送事件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">EventBus.getDefault().register(Object subscriber);</div><div class=\"line\">EventBus.getDefault().unregister(Object subscriber);</div><div class=\"line\"></div><div class=\"line\">EventBus.getDefault().post(Object event);</div></pre></td></tr></table></figure>\n<ul>\n<li>重量级的库，它就是RxJava</li>\n</ul>\n<p>创建一个被观察者</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable&lt;String&gt; myObservable = Observable.create(  </div><div class=\"line\">    <span class=\"keyword\">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;  </div><div class=\"line\">        <span class=\"meta\">@Override</span>  </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Subscriber&lt;? <span class=\"keyword\">super</span> String&gt; sub)</span> </span>&#123;  </div><div class=\"line\">            sub.onNext(<span class=\"string\">\"Hello, world!\"</span>);  </div><div class=\"line\">            sub.onCompleted();  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p>创建一个观察者，也就是订阅者</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Subscriber&lt;String&gt; mySubscriber = <span class=\"keyword\">new</span> Subscriber&lt;String&gt;() &#123;  </div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(String s)</span> </span>&#123; System.out.println(s); &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123; &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123; &#125;  </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>观察者进行事件的订阅</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">myObservable.subscribe(mySubscriber);</div></pre></td></tr></table></figure>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=453062799&auto=1&height=66\"></iframe>","excerpt":"<p>观察者模式，定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变，所有依赖于它的对象都能得到通知并可以自动作出处理</p>","more":"<p>比如说：报纸的订阅，一旦订阅，当有新的报纸发布，所有的订阅者都会收到消息</p>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><h3 id=\"组成\"><a href=\"#组成\" class=\"headerlink\" title=\"组成\"></a>组成</h3><ol>\n<li>观察者：Observer，也叫订阅者，即Subscriber（Rxjava）</li>\n<li>被观察者：Observable</li>\n</ol>\n<h3 id=\"java中的体现\"><a href=\"#java中的体现\" class=\"headerlink\" title=\"java中的体现\"></a>java中的体现</h3><p>java中提供了<strong>Observable</strong>和<strong>Observe</strong>接口供我们快速实现这种模式</p>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><ul>\n<li>假如有下面这样的一个实体类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Weather</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> String description;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Weather</span><span class=\"params\">(String description)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.description = description;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getDescription</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> description;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDescription</span><span class=\"params\">(String description)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.description = description;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Weather&#123;\"</span> +</div><div class=\"line\">                <span class=\"string\">\"description='\"</span> + description + <span class=\"string\">'\\''</span> +</div><div class=\"line\">                <span class=\"string\">'&#125;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>定义观察者接口（因为观察者可能有很多类型，所以我们定义成一个接口，如果想要订阅这个事件，实现这个接口即可，另外一般订阅之后，在实现接口中的方法的参数中会拿到发布的数据，数据的类型不固定所以这个观察者接口需要定义范型）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Observer</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onUpdate</span><span class=\"params\">(Observable&lt;T&gt; observable,T data)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>定义被观察者对象（可以设计成单例模式，类似EventBus，内部维持一个集合，用来保存观察者对象；register方法和unregister方法用来将观察者对象从集合中添加和移除出来，post方法用来发布，循环遍历集合，依次调用观察者的相关回调方法，并将发布的参数传入）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.it.fengan.designpattern.pattern;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Created by fengan on 2017/12/12.</div><div class=\"line\"> * email:fengan1102@gmail.com</div><div class=\"line\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observable</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Observable observable;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Observable</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Observable <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (observable == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">synchronized</span> (Observable.class) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (observable == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    observable = <span class=\"keyword\">new</span> Observable();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> observable;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;Observer&gt; observers = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">register</span><span class=\"params\">(Observer&lt;T&gt; observer)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (observer == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"observer error\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (Observable.class) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!observers.contains(observer)) &#123;</div><div class=\"line\">                observers.add(observer);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">unregister</span><span class=\"params\">(Observer&lt;T&gt; observer)</span> </span>&#123;</div><div class=\"line\">        observers.remove(observer);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">post</span><span class=\"params\">(T data)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (Observer observer : observers) &#123;</div><div class=\"line\">            observer.onUpdate(<span class=\"keyword\">this</span>, data);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>注册和反注册过程</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testObserver</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Observer&lt;Weather&gt; objectObserver1 = <span class=\"keyword\">new</span> Observer&lt;Weather&gt;()&#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUpdate</span><span class=\"params\">(Observable&lt;Weather&gt; observable, Weather data)</span> </span>&#123;</div><div class=\"line\">                Log.e(<span class=\"string\">\"testObserver\"</span>, <span class=\"string\">\"objectObserver1:data=\"</span> + data.toString());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        Observer&lt;Weather&gt; objectObserver2 = <span class=\"keyword\">new</span> Observer&lt;Weather&gt;()&#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUpdate</span><span class=\"params\">(Observable&lt;Weather&gt; observable, Weather data)</span> </span>&#123;</div><div class=\"line\">                Log.e(<span class=\"string\">\"testObserver\"</span>, <span class=\"string\">\"objectObserver2:data=\"</span> + data.toString());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        Observable observable = Observable.getInstance();</div><div class=\"line\">        observable.register(objectObserver1);</div><div class=\"line\">        observable.register(objectObserver2);</div><div class=\"line\">        Weather weather = <span class=\"keyword\">new</span> Weather(<span class=\"string\">\"晴天\"</span>);</div><div class=\"line\">        observable.post(weather);</div><div class=\"line\">        observable.unregister(objectObserver2);</div><div class=\"line\">        observable.post(weather);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>logcat输出</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">12</span><span class=\"number\">-19</span> <span class=\"number\">15</span>:<span class=\"number\">18</span>:<span class=\"number\">44.780</span> <span class=\"number\">2004</span><span class=\"number\">-2036</span><span class=\"regexp\">/? E/</span><span class=\"string\">testObserver:</span> <span class=\"string\">objectObserver1:</span>data=Weather&#123;description=<span class=\"string\">'晴天'</span>&#125;</div><div class=\"line\"><span class=\"number\">12</span><span class=\"number\">-19</span> <span class=\"number\">15</span>:<span class=\"number\">18</span>:<span class=\"number\">44.780</span> <span class=\"number\">2004</span><span class=\"number\">-2036</span><span class=\"regexp\">/? E/</span><span class=\"string\">testObserver:</span> <span class=\"string\">objectObserver2:</span>data=Weather&#123;description=<span class=\"string\">'晴天'</span>&#125;</div><div class=\"line\"><span class=\"number\">12</span><span class=\"number\">-19</span> <span class=\"number\">15</span>:<span class=\"number\">18</span>:<span class=\"number\">44.780</span> <span class=\"number\">2004</span><span class=\"number\">-2036</span><span class=\"regexp\">/? E/</span><span class=\"string\">testObserver:</span> <span class=\"string\">objectObserver1:</span>data=Weather&#123;description=<span class=\"string\">'晴天'</span>&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Android中的应用\"><a href=\"#Android中的应用\" class=\"headerlink\" title=\"Android中的应用\"></a>Android中的应用</h2><ul>\n<li>一对一的观察者（一般称之为回调，只有一个观察者）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Button btn=<span class=\"keyword\">new</span> Button(<span class=\"keyword\">this</span>);</div><div class=\"line\">btn.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">\t\tLog.e(<span class=\"string\">\"TAG\"</span>,<span class=\"string\">\"click\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ul>\n<li>只要是set系列的设置监听器的方法最多都只能算回调，但是有一些监听器式add进去的，这种就是观察者模式了（比如RecyclerView中的addOnScrollListener方法）</li>\n</ul>\n<blockquote>\n<p>RecycleView.java</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> List&lt;OnScrollListener&gt; mScrollListeners;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Add a listener that will be notified of any changes in scroll state or position.</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;p&gt;Components that add a listener should take care to remove it when finished.</div><div class=\"line\"> * Other components that take ownership of a view may call &#123;<span class=\"doctag\">@link</span> #clearOnScrollListeners()&#125;</div><div class=\"line\"> * to remove all attached listeners.&lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> listener listener to set or null to clear</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addOnScrollListener</span><span class=\"params\">(OnScrollListener listener)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mScrollListeners == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        mScrollListeners = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">    &#125;</div><div class=\"line\">    mScrollListeners.add(listener);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Remove a listener that was notified of any changes in scroll state or position.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> listener listener to set or null to clear</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeOnScrollListener</span><span class=\"params\">(OnScrollListener listener)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mScrollListeners != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        mScrollListeners.remove(listener);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Remove all secondary listener that were notified of any changes in scroll state or position.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clearOnScrollListeners</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mScrollListeners != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        mScrollListeners.clear();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Android的广播机制，其本质也是观察者模式，这里为了简单方便，直接拿本地广播的代码说明，即LocalBroadcastManager</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">LocalBroadcastManager localBroadcastManager=LocalBroadcastManager.getInstance(<span class=\"keyword\">this</span>);</div><div class=\"line\">localBroadcastManager.registerReceiver(BroadcastReceiver receiver, IntentFilter filter);</div><div class=\"line\">localBroadcastManager.unregisterReceiver(BroadcastReceiver receiver);</div><div class=\"line\">localBroadcastManager.sendBroadcast(Intent intent)</div></pre></td></tr></table></figure>\n<ul>\n<li>开源库（EventBus）</li>\n</ul>\n<p>观察者模式的三个典型方法它都具有，即注册，取消注册，发送事件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">EventBus.getDefault().register(Object subscriber);</div><div class=\"line\">EventBus.getDefault().unregister(Object subscriber);</div><div class=\"line\"></div><div class=\"line\">EventBus.getDefault().post(Object event);</div></pre></td></tr></table></figure>\n<ul>\n<li>重量级的库，它就是RxJava</li>\n</ul>\n<p>创建一个被观察者</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable&lt;String&gt; myObservable = Observable.create(  </div><div class=\"line\">    <span class=\"keyword\">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;  </div><div class=\"line\">        <span class=\"meta\">@Override</span>  </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Subscriber&lt;? <span class=\"keyword\">super</span> String&gt; sub)</span> </span>&#123;  </div><div class=\"line\">            sub.onNext(<span class=\"string\">\"Hello, world!\"</span>);  </div><div class=\"line\">            sub.onCompleted();  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p>创建一个观察者，也就是订阅者</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Subscriber&lt;String&gt; mySubscriber = <span class=\"keyword\">new</span> Subscriber&lt;String&gt;() &#123;  </div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(String s)</span> </span>&#123; System.out.println(s); &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123; &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123; &#125;  </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>观察者进行事件的订阅</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">myObservable.subscribe(mySubscriber);</div></pre></td></tr></table></figure>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=453062799&auto=1&height=66\"></iframe>"},{"title":"设计模式之策略模式","date":"2016-12-16T01:43:45.000Z","_content":"\n策略模式属于对象的行为模式，其用意是针对一组算法，将每一个算法封装到**具有公共接口**的**独立的类**中，从而在不影响客户端的情况下可以切换相应的算法。\n<!--more-->\n#### 未使用策略模式案例\n\n```java\npublic class TravelStrategy {\n\tenum Strategy{\n\t\tWALK,PLANE,SUBWAY\n\t}\n\tprivate Strategy strategy;\n\tpublic TravelStrategy(Strategy strategy){\n\t\tthis.strategy=strategy;\n\t}\n\t\n\tpublic void travel(){\n\t\tif(strategy==Strategy.WALK){\n\t\t\tprint(\"walk\");\n\t\t}else if(strategy==Strategy.PLANE){\n\t\t\tprint(\"plane\");\n\t\t}else if(strategy==Strategy.SUBWAY){\n\t\t\tprint(\"subway\");\n\t\t}\n\t}\n\t\n\tpublic void print(String str){\n\t\tSystem.out.println(\"出行旅游的方式为：\"+str);\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tTravelStrategy walk=new TravelStrategy(Strategy.WALK);\n\t\twalk.travel();\n\t\t\n\t\tTravelStrategy plane=new TravelStrategy(Strategy.PLANE);\n\t\tplane.travel();\n\t\t\n\t\tTravelStrategy subway=new TravelStrategy(Strategy.SUBWAY);\n\t\tsubway.travel();\n\t}\n}\n```\n\n通过switch或者if语句，来判断选择哪一种策略算法，一旦策略增加或者减少修改，就不得不增加新的语句，这就违背了面向对象的原则之一，对修改封闭。\n\n#### 使用策略模式案例\n\n**定义策略接口（抽象策略）**\n\n```java\npublic interface Strategy {\n\tvoid travel();\n}\n```\n\n**将不同的算法封装到实现该策略接口的具体的类中（具体策略）**\n\n```java\npublic class WalkStrategy implements Strategy{\n\n\t@Override\n\tpublic void travel() {\n\t\tSystem.out.println(\"walk\");\n\t}\n\n}\n```\n\n```java\npublic class PlaneStrategy implements Strategy{\n\n\t@Override\n\tpublic void travel() {\n\t\tSystem.out.println(\"plane\");\n\t}\n\n}\n```\n\n```java\npublic class SubwayStrategy implements Strategy{\n\n\t@Override\n\tpublic void travel() {\n\t\tSystem.out.println(\"subway\");\n\t}\n\n}\n```\n\n**策略环境（持有抽象策略引用的环境类）**\n\n```java\npublic class TravelContext {\n\tStrategy strategy;\n\n\tpublic Strategy getStrategy() {\n\t\treturn strategy;\n\t}\n\n\tpublic void setStrategy(Strategy strategy) {\n\t\tthis.strategy = strategy;\n\t}\n\n\tpublic void travel() {\n\t\tif (strategy != null) {\n\t\t\tstrategy.travel();\n\t\t}\n\t}\n}\n```\n\n**具体使用**\n\n```java\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tTravelContext travelContext=new TravelContext();\n\t\ttravelContext.setStrategy(new PlaneStrategy());\n\t\ttravelContext.travel();\n\t\ttravelContext.setStrategy(new WalkStrategy());\n\t\ttravelContext.travel();\n\t\ttravelContext.setStrategy(new SubwayStrategy());\n\t\ttravelContext.travel();\n\t}\n}\n```\n\n**若想增加新的策略（添加新的策略实现类即可）**\n\n```java\npublic class BikeStrategy implements Strategy{\n\n\t@Override\n\tpublic void travel() {\n\t\tSystem.out.println(\"bike\");\n\t}\n\n}\n```\n\n```java\nTravelContext travelContext=new TravelContext();\n\t\ttravelContext.setStrategy(new BikeStrategy());\n\t\ttravelContext.travel();\n```\n\n**总结**\n\n面向对象的**对修改封闭**，**对扩展开放**。\n\n#### Android源码中的使用\n\n- **属性动画的插值器**\n\n策略接口\n\n```java\npublic interface TypeEvaluator<T> {\n\n    public T evaluate(float fraction, T startValue, T endValue);\n\n}\n```\n\n多个策略实现例如\n\n```java\npublic class IntEvaluator implements TypeEvaluator<Integer> {\n\n    public Integer evaluate(float fraction, Integer startValue, Integer endValue) {\n        int startInt = startValue;\n        return (int)(startInt + fraction * (endValue - startInt));\n    }\n}\n```\n\n```java\npublic class FloatEvaluator implements TypeEvaluator<Number> {\n\n    public Float evaluate(float fraction, Number startValue, Number endValue) {\n        float startFloat = startValue.floatValue();\n        return startFloat + fraction * (endValue.floatValue() - startFloat);\n    }\n}\n```\n\n其他略...\n\n#### 其他使用场景举例\n\n**例如：一个电商类平台等购物车系统，除了把货品的单价乘以数量之外，可能会有一些优惠活动。比如说，对高级会员提供5折优惠，对中级会员提供7折优惠，对初级会员提供9折优惠**\n\n那么这就涉及到了三种算法\n\n**首先定义折扣抽样策略接口**\n\n```java\npublic interface MemberStrategy {\n    /**\n     * 计算图书的价格\n     * @param booksPrice    图书的原价\n     * @return    计算出打折后的价格\n     */\n    public double calcPrice(double booksPrice);\n}\n```\n\n**初级会员折扣策略**\n\n```java\npublic class PrimaryMemberStrategy implements MemberStrategy {\n\n    @Override\n    public double calcPrice(double booksPrice) {\n        \n        System.out.println(\"对于初级会员的9折折扣\");\n        return booksPrice*0.9;\n    }\n\n}\n```\n\n```java\npublic class AdvancedMemberStrategy implements MemberStrategy {\n\n    @Override\n    public double calcPrice(double booksPrice) {\n        \n        System.out.println(\"对于高级会员的折扣为5折\");\n        return booksPrice * 0.5;\n    }\n}\n```\n\n```java\npublic class IntermediateMemberStrategy implements MemberStrategy {\n\n    @Override\n    public double calcPrice(double booksPrice) {\n\n        System.out.println(\"对于中级会员的折扣为7折\");\n        return booksPrice * 0.7;\n    }\n\n}\n```\n\n**策略环境类**\n\n```java\npublic class Price {\n    //持有一个具体的策略对象\n    private MemberStrategy strategy;\n    /**\n     * 构造函数，传入一个具体的策略对象\n     * @param strategy    具体的策略对象\n     */\n    public Price(MemberStrategy strategy){\n        this.strategy = strategy;\n    }\n    \n    /**\n     * 计算图书的价格\n     * @param booksPrice    图书的原价\n     * @return    计算出打折后的价格\n     */\n    public double quote(double booksPrice){\n        return this.strategy.calcPrice(booksPrice);\n    }\n}\n```\n\n**客户端的使用**\n\n```java\npublic class Client {\n\n    public static void main(String[] args) {\n        //选择并创建需要使用的策略对象\n        MemberStrategy strategy = new AdvancedMemberStrategy();\n        //创建环境\n        Price price = new Price(strategy);\n        //计算价格\n        double quote = price.quote(300);\n        System.out.println(\"图书的最终价格为：\" + quote);\n    }\n\n}\n```\n\n**可以看出**\n\n1. 策略模式的重心不是提供算法，而是对多种算法的封装\n2. 各个算法相对独立平等\n3. 算法可以相互切换，但在同一时刻只能使用一种策略\n4. 面向对象的：对修改封闭，对拓展开放\n5. 避免使用switch和if多重条件语句，方便维护\n6. 缺点：客户端事先知道有多少种策略，并且每个策略的区别\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28864975&auto=1&height=66\"></iframe>","source":"_posts/设计模式之策略模式.md","raw":"---\ntitle: 设计模式之策略模式\ndate: 2016-12-16 09:43:45\ntags: \n- Android\ncategories: Design Pattern\n---\n\n策略模式属于对象的行为模式，其用意是针对一组算法，将每一个算法封装到**具有公共接口**的**独立的类**中，从而在不影响客户端的情况下可以切换相应的算法。\n<!--more-->\n#### 未使用策略模式案例\n\n```java\npublic class TravelStrategy {\n\tenum Strategy{\n\t\tWALK,PLANE,SUBWAY\n\t}\n\tprivate Strategy strategy;\n\tpublic TravelStrategy(Strategy strategy){\n\t\tthis.strategy=strategy;\n\t}\n\t\n\tpublic void travel(){\n\t\tif(strategy==Strategy.WALK){\n\t\t\tprint(\"walk\");\n\t\t}else if(strategy==Strategy.PLANE){\n\t\t\tprint(\"plane\");\n\t\t}else if(strategy==Strategy.SUBWAY){\n\t\t\tprint(\"subway\");\n\t\t}\n\t}\n\t\n\tpublic void print(String str){\n\t\tSystem.out.println(\"出行旅游的方式为：\"+str);\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tTravelStrategy walk=new TravelStrategy(Strategy.WALK);\n\t\twalk.travel();\n\t\t\n\t\tTravelStrategy plane=new TravelStrategy(Strategy.PLANE);\n\t\tplane.travel();\n\t\t\n\t\tTravelStrategy subway=new TravelStrategy(Strategy.SUBWAY);\n\t\tsubway.travel();\n\t}\n}\n```\n\n通过switch或者if语句，来判断选择哪一种策略算法，一旦策略增加或者减少修改，就不得不增加新的语句，这就违背了面向对象的原则之一，对修改封闭。\n\n#### 使用策略模式案例\n\n**定义策略接口（抽象策略）**\n\n```java\npublic interface Strategy {\n\tvoid travel();\n}\n```\n\n**将不同的算法封装到实现该策略接口的具体的类中（具体策略）**\n\n```java\npublic class WalkStrategy implements Strategy{\n\n\t@Override\n\tpublic void travel() {\n\t\tSystem.out.println(\"walk\");\n\t}\n\n}\n```\n\n```java\npublic class PlaneStrategy implements Strategy{\n\n\t@Override\n\tpublic void travel() {\n\t\tSystem.out.println(\"plane\");\n\t}\n\n}\n```\n\n```java\npublic class SubwayStrategy implements Strategy{\n\n\t@Override\n\tpublic void travel() {\n\t\tSystem.out.println(\"subway\");\n\t}\n\n}\n```\n\n**策略环境（持有抽象策略引用的环境类）**\n\n```java\npublic class TravelContext {\n\tStrategy strategy;\n\n\tpublic Strategy getStrategy() {\n\t\treturn strategy;\n\t}\n\n\tpublic void setStrategy(Strategy strategy) {\n\t\tthis.strategy = strategy;\n\t}\n\n\tpublic void travel() {\n\t\tif (strategy != null) {\n\t\t\tstrategy.travel();\n\t\t}\n\t}\n}\n```\n\n**具体使用**\n\n```java\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tTravelContext travelContext=new TravelContext();\n\t\ttravelContext.setStrategy(new PlaneStrategy());\n\t\ttravelContext.travel();\n\t\ttravelContext.setStrategy(new WalkStrategy());\n\t\ttravelContext.travel();\n\t\ttravelContext.setStrategy(new SubwayStrategy());\n\t\ttravelContext.travel();\n\t}\n}\n```\n\n**若想增加新的策略（添加新的策略实现类即可）**\n\n```java\npublic class BikeStrategy implements Strategy{\n\n\t@Override\n\tpublic void travel() {\n\t\tSystem.out.println(\"bike\");\n\t}\n\n}\n```\n\n```java\nTravelContext travelContext=new TravelContext();\n\t\ttravelContext.setStrategy(new BikeStrategy());\n\t\ttravelContext.travel();\n```\n\n**总结**\n\n面向对象的**对修改封闭**，**对扩展开放**。\n\n#### Android源码中的使用\n\n- **属性动画的插值器**\n\n策略接口\n\n```java\npublic interface TypeEvaluator<T> {\n\n    public T evaluate(float fraction, T startValue, T endValue);\n\n}\n```\n\n多个策略实现例如\n\n```java\npublic class IntEvaluator implements TypeEvaluator<Integer> {\n\n    public Integer evaluate(float fraction, Integer startValue, Integer endValue) {\n        int startInt = startValue;\n        return (int)(startInt + fraction * (endValue - startInt));\n    }\n}\n```\n\n```java\npublic class FloatEvaluator implements TypeEvaluator<Number> {\n\n    public Float evaluate(float fraction, Number startValue, Number endValue) {\n        float startFloat = startValue.floatValue();\n        return startFloat + fraction * (endValue.floatValue() - startFloat);\n    }\n}\n```\n\n其他略...\n\n#### 其他使用场景举例\n\n**例如：一个电商类平台等购物车系统，除了把货品的单价乘以数量之外，可能会有一些优惠活动。比如说，对高级会员提供5折优惠，对中级会员提供7折优惠，对初级会员提供9折优惠**\n\n那么这就涉及到了三种算法\n\n**首先定义折扣抽样策略接口**\n\n```java\npublic interface MemberStrategy {\n    /**\n     * 计算图书的价格\n     * @param booksPrice    图书的原价\n     * @return    计算出打折后的价格\n     */\n    public double calcPrice(double booksPrice);\n}\n```\n\n**初级会员折扣策略**\n\n```java\npublic class PrimaryMemberStrategy implements MemberStrategy {\n\n    @Override\n    public double calcPrice(double booksPrice) {\n        \n        System.out.println(\"对于初级会员的9折折扣\");\n        return booksPrice*0.9;\n    }\n\n}\n```\n\n```java\npublic class AdvancedMemberStrategy implements MemberStrategy {\n\n    @Override\n    public double calcPrice(double booksPrice) {\n        \n        System.out.println(\"对于高级会员的折扣为5折\");\n        return booksPrice * 0.5;\n    }\n}\n```\n\n```java\npublic class IntermediateMemberStrategy implements MemberStrategy {\n\n    @Override\n    public double calcPrice(double booksPrice) {\n\n        System.out.println(\"对于中级会员的折扣为7折\");\n        return booksPrice * 0.7;\n    }\n\n}\n```\n\n**策略环境类**\n\n```java\npublic class Price {\n    //持有一个具体的策略对象\n    private MemberStrategy strategy;\n    /**\n     * 构造函数，传入一个具体的策略对象\n     * @param strategy    具体的策略对象\n     */\n    public Price(MemberStrategy strategy){\n        this.strategy = strategy;\n    }\n    \n    /**\n     * 计算图书的价格\n     * @param booksPrice    图书的原价\n     * @return    计算出打折后的价格\n     */\n    public double quote(double booksPrice){\n        return this.strategy.calcPrice(booksPrice);\n    }\n}\n```\n\n**客户端的使用**\n\n```java\npublic class Client {\n\n    public static void main(String[] args) {\n        //选择并创建需要使用的策略对象\n        MemberStrategy strategy = new AdvancedMemberStrategy();\n        //创建环境\n        Price price = new Price(strategy);\n        //计算价格\n        double quote = price.quote(300);\n        System.out.println(\"图书的最终价格为：\" + quote);\n    }\n\n}\n```\n\n**可以看出**\n\n1. 策略模式的重心不是提供算法，而是对多种算法的封装\n2. 各个算法相对独立平等\n3. 算法可以相互切换，但在同一时刻只能使用一种策略\n4. 面向对象的：对修改封闭，对拓展开放\n5. 避免使用switch和if多重条件语句，方便维护\n6. 缺点：客户端事先知道有多少种策略，并且每个策略的区别\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28864975&auto=1&height=66\"></iframe>","slug":"设计模式之策略模式","published":1,"updated":"2018-07-19T01:51:43.561Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6nm003t1kyg5ph4y3q5","content":"<p>策略模式属于对象的行为模式，其用意是针对一组算法，将每一个算法封装到<strong>具有公共接口</strong>的<strong>独立的类</strong>中，从而在不影响客户端的情况下可以切换相应的算法。<br><a id=\"more\"></a></p>\n<h4 id=\"未使用策略模式案例\"><a href=\"#未使用策略模式案例\" class=\"headerlink\" title=\"未使用策略模式案例\"></a>未使用策略模式案例</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TravelStrategy</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">enum</span> Strategy&#123;</div><div class=\"line\">\t\tWALK,PLANE,SUBWAY</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Strategy strategy;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TravelStrategy</span><span class=\"params\">(Strategy strategy)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.strategy=strategy;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">travel</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(strategy==Strategy.WALK)&#123;</div><div class=\"line\">\t\t\tprint(<span class=\"string\">\"walk\"</span>);</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(strategy==Strategy.PLANE)&#123;</div><div class=\"line\">\t\t\tprint(<span class=\"string\">\"plane\"</span>);</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(strategy==Strategy.SUBWAY)&#123;</div><div class=\"line\">\t\t\tprint(<span class=\"string\">\"subway\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(String str)</span></span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"出行旅游的方式为：\"</span>+str);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tTravelStrategy walk=<span class=\"keyword\">new</span> TravelStrategy(Strategy.WALK);</div><div class=\"line\">\t\twalk.travel();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tTravelStrategy plane=<span class=\"keyword\">new</span> TravelStrategy(Strategy.PLANE);</div><div class=\"line\">\t\tplane.travel();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tTravelStrategy subway=<span class=\"keyword\">new</span> TravelStrategy(Strategy.SUBWAY);</div><div class=\"line\">\t\tsubway.travel();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过switch或者if语句，来判断选择哪一种策略算法，一旦策略增加或者减少修改，就不得不增加新的语句，这就违背了面向对象的原则之一，对修改封闭。</p>\n<h4 id=\"使用策略模式案例\"><a href=\"#使用策略模式案例\" class=\"headerlink\" title=\"使用策略模式案例\"></a>使用策略模式案例</h4><p><strong>定义策略接口（抽象策略）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Strategy</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">travel</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>将不同的算法封装到实现该策略接口的具体的类中（具体策略）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WalkStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Strategy</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">travel</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"walk\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlaneStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Strategy</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">travel</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"plane\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubwayStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Strategy</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">travel</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"subway\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>策略环境（持有抽象策略引用的环境类）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TravelContext</span> </span>&#123;</div><div class=\"line\">\tStrategy strategy;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Strategy <span class=\"title\">getStrategy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> strategy;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStrategy</span><span class=\"params\">(Strategy strategy)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.strategy = strategy;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">travel</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (strategy != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\tstrategy.travel();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>具体使用</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tTravelContext travelContext=<span class=\"keyword\">new</span> TravelContext();</div><div class=\"line\">\t\ttravelContext.setStrategy(<span class=\"keyword\">new</span> PlaneStrategy());</div><div class=\"line\">\t\ttravelContext.travel();</div><div class=\"line\">\t\ttravelContext.setStrategy(<span class=\"keyword\">new</span> WalkStrategy());</div><div class=\"line\">\t\ttravelContext.travel();</div><div class=\"line\">\t\ttravelContext.setStrategy(<span class=\"keyword\">new</span> SubwayStrategy());</div><div class=\"line\">\t\ttravelContext.travel();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>若想增加新的策略（添加新的策略实现类即可）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BikeStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Strategy</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">travel</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"bike\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">TravelContext travelContext=<span class=\"keyword\">new</span> TravelContext();</div><div class=\"line\">\t\ttravelContext.setStrategy(<span class=\"keyword\">new</span> BikeStrategy());</div><div class=\"line\">\t\ttravelContext.travel();</div></pre></td></tr></table></figure>\n<p><strong>总结</strong></p>\n<p>面向对象的<strong>对修改封闭</strong>，<strong>对扩展开放</strong>。</p>\n<h4 id=\"Android源码中的使用\"><a href=\"#Android源码中的使用\" class=\"headerlink\" title=\"Android源码中的使用\"></a>Android源码中的使用</h4><ul>\n<li><strong>属性动画的插值器</strong></li>\n</ul>\n<p>策略接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TypeEvaluator</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">evaluate</span><span class=\"params\">(<span class=\"keyword\">float</span> fraction, T startValue, T endValue)</span></span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>多个策略实现例如</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntEvaluator</span> <span class=\"keyword\">implements</span> <span class=\"title\">TypeEvaluator</span>&lt;<span class=\"title\">Integer</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">evaluate</span><span class=\"params\">(<span class=\"keyword\">float</span> fraction, Integer startValue, Integer endValue)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> startInt = startValue;</div><div class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>)(startInt + fraction * (endValue - startInt));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FloatEvaluator</span> <span class=\"keyword\">implements</span> <span class=\"title\">TypeEvaluator</span>&lt;<span class=\"title\">Number</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Float <span class=\"title\">evaluate</span><span class=\"params\">(<span class=\"keyword\">float</span> fraction, Number startValue, Number endValue)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">float</span> startFloat = startValue.floatValue();</div><div class=\"line\">        <span class=\"keyword\">return</span> startFloat + fraction * (endValue.floatValue() - startFloat);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其他略…</p>\n<h4 id=\"其他使用场景举例\"><a href=\"#其他使用场景举例\" class=\"headerlink\" title=\"其他使用场景举例\"></a>其他使用场景举例</h4><p><strong>例如：一个电商类平台等购物车系统，除了把货品的单价乘以数量之外，可能会有一些优惠活动。比如说，对高级会员提供5折优惠，对中级会员提供7折优惠，对初级会员提供9折优惠</strong></p>\n<p>那么这就涉及到了三种算法</p>\n<p><strong>首先定义折扣抽样策略接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MemberStrategy</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 计算图书的价格</div><div class=\"line\">     * <span class=\"doctag\">@param</span> booksPrice    图书的原价</div><div class=\"line\">     * <span class=\"doctag\">@return</span>    计算出打折后的价格</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">calcPrice</span><span class=\"params\">(<span class=\"keyword\">double</span> booksPrice)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>初级会员折扣策略</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrimaryMemberStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title\">MemberStrategy</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">calcPrice</span><span class=\"params\">(<span class=\"keyword\">double</span> booksPrice)</span> </span>&#123;</div><div class=\"line\">        </div><div class=\"line\">        System.out.println(<span class=\"string\">\"对于初级会员的9折折扣\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> booksPrice*<span class=\"number\">0.9</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdvancedMemberStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title\">MemberStrategy</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">calcPrice</span><span class=\"params\">(<span class=\"keyword\">double</span> booksPrice)</span> </span>&#123;</div><div class=\"line\">        </div><div class=\"line\">        System.out.println(<span class=\"string\">\"对于高级会员的折扣为5折\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> booksPrice * <span class=\"number\">0.5</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntermediateMemberStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title\">MemberStrategy</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">calcPrice</span><span class=\"params\">(<span class=\"keyword\">double</span> booksPrice)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        System.out.println(<span class=\"string\">\"对于中级会员的折扣为7折\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> booksPrice * <span class=\"number\">0.7</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>策略环境类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Price</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//持有一个具体的策略对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> MemberStrategy strategy;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 构造函数，传入一个具体的策略对象</div><div class=\"line\">     * <span class=\"doctag\">@param</span> strategy    具体的策略对象</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Price</span><span class=\"params\">(MemberStrategy strategy)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.strategy = strategy;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 计算图书的价格</div><div class=\"line\">     * <span class=\"doctag\">@param</span> booksPrice    图书的原价</div><div class=\"line\">     * <span class=\"doctag\">@return</span>    计算出打折后的价格</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">quote</span><span class=\"params\">(<span class=\"keyword\">double</span> booksPrice)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.strategy.calcPrice(booksPrice);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>客户端的使用</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//选择并创建需要使用的策略对象</span></div><div class=\"line\">        MemberStrategy strategy = <span class=\"keyword\">new</span> AdvancedMemberStrategy();</div><div class=\"line\">        <span class=\"comment\">//创建环境</span></div><div class=\"line\">        Price price = <span class=\"keyword\">new</span> Price(strategy);</div><div class=\"line\">        <span class=\"comment\">//计算价格</span></div><div class=\"line\">        <span class=\"keyword\">double</span> quote = price.quote(<span class=\"number\">300</span>);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"图书的最终价格为：\"</span> + quote);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>可以看出</strong></p>\n<ol>\n<li>策略模式的重心不是提供算法，而是对多种算法的封装</li>\n<li>各个算法相对独立平等</li>\n<li>算法可以相互切换，但在同一时刻只能使用一种策略</li>\n<li>面向对象的：对修改封闭，对拓展开放</li>\n<li>避免使用switch和if多重条件语句，方便维护</li>\n<li>缺点：客户端事先知道有多少种策略，并且每个策略的区别</li>\n</ol>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=28864975&auto=1&height=66\"></iframe>","excerpt":"<p>策略模式属于对象的行为模式，其用意是针对一组算法，将每一个算法封装到<strong>具有公共接口</strong>的<strong>独立的类</strong>中，从而在不影响客户端的情况下可以切换相应的算法。<br>","more":"</p>\n<h4 id=\"未使用策略模式案例\"><a href=\"#未使用策略模式案例\" class=\"headerlink\" title=\"未使用策略模式案例\"></a>未使用策略模式案例</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TravelStrategy</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">enum</span> Strategy&#123;</div><div class=\"line\">\t\tWALK,PLANE,SUBWAY</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Strategy strategy;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TravelStrategy</span><span class=\"params\">(Strategy strategy)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.strategy=strategy;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">travel</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(strategy==Strategy.WALK)&#123;</div><div class=\"line\">\t\t\tprint(<span class=\"string\">\"walk\"</span>);</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(strategy==Strategy.PLANE)&#123;</div><div class=\"line\">\t\t\tprint(<span class=\"string\">\"plane\"</span>);</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(strategy==Strategy.SUBWAY)&#123;</div><div class=\"line\">\t\t\tprint(<span class=\"string\">\"subway\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(String str)</span></span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"出行旅游的方式为：\"</span>+str);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tTravelStrategy walk=<span class=\"keyword\">new</span> TravelStrategy(Strategy.WALK);</div><div class=\"line\">\t\twalk.travel();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tTravelStrategy plane=<span class=\"keyword\">new</span> TravelStrategy(Strategy.PLANE);</div><div class=\"line\">\t\tplane.travel();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tTravelStrategy subway=<span class=\"keyword\">new</span> TravelStrategy(Strategy.SUBWAY);</div><div class=\"line\">\t\tsubway.travel();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过switch或者if语句，来判断选择哪一种策略算法，一旦策略增加或者减少修改，就不得不增加新的语句，这就违背了面向对象的原则之一，对修改封闭。</p>\n<h4 id=\"使用策略模式案例\"><a href=\"#使用策略模式案例\" class=\"headerlink\" title=\"使用策略模式案例\"></a>使用策略模式案例</h4><p><strong>定义策略接口（抽象策略）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Strategy</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">travel</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>将不同的算法封装到实现该策略接口的具体的类中（具体策略）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WalkStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Strategy</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">travel</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"walk\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlaneStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Strategy</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">travel</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"plane\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubwayStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Strategy</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">travel</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"subway\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>策略环境（持有抽象策略引用的环境类）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TravelContext</span> </span>&#123;</div><div class=\"line\">\tStrategy strategy;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Strategy <span class=\"title\">getStrategy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> strategy;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStrategy</span><span class=\"params\">(Strategy strategy)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.strategy = strategy;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">travel</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (strategy != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\tstrategy.travel();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>具体使用</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tTravelContext travelContext=<span class=\"keyword\">new</span> TravelContext();</div><div class=\"line\">\t\ttravelContext.setStrategy(<span class=\"keyword\">new</span> PlaneStrategy());</div><div class=\"line\">\t\ttravelContext.travel();</div><div class=\"line\">\t\ttravelContext.setStrategy(<span class=\"keyword\">new</span> WalkStrategy());</div><div class=\"line\">\t\ttravelContext.travel();</div><div class=\"line\">\t\ttravelContext.setStrategy(<span class=\"keyword\">new</span> SubwayStrategy());</div><div class=\"line\">\t\ttravelContext.travel();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>若想增加新的策略（添加新的策略实现类即可）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BikeStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Strategy</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">travel</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"bike\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">TravelContext travelContext=<span class=\"keyword\">new</span> TravelContext();</div><div class=\"line\">\t\ttravelContext.setStrategy(<span class=\"keyword\">new</span> BikeStrategy());</div><div class=\"line\">\t\ttravelContext.travel();</div></pre></td></tr></table></figure>\n<p><strong>总结</strong></p>\n<p>面向对象的<strong>对修改封闭</strong>，<strong>对扩展开放</strong>。</p>\n<h4 id=\"Android源码中的使用\"><a href=\"#Android源码中的使用\" class=\"headerlink\" title=\"Android源码中的使用\"></a>Android源码中的使用</h4><ul>\n<li><strong>属性动画的插值器</strong></li>\n</ul>\n<p>策略接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TypeEvaluator</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">evaluate</span><span class=\"params\">(<span class=\"keyword\">float</span> fraction, T startValue, T endValue)</span></span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>多个策略实现例如</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntEvaluator</span> <span class=\"keyword\">implements</span> <span class=\"title\">TypeEvaluator</span>&lt;<span class=\"title\">Integer</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">evaluate</span><span class=\"params\">(<span class=\"keyword\">float</span> fraction, Integer startValue, Integer endValue)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> startInt = startValue;</div><div class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>)(startInt + fraction * (endValue - startInt));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FloatEvaluator</span> <span class=\"keyword\">implements</span> <span class=\"title\">TypeEvaluator</span>&lt;<span class=\"title\">Number</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Float <span class=\"title\">evaluate</span><span class=\"params\">(<span class=\"keyword\">float</span> fraction, Number startValue, Number endValue)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">float</span> startFloat = startValue.floatValue();</div><div class=\"line\">        <span class=\"keyword\">return</span> startFloat + fraction * (endValue.floatValue() - startFloat);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其他略…</p>\n<h4 id=\"其他使用场景举例\"><a href=\"#其他使用场景举例\" class=\"headerlink\" title=\"其他使用场景举例\"></a>其他使用场景举例</h4><p><strong>例如：一个电商类平台等购物车系统，除了把货品的单价乘以数量之外，可能会有一些优惠活动。比如说，对高级会员提供5折优惠，对中级会员提供7折优惠，对初级会员提供9折优惠</strong></p>\n<p>那么这就涉及到了三种算法</p>\n<p><strong>首先定义折扣抽样策略接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MemberStrategy</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 计算图书的价格</div><div class=\"line\">     * <span class=\"doctag\">@param</span> booksPrice    图书的原价</div><div class=\"line\">     * <span class=\"doctag\">@return</span>    计算出打折后的价格</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">calcPrice</span><span class=\"params\">(<span class=\"keyword\">double</span> booksPrice)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>初级会员折扣策略</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrimaryMemberStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title\">MemberStrategy</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">calcPrice</span><span class=\"params\">(<span class=\"keyword\">double</span> booksPrice)</span> </span>&#123;</div><div class=\"line\">        </div><div class=\"line\">        System.out.println(<span class=\"string\">\"对于初级会员的9折折扣\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> booksPrice*<span class=\"number\">0.9</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdvancedMemberStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title\">MemberStrategy</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">calcPrice</span><span class=\"params\">(<span class=\"keyword\">double</span> booksPrice)</span> </span>&#123;</div><div class=\"line\">        </div><div class=\"line\">        System.out.println(<span class=\"string\">\"对于高级会员的折扣为5折\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> booksPrice * <span class=\"number\">0.5</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntermediateMemberStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title\">MemberStrategy</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">calcPrice</span><span class=\"params\">(<span class=\"keyword\">double</span> booksPrice)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        System.out.println(<span class=\"string\">\"对于中级会员的折扣为7折\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> booksPrice * <span class=\"number\">0.7</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>策略环境类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Price</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//持有一个具体的策略对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> MemberStrategy strategy;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 构造函数，传入一个具体的策略对象</div><div class=\"line\">     * <span class=\"doctag\">@param</span> strategy    具体的策略对象</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Price</span><span class=\"params\">(MemberStrategy strategy)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.strategy = strategy;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 计算图书的价格</div><div class=\"line\">     * <span class=\"doctag\">@param</span> booksPrice    图书的原价</div><div class=\"line\">     * <span class=\"doctag\">@return</span>    计算出打折后的价格</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">quote</span><span class=\"params\">(<span class=\"keyword\">double</span> booksPrice)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.strategy.calcPrice(booksPrice);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>客户端的使用</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//选择并创建需要使用的策略对象</span></div><div class=\"line\">        MemberStrategy strategy = <span class=\"keyword\">new</span> AdvancedMemberStrategy();</div><div class=\"line\">        <span class=\"comment\">//创建环境</span></div><div class=\"line\">        Price price = <span class=\"keyword\">new</span> Price(strategy);</div><div class=\"line\">        <span class=\"comment\">//计算价格</span></div><div class=\"line\">        <span class=\"keyword\">double</span> quote = price.quote(<span class=\"number\">300</span>);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"图书的最终价格为：\"</span> + quote);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>可以看出</strong></p>\n<ol>\n<li>策略模式的重心不是提供算法，而是对多种算法的封装</li>\n<li>各个算法相对独立平等</li>\n<li>算法可以相互切换，但在同一时刻只能使用一种策略</li>\n<li>面向对象的：对修改封闭，对拓展开放</li>\n<li>避免使用switch和if多重条件语句，方便维护</li>\n<li>缺点：客户端事先知道有多少种策略，并且每个策略的区别</li>\n</ol>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28864975&auto=1&height=66\"></iframe>"},{"title":"谈谈加密算法","date":"2017-12-20T05:48:31.000Z","_content":"\n在应用开发的过程中，客户端和移动端要频繁的进行数据传输，涉及到重要隐私信息的时候，就需要进行数据加密，，即使传输的过程中被截取，也不会信息泄漏。对于加密算法，不少开发者也早有耳闻，例如：Base64，MD5，RSA，AES，DES加密等等，今天就总结一下加密算法\n\n<!--more-->\n\n#### 对称加密和非对称加密\n\n##### 对称加密：\n\n对称加密是最快速、最简单的一种加密方式，加密（encryption）与解密（decryption）用的是同样的密钥（secret key）。对称加密有很多种算法，由于它效率很高，所以被广泛使用在很多加密协议的核心当中。\n\n对称加密通常使用的是相对较小的密钥，一般小于256 bit。因为密钥越大，加密越强，但加密与解密的过程越慢。如果你只用1 bit来做这个密钥，那黑客们可以先试着用0来解密，不行的话就再用1解；但如果你的密钥有1 MB大，黑客们可能永远也无法破解，但加密和解密的过程要花费很长的时间。密钥的大小既要照顾到安全性，也要照顾到效率，是一个trade-off。\n\n**对称加密的一大缺点**是密钥的管理与分配，换句话说，如何把密钥发送到需要解密你的消息的人的手里是一个问题。在**发送密钥的过程中，密钥有很大的风险会被黑客们拦截**。**现实中通常的做法是将对称加密的密钥进行非对称加密，然后传送给需要它的人**。\n\n##### 非对称加密：\n\n非对称加密为数据的加密与解密提供了一个非常安全的方法，它使用了一对密钥，公钥（public key）和私钥（private key）。**私钥只能由一方安全保管，不能外泄**，而**公钥则可以发给任何请求它的人**。**非对称加密**使用这对**密钥中的一个进行加密，而解密则需要另一个密钥**。比如，你向银行请求公钥，**银行将公钥发给你，你使用公钥对消息加密，那么只有私钥的持有人--银行才能对你的消息解密**。与对称加密不同的是，银行不需要将私钥通过网络发送出去，因此安全性大大提高。\n\n目前**最常用的非对称加密算法是RSA算法**，是Rivest, Shamir, 和Adleman于1978年发明\n\n##### 对称加密和非对称加密\n\n虽然非对称加密很安全，但是和对称加密比起来，它非常的慢，所以我们还是要用对称加密来传送消息，但对称加密使用的密钥用非对称加密，参考网上，看下面的一个例子：\n\n1. 铁头需要在银行的网站上做一笔交易，他的游览器生成了一个随机数作为对称密钥\n2. 铁头的游览器向银行请求非对称加密的公钥\n3. 银行将公钥发送给铁头\n4. 铁头用这个公钥将自己的对称密钥进行加密\n5. 铁头将加密后的对称密钥发送给银行\n6. 银行用非对称加密的私有密钥对这个对称密钥进行解密获取到铁头的对称密钥\n7. 铁头与银行可以使用对称密钥来对沟通的内容进行加密与解密了。\n\n##### 对称和非对称加密总结\n\n1. 对称加密加密与解密使用的是同样的密钥，所以速度快，但由于需要将密钥在网络传输，所以安全性不高。\n2. 非对称加密使用了一对密钥，公钥与私钥，所以安全性高，但加密与解密速度慢。\n3. 解决的办法是将**对称加密的密钥使用非对称加密的公钥进行加密**，然后发送出去，**接收方使用私钥进行解密得到对称加密的密钥**，然后双方可以使用对称加密来进行沟通。\n\n#### 非对称加密例子\n\n- RSA（参考[这里](http://www.cnblogs.com/whoislcj/p/5470095.html)）\n\n#### 对称加密例子\n\n- AES（参考[这里](http://www.cnblogs.com/whoislcj/p/5473030.html)）\n\n1. 项目中除了登陆，支付等接口采用rsa非对称加密，之外的采用aes对称加密\n2. 高级加密标准（英语：Advanced Encryption Standard，缩写：AES）\n3. 这个标准用来替代原先的DES\n\n- DES（参考[这里](http://www.cnblogs.com/whoislcj/p/5580950.html)）\n\n1. DES加密算法出自IBM\n2. 近些年使用越来越少\n3. DES使用56位密钥，以现代计算能力，24小时内即可被破解。\n\n- AES和DES对比\n\n1. AES安全性、效率、灵活性要高于DES\n2. 对称加密优先采用AES\n\n#### 其他加密\n\n- MD5\n\n1. 特点：单向加密算法，是不可逆的一种的加密方式\n\n2. 压缩性：任意长度的数据，算出的MD5值长度都是固定的。\n\n3. 容易计算：从原数据计算出MD5值很容易。\n\n4. 抗修改性：对原数据进行任何改动，哪怕只修改1个字节，所得到的MD5值都有很大区别。\n\n5. 强抗碰撞：已知原数据和其MD5值，想找到一个具有相同MD5值的数据（即伪造数据）是非常困难的。\n\n6. 加大MD5安全性\n\n   - ###### 进行多次MD5加密\n\n   - ###### MD5加盐\n\n     - ###### 用string明文的hashcode作为盐，然后进行MD5加密\n\n     - ###### 随机生成一串字符串作为盐，然后进行MD5加密\n\n\n\n- Base64\n\n1. 平时开发中遇见的各种数据加密方式，最终都会对加密后的二进制数据进行Base64编码，起到一种二次加密的效果\n2. 其实呢Base64从严格意义上来说的话不是一种加密算法，而是一种编码算法\n3. [更多](http://www.cnblogs.com/whoislcj/p/5887859.html)\n\n所以，在客户端和服务端数据传送加密，最多使用的是非对称RSA和对称AES，参考[这里](http://blog.csdn.net/Chay_Chan/article/details/58605605)\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=34274472&auto=1&height=66\"></iframe>","source":"_posts/谈谈加密算法.md","raw":"---\ntitle: 谈谈加密算法\ndate: 2017-12-20 13:48:31\ntags: \n- Android\ncategories: Android\n---\n\n在应用开发的过程中，客户端和移动端要频繁的进行数据传输，涉及到重要隐私信息的时候，就需要进行数据加密，，即使传输的过程中被截取，也不会信息泄漏。对于加密算法，不少开发者也早有耳闻，例如：Base64，MD5，RSA，AES，DES加密等等，今天就总结一下加密算法\n\n<!--more-->\n\n#### 对称加密和非对称加密\n\n##### 对称加密：\n\n对称加密是最快速、最简单的一种加密方式，加密（encryption）与解密（decryption）用的是同样的密钥（secret key）。对称加密有很多种算法，由于它效率很高，所以被广泛使用在很多加密协议的核心当中。\n\n对称加密通常使用的是相对较小的密钥，一般小于256 bit。因为密钥越大，加密越强，但加密与解密的过程越慢。如果你只用1 bit来做这个密钥，那黑客们可以先试着用0来解密，不行的话就再用1解；但如果你的密钥有1 MB大，黑客们可能永远也无法破解，但加密和解密的过程要花费很长的时间。密钥的大小既要照顾到安全性，也要照顾到效率，是一个trade-off。\n\n**对称加密的一大缺点**是密钥的管理与分配，换句话说，如何把密钥发送到需要解密你的消息的人的手里是一个问题。在**发送密钥的过程中，密钥有很大的风险会被黑客们拦截**。**现实中通常的做法是将对称加密的密钥进行非对称加密，然后传送给需要它的人**。\n\n##### 非对称加密：\n\n非对称加密为数据的加密与解密提供了一个非常安全的方法，它使用了一对密钥，公钥（public key）和私钥（private key）。**私钥只能由一方安全保管，不能外泄**，而**公钥则可以发给任何请求它的人**。**非对称加密**使用这对**密钥中的一个进行加密，而解密则需要另一个密钥**。比如，你向银行请求公钥，**银行将公钥发给你，你使用公钥对消息加密，那么只有私钥的持有人--银行才能对你的消息解密**。与对称加密不同的是，银行不需要将私钥通过网络发送出去，因此安全性大大提高。\n\n目前**最常用的非对称加密算法是RSA算法**，是Rivest, Shamir, 和Adleman于1978年发明\n\n##### 对称加密和非对称加密\n\n虽然非对称加密很安全，但是和对称加密比起来，它非常的慢，所以我们还是要用对称加密来传送消息，但对称加密使用的密钥用非对称加密，参考网上，看下面的一个例子：\n\n1. 铁头需要在银行的网站上做一笔交易，他的游览器生成了一个随机数作为对称密钥\n2. 铁头的游览器向银行请求非对称加密的公钥\n3. 银行将公钥发送给铁头\n4. 铁头用这个公钥将自己的对称密钥进行加密\n5. 铁头将加密后的对称密钥发送给银行\n6. 银行用非对称加密的私有密钥对这个对称密钥进行解密获取到铁头的对称密钥\n7. 铁头与银行可以使用对称密钥来对沟通的内容进行加密与解密了。\n\n##### 对称和非对称加密总结\n\n1. 对称加密加密与解密使用的是同样的密钥，所以速度快，但由于需要将密钥在网络传输，所以安全性不高。\n2. 非对称加密使用了一对密钥，公钥与私钥，所以安全性高，但加密与解密速度慢。\n3. 解决的办法是将**对称加密的密钥使用非对称加密的公钥进行加密**，然后发送出去，**接收方使用私钥进行解密得到对称加密的密钥**，然后双方可以使用对称加密来进行沟通。\n\n#### 非对称加密例子\n\n- RSA（参考[这里](http://www.cnblogs.com/whoislcj/p/5470095.html)）\n\n#### 对称加密例子\n\n- AES（参考[这里](http://www.cnblogs.com/whoislcj/p/5473030.html)）\n\n1. 项目中除了登陆，支付等接口采用rsa非对称加密，之外的采用aes对称加密\n2. 高级加密标准（英语：Advanced Encryption Standard，缩写：AES）\n3. 这个标准用来替代原先的DES\n\n- DES（参考[这里](http://www.cnblogs.com/whoislcj/p/5580950.html)）\n\n1. DES加密算法出自IBM\n2. 近些年使用越来越少\n3. DES使用56位密钥，以现代计算能力，24小时内即可被破解。\n\n- AES和DES对比\n\n1. AES安全性、效率、灵活性要高于DES\n2. 对称加密优先采用AES\n\n#### 其他加密\n\n- MD5\n\n1. 特点：单向加密算法，是不可逆的一种的加密方式\n\n2. 压缩性：任意长度的数据，算出的MD5值长度都是固定的。\n\n3. 容易计算：从原数据计算出MD5值很容易。\n\n4. 抗修改性：对原数据进行任何改动，哪怕只修改1个字节，所得到的MD5值都有很大区别。\n\n5. 强抗碰撞：已知原数据和其MD5值，想找到一个具有相同MD5值的数据（即伪造数据）是非常困难的。\n\n6. 加大MD5安全性\n\n   - ###### 进行多次MD5加密\n\n   - ###### MD5加盐\n\n     - ###### 用string明文的hashcode作为盐，然后进行MD5加密\n\n     - ###### 随机生成一串字符串作为盐，然后进行MD5加密\n\n\n\n- Base64\n\n1. 平时开发中遇见的各种数据加密方式，最终都会对加密后的二进制数据进行Base64编码，起到一种二次加密的效果\n2. 其实呢Base64从严格意义上来说的话不是一种加密算法，而是一种编码算法\n3. [更多](http://www.cnblogs.com/whoislcj/p/5887859.html)\n\n所以，在客户端和服务端数据传送加密，最多使用的是非对称RSA和对称AES，参考[这里](http://blog.csdn.net/Chay_Chan/article/details/58605605)\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=34274472&auto=1&height=66\"></iframe>","slug":"谈谈加密算法","published":1,"updated":"2018-07-19T01:58:45.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6nn003w1kyga33bp0z7","content":"<p>在应用开发的过程中，客户端和移动端要频繁的进行数据传输，涉及到重要隐私信息的时候，就需要进行数据加密，，即使传输的过程中被截取，也不会信息泄漏。对于加密算法，不少开发者也早有耳闻，例如：Base64，MD5，RSA，AES，DES加密等等，今天就总结一下加密算法</p>\n<a id=\"more\"></a>\n<h4 id=\"对称加密和非对称加密\"><a href=\"#对称加密和非对称加密\" class=\"headerlink\" title=\"对称加密和非对称加密\"></a>对称加密和非对称加密</h4><h5 id=\"对称加密：\"><a href=\"#对称加密：\" class=\"headerlink\" title=\"对称加密：\"></a>对称加密：</h5><p>对称加密是最快速、最简单的一种加密方式，加密（encryption）与解密（decryption）用的是同样的密钥（secret key）。对称加密有很多种算法，由于它效率很高，所以被广泛使用在很多加密协议的核心当中。</p>\n<p>对称加密通常使用的是相对较小的密钥，一般小于256 bit。因为密钥越大，加密越强，但加密与解密的过程越慢。如果你只用1 bit来做这个密钥，那黑客们可以先试着用0来解密，不行的话就再用1解；但如果你的密钥有1 MB大，黑客们可能永远也无法破解，但加密和解密的过程要花费很长的时间。密钥的大小既要照顾到安全性，也要照顾到效率，是一个trade-off。</p>\n<p><strong>对称加密的一大缺点</strong>是密钥的管理与分配，换句话说，如何把密钥发送到需要解密你的消息的人的手里是一个问题。在<strong>发送密钥的过程中，密钥有很大的风险会被黑客们拦截</strong>。<strong>现实中通常的做法是将对称加密的密钥进行非对称加密，然后传送给需要它的人</strong>。</p>\n<h5 id=\"非对称加密：\"><a href=\"#非对称加密：\" class=\"headerlink\" title=\"非对称加密：\"></a>非对称加密：</h5><p>非对称加密为数据的加密与解密提供了一个非常安全的方法，它使用了一对密钥，公钥（public key）和私钥（private key）。<strong>私钥只能由一方安全保管，不能外泄</strong>，而<strong>公钥则可以发给任何请求它的人</strong>。<strong>非对称加密</strong>使用这对<strong>密钥中的一个进行加密，而解密则需要另一个密钥</strong>。比如，你向银行请求公钥，<strong>银行将公钥发给你，你使用公钥对消息加密，那么只有私钥的持有人–银行才能对你的消息解密</strong>。与对称加密不同的是，银行不需要将私钥通过网络发送出去，因此安全性大大提高。</p>\n<p>目前<strong>最常用的非对称加密算法是RSA算法</strong>，是Rivest, Shamir, 和Adleman于1978年发明</p>\n<h5 id=\"对称加密和非对称加密-1\"><a href=\"#对称加密和非对称加密-1\" class=\"headerlink\" title=\"对称加密和非对称加密\"></a>对称加密和非对称加密</h5><p>虽然非对称加密很安全，但是和对称加密比起来，它非常的慢，所以我们还是要用对称加密来传送消息，但对称加密使用的密钥用非对称加密，参考网上，看下面的一个例子：</p>\n<ol>\n<li>铁头需要在银行的网站上做一笔交易，他的游览器生成了一个随机数作为对称密钥</li>\n<li>铁头的游览器向银行请求非对称加密的公钥</li>\n<li>银行将公钥发送给铁头</li>\n<li>铁头用这个公钥将自己的对称密钥进行加密</li>\n<li>铁头将加密后的对称密钥发送给银行</li>\n<li>银行用非对称加密的私有密钥对这个对称密钥进行解密获取到铁头的对称密钥</li>\n<li>铁头与银行可以使用对称密钥来对沟通的内容进行加密与解密了。</li>\n</ol>\n<h5 id=\"对称和非对称加密总结\"><a href=\"#对称和非对称加密总结\" class=\"headerlink\" title=\"对称和非对称加密总结\"></a>对称和非对称加密总结</h5><ol>\n<li>对称加密加密与解密使用的是同样的密钥，所以速度快，但由于需要将密钥在网络传输，所以安全性不高。</li>\n<li>非对称加密使用了一对密钥，公钥与私钥，所以安全性高，但加密与解密速度慢。</li>\n<li>解决的办法是将<strong>对称加密的密钥使用非对称加密的公钥进行加密</strong>，然后发送出去，<strong>接收方使用私钥进行解密得到对称加密的密钥</strong>，然后双方可以使用对称加密来进行沟通。</li>\n</ol>\n<h4 id=\"非对称加密例子\"><a href=\"#非对称加密例子\" class=\"headerlink\" title=\"非对称加密例子\"></a>非对称加密例子</h4><ul>\n<li>RSA（参考<a href=\"http://www.cnblogs.com/whoislcj/p/5470095.html\" target=\"_blank\" rel=\"external\">这里</a>）</li>\n</ul>\n<h4 id=\"对称加密例子\"><a href=\"#对称加密例子\" class=\"headerlink\" title=\"对称加密例子\"></a>对称加密例子</h4><ul>\n<li>AES（参考<a href=\"http://www.cnblogs.com/whoislcj/p/5473030.html\" target=\"_blank\" rel=\"external\">这里</a>）</li>\n</ul>\n<ol>\n<li>项目中除了登陆，支付等接口采用rsa非对称加密，之外的采用aes对称加密</li>\n<li>高级加密标准（英语：Advanced Encryption Standard，缩写：AES）</li>\n<li>这个标准用来替代原先的DES</li>\n</ol>\n<ul>\n<li>DES（参考<a href=\"http://www.cnblogs.com/whoislcj/p/5580950.html\" target=\"_blank\" rel=\"external\">这里</a>）</li>\n</ul>\n<ol>\n<li>DES加密算法出自IBM</li>\n<li>近些年使用越来越少</li>\n<li>DES使用56位密钥，以现代计算能力，24小时内即可被破解。</li>\n</ol>\n<ul>\n<li>AES和DES对比</li>\n</ul>\n<ol>\n<li>AES安全性、效率、灵活性要高于DES</li>\n<li>对称加密优先采用AES</li>\n</ol>\n<h4 id=\"其他加密\"><a href=\"#其他加密\" class=\"headerlink\" title=\"其他加密\"></a>其他加密</h4><ul>\n<li>MD5</li>\n</ul>\n<ol>\n<li><p>特点：单向加密算法，是不可逆的一种的加密方式</p>\n</li>\n<li><p>压缩性：任意长度的数据，算出的MD5值长度都是固定的。</p>\n</li>\n<li><p>容易计算：从原数据计算出MD5值很容易。</p>\n</li>\n<li><p>抗修改性：对原数据进行任何改动，哪怕只修改1个字节，所得到的MD5值都有很大区别。</p>\n</li>\n<li><p>强抗碰撞：已知原数据和其MD5值，想找到一个具有相同MD5值的数据（即伪造数据）是非常困难的。</p>\n</li>\n<li><p>加大MD5安全性</p>\n<ul>\n<li><h6 id=\"进行多次MD5加密\"><a href=\"#进行多次MD5加密\" class=\"headerlink\" title=\"进行多次MD5加密\"></a>进行多次MD5加密</h6></li>\n<li><h6 id=\"MD5加盐\"><a href=\"#MD5加盐\" class=\"headerlink\" title=\"MD5加盐\"></a>MD5加盐</h6><ul>\n<li><h6 id=\"用string明文的hashcode作为盐，然后进行MD5加密\"><a href=\"#用string明文的hashcode作为盐，然后进行MD5加密\" class=\"headerlink\" title=\"用string明文的hashcode作为盐，然后进行MD5加密\"></a>用string明文的hashcode作为盐，然后进行MD5加密</h6></li>\n<li><h6 id=\"随机生成一串字符串作为盐，然后进行MD5加密\"><a href=\"#随机生成一串字符串作为盐，然后进行MD5加密\" class=\"headerlink\" title=\"随机生成一串字符串作为盐，然后进行MD5加密\"></a>随机生成一串字符串作为盐，然后进行MD5加密</h6></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>Base64</li>\n</ul>\n<ol>\n<li>平时开发中遇见的各种数据加密方式，最终都会对加密后的二进制数据进行Base64编码，起到一种二次加密的效果</li>\n<li>其实呢Base64从严格意义上来说的话不是一种加密算法，而是一种编码算法</li>\n<li><a href=\"http://www.cnblogs.com/whoislcj/p/5887859.html\" target=\"_blank\" rel=\"external\">更多</a></li>\n</ol>\n<p>所以，在客户端和服务端数据传送加密，最多使用的是非对称RSA和对称AES，参考<a href=\"http://blog.csdn.net/Chay_Chan/article/details/58605605\" target=\"_blank\" rel=\"external\">这里</a></p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=34274472&auto=1&height=66\"></iframe>","excerpt":"<p>在应用开发的过程中，客户端和移动端要频繁的进行数据传输，涉及到重要隐私信息的时候，就需要进行数据加密，，即使传输的过程中被截取，也不会信息泄漏。对于加密算法，不少开发者也早有耳闻，例如：Base64，MD5，RSA，AES，DES加密等等，今天就总结一下加密算法</p>","more":"<h4 id=\"对称加密和非对称加密\"><a href=\"#对称加密和非对称加密\" class=\"headerlink\" title=\"对称加密和非对称加密\"></a>对称加密和非对称加密</h4><h5 id=\"对称加密：\"><a href=\"#对称加密：\" class=\"headerlink\" title=\"对称加密：\"></a>对称加密：</h5><p>对称加密是最快速、最简单的一种加密方式，加密（encryption）与解密（decryption）用的是同样的密钥（secret key）。对称加密有很多种算法，由于它效率很高，所以被广泛使用在很多加密协议的核心当中。</p>\n<p>对称加密通常使用的是相对较小的密钥，一般小于256 bit。因为密钥越大，加密越强，但加密与解密的过程越慢。如果你只用1 bit来做这个密钥，那黑客们可以先试着用0来解密，不行的话就再用1解；但如果你的密钥有1 MB大，黑客们可能永远也无法破解，但加密和解密的过程要花费很长的时间。密钥的大小既要照顾到安全性，也要照顾到效率，是一个trade-off。</p>\n<p><strong>对称加密的一大缺点</strong>是密钥的管理与分配，换句话说，如何把密钥发送到需要解密你的消息的人的手里是一个问题。在<strong>发送密钥的过程中，密钥有很大的风险会被黑客们拦截</strong>。<strong>现实中通常的做法是将对称加密的密钥进行非对称加密，然后传送给需要它的人</strong>。</p>\n<h5 id=\"非对称加密：\"><a href=\"#非对称加密：\" class=\"headerlink\" title=\"非对称加密：\"></a>非对称加密：</h5><p>非对称加密为数据的加密与解密提供了一个非常安全的方法，它使用了一对密钥，公钥（public key）和私钥（private key）。<strong>私钥只能由一方安全保管，不能外泄</strong>，而<strong>公钥则可以发给任何请求它的人</strong>。<strong>非对称加密</strong>使用这对<strong>密钥中的一个进行加密，而解密则需要另一个密钥</strong>。比如，你向银行请求公钥，<strong>银行将公钥发给你，你使用公钥对消息加密，那么只有私钥的持有人–银行才能对你的消息解密</strong>。与对称加密不同的是，银行不需要将私钥通过网络发送出去，因此安全性大大提高。</p>\n<p>目前<strong>最常用的非对称加密算法是RSA算法</strong>，是Rivest, Shamir, 和Adleman于1978年发明</p>\n<h5 id=\"对称加密和非对称加密-1\"><a href=\"#对称加密和非对称加密-1\" class=\"headerlink\" title=\"对称加密和非对称加密\"></a>对称加密和非对称加密</h5><p>虽然非对称加密很安全，但是和对称加密比起来，它非常的慢，所以我们还是要用对称加密来传送消息，但对称加密使用的密钥用非对称加密，参考网上，看下面的一个例子：</p>\n<ol>\n<li>铁头需要在银行的网站上做一笔交易，他的游览器生成了一个随机数作为对称密钥</li>\n<li>铁头的游览器向银行请求非对称加密的公钥</li>\n<li>银行将公钥发送给铁头</li>\n<li>铁头用这个公钥将自己的对称密钥进行加密</li>\n<li>铁头将加密后的对称密钥发送给银行</li>\n<li>银行用非对称加密的私有密钥对这个对称密钥进行解密获取到铁头的对称密钥</li>\n<li>铁头与银行可以使用对称密钥来对沟通的内容进行加密与解密了。</li>\n</ol>\n<h5 id=\"对称和非对称加密总结\"><a href=\"#对称和非对称加密总结\" class=\"headerlink\" title=\"对称和非对称加密总结\"></a>对称和非对称加密总结</h5><ol>\n<li>对称加密加密与解密使用的是同样的密钥，所以速度快，但由于需要将密钥在网络传输，所以安全性不高。</li>\n<li>非对称加密使用了一对密钥，公钥与私钥，所以安全性高，但加密与解密速度慢。</li>\n<li>解决的办法是将<strong>对称加密的密钥使用非对称加密的公钥进行加密</strong>，然后发送出去，<strong>接收方使用私钥进行解密得到对称加密的密钥</strong>，然后双方可以使用对称加密来进行沟通。</li>\n</ol>\n<h4 id=\"非对称加密例子\"><a href=\"#非对称加密例子\" class=\"headerlink\" title=\"非对称加密例子\"></a>非对称加密例子</h4><ul>\n<li>RSA（参考<a href=\"http://www.cnblogs.com/whoislcj/p/5470095.html\">这里</a>）</li>\n</ul>\n<h4 id=\"对称加密例子\"><a href=\"#对称加密例子\" class=\"headerlink\" title=\"对称加密例子\"></a>对称加密例子</h4><ul>\n<li>AES（参考<a href=\"http://www.cnblogs.com/whoislcj/p/5473030.html\">这里</a>）</li>\n</ul>\n<ol>\n<li>项目中除了登陆，支付等接口采用rsa非对称加密，之外的采用aes对称加密</li>\n<li>高级加密标准（英语：Advanced Encryption Standard，缩写：AES）</li>\n<li>这个标准用来替代原先的DES</li>\n</ol>\n<ul>\n<li>DES（参考<a href=\"http://www.cnblogs.com/whoislcj/p/5580950.html\">这里</a>）</li>\n</ul>\n<ol>\n<li>DES加密算法出自IBM</li>\n<li>近些年使用越来越少</li>\n<li>DES使用56位密钥，以现代计算能力，24小时内即可被破解。</li>\n</ol>\n<ul>\n<li>AES和DES对比</li>\n</ul>\n<ol>\n<li>AES安全性、效率、灵活性要高于DES</li>\n<li>对称加密优先采用AES</li>\n</ol>\n<h4 id=\"其他加密\"><a href=\"#其他加密\" class=\"headerlink\" title=\"其他加密\"></a>其他加密</h4><ul>\n<li>MD5</li>\n</ul>\n<ol>\n<li><p>特点：单向加密算法，是不可逆的一种的加密方式</p>\n</li>\n<li><p>压缩性：任意长度的数据，算出的MD5值长度都是固定的。</p>\n</li>\n<li><p>容易计算：从原数据计算出MD5值很容易。</p>\n</li>\n<li><p>抗修改性：对原数据进行任何改动，哪怕只修改1个字节，所得到的MD5值都有很大区别。</p>\n</li>\n<li><p>强抗碰撞：已知原数据和其MD5值，想找到一个具有相同MD5值的数据（即伪造数据）是非常困难的。</p>\n</li>\n<li><p>加大MD5安全性</p>\n<ul>\n<li><h6 id=\"进行多次MD5加密\"><a href=\"#进行多次MD5加密\" class=\"headerlink\" title=\"进行多次MD5加密\"></a>进行多次MD5加密</h6></li>\n<li><h6 id=\"MD5加盐\"><a href=\"#MD5加盐\" class=\"headerlink\" title=\"MD5加盐\"></a>MD5加盐</h6><ul>\n<li><h6 id=\"用string明文的hashcode作为盐，然后进行MD5加密\"><a href=\"#用string明文的hashcode作为盐，然后进行MD5加密\" class=\"headerlink\" title=\"用string明文的hashcode作为盐，然后进行MD5加密\"></a>用string明文的hashcode作为盐，然后进行MD5加密</h6></li>\n<li><h6 id=\"随机生成一串字符串作为盐，然后进行MD5加密\"><a href=\"#随机生成一串字符串作为盐，然后进行MD5加密\" class=\"headerlink\" title=\"随机生成一串字符串作为盐，然后进行MD5加密\"></a>随机生成一串字符串作为盐，然后进行MD5加密</h6></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>Base64</li>\n</ul>\n<ol>\n<li>平时开发中遇见的各种数据加密方式，最终都会对加密后的二进制数据进行Base64编码，起到一种二次加密的效果</li>\n<li>其实呢Base64从严格意义上来说的话不是一种加密算法，而是一种编码算法</li>\n<li><a href=\"http://www.cnblogs.com/whoislcj/p/5887859.html\">更多</a></li>\n</ol>\n<p>所以，在客户端和服务端数据传送加密，最多使用的是非对称RSA和对称AES，参考<a href=\"http://blog.csdn.net/Chay_Chan/article/details/58605605\">这里</a></p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=34274472&auto=1&height=66\"></iframe>"},{"title":"谈谈启动流程","date":"2017-12-29T03:13:57.000Z","password":123456,"_content":"","source":"_posts/谈谈启动流程.md","raw":"---\ntitle: 谈谈启动流程\ndate: 2017-12-29 11:13:57\ntags:\n- Android\ncategories: Android\npassword: 123456\n---\n","slug":"谈谈启动流程","published":1,"updated":"2018-07-19T02:08:03.913Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6no00401kyg7bcnoi44","content":"","excerpt":"","more":""},{"title":"shadowsocks服务端部署","date":"2018-07-18T05:05:35.000Z","password":null,"_content":"\n基于Ubuntu 16.04的Shadowsocks服务端安装\n\n<!--more-->\n\n### 安装步骤\n\n##### 1，首先检查下Python 版本，要有 2.6 or 2.7.\n\n```\npython --version\nPython 2.7.4\n```\n\n##### 2，安装python包管理器\n\n```\napt-get install python-pip\n```\n\n##### 3，安装shadowsocks\n\n```\npip install shadowsocks\n```\n\n##### 4，修改配置文件\n\n```\nvim /etc/shadowsocks/config.json\n```\n\n```\n{\n    \"server\":\"0.0.0.0\",\n    \"server_port\":8388,\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\":1080,\n    \"password\":\"yourpsw\",\n    \"timeout\":300,\n    \"method\":\"bf-cfb\",\n    \"fast_open\": true,\n    \"workers\": 10\n}\n注意：\nserver 0，0，0，0（其他可能出问题）\nmethod bf-cfb（其他可能出问题）\n```\n\n##### 5，开启\n\n```\nsudo ssserver -c /etc/shadowsocks/config.json\n```\n\n##### 6，设置为开机启动\n\n- ###### 编辑\n\n```\nvim /etc/rc.local\n```\n\n\n\n- ###### 然后在exit 0之前加入 \n\n  ```\n   sudo ssserver -c /etc/shadowsocks/config.json\n  ```\n\n- ###### 重启\n\n```\n  ● reboot\n```\n\n- ###### 重启后查看进程\n\n```\nps aux | grep shadowsocks\n```\n\n### 参考：\n\n[参考1](https://blog.csdn.net/sjtu_mc/article/details/79207427)\n\n[参考2](https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E)\n\n[参考3](https://hceasy.com/2013/12/shadowsocks-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%83%A8%E7%BD%B2/)\n\n","source":"_posts/shadowsocks服务端部署.md","raw":"---\ntitle: shadowsocks服务端部署\ndate: 2018-07-18 13:05:35\ntags:\n- Dev\ncategories: Dev\npassword:\n---\n\n基于Ubuntu 16.04的Shadowsocks服务端安装\n\n<!--more-->\n\n### 安装步骤\n\n##### 1，首先检查下Python 版本，要有 2.6 or 2.7.\n\n```\npython --version\nPython 2.7.4\n```\n\n##### 2，安装python包管理器\n\n```\napt-get install python-pip\n```\n\n##### 3，安装shadowsocks\n\n```\npip install shadowsocks\n```\n\n##### 4，修改配置文件\n\n```\nvim /etc/shadowsocks/config.json\n```\n\n```\n{\n    \"server\":\"0.0.0.0\",\n    \"server_port\":8388,\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\":1080,\n    \"password\":\"yourpsw\",\n    \"timeout\":300,\n    \"method\":\"bf-cfb\",\n    \"fast_open\": true,\n    \"workers\": 10\n}\n注意：\nserver 0，0，0，0（其他可能出问题）\nmethod bf-cfb（其他可能出问题）\n```\n\n##### 5，开启\n\n```\nsudo ssserver -c /etc/shadowsocks/config.json\n```\n\n##### 6，设置为开机启动\n\n- ###### 编辑\n\n```\nvim /etc/rc.local\n```\n\n\n\n- ###### 然后在exit 0之前加入 \n\n  ```\n   sudo ssserver -c /etc/shadowsocks/config.json\n  ```\n\n- ###### 重启\n\n```\n  ● reboot\n```\n\n- ###### 重启后查看进程\n\n```\nps aux | grep shadowsocks\n```\n\n### 参考：\n\n[参考1](https://blog.csdn.net/sjtu_mc/article/details/79207427)\n\n[参考2](https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E)\n\n[参考3](https://hceasy.com/2013/12/shadowsocks-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%83%A8%E7%BD%B2/)\n\n","slug":"shadowsocks服务端部署","published":1,"updated":"2018-07-19T02:14:47.372Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6np00431kygyaorgo49","content":"<p>基于Ubuntu 16.04的Shadowsocks服务端安装</p>\n<a id=\"more\"></a>\n<h3 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h3><h5 id=\"1，首先检查下Python-版本，要有-2-6-or-2-7\"><a href=\"#1，首先检查下Python-版本，要有-2-6-or-2-7\" class=\"headerlink\" title=\"1，首先检查下Python 版本，要有 2.6 or 2.7.\"></a>1，首先检查下Python 版本，要有 2.6 or 2.7.</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">python</span> <span class=\"selector-tag\">--version</span></div><div class=\"line\"><span class=\"selector-tag\">Python</span> 2<span class=\"selector-class\">.7</span><span class=\"selector-class\">.4</span></div></pre></td></tr></table></figure>\n<h5 id=\"2，安装python包管理器\"><a href=\"#2，安装python包管理器\" class=\"headerlink\" title=\"2，安装python包管理器\"></a>2，安装python包管理器</h5><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-<span class=\"built_in\">get</span> install <span class=\"keyword\">python</span>-pip</div></pre></td></tr></table></figure>\n<h5 id=\"3，安装shadowsocks\"><a href=\"#3，安装shadowsocks\" class=\"headerlink\" title=\"3，安装shadowsocks\"></a>3，安装shadowsocks</h5><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip <span class=\"keyword\">install</span> shadowsocks</div></pre></td></tr></table></figure>\n<h5 id=\"4，修改配置文件\"><a href=\"#4，修改配置文件\" class=\"headerlink\" title=\"4，修改配置文件\"></a>4，修改配置文件</h5><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/shadowsocks/<span class=\"built_in\">config</span>.json</div></pre></td></tr></table></figure>\n<figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"server\"</span>:<span class=\"string\">\"0.0.0.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"server_port\"</span>:<span class=\"number\">8388</span>,</div><div class=\"line\">    <span class=\"string\">\"local_address\"</span>: <span class=\"string\">\"127.0.0.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"local_port\"</span>:<span class=\"number\">1080</span>,</div><div class=\"line\">    <span class=\"string\">\"password\"</span>:<span class=\"string\">\"yourpsw\"</span>,</div><div class=\"line\">    <span class=\"string\">\"timeout\"</span>:<span class=\"number\">300</span>,</div><div class=\"line\">    <span class=\"string\">\"method\"</span>:<span class=\"string\">\"bf-cfb\"</span>,</div><div class=\"line\">    <span class=\"string\">\"fast_open\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"string\">\"workers\"</span>: <span class=\"number\">10</span></div><div class=\"line\">&#125;</div><div class=\"line\">注意：</div><div class=\"line\">server <span class=\"number\">0</span>，<span class=\"number\">0</span>，<span class=\"number\">0</span>，<span class=\"number\">0</span>（其他可能出问题）</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">method</span> <span class=\"title\">bf</span>-<span class=\"title\">cfb</span>（其他可能出问题）</span></div></pre></td></tr></table></figure>\n<h5 id=\"5，开启\"><a href=\"#5，开启\" class=\"headerlink\" title=\"5，开启\"></a>5，开启</h5><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo ssserver -c /etc/shadowsocks/<span class=\"built_in\">config</span>.json</div></pre></td></tr></table></figure>\n<h5 id=\"6，设置为开机启动\"><a href=\"#6，设置为开机启动\" class=\"headerlink\" title=\"6，设置为开机启动\"></a>6，设置为开机启动</h5><ul>\n<li><h6 id=\"编辑\"><a href=\"#编辑\" class=\"headerlink\" title=\"编辑\"></a>编辑</h6></li>\n</ul>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/rc.<span class=\"keyword\">local</span></div></pre></td></tr></table></figure>\n<ul>\n<li><h6 id=\"然后在exit-0之前加入\"><a href=\"#然后在exit-0之前加入\" class=\"headerlink\" title=\"然后在exit 0之前加入\"></a>然后在exit 0之前加入</h6><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo ssserver -c /etc/shadowsocks/<span class=\"built_in\">config</span>.json</div></pre></td></tr></table></figure>\n</li>\n<li><h6 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a>重启</h6></li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">● reboot</div></pre></td></tr></table></figure>\n<ul>\n<li><h6 id=\"重启后查看进程\"><a href=\"#重启后查看进程\" class=\"headerlink\" title=\"重启后查看进程\"></a>重启后查看进程</h6></li>\n</ul>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">ps</span> aux | <span class=\"keyword\">grep</span> shadowsocks</div></pre></td></tr></table></figure>\n<h3 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h3><p><a href=\"https://blog.csdn.net/sjtu_mc/article/details/79207427\" target=\"_blank\" rel=\"external\">参考1</a></p>\n<p><a href=\"https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E\" target=\"_blank\" rel=\"external\">参考2</a></p>\n<p><a href=\"https://hceasy.com/2013/12/shadowsocks-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%83%A8%E7%BD%B2/\" target=\"_blank\" rel=\"external\">参考3</a></p>\n","excerpt":"<p>基于Ubuntu 16.04的Shadowsocks服务端安装</p>","more":"<h3 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h3><h5 id=\"1，首先检查下Python-版本，要有-2-6-or-2-7\"><a href=\"#1，首先检查下Python-版本，要有-2-6-or-2-7\" class=\"headerlink\" title=\"1，首先检查下Python 版本，要有 2.6 or 2.7.\"></a>1，首先检查下Python 版本，要有 2.6 or 2.7.</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">python</span> <span class=\"selector-tag\">--version</span></div><div class=\"line\"><span class=\"selector-tag\">Python</span> 2<span class=\"selector-class\">.7</span><span class=\"selector-class\">.4</span></div></pre></td></tr></table></figure>\n<h5 id=\"2，安装python包管理器\"><a href=\"#2，安装python包管理器\" class=\"headerlink\" title=\"2，安装python包管理器\"></a>2，安装python包管理器</h5><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-<span class=\"built_in\">get</span> install <span class=\"keyword\">python</span>-pip</div></pre></td></tr></table></figure>\n<h5 id=\"3，安装shadowsocks\"><a href=\"#3，安装shadowsocks\" class=\"headerlink\" title=\"3，安装shadowsocks\"></a>3，安装shadowsocks</h5><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip <span class=\"keyword\">install</span> shadowsocks</div></pre></td></tr></table></figure>\n<h5 id=\"4，修改配置文件\"><a href=\"#4，修改配置文件\" class=\"headerlink\" title=\"4，修改配置文件\"></a>4，修改配置文件</h5><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/shadowsocks/<span class=\"built_in\">config</span>.json</div></pre></td></tr></table></figure>\n<figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"server\"</span>:<span class=\"string\">\"0.0.0.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"server_port\"</span>:<span class=\"number\">8388</span>,</div><div class=\"line\">    <span class=\"string\">\"local_address\"</span>: <span class=\"string\">\"127.0.0.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"local_port\"</span>:<span class=\"number\">1080</span>,</div><div class=\"line\">    <span class=\"string\">\"password\"</span>:<span class=\"string\">\"yourpsw\"</span>,</div><div class=\"line\">    <span class=\"string\">\"timeout\"</span>:<span class=\"number\">300</span>,</div><div class=\"line\">    <span class=\"string\">\"method\"</span>:<span class=\"string\">\"bf-cfb\"</span>,</div><div class=\"line\">    <span class=\"string\">\"fast_open\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"string\">\"workers\"</span>: <span class=\"number\">10</span></div><div class=\"line\">&#125;</div><div class=\"line\">注意：</div><div class=\"line\">server <span class=\"number\">0</span>，<span class=\"number\">0</span>，<span class=\"number\">0</span>，<span class=\"number\">0</span>（其他可能出问题）</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">method</span> <span class=\"title\">bf</span>-<span class=\"title\">cfb</span>（其他可能出问题）</span></div></pre></td></tr></table></figure>\n<h5 id=\"5，开启\"><a href=\"#5，开启\" class=\"headerlink\" title=\"5，开启\"></a>5，开启</h5><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo ssserver -c /etc/shadowsocks/<span class=\"built_in\">config</span>.json</div></pre></td></tr></table></figure>\n<h5 id=\"6，设置为开机启动\"><a href=\"#6，设置为开机启动\" class=\"headerlink\" title=\"6，设置为开机启动\"></a>6，设置为开机启动</h5><ul>\n<li><h6 id=\"编辑\"><a href=\"#编辑\" class=\"headerlink\" title=\"编辑\"></a>编辑</h6></li>\n</ul>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/rc.<span class=\"keyword\">local</span></div></pre></td></tr></table></figure>\n<ul>\n<li><h6 id=\"然后在exit-0之前加入\"><a href=\"#然后在exit-0之前加入\" class=\"headerlink\" title=\"然后在exit 0之前加入\"></a>然后在exit 0之前加入</h6><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo ssserver -c /etc/shadowsocks/<span class=\"built_in\">config</span>.json</div></pre></td></tr></table></figure>\n</li>\n<li><h6 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a>重启</h6></li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">● reboot</div></pre></td></tr></table></figure>\n<ul>\n<li><h6 id=\"重启后查看进程\"><a href=\"#重启后查看进程\" class=\"headerlink\" title=\"重启后查看进程\"></a>重启后查看进程</h6></li>\n</ul>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">ps</span> aux | <span class=\"keyword\">grep</span> shadowsocks</div></pre></td></tr></table></figure>\n<h3 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h3><p><a href=\"https://blog.csdn.net/sjtu_mc/article/details/79207427\">参考1</a></p>\n<p><a href=\"https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E\">参考2</a></p>\n<p><a href=\"https://hceasy.com/2013/12/shadowsocks-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%83%A8%E7%BD%B2/\">参考3</a></p>"},{"title":"随滑动改变的的动态矩形背景","date":"2016-10-11T08:11:06.000Z","_content":"\n可能看到这个标题有点懵逼,本屌的表达能力有限,最近工作比较清闲,朋友公司正在做到这个效果,所以就帮基友写了一个小Demo.\n\n<!--more-->\n\n### github移步:\n\nhttps://github.com/itfengan/DynamicRectangleView\n\n#### 朋友公司需要达到的效果\n\n![这里写图片描述](http://img.blog.csdn.net/20171011155803164?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmVuZ2FuaXQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n#### Demo中的效果\n\n![这里写图片描述](http://img.blog.csdn.net/20171011155905764?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmVuZ2FuaXQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n### 使用过程 ###\n\n#### layout\n\n        <com.fengan.dynamicrectangledemo.DynamicRectangleView\n        android:id=\"@+id/drv\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"250dp\"\n        app:fengan_limit_percent=\"0.2\"\n        app:fengan_percent=\"0.5\"\n        ></com.fengan.dynamicrectangledemo.DynamicRectangleView>\n\n#### code\n\n     @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        SeekBar seekBar = (SeekBar) findViewById(R.id.sb);\n        final DynamicRectangleView dynamicRectangleView = (DynamicRectangleView) findViewById(R.id.drv);\n        seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {\n            @Override\n            public void onProgressChanged(SeekBar seekBar, int i, boolean b) {\n                dynamicRectangleView.setPercent((float)i/100);\n            }\n    \n            @Override\n            public void onStartTrackingTouch(SeekBar seekBar) {\n    \n            }\n    \n            @Override\n            public void onStopTrackingTouch(SeekBar seekBar) {\n    \n            }\n        });\n        findViewById(R.id.btn_scrollview).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                startActivity(new Intent(MainActivity.this,ScrollViewActivity.class));\n            }\n        });\n    }\n\n#### attrs.xml\n\n(有灵性的哥哥们应该猜得到分别对应的什么意思咯)\n\n    <resources>\n    <declare-styleable name=\"DynamicRectangleView\">\n        <attr name=\"fengan_percent\" format=\"float\"/>\n        <attr name=\"fengan_limit_percent\" format=\"float\"/>\n        <attr name=\"fengan_start_color\" format=\"color\"/>\n        <attr name=\"fengan_end_color\" format=\"color\"/>\n    </declare-styleable>\n    </resources>\n\n1. fengan_percent:右侧短边占左侧的百分比\n2. fengan_limit_percent:当滑动到最小的百分比\n3. fengan_start_color:渐变色的初始颜色(ps:朋友公司效果图是渐变色,当然也可以不需要)\n4. fengan_end_color:渐变色的终止颜色\n\n> DynamicRectangleView.java\n\n\n\tpackage com.fengan.dynamicrectangledemo;\n\timport android.content.Context;\n\timport android.content.res.TypedArray;\n\timport android.graphics.Canvas;\n\timport android.graphics.Color;\n\timport android.graphics.LinearGradient;\n\timport android.graphics.Paint;\n\timport android.graphics.Path;\n\timport android.graphics.Shader;\n\timport android.util.AttributeSet;\n\timport android.util.Log;\n\timport android.view.View;\n\t\n\t/**\n\t * Created by fengan on 2017/10/11/011.\n\t */\n\t public class DynamicRectangleView extends View {\n\t // Default  values\n\tprivate final static int DEFAULT_START_COLOR = Color.parseColor(\"#88D94600\");\n\tprivate final static int DEFAULT_END_COLOR = Color.parseColor(\"#D94600\");\n\tprivate final static float DEFAULT_PERCENT = (float) 0.5;//右边高度占左边高度的百分比\n\tprivate final static float DEFAULT_LIMIT_PERCENT = (float) 0.2;//最小高度占左边高度的百分比\n\t\n\tprivate Paint mPaint;\n\tprivate float OriginalRightHeight;\n\tprivate float OriginalLeftHeight;\n\tprivate float currentRightHeight;\n\tprivate float currentLeftHeight;\n\tprivate float minHeight;\n\tprivate float maxHeight;\n\tprivate int mStartColor;\n\tprivate int mEndColor;\n\tprivate float mPercent;\n\tprivate float mLimitPercent;\n\tprivate Path mPath;\n\tpublic DynamicRectangleView(Context context) {\n\t    this(context, null);\n\t}\n\t\n\tpublic DynamicRectangleView(Context context, AttributeSet attrs) {\n\t    this(context, attrs, 0);\n\t}\n\tpublic DynamicRectangleView(Context context, AttributeSet attrs, int defStyleAttr) {\n\t    super(context, attrs, defStyleAttr);\n\t    // Retrieve attributes from xml\n\t    final TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.DynamicRectangleView);\n\t    try {\n\t        mPercent = typedArray.getFloat(R.styleable.DynamicRectangleView_fengan_percent, DEFAULT_PERCENT);\n\t        mLimitPercent = typedArray.getFloat(R.styleable.DynamicRectangleView_fengan_percent, DEFAULT_LIMIT_PERCENT);\n\t        mStartColor = typedArray.getColor(R.styleable.DynamicRectangleView_fengan_start_color, DEFAULT_START_COLOR);\n\t        mEndColor = typedArray.getColor(R.styleable.DynamicRectangleView_fengan_end_color, DEFAULT_END_COLOR);\n\t    } finally {\n\t        typedArray.recycle();\n\t    }\n\t    initView(context);\n\t}\n\t\n\tprivate void initView(Context context) {\n\t    mPaint = new Paint();\n\t    mPath = new Path();\n\t    mPaint.setAntiAlias(true);\n\t//        mPaint.setColor(Color.RED);//纯色\n\t}\n\t\n\t@Override\n\tprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n\t    super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n\t}\n\t\n\t@Override\n\tprotected void onSizeChanged(int w, int h, int oldw, int oldh) {\n\t    super.onSizeChanged(w, h, oldw, oldh);\n\t    OriginalLeftHeight = getMeasuredHeight();\n\t    OriginalRightHeight = getMeasuredHeight()*mPercent;\n\t    minHeight = getMeasuredHeight() *mLimitPercent;\n\t    maxHeight = OriginalRightHeight;\n\t    //设置当前高度\n\t    currentRightHeight = OriginalRightHeight;\n\t    currentLeftHeight = OriginalLeftHeight;\n\t    // LinearGradient 第一个参数第二个参数为 起始位置x,y  三四参数为终点位置x,y。\n\t    // 如果x不变则为y轴渐变， y不变则为x轴渐变\n\t    // 第五个参数为颜色渐变，此处为红色渐变为绿色\n\t    // 第七个参数为渐变次数，可repeat\n\t    Shader mShader = new LinearGradient(0, 0, maxHeight, maxHeight,\n\t            new int[]{mStartColor, mEndColor},\n\t            null, Shader.TileMode.CLAMP);\n\t    // Shader.TileMode三种模式\n\t    // REPEAT:沿着渐变方向循环重复\n\t    // CLAMP:如果在预先定义的范围外画的话，就重复边界的颜色\n\t    // MIRROR:与REPEAT一样都是循环重复，但这个会对称重复\n\t    mPaint.setShader(mShader);// 用Shader中定义定义的颜色来话\n\t}\n\t@Override\n\tprotected void onDraw(Canvas canvas) {\n\t    super.onDraw(canvas);\n\t    mPath.reset();\n\t    mPath.moveTo(0, 0);\n\t    mPath.lineTo(getMeasuredWidth(), 0);\n\t    mPath.lineTo(getMeasuredWidth(), currentRightHeight);\n\t    mPath.lineTo(0, currentLeftHeight);\n\t    mPath.close();\n\t    canvas.drawPath(mPath, mPaint);\n\t}\n\t\n\tpublic void setPercent(float percent) {\n\t    Log.e(\"fengan\", \"percent=\" + percent);\n\t    currentRightHeight = OriginalRightHeight * (1 - percent);\n\t    currentLeftHeight = OriginalLeftHeight * (1 - percent);\n\t    if (currentLeftHeight < minHeight) {\n\t        currentLeftHeight = minHeight;\n\t    }\n\t    if (currentRightHeight < minHeight) {\n\t        currentRightHeight = minHeight;\n\t    }\n\t    postInvalidate();\n\t}\n\t}","source":"_posts/随滑动改变的的动态矩形背景.md","raw":"---\ntitle: 随滑动改变的的动态矩形背景\ndate: 2016-10-11 16:11:06\ntags: \n- Android\ncategories: Android\n---\n\n可能看到这个标题有点懵逼,本屌的表达能力有限,最近工作比较清闲,朋友公司正在做到这个效果,所以就帮基友写了一个小Demo.\n\n<!--more-->\n\n### github移步:\n\nhttps://github.com/itfengan/DynamicRectangleView\n\n#### 朋友公司需要达到的效果\n\n![这里写图片描述](http://img.blog.csdn.net/20171011155803164?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmVuZ2FuaXQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n#### Demo中的效果\n\n![这里写图片描述](http://img.blog.csdn.net/20171011155905764?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmVuZ2FuaXQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n### 使用过程 ###\n\n#### layout\n\n        <com.fengan.dynamicrectangledemo.DynamicRectangleView\n        android:id=\"@+id/drv\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"250dp\"\n        app:fengan_limit_percent=\"0.2\"\n        app:fengan_percent=\"0.5\"\n        ></com.fengan.dynamicrectangledemo.DynamicRectangleView>\n\n#### code\n\n     @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        SeekBar seekBar = (SeekBar) findViewById(R.id.sb);\n        final DynamicRectangleView dynamicRectangleView = (DynamicRectangleView) findViewById(R.id.drv);\n        seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {\n            @Override\n            public void onProgressChanged(SeekBar seekBar, int i, boolean b) {\n                dynamicRectangleView.setPercent((float)i/100);\n            }\n    \n            @Override\n            public void onStartTrackingTouch(SeekBar seekBar) {\n    \n            }\n    \n            @Override\n            public void onStopTrackingTouch(SeekBar seekBar) {\n    \n            }\n        });\n        findViewById(R.id.btn_scrollview).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                startActivity(new Intent(MainActivity.this,ScrollViewActivity.class));\n            }\n        });\n    }\n\n#### attrs.xml\n\n(有灵性的哥哥们应该猜得到分别对应的什么意思咯)\n\n    <resources>\n    <declare-styleable name=\"DynamicRectangleView\">\n        <attr name=\"fengan_percent\" format=\"float\"/>\n        <attr name=\"fengan_limit_percent\" format=\"float\"/>\n        <attr name=\"fengan_start_color\" format=\"color\"/>\n        <attr name=\"fengan_end_color\" format=\"color\"/>\n    </declare-styleable>\n    </resources>\n\n1. fengan_percent:右侧短边占左侧的百分比\n2. fengan_limit_percent:当滑动到最小的百分比\n3. fengan_start_color:渐变色的初始颜色(ps:朋友公司效果图是渐变色,当然也可以不需要)\n4. fengan_end_color:渐变色的终止颜色\n\n> DynamicRectangleView.java\n\n\n\tpackage com.fengan.dynamicrectangledemo;\n\timport android.content.Context;\n\timport android.content.res.TypedArray;\n\timport android.graphics.Canvas;\n\timport android.graphics.Color;\n\timport android.graphics.LinearGradient;\n\timport android.graphics.Paint;\n\timport android.graphics.Path;\n\timport android.graphics.Shader;\n\timport android.util.AttributeSet;\n\timport android.util.Log;\n\timport android.view.View;\n\t\n\t/**\n\t * Created by fengan on 2017/10/11/011.\n\t */\n\t public class DynamicRectangleView extends View {\n\t // Default  values\n\tprivate final static int DEFAULT_START_COLOR = Color.parseColor(\"#88D94600\");\n\tprivate final static int DEFAULT_END_COLOR = Color.parseColor(\"#D94600\");\n\tprivate final static float DEFAULT_PERCENT = (float) 0.5;//右边高度占左边高度的百分比\n\tprivate final static float DEFAULT_LIMIT_PERCENT = (float) 0.2;//最小高度占左边高度的百分比\n\t\n\tprivate Paint mPaint;\n\tprivate float OriginalRightHeight;\n\tprivate float OriginalLeftHeight;\n\tprivate float currentRightHeight;\n\tprivate float currentLeftHeight;\n\tprivate float minHeight;\n\tprivate float maxHeight;\n\tprivate int mStartColor;\n\tprivate int mEndColor;\n\tprivate float mPercent;\n\tprivate float mLimitPercent;\n\tprivate Path mPath;\n\tpublic DynamicRectangleView(Context context) {\n\t    this(context, null);\n\t}\n\t\n\tpublic DynamicRectangleView(Context context, AttributeSet attrs) {\n\t    this(context, attrs, 0);\n\t}\n\tpublic DynamicRectangleView(Context context, AttributeSet attrs, int defStyleAttr) {\n\t    super(context, attrs, defStyleAttr);\n\t    // Retrieve attributes from xml\n\t    final TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.DynamicRectangleView);\n\t    try {\n\t        mPercent = typedArray.getFloat(R.styleable.DynamicRectangleView_fengan_percent, DEFAULT_PERCENT);\n\t        mLimitPercent = typedArray.getFloat(R.styleable.DynamicRectangleView_fengan_percent, DEFAULT_LIMIT_PERCENT);\n\t        mStartColor = typedArray.getColor(R.styleable.DynamicRectangleView_fengan_start_color, DEFAULT_START_COLOR);\n\t        mEndColor = typedArray.getColor(R.styleable.DynamicRectangleView_fengan_end_color, DEFAULT_END_COLOR);\n\t    } finally {\n\t        typedArray.recycle();\n\t    }\n\t    initView(context);\n\t}\n\t\n\tprivate void initView(Context context) {\n\t    mPaint = new Paint();\n\t    mPath = new Path();\n\t    mPaint.setAntiAlias(true);\n\t//        mPaint.setColor(Color.RED);//纯色\n\t}\n\t\n\t@Override\n\tprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n\t    super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n\t}\n\t\n\t@Override\n\tprotected void onSizeChanged(int w, int h, int oldw, int oldh) {\n\t    super.onSizeChanged(w, h, oldw, oldh);\n\t    OriginalLeftHeight = getMeasuredHeight();\n\t    OriginalRightHeight = getMeasuredHeight()*mPercent;\n\t    minHeight = getMeasuredHeight() *mLimitPercent;\n\t    maxHeight = OriginalRightHeight;\n\t    //设置当前高度\n\t    currentRightHeight = OriginalRightHeight;\n\t    currentLeftHeight = OriginalLeftHeight;\n\t    // LinearGradient 第一个参数第二个参数为 起始位置x,y  三四参数为终点位置x,y。\n\t    // 如果x不变则为y轴渐变， y不变则为x轴渐变\n\t    // 第五个参数为颜色渐变，此处为红色渐变为绿色\n\t    // 第七个参数为渐变次数，可repeat\n\t    Shader mShader = new LinearGradient(0, 0, maxHeight, maxHeight,\n\t            new int[]{mStartColor, mEndColor},\n\t            null, Shader.TileMode.CLAMP);\n\t    // Shader.TileMode三种模式\n\t    // REPEAT:沿着渐变方向循环重复\n\t    // CLAMP:如果在预先定义的范围外画的话，就重复边界的颜色\n\t    // MIRROR:与REPEAT一样都是循环重复，但这个会对称重复\n\t    mPaint.setShader(mShader);// 用Shader中定义定义的颜色来话\n\t}\n\t@Override\n\tprotected void onDraw(Canvas canvas) {\n\t    super.onDraw(canvas);\n\t    mPath.reset();\n\t    mPath.moveTo(0, 0);\n\t    mPath.lineTo(getMeasuredWidth(), 0);\n\t    mPath.lineTo(getMeasuredWidth(), currentRightHeight);\n\t    mPath.lineTo(0, currentLeftHeight);\n\t    mPath.close();\n\t    canvas.drawPath(mPath, mPaint);\n\t}\n\t\n\tpublic void setPercent(float percent) {\n\t    Log.e(\"fengan\", \"percent=\" + percent);\n\t    currentRightHeight = OriginalRightHeight * (1 - percent);\n\t    currentLeftHeight = OriginalLeftHeight * (1 - percent);\n\t    if (currentLeftHeight < minHeight) {\n\t        currentLeftHeight = minHeight;\n\t    }\n\t    if (currentRightHeight < minHeight) {\n\t        currentRightHeight = minHeight;\n\t    }\n\t    postInvalidate();\n\t}\n\t}","slug":"随滑动改变的的动态矩形背景","published":1,"updated":"2018-07-19T01:58:21.802Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6nq00461kygyh0e972k","content":"<p>可能看到这个标题有点懵逼,本屌的表达能力有限,最近工作比较清闲,朋友公司正在做到这个效果,所以就帮基友写了一个小Demo.</p>\n<a id=\"more\"></a>\n<h3 id=\"github移步\"><a href=\"#github移步\" class=\"headerlink\" title=\"github移步:\"></a>github移步:</h3><p><a href=\"https://github.com/itfengan/DynamicRectangleView\" target=\"_blank\" rel=\"external\">https://github.com/itfengan/DynamicRectangleView</a></p>\n<h4 id=\"朋友公司需要达到的效果\"><a href=\"#朋友公司需要达到的效果\" class=\"headerlink\" title=\"朋友公司需要达到的效果\"></a>朋友公司需要达到的效果</h4><p><img src=\"http://img.blog.csdn.net/20171011155803164?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmVuZ2FuaXQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h4 id=\"Demo中的效果\"><a href=\"#Demo中的效果\" class=\"headerlink\" title=\"Demo中的效果\"></a>Demo中的效果</h4><p><img src=\"http://img.blog.csdn.net/20171011155905764?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmVuZ2FuaXQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h3 id=\"使用过程\"><a href=\"#使用过程\" class=\"headerlink\" title=\"使用过程\"></a>使用过程</h3><h4 id=\"layout\"><a href=\"#layout\" class=\"headerlink\" title=\"layout\"></a>layout</h4><pre><code>&lt;com.fengan.dynamicrectangledemo.DynamicRectangleView\nandroid:id=&quot;@+id/drv&quot;\nandroid:layout_width=&quot;match_parent&quot;\nandroid:layout_height=&quot;250dp&quot;\napp:fengan_limit_percent=&quot;0.2&quot;\napp:fengan_percent=&quot;0.5&quot;\n&gt;&lt;/com.fengan.dynamicrectangledemo.DynamicRectangleView&gt;\n</code></pre><h4 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h4><pre><code> @Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    SeekBar seekBar = (SeekBar) findViewById(R.id.sb);\n    final DynamicRectangleView dynamicRectangleView = (DynamicRectangleView) findViewById(R.id.drv);\n    seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {\n        @Override\n        public void onProgressChanged(SeekBar seekBar, int i, boolean b) {\n            dynamicRectangleView.setPercent((float)i/100);\n        }\n\n        @Override\n        public void onStartTrackingTouch(SeekBar seekBar) {\n\n        }\n\n        @Override\n        public void onStopTrackingTouch(SeekBar seekBar) {\n\n        }\n    });\n    findViewById(R.id.btn_scrollview).setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View view) {\n            startActivity(new Intent(MainActivity.this,ScrollViewActivity.class));\n        }\n    });\n}\n</code></pre><h4 id=\"attrs-xml\"><a href=\"#attrs-xml\" class=\"headerlink\" title=\"attrs.xml\"></a>attrs.xml</h4><p>(有灵性的哥哥们应该猜得到分别对应的什么意思咯)</p>\n<pre><code>&lt;resources&gt;\n&lt;declare-styleable name=&quot;DynamicRectangleView&quot;&gt;\n    &lt;attr name=&quot;fengan_percent&quot; format=&quot;float&quot;/&gt;\n    &lt;attr name=&quot;fengan_limit_percent&quot; format=&quot;float&quot;/&gt;\n    &lt;attr name=&quot;fengan_start_color&quot; format=&quot;color&quot;/&gt;\n    &lt;attr name=&quot;fengan_end_color&quot; format=&quot;color&quot;/&gt;\n&lt;/declare-styleable&gt;\n&lt;/resources&gt;\n</code></pre><ol>\n<li>fengan_percent:右侧短边占左侧的百分比</li>\n<li>fengan_limit_percent:当滑动到最小的百分比</li>\n<li>fengan_start_color:渐变色的初始颜色(ps:朋友公司效果图是渐变色,当然也可以不需要)</li>\n<li>fengan_end_color:渐变色的终止颜色</li>\n</ol>\n<blockquote>\n<p>DynamicRectangleView.java</p>\n</blockquote>\n<pre><code>package com.fengan.dynamicrectangledemo;\nimport android.content.Context;\nimport android.content.res.TypedArray;\nimport android.graphics.Canvas;\nimport android.graphics.Color;\nimport android.graphics.LinearGradient;\nimport android.graphics.Paint;\nimport android.graphics.Path;\nimport android.graphics.Shader;\nimport android.util.AttributeSet;\nimport android.util.Log;\nimport android.view.View;\n\n/**\n * Created by fengan on 2017/10/11/011.\n */\n public class DynamicRectangleView extends View {\n // Default  values\nprivate final static int DEFAULT_START_COLOR = Color.parseColor(&quot;#88D94600&quot;);\nprivate final static int DEFAULT_END_COLOR = Color.parseColor(&quot;#D94600&quot;);\nprivate final static float DEFAULT_PERCENT = (float) 0.5;//右边高度占左边高度的百分比\nprivate final static float DEFAULT_LIMIT_PERCENT = (float) 0.2;//最小高度占左边高度的百分比\n\nprivate Paint mPaint;\nprivate float OriginalRightHeight;\nprivate float OriginalLeftHeight;\nprivate float currentRightHeight;\nprivate float currentLeftHeight;\nprivate float minHeight;\nprivate float maxHeight;\nprivate int mStartColor;\nprivate int mEndColor;\nprivate float mPercent;\nprivate float mLimitPercent;\nprivate Path mPath;\npublic DynamicRectangleView(Context context) {\n    this(context, null);\n}\n\npublic DynamicRectangleView(Context context, AttributeSet attrs) {\n    this(context, attrs, 0);\n}\npublic DynamicRectangleView(Context context, AttributeSet attrs, int defStyleAttr) {\n    super(context, attrs, defStyleAttr);\n    // Retrieve attributes from xml\n    final TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.DynamicRectangleView);\n    try {\n        mPercent = typedArray.getFloat(R.styleable.DynamicRectangleView_fengan_percent, DEFAULT_PERCENT);\n        mLimitPercent = typedArray.getFloat(R.styleable.DynamicRectangleView_fengan_percent, DEFAULT_LIMIT_PERCENT);\n        mStartColor = typedArray.getColor(R.styleable.DynamicRectangleView_fengan_start_color, DEFAULT_START_COLOR);\n        mEndColor = typedArray.getColor(R.styleable.DynamicRectangleView_fengan_end_color, DEFAULT_END_COLOR);\n    } finally {\n        typedArray.recycle();\n    }\n    initView(context);\n}\n\nprivate void initView(Context context) {\n    mPaint = new Paint();\n    mPath = new Path();\n    mPaint.setAntiAlias(true);\n//        mPaint.setColor(Color.RED);//纯色\n}\n\n@Override\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n    super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n}\n\n@Override\nprotected void onSizeChanged(int w, int h, int oldw, int oldh) {\n    super.onSizeChanged(w, h, oldw, oldh);\n    OriginalLeftHeight = getMeasuredHeight();\n    OriginalRightHeight = getMeasuredHeight()*mPercent;\n    minHeight = getMeasuredHeight() *mLimitPercent;\n    maxHeight = OriginalRightHeight;\n    //设置当前高度\n    currentRightHeight = OriginalRightHeight;\n    currentLeftHeight = OriginalLeftHeight;\n    // LinearGradient 第一个参数第二个参数为 起始位置x,y  三四参数为终点位置x,y。\n    // 如果x不变则为y轴渐变， y不变则为x轴渐变\n    // 第五个参数为颜色渐变，此处为红色渐变为绿色\n    // 第七个参数为渐变次数，可repeat\n    Shader mShader = new LinearGradient(0, 0, maxHeight, maxHeight,\n            new int[]{mStartColor, mEndColor},\n            null, Shader.TileMode.CLAMP);\n    // Shader.TileMode三种模式\n    // REPEAT:沿着渐变方向循环重复\n    // CLAMP:如果在预先定义的范围外画的话，就重复边界的颜色\n    // MIRROR:与REPEAT一样都是循环重复，但这个会对称重复\n    mPaint.setShader(mShader);// 用Shader中定义定义的颜色来话\n}\n@Override\nprotected void onDraw(Canvas canvas) {\n    super.onDraw(canvas);\n    mPath.reset();\n    mPath.moveTo(0, 0);\n    mPath.lineTo(getMeasuredWidth(), 0);\n    mPath.lineTo(getMeasuredWidth(), currentRightHeight);\n    mPath.lineTo(0, currentLeftHeight);\n    mPath.close();\n    canvas.drawPath(mPath, mPaint);\n}\n\npublic void setPercent(float percent) {\n    Log.e(&quot;fengan&quot;, &quot;percent=&quot; + percent);\n    currentRightHeight = OriginalRightHeight * (1 - percent);\n    currentLeftHeight = OriginalLeftHeight * (1 - percent);\n    if (currentLeftHeight &lt; minHeight) {\n        currentLeftHeight = minHeight;\n    }\n    if (currentRightHeight &lt; minHeight) {\n        currentRightHeight = minHeight;\n    }\n    postInvalidate();\n}\n}\n</code></pre>","excerpt":"<p>可能看到这个标题有点懵逼,本屌的表达能力有限,最近工作比较清闲,朋友公司正在做到这个效果,所以就帮基友写了一个小Demo.</p>","more":"<h3 id=\"github移步\"><a href=\"#github移步\" class=\"headerlink\" title=\"github移步:\"></a>github移步:</h3><p><a href=\"https://github.com/itfengan/DynamicRectangleView\">https://github.com/itfengan/DynamicRectangleView</a></p>\n<h4 id=\"朋友公司需要达到的效果\"><a href=\"#朋友公司需要达到的效果\" class=\"headerlink\" title=\"朋友公司需要达到的效果\"></a>朋友公司需要达到的效果</h4><p><img src=\"http://img.blog.csdn.net/20171011155803164?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmVuZ2FuaXQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h4 id=\"Demo中的效果\"><a href=\"#Demo中的效果\" class=\"headerlink\" title=\"Demo中的效果\"></a>Demo中的效果</h4><p><img src=\"http://img.blog.csdn.net/20171011155905764?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmVuZ2FuaXQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h3 id=\"使用过程\"><a href=\"#使用过程\" class=\"headerlink\" title=\"使用过程\"></a>使用过程</h3><h4 id=\"layout\"><a href=\"#layout\" class=\"headerlink\" title=\"layout\"></a>layout</h4><pre><code>&lt;com.fengan.dynamicrectangledemo.DynamicRectangleView\nandroid:id=&quot;@+id/drv&quot;\nandroid:layout_width=&quot;match_parent&quot;\nandroid:layout_height=&quot;250dp&quot;\napp:fengan_limit_percent=&quot;0.2&quot;\napp:fengan_percent=&quot;0.5&quot;\n&gt;&lt;/com.fengan.dynamicrectangledemo.DynamicRectangleView&gt;\n</code></pre><h4 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h4><pre><code> @Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    SeekBar seekBar = (SeekBar) findViewById(R.id.sb);\n    final DynamicRectangleView dynamicRectangleView = (DynamicRectangleView) findViewById(R.id.drv);\n    seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {\n        @Override\n        public void onProgressChanged(SeekBar seekBar, int i, boolean b) {\n            dynamicRectangleView.setPercent((float)i/100);\n        }\n\n        @Override\n        public void onStartTrackingTouch(SeekBar seekBar) {\n\n        }\n\n        @Override\n        public void onStopTrackingTouch(SeekBar seekBar) {\n\n        }\n    });\n    findViewById(R.id.btn_scrollview).setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View view) {\n            startActivity(new Intent(MainActivity.this,ScrollViewActivity.class));\n        }\n    });\n}\n</code></pre><h4 id=\"attrs-xml\"><a href=\"#attrs-xml\" class=\"headerlink\" title=\"attrs.xml\"></a>attrs.xml</h4><p>(有灵性的哥哥们应该猜得到分别对应的什么意思咯)</p>\n<pre><code>&lt;resources&gt;\n&lt;declare-styleable name=&quot;DynamicRectangleView&quot;&gt;\n    &lt;attr name=&quot;fengan_percent&quot; format=&quot;float&quot;/&gt;\n    &lt;attr name=&quot;fengan_limit_percent&quot; format=&quot;float&quot;/&gt;\n    &lt;attr name=&quot;fengan_start_color&quot; format=&quot;color&quot;/&gt;\n    &lt;attr name=&quot;fengan_end_color&quot; format=&quot;color&quot;/&gt;\n&lt;/declare-styleable&gt;\n&lt;/resources&gt;\n</code></pre><ol>\n<li>fengan_percent:右侧短边占左侧的百分比</li>\n<li>fengan_limit_percent:当滑动到最小的百分比</li>\n<li>fengan_start_color:渐变色的初始颜色(ps:朋友公司效果图是渐变色,当然也可以不需要)</li>\n<li>fengan_end_color:渐变色的终止颜色</li>\n</ol>\n<blockquote>\n<p>DynamicRectangleView.java</p>\n</blockquote>\n<pre><code>package com.fengan.dynamicrectangledemo;\nimport android.content.Context;\nimport android.content.res.TypedArray;\nimport android.graphics.Canvas;\nimport android.graphics.Color;\nimport android.graphics.LinearGradient;\nimport android.graphics.Paint;\nimport android.graphics.Path;\nimport android.graphics.Shader;\nimport android.util.AttributeSet;\nimport android.util.Log;\nimport android.view.View;\n\n/**\n * Created by fengan on 2017/10/11/011.\n */\n public class DynamicRectangleView extends View {\n // Default  values\nprivate final static int DEFAULT_START_COLOR = Color.parseColor(&quot;#88D94600&quot;);\nprivate final static int DEFAULT_END_COLOR = Color.parseColor(&quot;#D94600&quot;);\nprivate final static float DEFAULT_PERCENT = (float) 0.5;//右边高度占左边高度的百分比\nprivate final static float DEFAULT_LIMIT_PERCENT = (float) 0.2;//最小高度占左边高度的百分比\n\nprivate Paint mPaint;\nprivate float OriginalRightHeight;\nprivate float OriginalLeftHeight;\nprivate float currentRightHeight;\nprivate float currentLeftHeight;\nprivate float minHeight;\nprivate float maxHeight;\nprivate int mStartColor;\nprivate int mEndColor;\nprivate float mPercent;\nprivate float mLimitPercent;\nprivate Path mPath;\npublic DynamicRectangleView(Context context) {\n    this(context, null);\n}\n\npublic DynamicRectangleView(Context context, AttributeSet attrs) {\n    this(context, attrs, 0);\n}\npublic DynamicRectangleView(Context context, AttributeSet attrs, int defStyleAttr) {\n    super(context, attrs, defStyleAttr);\n    // Retrieve attributes from xml\n    final TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.DynamicRectangleView);\n    try {\n        mPercent = typedArray.getFloat(R.styleable.DynamicRectangleView_fengan_percent, DEFAULT_PERCENT);\n        mLimitPercent = typedArray.getFloat(R.styleable.DynamicRectangleView_fengan_percent, DEFAULT_LIMIT_PERCENT);\n        mStartColor = typedArray.getColor(R.styleable.DynamicRectangleView_fengan_start_color, DEFAULT_START_COLOR);\n        mEndColor = typedArray.getColor(R.styleable.DynamicRectangleView_fengan_end_color, DEFAULT_END_COLOR);\n    } finally {\n        typedArray.recycle();\n    }\n    initView(context);\n}\n\nprivate void initView(Context context) {\n    mPaint = new Paint();\n    mPath = new Path();\n    mPaint.setAntiAlias(true);\n//        mPaint.setColor(Color.RED);//纯色\n}\n\n@Override\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n    super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n}\n\n@Override\nprotected void onSizeChanged(int w, int h, int oldw, int oldh) {\n    super.onSizeChanged(w, h, oldw, oldh);\n    OriginalLeftHeight = getMeasuredHeight();\n    OriginalRightHeight = getMeasuredHeight()*mPercent;\n    minHeight = getMeasuredHeight() *mLimitPercent;\n    maxHeight = OriginalRightHeight;\n    //设置当前高度\n    currentRightHeight = OriginalRightHeight;\n    currentLeftHeight = OriginalLeftHeight;\n    // LinearGradient 第一个参数第二个参数为 起始位置x,y  三四参数为终点位置x,y。\n    // 如果x不变则为y轴渐变， y不变则为x轴渐变\n    // 第五个参数为颜色渐变，此处为红色渐变为绿色\n    // 第七个参数为渐变次数，可repeat\n    Shader mShader = new LinearGradient(0, 0, maxHeight, maxHeight,\n            new int[]{mStartColor, mEndColor},\n            null, Shader.TileMode.CLAMP);\n    // Shader.TileMode三种模式\n    // REPEAT:沿着渐变方向循环重复\n    // CLAMP:如果在预先定义的范围外画的话，就重复边界的颜色\n    // MIRROR:与REPEAT一样都是循环重复，但这个会对称重复\n    mPaint.setShader(mShader);// 用Shader中定义定义的颜色来话\n}\n@Override\nprotected void onDraw(Canvas canvas) {\n    super.onDraw(canvas);\n    mPath.reset();\n    mPath.moveTo(0, 0);\n    mPath.lineTo(getMeasuredWidth(), 0);\n    mPath.lineTo(getMeasuredWidth(), currentRightHeight);\n    mPath.lineTo(0, currentLeftHeight);\n    mPath.close();\n    canvas.drawPath(mPath, mPaint);\n}\n\npublic void setPercent(float percent) {\n    Log.e(&quot;fengan&quot;, &quot;percent=&quot; + percent);\n    currentRightHeight = OriginalRightHeight * (1 - percent);\n    currentLeftHeight = OriginalLeftHeight * (1 - percent);\n    if (currentLeftHeight &lt; minHeight) {\n        currentLeftHeight = minHeight;\n    }\n    if (currentRightHeight &lt; minHeight) {\n        currentRightHeight = minHeight;\n    }\n    postInvalidate();\n}\n}\n</code></pre>"},{"title":"谈谈线程池","date":"2016-12-25T07:52:32.000Z","_content":"\n线程池有关知识整理\n\n<!--more-->\n\n#### 前置知识\n\n线程基本概念，[线程基本概念](http://blog.csdn.net/cswhale/article/details/39053857)和[Android启动线程的三种方式](https://www.cnblogs.com/propheterLiu/p/6082666.html)(点击查看)\n\n#### new Thread（）的弊端\n\n- 总是new Thread（）开启线程，线程执行完会被回收，导致频繁的[GC](https://www.jianshu.com/p/5db05db4f5ab)\n- 多线程缺乏统一管理，各线程之间互相竞争\n- 无法实现停止线程（如果一个item滑出页面，则要停止该item上图片的加载，但是如果使用这种方式来创建线程，则无法实现线程停止执行）\n\n#### 使用线程池的好处\n\n- 提高线程的复用性，避免频繁创建线程进而导致频繁的GC\n- 控制线程并发数，合理利用资源\n- 线程可控性，比如可以定时执行和取消执行某个线程的任务\n\n#### 线程池的实现\n\n- Android中的线程池其实源于Java，Android开发中线程池的使用和Java中线程池的使用基本一致\n- Java中和线程有关的东东叫做Executor，Executor本身是一个接口\n- 这个接口有一个非常有用的实现类叫做ThreadPoolExecutor\n- Android中常用的线程池**都是通过对ThreadPoolExecutor**进行不同配置来实现的\n\n**类的继承结构**\n\nWindows：Ctrl+H\n\nMac：Control+H\n\n![类的继承结构](https://ws1.sinaimg.cn/large/006tKfTcgy1fmt3dofim9j311o0fqtc9.jpg)\n\n#### 关于ThreadPoolExecutor\n\nThreadPoolExecutor有四个重载的构造方法，我们这里来说说参数最多的那一个重载的构造方法，这样大家就知道其他方法参数的含义了\n\n构造函数源码：\n\n```java\n/**\n * Creates a new {@code ThreadPoolExecutor} with the given initial\n * parameters and default thread factory.\n *\n * @param corePoolSize the number of threads to keep in the pool, even\n *        if they are idle, unless {@code allowCoreThreadTimeOut} is set\n * @param maximumPoolSize the maximum number of threads to allow in the\n *        pool\n * @param keepAliveTime when the number of threads is greater than\n *        the core, this is the maximum time that excess idle threads\n *        will wait for new tasks before terminating.\n * @param unit the time unit for the {@code keepAliveTime} argument\n * @param workQueue the queue to use for holding tasks before they are\n *        executed.  This queue will hold only the {@code Runnable}\n *        tasks submitted by the {@code execute} method.\n * @param handler the handler to use when execution is blocked\n *        because the thread bounds and queue capacities are reached\n * @throws IllegalArgumentException if one of the following holds:<br>\n *         {@code corePoolSize < 0}<br>\n *         {@code keepAliveTime < 0}<br>\n *         {@code maximumPoolSize <= 0}<br>\n *         {@code maximumPoolSize < corePoolSize}\n * @throws NullPointerException if {@code workQueue}\n *         or {@code handler} is null\n */\npublic ThreadPoolExecutor(int corePoolSize,\n                          int maximumPoolSize,\n                          long keepAliveTime,\n                          TimeUnit unit,\n                          BlockingQueue<Runnable> workQueue,\n                          RejectedExecutionHandler handler) {\n    this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,\n         Executors.defaultThreadFactory(), handler);\n}\n\n/**\n * Creates a new {@code ThreadPoolExecutor} with the given initial\n * parameters.\n *\n * @param corePoolSize the number of threads to keep in the pool, even\n *        if they are idle, unless {@code allowCoreThreadTimeOut} is set\n * @param maximumPoolSize the maximum number of threads to allow in the\n *        pool\n * @param keepAliveTime when the number of threads is greater than\n *        the core, this is the maximum time that excess idle threads\n *        will wait for new tasks before terminating.\n * @param unit the time unit for the {@code keepAliveTime} argument\n * @param workQueue the queue to use for holding tasks before they are\n *        executed.  This queue will hold only the {@code Runnable}\n *        tasks submitted by the {@code execute} method.\n * @param threadFactory the factory to use when the executor\n *        creates a new thread\n * @param handler the handler to use when execution is blocked\n *        because the thread bounds and queue capacities are reached\n * @throws IllegalArgumentException if one of the following holds:<br>\n *         {@code corePoolSize < 0}<br>\n *         {@code keepAliveTime < 0}<br>\n *         {@code maximumPoolSize <= 0}<br>\n *         {@code maximumPoolSize < corePoolSize}\n * @throws NullPointerException if {@code workQueue}\n *         or {@code threadFactory} or {@code handler} is null\n */\npublic ThreadPoolExecutor(int corePoolSize,\n                          int maximumPoolSize,\n                          long keepAliveTime,\n                          TimeUnit unit,\n                          BlockingQueue<Runnable> workQueue,\n                          ThreadFactory threadFactory,\n                          RejectedExecutionHandler handler) {\n    if (corePoolSize < 0 ||\n        maximumPoolSize <= 0 ||\n        maximumPoolSize < corePoolSize ||\n        keepAliveTime < 0)\n        throw new IllegalArgumentException();\n    if (workQueue == null || threadFactory == null || handler == null)\n        throw new NullPointerException();\n    this.corePoolSize = corePoolSize;\n    this.maximumPoolSize = maximumPoolSize;\n    this.workQueue = workQueue;\n    this.keepAliveTime = unit.toNanos(keepAliveTime);\n    this.threadFactory = threadFactory;\n    this.handler = handler;\n}\n```\n\n**这里是7个参数(我们在开发中用的更多的是5个参数的构造方法)，OK，那我们来看看这里七个参数的含义：**\n\n1. **corePoolSize**：核心线程的数量\n2. **maximumPoolSize**：最大线程数量\n3. **keepAliveTime**：非核心线程的超时时长，当系统中**非核心线程闲置时间超过**keepAliveTime之后，则会**被回收**。如果ThreadPoolExecutor的allowCoreThreadTimeOut属性设置为true，则该参数也表示核心线程的超时时长\n4. **unit**：第三个参数的单位，有纳秒、微秒、毫秒、秒、分、时、天等\n5. **workQueue**：线程池中的任务队列，该队列存储已经被提交，但是尚未执行的任务，存储在这里的任务是由ThreadPoolExecutor的execute方法提交来的。\n6. **threadFactory**  为线程池提供创建新线程的功能，这个我们一般**使用默认即可**\n7. **handler** 拒绝策略，当线程无法执行新任务时（一般是由于线程池中的线程数量已经达到最大数或者线程池关闭导致的），默认情况下，当线程池无法处理新线程时，会抛出一个RejectedExecutionException。\n\n**关于workQueue**\n\n- workQueue是一个BlockingQueue类型\n- BlockingQueue是一个特殊的队列\n- 从BlockingQueue中取数据时，\n  - 如果BlockingQueue是空的，则取数据的操作会进入到阻塞状态\n  - 当BlockingQueue中有了新数据时，这个取数据的操作又会被重新唤醒\n  - 如果BlockingQueue中的数据已经满了，往BlockingQueue中存数据的操作又会进入阻塞状态(直到BlockingQueue中又有新的空间，存数据的操作又会被冲洗唤醒\n- BlockingQueue的种类\n  - **ArrayBlockingQueue**:这个表示一个**规定了大小**的BlockingQueue，ArrayBlockingQueue的构造函数接受一个int类型的数据，该数据表示BlockingQueue的大小，存储在ArrayBlockingQueue中的元素按照FIFO（先进先出）的方式来进行存取。\n  - **LinkedBlockingQueue**:这个表示一个大小不确定的BlockingQueue，在LinkedBlockingQueue的构造方法中可以传一个int类型的数据，这样创建出来的LinkedBlockingQueue是有大小的，也可以不传，不传的话，LinkedBlockingQueue的大小就为Integer.MAX_VALUE\n  - **PriorityBlockingQueue**:这个队列和LinkedBlockingQueue类似，不同的是PriorityBlockingQueue中的元素不是按照FIFO来排序的，而是按照元素的Comparator来决定存取顺序的（这个功能也反映了存入PriorityBlockingQueue中的数据必须实现了Comparator接口）。\n  - **SynchronousQueue**:这个是同步Queue，属于线程安全的BlockingQueue的一种，在SynchronousQueue中，生产者线程的插入操作必须要等待消费者线程的移除操作，Synchronous内部没有数据缓存空间，因此我们无法对SynchronousQueue进行读取或者遍历其中的数据，元素只有在你试图取走的时候才有可能存在。我们可以理解为生产者和消费者互相等待，等到对方之后然后再一起离开。\n\n#### ThreadPoolExecuto线程池执行任务时：\n\n**execute一个线程之后**：\n\n- 如果线程池中的线程数未达到核心线程数，则会立马启用一个核心线程去执行\n- 如果线程池中的线程数已经达到核心线程数，且workQueue未满，则将新线程放入workQueue中等待执行\n- 如果线程池中的线程数已经达到核心线程数但未超过非核心线程数，且workQueue已满，则开启一个非核心线程来执行任务\n- 如果线程池中的线程数已经超过非核心线程数，则拒绝执行该任务\n\n#### 如何配置这些参数（参考AsycTask）\n\n\n\n![类的继承结构](https://ws1.sinaimg.cn/large/006tKfTcgy1fmt4c3mgklj31eq15kdqq.jpg)\n\n- 核心线程数为手机CPU数量+1（cpu数量获取方式Runtime.getRuntime().availableProcessors()）\n- 最大线程数为手机CPU数量×2+1\n- 线程队列的大小为128\n\n#### <span id=\"jumpback\">系统帮我们配置好的线程池</span>[四种对比](#jump)\n\n- FixedThreadPool\n\n  - 核心线程数量固定的线程池\n\n  - ```java\n    ExecutorService fixedThreadPool = Executors.newFixedThreadPool(3);\n    ```\n\n\n  - 源码：\n\n  ```java\n  public static ExecutorService newFixedThreadPool(int nThreads) {\n      return new ThreadPoolExecutor(nThreads, nThreads,\n                                    0L, TimeUnit.MILLISECONDS,\n                                    new LinkedBlockingQueue<Runnable>());\n  }\n  ```\n\n  - 核心线程数和最大线程数一样\n  - FixedThreadPool中没有非核心线程，所有的线程都是核心线程\n  - 线程的超时时间为0\n  - 核心线程即使在没有任务可执行的时候也不会被销毁（这样可让FixedThreadPool更快速的响应请求）\n  - LinkedBlockingQueue却没有参数，这说明线程队列的大小为Integer.MAX_VALUE（2的31次方减1)\n  - 所有的核心线程都在执行任务的时候，新的任务只能进入线程队列中进行等待，直到有线程被空闲出来\n\n- SingleThreadExecutor\n\n  - singleThreadExecutor和FixedThreadPool很像，不同的就是SingleThreadExecutor的核心线程数只有1\n\n  -  ​\n\n    ```java\n      public static ExecutorService newSingleThreadExecutor() {\n            return new FinalizableDelegatedExecutorService\n                (new ThreadPoolExecutor(1, 1,\n                                        0L, TimeUnit.MILLISECONDS,\n                                        new LinkedBlockingQueue<Runnable>()));\n        }\n    ```\n\n  - 最大好处就是可以避免我们去处理线程同步问题\n\n  - 只有一个核心线程，确保所有任务都在同一线程中按顺序完成。因此不需要处理线程同步的问题。\n\n  - FixedThreadPool的参数传个1效果一样\n\n- CachedThreadPool\n\n  - 最大的优势是它可以根据程序的运行情况自动来调整线程池中的线程数量\n\n  - ```java\n    public static ExecutorService newCachedThreadPool() {\n        return new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n                                      60L, TimeUnit.SECONDS,\n                                      new SynchronousQueue<Runnable>());\n    }\n    ```\n\n  - CachedThreadPool中是没有核心线程的，但是它的最大线程数却为Integer.MAX_VALUE\n\n  - 它是有线程超时机制的，超时时间为60秒\n\n  - 最大线程数为无限大\n\n  - 添加一个新任务进来的时候，如果线程池中有空闲的线程，则由该空闲的线程执行新任务\n\n  - 没有空闲线程，则创建新线程来执行任务\n\n  - CachedThreadPool中没有新任务的时候，它里边所有的线程都会因为超时而被终止\n\n  - 任务队列SynchronousQueue相当于一个空集合，导致任何任务都会被立即执行\n\n  - 可以在有大量任务请求的时候使用CachedThreadPool\n\n- ScheduleThreadPool\n\n  - 具有定时定期执行任务功能的线程池\n\n  - ```java\n    public ScheduledThreadPoolExecutor(int corePoolSize) {\n        super(corePoolSize, Integer.MAX_VALUE,\n              DEFAULT_KEEPALIVE_MILLIS, MILLISECONDS,\n              new DelayedWorkQueue());\n    }\n\n    ```\n\n\n  - 核心线程数量是固定的\n  - 非核心线程是无穷大,当非核心线程闲置时，则会被立即回收。\n  - 支持延迟执行任务；定时执行任务；延迟定时执行任务\n\n#### 线程池的其他功能\n\n1. **shutDown（）**：关闭线程池，不影响已经提交的任务\n2. **shutDownNow（）**：关闭线程池，并尝试终止正在执行的线程\n3. **allowCoreThreadTimeOut(boolean value)**：允许核心线程闲置超时被回收\n4. **submit**：一般情况下我们使用execute来提交任务，但是有时候可能也会用到submit，使用submit的好处是submit有返回值\n\n#### 线程池简单封装\n\nThreadPoolManager.java\n\n```java\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\n\n\n/**\n * Created by fengan on 2017/12/25.\n * email:fengan1102@gmail.com\n */\n\npublic class ThreadPoolManager {\n    private static ThreadPoolManager Instance;\n    private final ThreadPoolExecutor threadPoolExecutor;\n\n    private ThreadPoolManager() {\n//核心线程数量\n//最大线程数量\n//非核心线程的超时时长\n//时间单位\n//缓冲队列，用于存放等待任务，Linked的先进先出\n//创建线程的工厂\n//用来对超出maximumPoolSize的任务的处理策略\n        threadPoolExecutor = new ThreadPoolExecutor(corePoolSize,//核心线程数量\n                maximumPoolSize,//最大线程数量\n                keepAliveTime,//非核心线程的超时时长\n                unit,//时间单位\n                new LinkedBlockingQueue<Runnable>(),//缓冲队列，用于存放等待任务，Linked的先进先出\n                Executors.defaultThreadFactory(), //创建线程的工厂\n                new ThreadPoolExecutor.AbortPolicy() //用来对超出maximumPoolSize的任务的处理策略\n        );\n        threadPoolExecutor.allowCoreThreadTimeOut(true);//设置核心线程超时时间可用\n    }\n\n    public static ThreadPoolManager getInstance() {\n        if (Instance == null) {\n            synchronized (ThreadPoolManager.class) {\n                if (Instance == null) {\n                    Instance = new ThreadPoolManager();\n                }\n            }\n        }\n        return Instance;\n    }\n\n    //当前设备可用处理器核心数*2 + 1,能够让cpu的效率得到最大程度执行（有研究论证的）\n    private final int corePoolSize = Runtime.getRuntime().availableProcessors() * 2 + 1;\n    //最大线程数等于核心线程数\n    private final int maximumPoolSize = corePoolSize;\n    //超时时间，1小时\n    private final long keepAliveTime = 1;\n    private final TimeUnit unit = TimeUnit.HOURS;\n\n\n    /**\n     * 执行任务\n     */\n    public void execute(Runnable runnable) {\n        if (runnable == null) return;\n\n        threadPoolExecutor.execute(runnable);\n    }\n\n    /**\n     * 从线程池中移除任务\n     */\n    public void remove(Runnable runnable) {\n        if (runnable == null) return;\n\n        threadPoolExecutor.remove(runnable);\n\n    }\n}\n```\n\n#### <span id=\"jump\">再次比较四种常见的线程池</span>[详细比较](#jumpback)\n\n**不管哪种线程池，都是靠ThreadPoolExecutor的七个参数的构造来实现的**\n\n|                                          | 核心线程 | 最大线程              |              | 特点                       |\n| ---------------------------------------- | ---- | ----------------- | ------------ | ------------------------ |\n| <font color=red >FixThreadPool</font>    | 有    | 无（非核心线程）          | 不会被回收        | 只有固定数量的核心线程，线程都活动时，新任务等待 |\n| <font color=red >SingleThreadPool</font> | 1    | 无（非核心线程）          | 不会被回收        | 所有任务都在统一线程执行，不需要处理线程同步问题 |\n| <font color=red >CachedThreadPool</font> | 无    | Integer.MAX_VALUE | 超时时间60秒      | 任何任务立即执行                 |\n| <font color=red >ScheduledThreadPool</font> | 有    | Integer.MAX_VALUE | 非核心线程闲置，立即回收 | 可以延迟和定时执行                |\n\n相关资料：\n\n[参考1](http://blog.csdn.net/xiangyunwan/article/details/72550948)\n\n[参考2](http://blog.csdn.net/u012702547/article/details/52259529)\n\n[参考3](http://blog.csdn.net/cswhale/article/details/39053857)\n\n","source":"_posts/谈谈线程池.md","raw":"---\ntitle: 谈谈线程池\ndate: 2016-12-25 15:52:32\ntags: \n- Android\ncategories: Android\n---\n\n线程池有关知识整理\n\n<!--more-->\n\n#### 前置知识\n\n线程基本概念，[线程基本概念](http://blog.csdn.net/cswhale/article/details/39053857)和[Android启动线程的三种方式](https://www.cnblogs.com/propheterLiu/p/6082666.html)(点击查看)\n\n#### new Thread（）的弊端\n\n- 总是new Thread（）开启线程，线程执行完会被回收，导致频繁的[GC](https://www.jianshu.com/p/5db05db4f5ab)\n- 多线程缺乏统一管理，各线程之间互相竞争\n- 无法实现停止线程（如果一个item滑出页面，则要停止该item上图片的加载，但是如果使用这种方式来创建线程，则无法实现线程停止执行）\n\n#### 使用线程池的好处\n\n- 提高线程的复用性，避免频繁创建线程进而导致频繁的GC\n- 控制线程并发数，合理利用资源\n- 线程可控性，比如可以定时执行和取消执行某个线程的任务\n\n#### 线程池的实现\n\n- Android中的线程池其实源于Java，Android开发中线程池的使用和Java中线程池的使用基本一致\n- Java中和线程有关的东东叫做Executor，Executor本身是一个接口\n- 这个接口有一个非常有用的实现类叫做ThreadPoolExecutor\n- Android中常用的线程池**都是通过对ThreadPoolExecutor**进行不同配置来实现的\n\n**类的继承结构**\n\nWindows：Ctrl+H\n\nMac：Control+H\n\n![类的继承结构](https://ws1.sinaimg.cn/large/006tKfTcgy1fmt3dofim9j311o0fqtc9.jpg)\n\n#### 关于ThreadPoolExecutor\n\nThreadPoolExecutor有四个重载的构造方法，我们这里来说说参数最多的那一个重载的构造方法，这样大家就知道其他方法参数的含义了\n\n构造函数源码：\n\n```java\n/**\n * Creates a new {@code ThreadPoolExecutor} with the given initial\n * parameters and default thread factory.\n *\n * @param corePoolSize the number of threads to keep in the pool, even\n *        if they are idle, unless {@code allowCoreThreadTimeOut} is set\n * @param maximumPoolSize the maximum number of threads to allow in the\n *        pool\n * @param keepAliveTime when the number of threads is greater than\n *        the core, this is the maximum time that excess idle threads\n *        will wait for new tasks before terminating.\n * @param unit the time unit for the {@code keepAliveTime} argument\n * @param workQueue the queue to use for holding tasks before they are\n *        executed.  This queue will hold only the {@code Runnable}\n *        tasks submitted by the {@code execute} method.\n * @param handler the handler to use when execution is blocked\n *        because the thread bounds and queue capacities are reached\n * @throws IllegalArgumentException if one of the following holds:<br>\n *         {@code corePoolSize < 0}<br>\n *         {@code keepAliveTime < 0}<br>\n *         {@code maximumPoolSize <= 0}<br>\n *         {@code maximumPoolSize < corePoolSize}\n * @throws NullPointerException if {@code workQueue}\n *         or {@code handler} is null\n */\npublic ThreadPoolExecutor(int corePoolSize,\n                          int maximumPoolSize,\n                          long keepAliveTime,\n                          TimeUnit unit,\n                          BlockingQueue<Runnable> workQueue,\n                          RejectedExecutionHandler handler) {\n    this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,\n         Executors.defaultThreadFactory(), handler);\n}\n\n/**\n * Creates a new {@code ThreadPoolExecutor} with the given initial\n * parameters.\n *\n * @param corePoolSize the number of threads to keep in the pool, even\n *        if they are idle, unless {@code allowCoreThreadTimeOut} is set\n * @param maximumPoolSize the maximum number of threads to allow in the\n *        pool\n * @param keepAliveTime when the number of threads is greater than\n *        the core, this is the maximum time that excess idle threads\n *        will wait for new tasks before terminating.\n * @param unit the time unit for the {@code keepAliveTime} argument\n * @param workQueue the queue to use for holding tasks before they are\n *        executed.  This queue will hold only the {@code Runnable}\n *        tasks submitted by the {@code execute} method.\n * @param threadFactory the factory to use when the executor\n *        creates a new thread\n * @param handler the handler to use when execution is blocked\n *        because the thread bounds and queue capacities are reached\n * @throws IllegalArgumentException if one of the following holds:<br>\n *         {@code corePoolSize < 0}<br>\n *         {@code keepAliveTime < 0}<br>\n *         {@code maximumPoolSize <= 0}<br>\n *         {@code maximumPoolSize < corePoolSize}\n * @throws NullPointerException if {@code workQueue}\n *         or {@code threadFactory} or {@code handler} is null\n */\npublic ThreadPoolExecutor(int corePoolSize,\n                          int maximumPoolSize,\n                          long keepAliveTime,\n                          TimeUnit unit,\n                          BlockingQueue<Runnable> workQueue,\n                          ThreadFactory threadFactory,\n                          RejectedExecutionHandler handler) {\n    if (corePoolSize < 0 ||\n        maximumPoolSize <= 0 ||\n        maximumPoolSize < corePoolSize ||\n        keepAliveTime < 0)\n        throw new IllegalArgumentException();\n    if (workQueue == null || threadFactory == null || handler == null)\n        throw new NullPointerException();\n    this.corePoolSize = corePoolSize;\n    this.maximumPoolSize = maximumPoolSize;\n    this.workQueue = workQueue;\n    this.keepAliveTime = unit.toNanos(keepAliveTime);\n    this.threadFactory = threadFactory;\n    this.handler = handler;\n}\n```\n\n**这里是7个参数(我们在开发中用的更多的是5个参数的构造方法)，OK，那我们来看看这里七个参数的含义：**\n\n1. **corePoolSize**：核心线程的数量\n2. **maximumPoolSize**：最大线程数量\n3. **keepAliveTime**：非核心线程的超时时长，当系统中**非核心线程闲置时间超过**keepAliveTime之后，则会**被回收**。如果ThreadPoolExecutor的allowCoreThreadTimeOut属性设置为true，则该参数也表示核心线程的超时时长\n4. **unit**：第三个参数的单位，有纳秒、微秒、毫秒、秒、分、时、天等\n5. **workQueue**：线程池中的任务队列，该队列存储已经被提交，但是尚未执行的任务，存储在这里的任务是由ThreadPoolExecutor的execute方法提交来的。\n6. **threadFactory**  为线程池提供创建新线程的功能，这个我们一般**使用默认即可**\n7. **handler** 拒绝策略，当线程无法执行新任务时（一般是由于线程池中的线程数量已经达到最大数或者线程池关闭导致的），默认情况下，当线程池无法处理新线程时，会抛出一个RejectedExecutionException。\n\n**关于workQueue**\n\n- workQueue是一个BlockingQueue类型\n- BlockingQueue是一个特殊的队列\n- 从BlockingQueue中取数据时，\n  - 如果BlockingQueue是空的，则取数据的操作会进入到阻塞状态\n  - 当BlockingQueue中有了新数据时，这个取数据的操作又会被重新唤醒\n  - 如果BlockingQueue中的数据已经满了，往BlockingQueue中存数据的操作又会进入阻塞状态(直到BlockingQueue中又有新的空间，存数据的操作又会被冲洗唤醒\n- BlockingQueue的种类\n  - **ArrayBlockingQueue**:这个表示一个**规定了大小**的BlockingQueue，ArrayBlockingQueue的构造函数接受一个int类型的数据，该数据表示BlockingQueue的大小，存储在ArrayBlockingQueue中的元素按照FIFO（先进先出）的方式来进行存取。\n  - **LinkedBlockingQueue**:这个表示一个大小不确定的BlockingQueue，在LinkedBlockingQueue的构造方法中可以传一个int类型的数据，这样创建出来的LinkedBlockingQueue是有大小的，也可以不传，不传的话，LinkedBlockingQueue的大小就为Integer.MAX_VALUE\n  - **PriorityBlockingQueue**:这个队列和LinkedBlockingQueue类似，不同的是PriorityBlockingQueue中的元素不是按照FIFO来排序的，而是按照元素的Comparator来决定存取顺序的（这个功能也反映了存入PriorityBlockingQueue中的数据必须实现了Comparator接口）。\n  - **SynchronousQueue**:这个是同步Queue，属于线程安全的BlockingQueue的一种，在SynchronousQueue中，生产者线程的插入操作必须要等待消费者线程的移除操作，Synchronous内部没有数据缓存空间，因此我们无法对SynchronousQueue进行读取或者遍历其中的数据，元素只有在你试图取走的时候才有可能存在。我们可以理解为生产者和消费者互相等待，等到对方之后然后再一起离开。\n\n#### ThreadPoolExecuto线程池执行任务时：\n\n**execute一个线程之后**：\n\n- 如果线程池中的线程数未达到核心线程数，则会立马启用一个核心线程去执行\n- 如果线程池中的线程数已经达到核心线程数，且workQueue未满，则将新线程放入workQueue中等待执行\n- 如果线程池中的线程数已经达到核心线程数但未超过非核心线程数，且workQueue已满，则开启一个非核心线程来执行任务\n- 如果线程池中的线程数已经超过非核心线程数，则拒绝执行该任务\n\n#### 如何配置这些参数（参考AsycTask）\n\n\n\n![类的继承结构](https://ws1.sinaimg.cn/large/006tKfTcgy1fmt4c3mgklj31eq15kdqq.jpg)\n\n- 核心线程数为手机CPU数量+1（cpu数量获取方式Runtime.getRuntime().availableProcessors()）\n- 最大线程数为手机CPU数量×2+1\n- 线程队列的大小为128\n\n#### <span id=\"jumpback\">系统帮我们配置好的线程池</span>[四种对比](#jump)\n\n- FixedThreadPool\n\n  - 核心线程数量固定的线程池\n\n  - ```java\n    ExecutorService fixedThreadPool = Executors.newFixedThreadPool(3);\n    ```\n\n\n  - 源码：\n\n  ```java\n  public static ExecutorService newFixedThreadPool(int nThreads) {\n      return new ThreadPoolExecutor(nThreads, nThreads,\n                                    0L, TimeUnit.MILLISECONDS,\n                                    new LinkedBlockingQueue<Runnable>());\n  }\n  ```\n\n  - 核心线程数和最大线程数一样\n  - FixedThreadPool中没有非核心线程，所有的线程都是核心线程\n  - 线程的超时时间为0\n  - 核心线程即使在没有任务可执行的时候也不会被销毁（这样可让FixedThreadPool更快速的响应请求）\n  - LinkedBlockingQueue却没有参数，这说明线程队列的大小为Integer.MAX_VALUE（2的31次方减1)\n  - 所有的核心线程都在执行任务的时候，新的任务只能进入线程队列中进行等待，直到有线程被空闲出来\n\n- SingleThreadExecutor\n\n  - singleThreadExecutor和FixedThreadPool很像，不同的就是SingleThreadExecutor的核心线程数只有1\n\n  -  ​\n\n    ```java\n      public static ExecutorService newSingleThreadExecutor() {\n            return new FinalizableDelegatedExecutorService\n                (new ThreadPoolExecutor(1, 1,\n                                        0L, TimeUnit.MILLISECONDS,\n                                        new LinkedBlockingQueue<Runnable>()));\n        }\n    ```\n\n  - 最大好处就是可以避免我们去处理线程同步问题\n\n  - 只有一个核心线程，确保所有任务都在同一线程中按顺序完成。因此不需要处理线程同步的问题。\n\n  - FixedThreadPool的参数传个1效果一样\n\n- CachedThreadPool\n\n  - 最大的优势是它可以根据程序的运行情况自动来调整线程池中的线程数量\n\n  - ```java\n    public static ExecutorService newCachedThreadPool() {\n        return new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n                                      60L, TimeUnit.SECONDS,\n                                      new SynchronousQueue<Runnable>());\n    }\n    ```\n\n  - CachedThreadPool中是没有核心线程的，但是它的最大线程数却为Integer.MAX_VALUE\n\n  - 它是有线程超时机制的，超时时间为60秒\n\n  - 最大线程数为无限大\n\n  - 添加一个新任务进来的时候，如果线程池中有空闲的线程，则由该空闲的线程执行新任务\n\n  - 没有空闲线程，则创建新线程来执行任务\n\n  - CachedThreadPool中没有新任务的时候，它里边所有的线程都会因为超时而被终止\n\n  - 任务队列SynchronousQueue相当于一个空集合，导致任何任务都会被立即执行\n\n  - 可以在有大量任务请求的时候使用CachedThreadPool\n\n- ScheduleThreadPool\n\n  - 具有定时定期执行任务功能的线程池\n\n  - ```java\n    public ScheduledThreadPoolExecutor(int corePoolSize) {\n        super(corePoolSize, Integer.MAX_VALUE,\n              DEFAULT_KEEPALIVE_MILLIS, MILLISECONDS,\n              new DelayedWorkQueue());\n    }\n\n    ```\n\n\n  - 核心线程数量是固定的\n  - 非核心线程是无穷大,当非核心线程闲置时，则会被立即回收。\n  - 支持延迟执行任务；定时执行任务；延迟定时执行任务\n\n#### 线程池的其他功能\n\n1. **shutDown（）**：关闭线程池，不影响已经提交的任务\n2. **shutDownNow（）**：关闭线程池，并尝试终止正在执行的线程\n3. **allowCoreThreadTimeOut(boolean value)**：允许核心线程闲置超时被回收\n4. **submit**：一般情况下我们使用execute来提交任务，但是有时候可能也会用到submit，使用submit的好处是submit有返回值\n\n#### 线程池简单封装\n\nThreadPoolManager.java\n\n```java\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\n\n\n/**\n * Created by fengan on 2017/12/25.\n * email:fengan1102@gmail.com\n */\n\npublic class ThreadPoolManager {\n    private static ThreadPoolManager Instance;\n    private final ThreadPoolExecutor threadPoolExecutor;\n\n    private ThreadPoolManager() {\n//核心线程数量\n//最大线程数量\n//非核心线程的超时时长\n//时间单位\n//缓冲队列，用于存放等待任务，Linked的先进先出\n//创建线程的工厂\n//用来对超出maximumPoolSize的任务的处理策略\n        threadPoolExecutor = new ThreadPoolExecutor(corePoolSize,//核心线程数量\n                maximumPoolSize,//最大线程数量\n                keepAliveTime,//非核心线程的超时时长\n                unit,//时间单位\n                new LinkedBlockingQueue<Runnable>(),//缓冲队列，用于存放等待任务，Linked的先进先出\n                Executors.defaultThreadFactory(), //创建线程的工厂\n                new ThreadPoolExecutor.AbortPolicy() //用来对超出maximumPoolSize的任务的处理策略\n        );\n        threadPoolExecutor.allowCoreThreadTimeOut(true);//设置核心线程超时时间可用\n    }\n\n    public static ThreadPoolManager getInstance() {\n        if (Instance == null) {\n            synchronized (ThreadPoolManager.class) {\n                if (Instance == null) {\n                    Instance = new ThreadPoolManager();\n                }\n            }\n        }\n        return Instance;\n    }\n\n    //当前设备可用处理器核心数*2 + 1,能够让cpu的效率得到最大程度执行（有研究论证的）\n    private final int corePoolSize = Runtime.getRuntime().availableProcessors() * 2 + 1;\n    //最大线程数等于核心线程数\n    private final int maximumPoolSize = corePoolSize;\n    //超时时间，1小时\n    private final long keepAliveTime = 1;\n    private final TimeUnit unit = TimeUnit.HOURS;\n\n\n    /**\n     * 执行任务\n     */\n    public void execute(Runnable runnable) {\n        if (runnable == null) return;\n\n        threadPoolExecutor.execute(runnable);\n    }\n\n    /**\n     * 从线程池中移除任务\n     */\n    public void remove(Runnable runnable) {\n        if (runnable == null) return;\n\n        threadPoolExecutor.remove(runnable);\n\n    }\n}\n```\n\n#### <span id=\"jump\">再次比较四种常见的线程池</span>[详细比较](#jumpback)\n\n**不管哪种线程池，都是靠ThreadPoolExecutor的七个参数的构造来实现的**\n\n|                                          | 核心线程 | 最大线程              |              | 特点                       |\n| ---------------------------------------- | ---- | ----------------- | ------------ | ------------------------ |\n| <font color=red >FixThreadPool</font>    | 有    | 无（非核心线程）          | 不会被回收        | 只有固定数量的核心线程，线程都活动时，新任务等待 |\n| <font color=red >SingleThreadPool</font> | 1    | 无（非核心线程）          | 不会被回收        | 所有任务都在统一线程执行，不需要处理线程同步问题 |\n| <font color=red >CachedThreadPool</font> | 无    | Integer.MAX_VALUE | 超时时间60秒      | 任何任务立即执行                 |\n| <font color=red >ScheduledThreadPool</font> | 有    | Integer.MAX_VALUE | 非核心线程闲置，立即回收 | 可以延迟和定时执行                |\n\n相关资料：\n\n[参考1](http://blog.csdn.net/xiangyunwan/article/details/72550948)\n\n[参考2](http://blog.csdn.net/u012702547/article/details/52259529)\n\n[参考3](http://blog.csdn.net/cswhale/article/details/39053857)\n\n","slug":"谈谈线程池","published":1,"updated":"2018-07-19T02:07:56.933Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6ny004i1kygyvb7o6s6","content":"<p>线程池有关知识整理</p>\n<a id=\"more\"></a>\n<h4 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h4><p>线程基本概念，<a href=\"http://blog.csdn.net/cswhale/article/details/39053857\" target=\"_blank\" rel=\"external\">线程基本概念</a>和<a href=\"https://www.cnblogs.com/propheterLiu/p/6082666.html\" target=\"_blank\" rel=\"external\">Android启动线程的三种方式</a>(点击查看)</p>\n<h4 id=\"new-Thread（）的弊端\"><a href=\"#new-Thread（）的弊端\" class=\"headerlink\" title=\"new Thread（）的弊端\"></a>new Thread（）的弊端</h4><ul>\n<li>总是new Thread（）开启线程，线程执行完会被回收，导致频繁的<a href=\"https://www.jianshu.com/p/5db05db4f5ab\" target=\"_blank\" rel=\"external\">GC</a></li>\n<li>多线程缺乏统一管理，各线程之间互相竞争</li>\n<li>无法实现停止线程（如果一个item滑出页面，则要停止该item上图片的加载，但是如果使用这种方式来创建线程，则无法实现线程停止执行）</li>\n</ul>\n<h4 id=\"使用线程池的好处\"><a href=\"#使用线程池的好处\" class=\"headerlink\" title=\"使用线程池的好处\"></a>使用线程池的好处</h4><ul>\n<li>提高线程的复用性，避免频繁创建线程进而导致频繁的GC</li>\n<li>控制线程并发数，合理利用资源</li>\n<li>线程可控性，比如可以定时执行和取消执行某个线程的任务</li>\n</ul>\n<h4 id=\"线程池的实现\"><a href=\"#线程池的实现\" class=\"headerlink\" title=\"线程池的实现\"></a>线程池的实现</h4><ul>\n<li>Android中的线程池其实源于Java，Android开发中线程池的使用和Java中线程池的使用基本一致</li>\n<li>Java中和线程有关的东东叫做Executor，Executor本身是一个接口</li>\n<li>这个接口有一个非常有用的实现类叫做ThreadPoolExecutor</li>\n<li>Android中常用的线程池<strong>都是通过对ThreadPoolExecutor</strong>进行不同配置来实现的</li>\n</ul>\n<p><strong>类的继承结构</strong></p>\n<p>Windows：Ctrl+H</p>\n<p>Mac：Control+H</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tKfTcgy1fmt3dofim9j311o0fqtc9.jpg\" alt=\"类的继承结构\"></p>\n<h4 id=\"关于ThreadPoolExecutor\"><a href=\"#关于ThreadPoolExecutor\" class=\"headerlink\" title=\"关于ThreadPoolExecutor\"></a>关于ThreadPoolExecutor</h4><p>ThreadPoolExecutor有四个重载的构造方法，我们这里来说说参数最多的那一个重载的构造方法，这样大家就知道其他方法参数的含义了</p>\n<p>构造函数源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Creates a new &#123;<span class=\"doctag\">@code</span> ThreadPoolExecutor&#125; with the given initial</div><div class=\"line\"> * parameters and default thread factory.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> corePoolSize the number of threads to keep in the pool, even</div><div class=\"line\"> *        if they are idle, unless &#123;<span class=\"doctag\">@code</span> allowCoreThreadTimeOut&#125; is set</div><div class=\"line\"> * <span class=\"doctag\">@param</span> maximumPoolSize the maximum number of threads to allow in the</div><div class=\"line\"> *        pool</div><div class=\"line\"> * <span class=\"doctag\">@param</span> keepAliveTime when the number of threads is greater than</div><div class=\"line\"> *        the core, this is the maximum time that excess idle threads</div><div class=\"line\"> *        will wait for new tasks before terminating.</div><div class=\"line\"> * <span class=\"doctag\">@param</span> unit the time unit for the &#123;<span class=\"doctag\">@code</span> keepAliveTime&#125; argument</div><div class=\"line\"> * <span class=\"doctag\">@param</span> workQueue the queue to use for holding tasks before they are</div><div class=\"line\"> *        executed.  This queue will hold only the &#123;<span class=\"doctag\">@code</span> Runnable&#125;</div><div class=\"line\"> *        tasks submitted by the &#123;<span class=\"doctag\">@code</span> execute&#125; method.</div><div class=\"line\"> * <span class=\"doctag\">@param</span> handler the handler to use when execution is blocked</div><div class=\"line\"> *        because the thread bounds and queue capacities are reached</div><div class=\"line\"> * <span class=\"doctag\">@throws</span> IllegalArgumentException if one of the following holds:&lt;br&gt;</div><div class=\"line\"> *         &#123;<span class=\"doctag\">@code</span> corePoolSize &lt; 0&#125;&lt;br&gt;</div><div class=\"line\"> *         &#123;<span class=\"doctag\">@code</span> keepAliveTime &lt; 0&#125;&lt;br&gt;</div><div class=\"line\"> *         &#123;<span class=\"doctag\">@code</span> maximumPoolSize &lt;= 0&#125;&lt;br&gt;</div><div class=\"line\"> *         &#123;<span class=\"doctag\">@code</span> maximumPoolSize &lt; corePoolSize&#125;</div><div class=\"line\"> * <span class=\"doctag\">@throws</span> NullPointerException if &#123;<span class=\"doctag\">@code</span> workQueue&#125;</div><div class=\"line\"> *         or &#123;<span class=\"doctag\">@code</span> handler&#125; is null</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,</span></span></div><div class=\"line\">                          <span class=\"keyword\">int</span> maximumPoolSize,</div><div class=\"line\">                          <span class=\"keyword\">long</span> keepAliveTime,</div><div class=\"line\">                          TimeUnit unit,</div><div class=\"line\">                          BlockingQueue&lt;Runnable&gt; workQueue,</div><div class=\"line\">                          RejectedExecutionHandler handler) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</div><div class=\"line\">         Executors.defaultThreadFactory(), handler);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Creates a new &#123;<span class=\"doctag\">@code</span> ThreadPoolExecutor&#125; with the given initial</div><div class=\"line\"> * parameters.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> corePoolSize the number of threads to keep in the pool, even</div><div class=\"line\"> *        if they are idle, unless &#123;<span class=\"doctag\">@code</span> allowCoreThreadTimeOut&#125; is set</div><div class=\"line\"> * <span class=\"doctag\">@param</span> maximumPoolSize the maximum number of threads to allow in the</div><div class=\"line\"> *        pool</div><div class=\"line\"> * <span class=\"doctag\">@param</span> keepAliveTime when the number of threads is greater than</div><div class=\"line\"> *        the core, this is the maximum time that excess idle threads</div><div class=\"line\"> *        will wait for new tasks before terminating.</div><div class=\"line\"> * <span class=\"doctag\">@param</span> unit the time unit for the &#123;<span class=\"doctag\">@code</span> keepAliveTime&#125; argument</div><div class=\"line\"> * <span class=\"doctag\">@param</span> workQueue the queue to use for holding tasks before they are</div><div class=\"line\"> *        executed.  This queue will hold only the &#123;<span class=\"doctag\">@code</span> Runnable&#125;</div><div class=\"line\"> *        tasks submitted by the &#123;<span class=\"doctag\">@code</span> execute&#125; method.</div><div class=\"line\"> * <span class=\"doctag\">@param</span> threadFactory the factory to use when the executor</div><div class=\"line\"> *        creates a new thread</div><div class=\"line\"> * <span class=\"doctag\">@param</span> handler the handler to use when execution is blocked</div><div class=\"line\"> *        because the thread bounds and queue capacities are reached</div><div class=\"line\"> * <span class=\"doctag\">@throws</span> IllegalArgumentException if one of the following holds:&lt;br&gt;</div><div class=\"line\"> *         &#123;<span class=\"doctag\">@code</span> corePoolSize &lt; 0&#125;&lt;br&gt;</div><div class=\"line\"> *         &#123;<span class=\"doctag\">@code</span> keepAliveTime &lt; 0&#125;&lt;br&gt;</div><div class=\"line\"> *         &#123;<span class=\"doctag\">@code</span> maximumPoolSize &lt;= 0&#125;&lt;br&gt;</div><div class=\"line\"> *         &#123;<span class=\"doctag\">@code</span> maximumPoolSize &lt; corePoolSize&#125;</div><div class=\"line\"> * <span class=\"doctag\">@throws</span> NullPointerException if &#123;<span class=\"doctag\">@code</span> workQueue&#125;</div><div class=\"line\"> *         or &#123;<span class=\"doctag\">@code</span> threadFactory&#125; or &#123;<span class=\"doctag\">@code</span> handler&#125; is null</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,</span></span></div><div class=\"line\">                          <span class=\"keyword\">int</span> maximumPoolSize,</div><div class=\"line\">                          <span class=\"keyword\">long</span> keepAliveTime,</div><div class=\"line\">                          TimeUnit unit,</div><div class=\"line\">                          BlockingQueue&lt;Runnable&gt; workQueue,</div><div class=\"line\">                          ThreadFactory threadFactory,</div><div class=\"line\">                          RejectedExecutionHandler handler) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (corePoolSize &lt; <span class=\"number\">0</span> ||</div><div class=\"line\">        maximumPoolSize &lt;= <span class=\"number\">0</span> ||</div><div class=\"line\">        maximumPoolSize &lt; corePoolSize ||</div><div class=\"line\">        keepAliveTime &lt; <span class=\"number\">0</span>)</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException();</div><div class=\"line\">    <span class=\"keyword\">if</span> (workQueue == <span class=\"keyword\">null</span> || threadFactory == <span class=\"keyword\">null</span> || handler == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</div><div class=\"line\">    <span class=\"keyword\">this</span>.corePoolSize = corePoolSize;</div><div class=\"line\">    <span class=\"keyword\">this</span>.maximumPoolSize = maximumPoolSize;</div><div class=\"line\">    <span class=\"keyword\">this</span>.workQueue = workQueue;</div><div class=\"line\">    <span class=\"keyword\">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</div><div class=\"line\">    <span class=\"keyword\">this</span>.threadFactory = threadFactory;</div><div class=\"line\">    <span class=\"keyword\">this</span>.handler = handler;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>这里是7个参数(我们在开发中用的更多的是5个参数的构造方法)，OK，那我们来看看这里七个参数的含义：</strong></p>\n<ol>\n<li><strong>corePoolSize</strong>：核心线程的数量</li>\n<li><strong>maximumPoolSize</strong>：最大线程数量</li>\n<li><strong>keepAliveTime</strong>：非核心线程的超时时长，当系统中<strong>非核心线程闲置时间超过</strong>keepAliveTime之后，则会<strong>被回收</strong>。如果ThreadPoolExecutor的allowCoreThreadTimeOut属性设置为true，则该参数也表示核心线程的超时时长</li>\n<li><strong>unit</strong>：第三个参数的单位，有纳秒、微秒、毫秒、秒、分、时、天等</li>\n<li><strong>workQueue</strong>：线程池中的任务队列，该队列存储已经被提交，但是尚未执行的任务，存储在这里的任务是由ThreadPoolExecutor的execute方法提交来的。</li>\n<li><strong>threadFactory</strong>  为线程池提供创建新线程的功能，这个我们一般<strong>使用默认即可</strong></li>\n<li><strong>handler</strong> 拒绝策略，当线程无法执行新任务时（一般是由于线程池中的线程数量已经达到最大数或者线程池关闭导致的），默认情况下，当线程池无法处理新线程时，会抛出一个RejectedExecutionException。</li>\n</ol>\n<p><strong>关于workQueue</strong></p>\n<ul>\n<li>workQueue是一个BlockingQueue类型</li>\n<li>BlockingQueue是一个特殊的队列</li>\n<li>从BlockingQueue中取数据时，<ul>\n<li>如果BlockingQueue是空的，则取数据的操作会进入到阻塞状态</li>\n<li>当BlockingQueue中有了新数据时，这个取数据的操作又会被重新唤醒</li>\n<li>如果BlockingQueue中的数据已经满了，往BlockingQueue中存数据的操作又会进入阻塞状态(直到BlockingQueue中又有新的空间，存数据的操作又会被冲洗唤醒</li>\n</ul>\n</li>\n<li>BlockingQueue的种类<ul>\n<li><strong>ArrayBlockingQueue</strong>:这个表示一个<strong>规定了大小</strong>的BlockingQueue，ArrayBlockingQueue的构造函数接受一个int类型的数据，该数据表示BlockingQueue的大小，存储在ArrayBlockingQueue中的元素按照FIFO（先进先出）的方式来进行存取。</li>\n<li><strong>LinkedBlockingQueue</strong>:这个表示一个大小不确定的BlockingQueue，在LinkedBlockingQueue的构造方法中可以传一个int类型的数据，这样创建出来的LinkedBlockingQueue是有大小的，也可以不传，不传的话，LinkedBlockingQueue的大小就为Integer.MAX_VALUE</li>\n<li><strong>PriorityBlockingQueue</strong>:这个队列和LinkedBlockingQueue类似，不同的是PriorityBlockingQueue中的元素不是按照FIFO来排序的，而是按照元素的Comparator来决定存取顺序的（这个功能也反映了存入PriorityBlockingQueue中的数据必须实现了Comparator接口）。</li>\n<li><strong>SynchronousQueue</strong>:这个是同步Queue，属于线程安全的BlockingQueue的一种，在SynchronousQueue中，生产者线程的插入操作必须要等待消费者线程的移除操作，Synchronous内部没有数据缓存空间，因此我们无法对SynchronousQueue进行读取或者遍历其中的数据，元素只有在你试图取走的时候才有可能存在。我们可以理解为生产者和消费者互相等待，等到对方之后然后再一起离开。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"ThreadPoolExecuto线程池执行任务时：\"><a href=\"#ThreadPoolExecuto线程池执行任务时：\" class=\"headerlink\" title=\"ThreadPoolExecuto线程池执行任务时：\"></a>ThreadPoolExecuto线程池执行任务时：</h4><p><strong>execute一个线程之后</strong>：</p>\n<ul>\n<li>如果线程池中的线程数未达到核心线程数，则会立马启用一个核心线程去执行</li>\n<li>如果线程池中的线程数已经达到核心线程数，且workQueue未满，则将新线程放入workQueue中等待执行</li>\n<li>如果线程池中的线程数已经达到核心线程数但未超过非核心线程数，且workQueue已满，则开启一个非核心线程来执行任务</li>\n<li>如果线程池中的线程数已经超过非核心线程数，则拒绝执行该任务</li>\n</ul>\n<h4 id=\"如何配置这些参数（参考AsycTask）\"><a href=\"#如何配置这些参数（参考AsycTask）\" class=\"headerlink\" title=\"如何配置这些参数（参考AsycTask）\"></a>如何配置这些参数（参考AsycTask）</h4><p><img src=\"https://ws1.sinaimg.cn/large/006tKfTcgy1fmt4c3mgklj31eq15kdqq.jpg\" alt=\"类的继承结构\"></p>\n<ul>\n<li>核心线程数为手机CPU数量+1（cpu数量获取方式Runtime.getRuntime().availableProcessors()）</li>\n<li>最大线程数为手机CPU数量×2+1</li>\n<li>线程队列的大小为128</li>\n</ul>\n<h4 id=\"系统帮我们配置好的线程池四种对比\"><a href=\"#系统帮我们配置好的线程池四种对比\" class=\"headerlink\" title=\"系统帮我们配置好的线程池四种对比\"></a><span id=\"jumpback\">系统帮我们配置好的线程池</span><a href=\"#jump\">四种对比</a></h4><ul>\n<li><p>FixedThreadPool</p>\n<ul>\n<li><p>核心线程数量固定的线程池</p>\n</li>\n<li><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ExecutorService fixedThreadPool = Executors.newFixedThreadPool(<span class=\"number\">3</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>源码：</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newFixedThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> nThreads)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(nThreads, nThreads,</div><div class=\"line\">                                  <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</div><div class=\"line\">                                  <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>核心线程数和最大线程数一样</li>\n<li>FixedThreadPool中没有非核心线程，所有的线程都是核心线程</li>\n<li>线程的超时时间为0</li>\n<li>核心线程即使在没有任务可执行的时候也不会被销毁（这样可让FixedThreadPool更快速的响应请求）</li>\n<li>LinkedBlockingQueue却没有参数，这说明线程队列的大小为Integer.MAX_VALUE（2的31次方减1)</li>\n<li>所有的核心线程都在执行任务的时候，新的任务只能进入线程队列中进行等待，直到有线程被空闲出来</li>\n</ul>\n</li>\n<li><p>SingleThreadExecutor</p>\n<ul>\n<li><p>singleThreadExecutor和FixedThreadPool很像，不同的就是SingleThreadExecutor的核心线程数只有1</p>\n</li>\n<li><p>​</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newSingleThreadExecutor</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FinalizableDelegatedExecutorService</div><div class=\"line\">          (<span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">1</span>, <span class=\"number\">1</span>,</div><div class=\"line\">                                  <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</div><div class=\"line\">                                  <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>最大好处就是可以避免我们去处理线程同步问题</p>\n</li>\n<li><p>只有一个核心线程，确保所有任务都在同一线程中按顺序完成。因此不需要处理线程同步的问题。</p>\n</li>\n<li><p>FixedThreadPool的参数传个1效果一样</p>\n</li>\n</ul>\n</li>\n<li><p>CachedThreadPool</p>\n<ul>\n<li><p>最大的优势是它可以根据程序的运行情况自动来调整线程池中的线程数量</p>\n</li>\n<li><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newCachedThreadPool</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">0</span>, Integer.MAX_VALUE,</div><div class=\"line\">                                  <span class=\"number\">60L</span>, TimeUnit.SECONDS,</div><div class=\"line\">                                  <span class=\"keyword\">new</span> SynchronousQueue&lt;Runnable&gt;());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>CachedThreadPool中是没有核心线程的，但是它的最大线程数却为Integer.MAX_VALUE</p>\n</li>\n<li><p>它是有线程超时机制的，超时时间为60秒</p>\n</li>\n<li><p>最大线程数为无限大</p>\n</li>\n<li><p>添加一个新任务进来的时候，如果线程池中有空闲的线程，则由该空闲的线程执行新任务</p>\n</li>\n<li><p>没有空闲线程，则创建新线程来执行任务</p>\n</li>\n<li><p>CachedThreadPool中没有新任务的时候，它里边所有的线程都会因为超时而被终止</p>\n</li>\n<li><p>任务队列SynchronousQueue相当于一个空集合，导致任何任务都会被立即执行</p>\n</li>\n<li><p>可以在有大量任务请求的时候使用CachedThreadPool</p>\n</li>\n</ul>\n</li>\n<li><p>ScheduleThreadPool</p>\n<ul>\n<li><p>具有定时定期执行任务功能的线程池</p>\n</li>\n<li><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScheduledThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(corePoolSize, Integer.MAX_VALUE,</div><div class=\"line\">          DEFAULT_KEEPALIVE_MILLIS, MILLISECONDS,</div><div class=\"line\">          <span class=\"keyword\">new</span> DelayedWorkQueue());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>核心线程数量是固定的</p>\n</li>\n<li>非核心线程是无穷大,当非核心线程闲置时，则会被立即回收。</li>\n<li>支持延迟执行任务；定时执行任务；延迟定时执行任务</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"线程池的其他功能\"><a href=\"#线程池的其他功能\" class=\"headerlink\" title=\"线程池的其他功能\"></a>线程池的其他功能</h4><ol>\n<li><strong>shutDown（）</strong>：关闭线程池，不影响已经提交的任务</li>\n<li><strong>shutDownNow（）</strong>：关闭线程池，并尝试终止正在执行的线程</li>\n<li><strong>allowCoreThreadTimeOut(boolean value)</strong>：允许核心线程闲置超时被回收</li>\n<li><strong>submit</strong>：一般情况下我们使用execute来提交任务，但是有时候可能也会用到submit，使用submit的好处是submit有返回值</li>\n</ol>\n<h4 id=\"线程池简单封装\"><a href=\"#线程池简单封装\" class=\"headerlink\" title=\"线程池简单封装\"></a>线程池简单封装</h4><p>ThreadPoolManager.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.LinkedBlockingQueue;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ThreadPoolExecutor;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Created by fengan on 2017/12/25.</div><div class=\"line\"> * email:fengan1102@gmail.com</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadPoolManager</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ThreadPoolManager Instance;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ThreadPoolExecutor threadPoolExecutor;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ThreadPoolManager</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"><span class=\"comment\">//核心线程数量</span></div><div class=\"line\"><span class=\"comment\">//最大线程数量</span></div><div class=\"line\"><span class=\"comment\">//非核心线程的超时时长</span></div><div class=\"line\"><span class=\"comment\">//时间单位</span></div><div class=\"line\"><span class=\"comment\">//缓冲队列，用于存放等待任务，Linked的先进先出</span></div><div class=\"line\"><span class=\"comment\">//创建线程的工厂</span></div><div class=\"line\"><span class=\"comment\">//用来对超出maximumPoolSize的任务的处理策略</span></div><div class=\"line\">        threadPoolExecutor = <span class=\"keyword\">new</span> ThreadPoolExecutor(corePoolSize,<span class=\"comment\">//核心线程数量</span></div><div class=\"line\">                maximumPoolSize,<span class=\"comment\">//最大线程数量</span></div><div class=\"line\">                keepAliveTime,<span class=\"comment\">//非核心线程的超时时长</span></div><div class=\"line\">                unit,<span class=\"comment\">//时间单位</span></div><div class=\"line\">                <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;(),<span class=\"comment\">//缓冲队列，用于存放等待任务，Linked的先进先出</span></div><div class=\"line\">                Executors.defaultThreadFactory(), <span class=\"comment\">//创建线程的工厂</span></div><div class=\"line\">                <span class=\"keyword\">new</span> ThreadPoolExecutor.AbortPolicy() <span class=\"comment\">//用来对超出maximumPoolSize的任务的处理策略</span></div><div class=\"line\">        );</div><div class=\"line\">        threadPoolExecutor.allowCoreThreadTimeOut(<span class=\"keyword\">true</span>);<span class=\"comment\">//设置核心线程超时时间可用</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ThreadPoolManager <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">synchronized</span> (ThreadPoolManager.class) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (Instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    Instance = <span class=\"keyword\">new</span> ThreadPoolManager();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> Instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//当前设备可用处理器核心数*2 + 1,能够让cpu的效率得到最大程度执行（有研究论证的）</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> corePoolSize = Runtime.getRuntime().availableProcessors() * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"comment\">//最大线程数等于核心线程数</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> maximumPoolSize = corePoolSize;</div><div class=\"line\">    <span class=\"comment\">//超时时间，1小时</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> keepAliveTime = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> TimeUnit unit = TimeUnit.HOURS;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 执行任务</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(Runnable runnable)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (runnable == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">        threadPoolExecutor.execute(runnable);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 从线程池中移除任务</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(Runnable runnable)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (runnable == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">        threadPoolExecutor.remove(runnable);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"再次比较四种常见的线程池详细比较\"><a href=\"#再次比较四种常见的线程池详细比较\" class=\"headerlink\" title=\"再次比较四种常见的线程池详细比较\"></a><span id=\"jump\">再次比较四种常见的线程池</span><a href=\"#jumpback\">详细比较</a></h4><p><strong>不管哪种线程池，都是靠ThreadPoolExecutor的七个参数的构造来实现的</strong></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>核心线程</th>\n<th>最大线程</th>\n<th></th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><font color=\"red\">FixThreadPool</font></td>\n<td>有</td>\n<td>无（非核心线程）</td>\n<td>不会被回收</td>\n<td>只有固定数量的核心线程，线程都活动时，新任务等待</td>\n</tr>\n<tr>\n<td><font color=\"red\">SingleThreadPool</font></td>\n<td>1</td>\n<td>无（非核心线程）</td>\n<td>不会被回收</td>\n<td>所有任务都在统一线程执行，不需要处理线程同步问题</td>\n</tr>\n<tr>\n<td><font color=\"red\">CachedThreadPool</font></td>\n<td>无</td>\n<td>Integer.MAX_VALUE</td>\n<td>超时时间60秒</td>\n<td>任何任务立即执行</td>\n</tr>\n<tr>\n<td><font color=\"red\">ScheduledThreadPool</font></td>\n<td>有</td>\n<td>Integer.MAX_VALUE</td>\n<td>非核心线程闲置，立即回收</td>\n<td>可以延迟和定时执行</td>\n</tr>\n</tbody>\n</table>\n<p>相关资料：</p>\n<p><a href=\"http://blog.csdn.net/xiangyunwan/article/details/72550948\" target=\"_blank\" rel=\"external\">参考1</a></p>\n<p><a href=\"http://blog.csdn.net/u012702547/article/details/52259529\" target=\"_blank\" rel=\"external\">参考2</a></p>\n<p><a href=\"http://blog.csdn.net/cswhale/article/details/39053857\" target=\"_blank\" rel=\"external\">参考3</a></p>\n","excerpt":"<p>线程池有关知识整理</p>","more":"<h4 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h4><p>线程基本概念，<a href=\"http://blog.csdn.net/cswhale/article/details/39053857\">线程基本概念</a>和<a href=\"https://www.cnblogs.com/propheterLiu/p/6082666.html\">Android启动线程的三种方式</a>(点击查看)</p>\n<h4 id=\"new-Thread（）的弊端\"><a href=\"#new-Thread（）的弊端\" class=\"headerlink\" title=\"new Thread（）的弊端\"></a>new Thread（）的弊端</h4><ul>\n<li>总是new Thread（）开启线程，线程执行完会被回收，导致频繁的<a href=\"https://www.jianshu.com/p/5db05db4f5ab\">GC</a></li>\n<li>多线程缺乏统一管理，各线程之间互相竞争</li>\n<li>无法实现停止线程（如果一个item滑出页面，则要停止该item上图片的加载，但是如果使用这种方式来创建线程，则无法实现线程停止执行）</li>\n</ul>\n<h4 id=\"使用线程池的好处\"><a href=\"#使用线程池的好处\" class=\"headerlink\" title=\"使用线程池的好处\"></a>使用线程池的好处</h4><ul>\n<li>提高线程的复用性，避免频繁创建线程进而导致频繁的GC</li>\n<li>控制线程并发数，合理利用资源</li>\n<li>线程可控性，比如可以定时执行和取消执行某个线程的任务</li>\n</ul>\n<h4 id=\"线程池的实现\"><a href=\"#线程池的实现\" class=\"headerlink\" title=\"线程池的实现\"></a>线程池的实现</h4><ul>\n<li>Android中的线程池其实源于Java，Android开发中线程池的使用和Java中线程池的使用基本一致</li>\n<li>Java中和线程有关的东东叫做Executor，Executor本身是一个接口</li>\n<li>这个接口有一个非常有用的实现类叫做ThreadPoolExecutor</li>\n<li>Android中常用的线程池<strong>都是通过对ThreadPoolExecutor</strong>进行不同配置来实现的</li>\n</ul>\n<p><strong>类的继承结构</strong></p>\n<p>Windows：Ctrl+H</p>\n<p>Mac：Control+H</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tKfTcgy1fmt3dofim9j311o0fqtc9.jpg\" alt=\"类的继承结构\"></p>\n<h4 id=\"关于ThreadPoolExecutor\"><a href=\"#关于ThreadPoolExecutor\" class=\"headerlink\" title=\"关于ThreadPoolExecutor\"></a>关于ThreadPoolExecutor</h4><p>ThreadPoolExecutor有四个重载的构造方法，我们这里来说说参数最多的那一个重载的构造方法，这样大家就知道其他方法参数的含义了</p>\n<p>构造函数源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Creates a new &#123;<span class=\"doctag\">@code</span> ThreadPoolExecutor&#125; with the given initial</div><div class=\"line\"> * parameters and default thread factory.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> corePoolSize the number of threads to keep in the pool, even</div><div class=\"line\"> *        if they are idle, unless &#123;<span class=\"doctag\">@code</span> allowCoreThreadTimeOut&#125; is set</div><div class=\"line\"> * <span class=\"doctag\">@param</span> maximumPoolSize the maximum number of threads to allow in the</div><div class=\"line\"> *        pool</div><div class=\"line\"> * <span class=\"doctag\">@param</span> keepAliveTime when the number of threads is greater than</div><div class=\"line\"> *        the core, this is the maximum time that excess idle threads</div><div class=\"line\"> *        will wait for new tasks before terminating.</div><div class=\"line\"> * <span class=\"doctag\">@param</span> unit the time unit for the &#123;<span class=\"doctag\">@code</span> keepAliveTime&#125; argument</div><div class=\"line\"> * <span class=\"doctag\">@param</span> workQueue the queue to use for holding tasks before they are</div><div class=\"line\"> *        executed.  This queue will hold only the &#123;<span class=\"doctag\">@code</span> Runnable&#125;</div><div class=\"line\"> *        tasks submitted by the &#123;<span class=\"doctag\">@code</span> execute&#125; method.</div><div class=\"line\"> * <span class=\"doctag\">@param</span> handler the handler to use when execution is blocked</div><div class=\"line\"> *        because the thread bounds and queue capacities are reached</div><div class=\"line\"> * <span class=\"doctag\">@throws</span> IllegalArgumentException if one of the following holds:&lt;br&gt;</div><div class=\"line\"> *         &#123;<span class=\"doctag\">@code</span> corePoolSize &lt; 0&#125;&lt;br&gt;</div><div class=\"line\"> *         &#123;<span class=\"doctag\">@code</span> keepAliveTime &lt; 0&#125;&lt;br&gt;</div><div class=\"line\"> *         &#123;<span class=\"doctag\">@code</span> maximumPoolSize &lt;= 0&#125;&lt;br&gt;</div><div class=\"line\"> *         &#123;<span class=\"doctag\">@code</span> maximumPoolSize &lt; corePoolSize&#125;</div><div class=\"line\"> * <span class=\"doctag\">@throws</span> NullPointerException if &#123;<span class=\"doctag\">@code</span> workQueue&#125;</div><div class=\"line\"> *         or &#123;<span class=\"doctag\">@code</span> handler&#125; is null</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,</div><div class=\"line\">                          <span class=\"keyword\">int</span> maximumPoolSize,</div><div class=\"line\">                          <span class=\"keyword\">long</span> keepAliveTime,</div><div class=\"line\">                          TimeUnit unit,</div><div class=\"line\">                          BlockingQueue&lt;Runnable&gt; workQueue,</div><div class=\"line\">                          RejectedExecutionHandler handler)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</div><div class=\"line\">         Executors.defaultThreadFactory(), handler);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Creates a new &#123;<span class=\"doctag\">@code</span> ThreadPoolExecutor&#125; with the given initial</div><div class=\"line\"> * parameters.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> corePoolSize the number of threads to keep in the pool, even</div><div class=\"line\"> *        if they are idle, unless &#123;<span class=\"doctag\">@code</span> allowCoreThreadTimeOut&#125; is set</div><div class=\"line\"> * <span class=\"doctag\">@param</span> maximumPoolSize the maximum number of threads to allow in the</div><div class=\"line\"> *        pool</div><div class=\"line\"> * <span class=\"doctag\">@param</span> keepAliveTime when the number of threads is greater than</div><div class=\"line\"> *        the core, this is the maximum time that excess idle threads</div><div class=\"line\"> *        will wait for new tasks before terminating.</div><div class=\"line\"> * <span class=\"doctag\">@param</span> unit the time unit for the &#123;<span class=\"doctag\">@code</span> keepAliveTime&#125; argument</div><div class=\"line\"> * <span class=\"doctag\">@param</span> workQueue the queue to use for holding tasks before they are</div><div class=\"line\"> *        executed.  This queue will hold only the &#123;<span class=\"doctag\">@code</span> Runnable&#125;</div><div class=\"line\"> *        tasks submitted by the &#123;<span class=\"doctag\">@code</span> execute&#125; method.</div><div class=\"line\"> * <span class=\"doctag\">@param</span> threadFactory the factory to use when the executor</div><div class=\"line\"> *        creates a new thread</div><div class=\"line\"> * <span class=\"doctag\">@param</span> handler the handler to use when execution is blocked</div><div class=\"line\"> *        because the thread bounds and queue capacities are reached</div><div class=\"line\"> * <span class=\"doctag\">@throws</span> IllegalArgumentException if one of the following holds:&lt;br&gt;</div><div class=\"line\"> *         &#123;<span class=\"doctag\">@code</span> corePoolSize &lt; 0&#125;&lt;br&gt;</div><div class=\"line\"> *         &#123;<span class=\"doctag\">@code</span> keepAliveTime &lt; 0&#125;&lt;br&gt;</div><div class=\"line\"> *         &#123;<span class=\"doctag\">@code</span> maximumPoolSize &lt;= 0&#125;&lt;br&gt;</div><div class=\"line\"> *         &#123;<span class=\"doctag\">@code</span> maximumPoolSize &lt; corePoolSize&#125;</div><div class=\"line\"> * <span class=\"doctag\">@throws</span> NullPointerException if &#123;<span class=\"doctag\">@code</span> workQueue&#125;</div><div class=\"line\"> *         or &#123;<span class=\"doctag\">@code</span> threadFactory&#125; or &#123;<span class=\"doctag\">@code</span> handler&#125; is null</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,</div><div class=\"line\">                          <span class=\"keyword\">int</span> maximumPoolSize,</div><div class=\"line\">                          <span class=\"keyword\">long</span> keepAliveTime,</div><div class=\"line\">                          TimeUnit unit,</div><div class=\"line\">                          BlockingQueue&lt;Runnable&gt; workQueue,</div><div class=\"line\">                          ThreadFactory threadFactory,</div><div class=\"line\">                          RejectedExecutionHandler handler)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (corePoolSize &lt; <span class=\"number\">0</span> ||</div><div class=\"line\">        maximumPoolSize &lt;= <span class=\"number\">0</span> ||</div><div class=\"line\">        maximumPoolSize &lt; corePoolSize ||</div><div class=\"line\">        keepAliveTime &lt; <span class=\"number\">0</span>)</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException();</div><div class=\"line\">    <span class=\"keyword\">if</span> (workQueue == <span class=\"keyword\">null</span> || threadFactory == <span class=\"keyword\">null</span> || handler == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</div><div class=\"line\">    <span class=\"keyword\">this</span>.corePoolSize = corePoolSize;</div><div class=\"line\">    <span class=\"keyword\">this</span>.maximumPoolSize = maximumPoolSize;</div><div class=\"line\">    <span class=\"keyword\">this</span>.workQueue = workQueue;</div><div class=\"line\">    <span class=\"keyword\">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</div><div class=\"line\">    <span class=\"keyword\">this</span>.threadFactory = threadFactory;</div><div class=\"line\">    <span class=\"keyword\">this</span>.handler = handler;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>这里是7个参数(我们在开发中用的更多的是5个参数的构造方法)，OK，那我们来看看这里七个参数的含义：</strong></p>\n<ol>\n<li><strong>corePoolSize</strong>：核心线程的数量</li>\n<li><strong>maximumPoolSize</strong>：最大线程数量</li>\n<li><strong>keepAliveTime</strong>：非核心线程的超时时长，当系统中<strong>非核心线程闲置时间超过</strong>keepAliveTime之后，则会<strong>被回收</strong>。如果ThreadPoolExecutor的allowCoreThreadTimeOut属性设置为true，则该参数也表示核心线程的超时时长</li>\n<li><strong>unit</strong>：第三个参数的单位，有纳秒、微秒、毫秒、秒、分、时、天等</li>\n<li><strong>workQueue</strong>：线程池中的任务队列，该队列存储已经被提交，但是尚未执行的任务，存储在这里的任务是由ThreadPoolExecutor的execute方法提交来的。</li>\n<li><strong>threadFactory</strong>  为线程池提供创建新线程的功能，这个我们一般<strong>使用默认即可</strong></li>\n<li><strong>handler</strong> 拒绝策略，当线程无法执行新任务时（一般是由于线程池中的线程数量已经达到最大数或者线程池关闭导致的），默认情况下，当线程池无法处理新线程时，会抛出一个RejectedExecutionException。</li>\n</ol>\n<p><strong>关于workQueue</strong></p>\n<ul>\n<li>workQueue是一个BlockingQueue类型</li>\n<li>BlockingQueue是一个特殊的队列</li>\n<li>从BlockingQueue中取数据时，<ul>\n<li>如果BlockingQueue是空的，则取数据的操作会进入到阻塞状态</li>\n<li>当BlockingQueue中有了新数据时，这个取数据的操作又会被重新唤醒</li>\n<li>如果BlockingQueue中的数据已经满了，往BlockingQueue中存数据的操作又会进入阻塞状态(直到BlockingQueue中又有新的空间，存数据的操作又会被冲洗唤醒</li>\n</ul>\n</li>\n<li>BlockingQueue的种类<ul>\n<li><strong>ArrayBlockingQueue</strong>:这个表示一个<strong>规定了大小</strong>的BlockingQueue，ArrayBlockingQueue的构造函数接受一个int类型的数据，该数据表示BlockingQueue的大小，存储在ArrayBlockingQueue中的元素按照FIFO（先进先出）的方式来进行存取。</li>\n<li><strong>LinkedBlockingQueue</strong>:这个表示一个大小不确定的BlockingQueue，在LinkedBlockingQueue的构造方法中可以传一个int类型的数据，这样创建出来的LinkedBlockingQueue是有大小的，也可以不传，不传的话，LinkedBlockingQueue的大小就为Integer.MAX_VALUE</li>\n<li><strong>PriorityBlockingQueue</strong>:这个队列和LinkedBlockingQueue类似，不同的是PriorityBlockingQueue中的元素不是按照FIFO来排序的，而是按照元素的Comparator来决定存取顺序的（这个功能也反映了存入PriorityBlockingQueue中的数据必须实现了Comparator接口）。</li>\n<li><strong>SynchronousQueue</strong>:这个是同步Queue，属于线程安全的BlockingQueue的一种，在SynchronousQueue中，生产者线程的插入操作必须要等待消费者线程的移除操作，Synchronous内部没有数据缓存空间，因此我们无法对SynchronousQueue进行读取或者遍历其中的数据，元素只有在你试图取走的时候才有可能存在。我们可以理解为生产者和消费者互相等待，等到对方之后然后再一起离开。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"ThreadPoolExecuto线程池执行任务时：\"><a href=\"#ThreadPoolExecuto线程池执行任务时：\" class=\"headerlink\" title=\"ThreadPoolExecuto线程池执行任务时：\"></a>ThreadPoolExecuto线程池执行任务时：</h4><p><strong>execute一个线程之后</strong>：</p>\n<ul>\n<li>如果线程池中的线程数未达到核心线程数，则会立马启用一个核心线程去执行</li>\n<li>如果线程池中的线程数已经达到核心线程数，且workQueue未满，则将新线程放入workQueue中等待执行</li>\n<li>如果线程池中的线程数已经达到核心线程数但未超过非核心线程数，且workQueue已满，则开启一个非核心线程来执行任务</li>\n<li>如果线程池中的线程数已经超过非核心线程数，则拒绝执行该任务</li>\n</ul>\n<h4 id=\"如何配置这些参数（参考AsycTask）\"><a href=\"#如何配置这些参数（参考AsycTask）\" class=\"headerlink\" title=\"如何配置这些参数（参考AsycTask）\"></a>如何配置这些参数（参考AsycTask）</h4><p><img src=\"https://ws1.sinaimg.cn/large/006tKfTcgy1fmt4c3mgklj31eq15kdqq.jpg\" alt=\"类的继承结构\"></p>\n<ul>\n<li>核心线程数为手机CPU数量+1（cpu数量获取方式Runtime.getRuntime().availableProcessors()）</li>\n<li>最大线程数为手机CPU数量×2+1</li>\n<li>线程队列的大小为128</li>\n</ul>\n<h4 id=\"系统帮我们配置好的线程池四种对比\"><a href=\"#系统帮我们配置好的线程池四种对比\" class=\"headerlink\" title=\"系统帮我们配置好的线程池四种对比\"></a><span id=\"jumpback\">系统帮我们配置好的线程池</span><a href=\"#jump\">四种对比</a></h4><ul>\n<li><p>FixedThreadPool</p>\n<ul>\n<li><p>核心线程数量固定的线程池</p>\n</li>\n<li><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ExecutorService fixedThreadPool = Executors.newFixedThreadPool(<span class=\"number\">3</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>源码：</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newFixedThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> nThreads)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(nThreads, nThreads,</div><div class=\"line\">                                  <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</div><div class=\"line\">                                  <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>核心线程数和最大线程数一样</li>\n<li>FixedThreadPool中没有非核心线程，所有的线程都是核心线程</li>\n<li>线程的超时时间为0</li>\n<li>核心线程即使在没有任务可执行的时候也不会被销毁（这样可让FixedThreadPool更快速的响应请求）</li>\n<li>LinkedBlockingQueue却没有参数，这说明线程队列的大小为Integer.MAX_VALUE（2的31次方减1)</li>\n<li>所有的核心线程都在执行任务的时候，新的任务只能进入线程队列中进行等待，直到有线程被空闲出来</li>\n</ul>\n</li>\n<li><p>SingleThreadExecutor</p>\n<ul>\n<li><p>singleThreadExecutor和FixedThreadPool很像，不同的就是SingleThreadExecutor的核心线程数只有1</p>\n</li>\n<li><p>​</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newSingleThreadExecutor</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FinalizableDelegatedExecutorService</div><div class=\"line\">          (<span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">1</span>, <span class=\"number\">1</span>,</div><div class=\"line\">                                  <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</div><div class=\"line\">                                  <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>最大好处就是可以避免我们去处理线程同步问题</p>\n</li>\n<li><p>只有一个核心线程，确保所有任务都在同一线程中按顺序完成。因此不需要处理线程同步的问题。</p>\n</li>\n<li><p>FixedThreadPool的参数传个1效果一样</p>\n</li>\n</ul>\n</li>\n<li><p>CachedThreadPool</p>\n<ul>\n<li><p>最大的优势是它可以根据程序的运行情况自动来调整线程池中的线程数量</p>\n</li>\n<li><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newCachedThreadPool</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">0</span>, Integer.MAX_VALUE,</div><div class=\"line\">                                  <span class=\"number\">60L</span>, TimeUnit.SECONDS,</div><div class=\"line\">                                  <span class=\"keyword\">new</span> SynchronousQueue&lt;Runnable&gt;());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>CachedThreadPool中是没有核心线程的，但是它的最大线程数却为Integer.MAX_VALUE</p>\n</li>\n<li><p>它是有线程超时机制的，超时时间为60秒</p>\n</li>\n<li><p>最大线程数为无限大</p>\n</li>\n<li><p>添加一个新任务进来的时候，如果线程池中有空闲的线程，则由该空闲的线程执行新任务</p>\n</li>\n<li><p>没有空闲线程，则创建新线程来执行任务</p>\n</li>\n<li><p>CachedThreadPool中没有新任务的时候，它里边所有的线程都会因为超时而被终止</p>\n</li>\n<li><p>任务队列SynchronousQueue相当于一个空集合，导致任何任务都会被立即执行</p>\n</li>\n<li><p>可以在有大量任务请求的时候使用CachedThreadPool</p>\n</li>\n</ul>\n</li>\n<li><p>ScheduleThreadPool</p>\n<ul>\n<li><p>具有定时定期执行任务功能的线程池</p>\n</li>\n<li><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScheduledThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(corePoolSize, Integer.MAX_VALUE,</div><div class=\"line\">          DEFAULT_KEEPALIVE_MILLIS, MILLISECONDS,</div><div class=\"line\">          <span class=\"keyword\">new</span> DelayedWorkQueue());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>核心线程数量是固定的</p>\n</li>\n<li>非核心线程是无穷大,当非核心线程闲置时，则会被立即回收。</li>\n<li>支持延迟执行任务；定时执行任务；延迟定时执行任务</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"线程池的其他功能\"><a href=\"#线程池的其他功能\" class=\"headerlink\" title=\"线程池的其他功能\"></a>线程池的其他功能</h4><ol>\n<li><strong>shutDown（）</strong>：关闭线程池，不影响已经提交的任务</li>\n<li><strong>shutDownNow（）</strong>：关闭线程池，并尝试终止正在执行的线程</li>\n<li><strong>allowCoreThreadTimeOut(boolean value)</strong>：允许核心线程闲置超时被回收</li>\n<li><strong>submit</strong>：一般情况下我们使用execute来提交任务，但是有时候可能也会用到submit，使用submit的好处是submit有返回值</li>\n</ol>\n<h4 id=\"线程池简单封装\"><a href=\"#线程池简单封装\" class=\"headerlink\" title=\"线程池简单封装\"></a>线程池简单封装</h4><p>ThreadPoolManager.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.LinkedBlockingQueue;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ThreadPoolExecutor;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Created by fengan on 2017/12/25.</div><div class=\"line\"> * email:fengan1102@gmail.com</div><div class=\"line\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadPoolManager</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ThreadPoolManager Instance;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ThreadPoolExecutor threadPoolExecutor;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ThreadPoolManager</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"><span class=\"comment\">//核心线程数量</span></div><div class=\"line\"><span class=\"comment\">//最大线程数量</span></div><div class=\"line\"><span class=\"comment\">//非核心线程的超时时长</span></div><div class=\"line\"><span class=\"comment\">//时间单位</span></div><div class=\"line\"><span class=\"comment\">//缓冲队列，用于存放等待任务，Linked的先进先出</span></div><div class=\"line\"><span class=\"comment\">//创建线程的工厂</span></div><div class=\"line\"><span class=\"comment\">//用来对超出maximumPoolSize的任务的处理策略</span></div><div class=\"line\">        threadPoolExecutor = <span class=\"keyword\">new</span> ThreadPoolExecutor(corePoolSize,<span class=\"comment\">//核心线程数量</span></div><div class=\"line\">                maximumPoolSize,<span class=\"comment\">//最大线程数量</span></div><div class=\"line\">                keepAliveTime,<span class=\"comment\">//非核心线程的超时时长</span></div><div class=\"line\">                unit,<span class=\"comment\">//时间单位</span></div><div class=\"line\">                <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;(),<span class=\"comment\">//缓冲队列，用于存放等待任务，Linked的先进先出</span></div><div class=\"line\">                Executors.defaultThreadFactory(), <span class=\"comment\">//创建线程的工厂</span></div><div class=\"line\">                <span class=\"keyword\">new</span> ThreadPoolExecutor.AbortPolicy() <span class=\"comment\">//用来对超出maximumPoolSize的任务的处理策略</span></div><div class=\"line\">        );</div><div class=\"line\">        threadPoolExecutor.allowCoreThreadTimeOut(<span class=\"keyword\">true</span>);<span class=\"comment\">//设置核心线程超时时间可用</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ThreadPoolManager <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">synchronized</span> (ThreadPoolManager.class) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (Instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    Instance = <span class=\"keyword\">new</span> ThreadPoolManager();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> Instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//当前设备可用处理器核心数*2 + 1,能够让cpu的效率得到最大程度执行（有研究论证的）</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> corePoolSize = Runtime.getRuntime().availableProcessors() * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"comment\">//最大线程数等于核心线程数</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> maximumPoolSize = corePoolSize;</div><div class=\"line\">    <span class=\"comment\">//超时时间，1小时</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> keepAliveTime = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> TimeUnit unit = TimeUnit.HOURS;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 执行任务</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(Runnable runnable)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (runnable == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">        threadPoolExecutor.execute(runnable);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 从线程池中移除任务</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(Runnable runnable)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (runnable == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">        threadPoolExecutor.remove(runnable);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"再次比较四种常见的线程池详细比较\"><a href=\"#再次比较四种常见的线程池详细比较\" class=\"headerlink\" title=\"再次比较四种常见的线程池详细比较\"></a><span id=\"jump\">再次比较四种常见的线程池</span><a href=\"#jumpback\">详细比较</a></h4><p><strong>不管哪种线程池，都是靠ThreadPoolExecutor的七个参数的构造来实现的</strong></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>核心线程</th>\n<th>最大线程</th>\n<th></th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><font color=red >FixThreadPool</font></td>\n<td>有</td>\n<td>无（非核心线程）</td>\n<td>不会被回收</td>\n<td>只有固定数量的核心线程，线程都活动时，新任务等待</td>\n</tr>\n<tr>\n<td><font color=red >SingleThreadPool</font></td>\n<td>1</td>\n<td>无（非核心线程）</td>\n<td>不会被回收</td>\n<td>所有任务都在统一线程执行，不需要处理线程同步问题</td>\n</tr>\n<tr>\n<td><font color=red >CachedThreadPool</font></td>\n<td>无</td>\n<td>Integer.MAX_VALUE</td>\n<td>超时时间60秒</td>\n<td>任何任务立即执行</td>\n</tr>\n<tr>\n<td><font color=red >ScheduledThreadPool</font></td>\n<td>有</td>\n<td>Integer.MAX_VALUE</td>\n<td>非核心线程闲置，立即回收</td>\n<td>可以延迟和定时执行</td>\n</tr>\n</tbody>\n</table>\n<p>相关资料：</p>\n<p><a href=\"http://blog.csdn.net/xiangyunwan/article/details/72550948\">参考1</a></p>\n<p><a href=\"http://blog.csdn.net/u012702547/article/details/52259529\">参考2</a></p>\n<p><a href=\"http://blog.csdn.net/cswhale/article/details/39053857\">参考3</a></p>"},{"title":"Rxjava2.0-知识碎片(一)","date":"2018-07-23T07:02:17.000Z","password":null,"_content":"\nObservable.create(ObservableOnSubscribe)和subscribe()基本使用\n\n<!--more-->\n\n### Observable.create(ObservableOnSubscribe)的使用\n\n获得一个Observable有很多种方式，通过我们下面的动图可以看到\n\n![获取Observable的方式](https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/Observable.gif)\n\n今天的碎片化整理，就只整理最普通的一种方式`Observable.create(ObservableOnSubscribe)`\n\n```java\n/**\n * ObservableEmitter:Emitter是发射器的意思，\n * 它可以发出三种类型的事件，\n * 通过调用emitter的onNext(T value)、onComplete()和onError(Throwable error)就可以分别发出next事件、complete事件和error事件。\n * 发射满足规则：\n * 1，Observable可以发送无限个onNext, Observer也可以接收无限个onNext\n * 2，发送了一个onComplete后, Observable的onComplete或者onError之后的事件将会继续发送, 而Observer收到onComplete/onError事件之后将不再继续接收事件.\n * 3，Observable可以发送无限个onNext可以不发送onComplete或onError.\n * 4，Observable不可以发送多个onComplete和多个onError（onComplete和onError加一起只能发射一次）\n * 5，Observable发射多个onComplete不报错（只收到第一个onComplete就不再接受了）。发射多个onError会报错\n */\n@Test\npublic void rxjava() {\n    Observable.create(new ObservableOnSubscribe<String>() {\n        @Override\n        public void subscribe(ObservableEmitter<String> emitter) throws Exception {\n            emitter.onNext(\"hello\");\n            emitter.onNext(\"rxjava\");\n            emitter.onComplete();\n            emitter.onNext(\"无法接受\");\n        }\n    }).subscribe(new Observer<String>() {\n        @Override\n        public void onSubscribe(Disposable d) {\n            System.out.println(\"onSubscribe\");\n        }\n\n        @Override\n        public void onNext(String s) {\n            System.out.println(\"onNext:value=\" + s);\n        }\n\n        @Override\n        public void onError(Throwable e) {\n            System.out.println(\"onError:error\" + e.getMessage());\n        }\n\n        @Override\n        public void onComplete() {\n            System.out.println(\"onComplete\");\n        }\n    });\n}\n\n```\n\n**logcat：**\n\n```java\nonSubscribe\nonNext:value=hello\nonNext:value=rxjava\nonComplete\n```\n\n### 发送规则\n\n * 发射满足规则：\n * 1，Observable可以发送无限个onNext, Observer也可以接收无限个onNext\n * 2，发送了一个onComplete后, Observable的onComplete或者onError之后的事件将会继续发送, 而Observer收到onComplete/onError事件之后将不再继续接收事件.\n * 3，Observable可以发送无限个onNext可以不发送onComplete或onError.\n * 4，Observable不可以发送多个onComplete和多个onError（onComplete和onError加一起只能发射一次）\n * 5，Observable发射多个onComplete不报错（只收到第一个onComplete就不再接受了）。发射多个onError会报错\n\n![假设事件流图](https://upload-images.jianshu.io/upload_images/1008453-7133ff9a13dd9a59.png?imageMogr2/auto-orient/)\n\n这里的`上游`和`下游`就分别对应着RxJava中的`Observable`和`Observer`，它们之间的连接就对应着`subscribe()`\n\n以上几个规则用示意图表示如下:\n\n|                    | 示意图                                      |\n| ------------------ | ---------------------------------------- |\n| **只发送onNext事件**    | ![img](https://upload-images.jianshu.io/upload_images/1008453-2526f7824c53a47e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/580)next |\n| **发送onComplete事件** | ![img](https://upload-images.jianshu.io/upload_images/1008453-bdb581480fc9379b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/595)complete |\n| **发送onError事件**    | ![img](https://upload-images.jianshu.io/upload_images/1008453-b731e6294f342d66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/595)error |\n\n[参考链接](https://www.jianshu.com/p/464fa025229e)\n\n### onSubscribe(Disposable d)的参数Disposable\n\n```java\n@Test\n    public void rxjava() {\n        Observable.create(new ObservableOnSubscribe<Integer>() {\n            @Override\n            public void subscribe(ObservableEmitter<Integer> emitter) throws Exception {\n                emitter.onNext(1);\n                emitter.onNext(2);\n                emitter.onNext(3);\n                emitter.onNext(4);\n                emitter.onNext(5);\n                emitter.onComplete();\n            }\n        }).subscribe(new Observer<Integer>() {\n            public Disposable mDisposable;\n\n            @Override\n            public void onSubscribe(Disposable d) {\n                System.out.println(\"onSubscribe\");\n                this.mDisposable = d;\n            }\n\n            @Override\n            public void onNext(Integer integer) {\n                if (integer == 3) {\n                    System.out.println(\"onNext:isDisposed=\" + mDisposable.isDisposed());\n                    mDisposable.dispose();\n                    System.out.println(\"onNext:isDisposed=\" + mDisposable.isDisposed());\n                }\n                System.out.println(\"onNext:valuse=\" + integer);\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                System.out.println(\"onError\");\n            }\n\n            @Override\n            public void onComplete() {\n                System.out.println(\"onComplete\");\n            }\n        });\n    }\n```\n\n**logcat：**\n\n```java\nonSubscribe\nonNext:valuse=1\nonNext:valuse=2\nonNext:isDisposed=false\nonNext:isDisposed=true\nonNext:valuse=3\n```\n\n由代码可看出：\n\n- `onSubscribe`方法最先调用，并且只调用一次\n- `Disposable.dispose()`调用后，`onNext`将接受不到发出的4，5事件（**但是emitter.onNext(4);**\n  ​                **emitter.onNext(5)确实执行了；**\n- Disposable的用处不止这些, 后面讲解到了线程的调度之后, 我们会发现它的重要性.后续补充\n\n### `subscribe()`的多个重载的方法\n\n```java\n1,public final Disposable subscribe() {}\n2,public final Disposable subscribe(Consumer<? super T> onNext) {}\n3,public final Disposable subscribe(Consumer<? super T> onNext, Consumer<? super Throwable> \tonError) {} \n4,public final Disposable subscribe(Consumer<? super T> onNext, Consumer<? super Throwable> \tonError, Action onComplete) {}\n5,public final Disposable subscribe(Consumer<? super T> onNext, Consumer<? super Throwable> \tonError, Action onComplete, Consumer<? super Disposable> onSubscribe) {}\n6,public final void subscribe(Observer<? super T> observer) {}\n```\n\n- 不带任何参数的`subscribe()` 表示下游不关心任何事件,你上游尽管发你的数据去吧, 下游无法接受\n- 带有一个`Consumer`参数的方法表示下游只关心onNext事件, 其他的事件我假装没看见, 因此我们如果只需要onNext事件可以这么写\n- `Observer`参数，如例子，比较完整的onSubscribe，onNext，onComplete，onError\n- 如果我们不需要其他回调，可选择我们需要的`Consumer` 的具体参数\n\n[参考链接](https://www.jianshu.com/p/464fa025229e)","source":"_posts/Rxjava2-0-知识碎片（一）.md","raw":"---\ntitle: Rxjava2.0-知识碎片(一)\ndate: 2018-07-23 15:02:17\ntags:\n- Rxjava\ncategories: Rxjava\npassword:\n---\n\nObservable.create(ObservableOnSubscribe)和subscribe()基本使用\n\n<!--more-->\n\n### Observable.create(ObservableOnSubscribe)的使用\n\n获得一个Observable有很多种方式，通过我们下面的动图可以看到\n\n![获取Observable的方式](https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/Observable.gif)\n\n今天的碎片化整理，就只整理最普通的一种方式`Observable.create(ObservableOnSubscribe)`\n\n```java\n/**\n * ObservableEmitter:Emitter是发射器的意思，\n * 它可以发出三种类型的事件，\n * 通过调用emitter的onNext(T value)、onComplete()和onError(Throwable error)就可以分别发出next事件、complete事件和error事件。\n * 发射满足规则：\n * 1，Observable可以发送无限个onNext, Observer也可以接收无限个onNext\n * 2，发送了一个onComplete后, Observable的onComplete或者onError之后的事件将会继续发送, 而Observer收到onComplete/onError事件之后将不再继续接收事件.\n * 3，Observable可以发送无限个onNext可以不发送onComplete或onError.\n * 4，Observable不可以发送多个onComplete和多个onError（onComplete和onError加一起只能发射一次）\n * 5，Observable发射多个onComplete不报错（只收到第一个onComplete就不再接受了）。发射多个onError会报错\n */\n@Test\npublic void rxjava() {\n    Observable.create(new ObservableOnSubscribe<String>() {\n        @Override\n        public void subscribe(ObservableEmitter<String> emitter) throws Exception {\n            emitter.onNext(\"hello\");\n            emitter.onNext(\"rxjava\");\n            emitter.onComplete();\n            emitter.onNext(\"无法接受\");\n        }\n    }).subscribe(new Observer<String>() {\n        @Override\n        public void onSubscribe(Disposable d) {\n            System.out.println(\"onSubscribe\");\n        }\n\n        @Override\n        public void onNext(String s) {\n            System.out.println(\"onNext:value=\" + s);\n        }\n\n        @Override\n        public void onError(Throwable e) {\n            System.out.println(\"onError:error\" + e.getMessage());\n        }\n\n        @Override\n        public void onComplete() {\n            System.out.println(\"onComplete\");\n        }\n    });\n}\n\n```\n\n**logcat：**\n\n```java\nonSubscribe\nonNext:value=hello\nonNext:value=rxjava\nonComplete\n```\n\n### 发送规则\n\n * 发射满足规则：\n * 1，Observable可以发送无限个onNext, Observer也可以接收无限个onNext\n * 2，发送了一个onComplete后, Observable的onComplete或者onError之后的事件将会继续发送, 而Observer收到onComplete/onError事件之后将不再继续接收事件.\n * 3，Observable可以发送无限个onNext可以不发送onComplete或onError.\n * 4，Observable不可以发送多个onComplete和多个onError（onComplete和onError加一起只能发射一次）\n * 5，Observable发射多个onComplete不报错（只收到第一个onComplete就不再接受了）。发射多个onError会报错\n\n![假设事件流图](https://upload-images.jianshu.io/upload_images/1008453-7133ff9a13dd9a59.png?imageMogr2/auto-orient/)\n\n这里的`上游`和`下游`就分别对应着RxJava中的`Observable`和`Observer`，它们之间的连接就对应着`subscribe()`\n\n以上几个规则用示意图表示如下:\n\n|                    | 示意图                                      |\n| ------------------ | ---------------------------------------- |\n| **只发送onNext事件**    | ![img](https://upload-images.jianshu.io/upload_images/1008453-2526f7824c53a47e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/580)next |\n| **发送onComplete事件** | ![img](https://upload-images.jianshu.io/upload_images/1008453-bdb581480fc9379b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/595)complete |\n| **发送onError事件**    | ![img](https://upload-images.jianshu.io/upload_images/1008453-b731e6294f342d66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/595)error |\n\n[参考链接](https://www.jianshu.com/p/464fa025229e)\n\n### onSubscribe(Disposable d)的参数Disposable\n\n```java\n@Test\n    public void rxjava() {\n        Observable.create(new ObservableOnSubscribe<Integer>() {\n            @Override\n            public void subscribe(ObservableEmitter<Integer> emitter) throws Exception {\n                emitter.onNext(1);\n                emitter.onNext(2);\n                emitter.onNext(3);\n                emitter.onNext(4);\n                emitter.onNext(5);\n                emitter.onComplete();\n            }\n        }).subscribe(new Observer<Integer>() {\n            public Disposable mDisposable;\n\n            @Override\n            public void onSubscribe(Disposable d) {\n                System.out.println(\"onSubscribe\");\n                this.mDisposable = d;\n            }\n\n            @Override\n            public void onNext(Integer integer) {\n                if (integer == 3) {\n                    System.out.println(\"onNext:isDisposed=\" + mDisposable.isDisposed());\n                    mDisposable.dispose();\n                    System.out.println(\"onNext:isDisposed=\" + mDisposable.isDisposed());\n                }\n                System.out.println(\"onNext:valuse=\" + integer);\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                System.out.println(\"onError\");\n            }\n\n            @Override\n            public void onComplete() {\n                System.out.println(\"onComplete\");\n            }\n        });\n    }\n```\n\n**logcat：**\n\n```java\nonSubscribe\nonNext:valuse=1\nonNext:valuse=2\nonNext:isDisposed=false\nonNext:isDisposed=true\nonNext:valuse=3\n```\n\n由代码可看出：\n\n- `onSubscribe`方法最先调用，并且只调用一次\n- `Disposable.dispose()`调用后，`onNext`将接受不到发出的4，5事件（**但是emitter.onNext(4);**\n  ​                **emitter.onNext(5)确实执行了；**\n- Disposable的用处不止这些, 后面讲解到了线程的调度之后, 我们会发现它的重要性.后续补充\n\n### `subscribe()`的多个重载的方法\n\n```java\n1,public final Disposable subscribe() {}\n2,public final Disposable subscribe(Consumer<? super T> onNext) {}\n3,public final Disposable subscribe(Consumer<? super T> onNext, Consumer<? super Throwable> \tonError) {} \n4,public final Disposable subscribe(Consumer<? super T> onNext, Consumer<? super Throwable> \tonError, Action onComplete) {}\n5,public final Disposable subscribe(Consumer<? super T> onNext, Consumer<? super Throwable> \tonError, Action onComplete, Consumer<? super Disposable> onSubscribe) {}\n6,public final void subscribe(Observer<? super T> observer) {}\n```\n\n- 不带任何参数的`subscribe()` 表示下游不关心任何事件,你上游尽管发你的数据去吧, 下游无法接受\n- 带有一个`Consumer`参数的方法表示下游只关心onNext事件, 其他的事件我假装没看见, 因此我们如果只需要onNext事件可以这么写\n- `Observer`参数，如例子，比较完整的onSubscribe，onNext，onComplete，onError\n- 如果我们不需要其他回调，可选择我们需要的`Consumer` 的具体参数\n\n[参考链接](https://www.jianshu.com/p/464fa025229e)","slug":"Rxjava2-0-知识碎片（一）","published":1,"updated":"2018-07-23T07:47:31.924Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkcgh6nz004k1kygnds1ca9w","content":"<p>Observable.create(ObservableOnSubscribe)和subscribe()基本使用</p>\n<a id=\"more\"></a>\n<h3 id=\"Observable-create-ObservableOnSubscribe-的使用\"><a href=\"#Observable-create-ObservableOnSubscribe-的使用\" class=\"headerlink\" title=\"Observable.create(ObservableOnSubscribe)的使用\"></a>Observable.create(ObservableOnSubscribe)的使用</h3><p>获得一个Observable有很多种方式，通过我们下面的动图可以看到</p>\n<p><img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/Observable.gif\" alt=\"获取Observable的方式\"></p>\n<p>今天的碎片化整理，就只整理最普通的一种方式<code>Observable.create(ObservableOnSubscribe)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * ObservableEmitter:Emitter是发射器的意思，</div><div class=\"line\"> * 它可以发出三种类型的事件，</div><div class=\"line\"> * 通过调用emitter的onNext(T value)、onComplete()和onError(Throwable error)就可以分别发出next事件、complete事件和error事件。</div><div class=\"line\"> * 发射满足规则：</div><div class=\"line\"> * 1，Observable可以发送无限个onNext, Observer也可以接收无限个onNext</div><div class=\"line\"> * 2，发送了一个onComplete后, Observable的onComplete或者onError之后的事件将会继续发送, 而Observer收到onComplete/onError事件之后将不再继续接收事件.</div><div class=\"line\"> * 3，Observable可以发送无限个onNext可以不发送onComplete或onError.</div><div class=\"line\"> * 4，Observable不可以发送多个onComplete和多个onError（onComplete和onError加一起只能发射一次）</div><div class=\"line\"> * 5，Observable发射多个onComplete不报错（只收到第一个onComplete就不再接受了）。发射多个onError会报错</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rxjava</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Observable.create(<span class=\"keyword\">new</span> ObservableOnSubscribe&lt;String&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subscribe</span><span class=\"params\">(ObservableEmitter&lt;String&gt; emitter)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">            emitter.onNext(<span class=\"string\">\"hello\"</span>);</div><div class=\"line\">            emitter.onNext(<span class=\"string\">\"rxjava\"</span>);</div><div class=\"line\">            emitter.onComplete();</div><div class=\"line\">            emitter.onNext(<span class=\"string\">\"无法接受\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;).subscribe(<span class=\"keyword\">new</span> Observer&lt;String&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSubscribe</span><span class=\"params\">(Disposable d)</span> </span>&#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"onSubscribe\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"onNext:value=\"</span> + s);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"onError:error\"</span> + e.getMessage());</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onComplete</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"onComplete\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>logcat：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">onSubscribe</div><div class=\"line\">onNext:value=hello</div><div class=\"line\">onNext:value=rxjava</div><div class=\"line\">onComplete</div></pre></td></tr></table></figure>\n<h3 id=\"发送规则\"><a href=\"#发送规则\" class=\"headerlink\" title=\"发送规则\"></a>发送规则</h3><ul>\n<li>发射满足规则：</li>\n<li>1，Observable可以发送无限个onNext, Observer也可以接收无限个onNext</li>\n<li>2，发送了一个onComplete后, Observable的onComplete或者onError之后的事件将会继续发送, 而Observer收到onComplete/onError事件之后将不再继续接收事件.</li>\n<li>3，Observable可以发送无限个onNext可以不发送onComplete或onError.</li>\n<li>4，Observable不可以发送多个onComplete和多个onError（onComplete和onError加一起只能发射一次）</li>\n<li>5，Observable发射多个onComplete不报错（只收到第一个onComplete就不再接受了）。发射多个onError会报错</li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1008453-7133ff9a13dd9a59.png?imageMogr2/auto-orient/\" alt=\"假设事件流图\"></p>\n<p>这里的<code>上游</code>和<code>下游</code>就分别对应着RxJava中的<code>Observable</code>和<code>Observer</code>，它们之间的连接就对应着<code>subscribe()</code></p>\n<p>以上几个规则用示意图表示如下:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>示意图</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>只发送onNext事件</strong></td>\n<td><img src=\"https://upload-images.jianshu.io/upload_images/1008453-2526f7824c53a47e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/580\" alt=\"img\">next</td>\n</tr>\n<tr>\n<td><strong>发送onComplete事件</strong></td>\n<td><img src=\"https://upload-images.jianshu.io/upload_images/1008453-bdb581480fc9379b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/595\" alt=\"img\">complete</td>\n</tr>\n<tr>\n<td><strong>发送onError事件</strong></td>\n<td><img src=\"https://upload-images.jianshu.io/upload_images/1008453-b731e6294f342d66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/595\" alt=\"img\">error</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"https://www.jianshu.com/p/464fa025229e\" target=\"_blank\" rel=\"external\">参考链接</a></p>\n<h3 id=\"onSubscribe-Disposable-d-的参数Disposable\"><a href=\"#onSubscribe-Disposable-d-的参数Disposable\" class=\"headerlink\" title=\"onSubscribe(Disposable d)的参数Disposable\"></a>onSubscribe(Disposable d)的参数Disposable</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rxjava</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Observable.create(<span class=\"keyword\">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subscribe</span><span class=\"params\">(ObservableEmitter&lt;Integer&gt; emitter)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">                emitter.onNext(<span class=\"number\">1</span>);</div><div class=\"line\">                emitter.onNext(<span class=\"number\">2</span>);</div><div class=\"line\">                emitter.onNext(<span class=\"number\">3</span>);</div><div class=\"line\">                emitter.onNext(<span class=\"number\">4</span>);</div><div class=\"line\">                emitter.onNext(<span class=\"number\">5</span>);</div><div class=\"line\">                emitter.onComplete();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).subscribe(<span class=\"keyword\">new</span> Observer&lt;Integer&gt;() &#123;</div><div class=\"line\">            <span class=\"keyword\">public</span> Disposable mDisposable;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSubscribe</span><span class=\"params\">(Disposable d)</span> </span>&#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"onSubscribe\"</span>);</div><div class=\"line\">                <span class=\"keyword\">this</span>.mDisposable = d;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(Integer integer)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (integer == <span class=\"number\">3</span>) &#123;</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"onNext:isDisposed=\"</span> + mDisposable.isDisposed());</div><div class=\"line\">                    mDisposable.dispose();</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"onNext:isDisposed=\"</span> + mDisposable.isDisposed());</div><div class=\"line\">                &#125;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"onNext:valuse=\"</span> + integer);</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"onError\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onComplete</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"onComplete\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p><strong>logcat：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">onSubscribe</div><div class=\"line\">onNext:valuse=<span class=\"number\">1</span></div><div class=\"line\">onNext:valuse=<span class=\"number\">2</span></div><div class=\"line\">onNext:isDisposed=<span class=\"keyword\">false</span></div><div class=\"line\">onNext:isDisposed=<span class=\"keyword\">true</span></div><div class=\"line\">onNext:valuse=<span class=\"number\">3</span></div></pre></td></tr></table></figure>\n<p>由代码可看出：</p>\n<ul>\n<li><code>onSubscribe</code>方法最先调用，并且只调用一次</li>\n<li><code>Disposable.dispose()</code>调用后，<code>onNext</code>将接受不到发出的4，5事件（<strong>但是emitter.onNext(4);</strong><br>​                <strong>emitter.onNext(5)确实执行了；</strong></li>\n<li>Disposable的用处不止这些, 后面讲解到了线程的调度之后, 我们会发现它的重要性.后续补充</li>\n</ul>\n<h3 id=\"subscribe-的多个重载的方法\"><a href=\"#subscribe-的多个重载的方法\" class=\"headerlink\" title=\"subscribe()的多个重载的方法\"></a><code>subscribe()</code>的多个重载的方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span>,<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Disposable <span class=\"title\">subscribe</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"number\">2</span>,<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Disposable <span class=\"title\">subscribe</span><span class=\"params\">(Consumer&lt;? <span class=\"keyword\">super</span> T&gt; onNext)</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"number\">3</span>,<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Disposable <span class=\"title\">subscribe</span><span class=\"params\">(Consumer&lt;? <span class=\"keyword\">super</span> T&gt; onNext, Consumer&lt;? <span class=\"keyword\">super</span> Throwable&gt; \tonError)</span> </span>&#123;&#125; </div><div class=\"line\"><span class=\"number\">4</span>,<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Disposable <span class=\"title\">subscribe</span><span class=\"params\">(Consumer&lt;? <span class=\"keyword\">super</span> T&gt; onNext, Consumer&lt;? <span class=\"keyword\">super</span> Throwable&gt; \tonError, Action onComplete)</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"number\">5</span>,<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Disposable <span class=\"title\">subscribe</span><span class=\"params\">(Consumer&lt;? <span class=\"keyword\">super</span> T&gt; onNext, Consumer&lt;? <span class=\"keyword\">super</span> Throwable&gt; \tonError, Action onComplete, Consumer&lt;? <span class=\"keyword\">super</span> Disposable&gt; onSubscribe)</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"number\">6</span>,<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">subscribe</span><span class=\"params\">(Observer&lt;? <span class=\"keyword\">super</span> T&gt; observer)</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>不带任何参数的<code>subscribe()</code> 表示下游不关心任何事件,你上游尽管发你的数据去吧, 下游无法接受</li>\n<li>带有一个<code>Consumer</code>参数的方法表示下游只关心onNext事件, 其他的事件我假装没看见, 因此我们如果只需要onNext事件可以这么写</li>\n<li><code>Observer</code>参数，如例子，比较完整的onSubscribe，onNext，onComplete，onError</li>\n<li>如果我们不需要其他回调，可选择我们需要的<code>Consumer</code> 的具体参数</li>\n</ul>\n<p><a href=\"https://www.jianshu.com/p/464fa025229e\" target=\"_blank\" rel=\"external\">参考链接</a></p>\n","excerpt":"<p>Observable.create(ObservableOnSubscribe)和subscribe()基本使用</p>","more":"<h3 id=\"Observable-create-ObservableOnSubscribe-的使用\"><a href=\"#Observable-create-ObservableOnSubscribe-的使用\" class=\"headerlink\" title=\"Observable.create(ObservableOnSubscribe)的使用\"></a>Observable.create(ObservableOnSubscribe)的使用</h3><p>获得一个Observable有很多种方式，通过我们下面的动图可以看到</p>\n<p><img src=\"https://fenganblogimgs.oss-cn-beijing.aliyuncs.com/blog/Observable.gif\" alt=\"获取Observable的方式\"></p>\n<p>今天的碎片化整理，就只整理最普通的一种方式<code>Observable.create(ObservableOnSubscribe)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * ObservableEmitter:Emitter是发射器的意思，</div><div class=\"line\"> * 它可以发出三种类型的事件，</div><div class=\"line\"> * 通过调用emitter的onNext(T value)、onComplete()和onError(Throwable error)就可以分别发出next事件、complete事件和error事件。</div><div class=\"line\"> * 发射满足规则：</div><div class=\"line\"> * 1，Observable可以发送无限个onNext, Observer也可以接收无限个onNext</div><div class=\"line\"> * 2，发送了一个onComplete后, Observable的onComplete或者onError之后的事件将会继续发送, 而Observer收到onComplete/onError事件之后将不再继续接收事件.</div><div class=\"line\"> * 3，Observable可以发送无限个onNext可以不发送onComplete或onError.</div><div class=\"line\"> * 4，Observable不可以发送多个onComplete和多个onError（onComplete和onError加一起只能发射一次）</div><div class=\"line\"> * 5，Observable发射多个onComplete不报错（只收到第一个onComplete就不再接受了）。发射多个onError会报错</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rxjava</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Observable.create(<span class=\"keyword\">new</span> ObservableOnSubscribe&lt;String&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subscribe</span><span class=\"params\">(ObservableEmitter&lt;String&gt; emitter)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">            emitter.onNext(<span class=\"string\">\"hello\"</span>);</div><div class=\"line\">            emitter.onNext(<span class=\"string\">\"rxjava\"</span>);</div><div class=\"line\">            emitter.onComplete();</div><div class=\"line\">            emitter.onNext(<span class=\"string\">\"无法接受\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;).subscribe(<span class=\"keyword\">new</span> Observer&lt;String&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSubscribe</span><span class=\"params\">(Disposable d)</span> </span>&#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"onSubscribe\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"onNext:value=\"</span> + s);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"onError:error\"</span> + e.getMessage());</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onComplete</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"onComplete\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>logcat：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">onSubscribe</div><div class=\"line\">onNext:value=hello</div><div class=\"line\">onNext:value=rxjava</div><div class=\"line\">onComplete</div></pre></td></tr></table></figure>\n<h3 id=\"发送规则\"><a href=\"#发送规则\" class=\"headerlink\" title=\"发送规则\"></a>发送规则</h3><ul>\n<li>发射满足规则：</li>\n<li>1，Observable可以发送无限个onNext, Observer也可以接收无限个onNext</li>\n<li>2，发送了一个onComplete后, Observable的onComplete或者onError之后的事件将会继续发送, 而Observer收到onComplete/onError事件之后将不再继续接收事件.</li>\n<li>3，Observable可以发送无限个onNext可以不发送onComplete或onError.</li>\n<li>4，Observable不可以发送多个onComplete和多个onError（onComplete和onError加一起只能发射一次）</li>\n<li>5，Observable发射多个onComplete不报错（只收到第一个onComplete就不再接受了）。发射多个onError会报错</li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1008453-7133ff9a13dd9a59.png?imageMogr2/auto-orient/\" alt=\"假设事件流图\"></p>\n<p>这里的<code>上游</code>和<code>下游</code>就分别对应着RxJava中的<code>Observable</code>和<code>Observer</code>，它们之间的连接就对应着<code>subscribe()</code></p>\n<p>以上几个规则用示意图表示如下:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>示意图</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>只发送onNext事件</strong></td>\n<td><img src=\"https://upload-images.jianshu.io/upload_images/1008453-2526f7824c53a47e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/580\" alt=\"img\">next</td>\n</tr>\n<tr>\n<td><strong>发送onComplete事件</strong></td>\n<td><img src=\"https://upload-images.jianshu.io/upload_images/1008453-bdb581480fc9379b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/595\" alt=\"img\">complete</td>\n</tr>\n<tr>\n<td><strong>发送onError事件</strong></td>\n<td><img src=\"https://upload-images.jianshu.io/upload_images/1008453-b731e6294f342d66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/595\" alt=\"img\">error</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"https://www.jianshu.com/p/464fa025229e\">参考链接</a></p>\n<h3 id=\"onSubscribe-Disposable-d-的参数Disposable\"><a href=\"#onSubscribe-Disposable-d-的参数Disposable\" class=\"headerlink\" title=\"onSubscribe(Disposable d)的参数Disposable\"></a>onSubscribe(Disposable d)的参数Disposable</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rxjava</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Observable.create(<span class=\"keyword\">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subscribe</span><span class=\"params\">(ObservableEmitter&lt;Integer&gt; emitter)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">                emitter.onNext(<span class=\"number\">1</span>);</div><div class=\"line\">                emitter.onNext(<span class=\"number\">2</span>);</div><div class=\"line\">                emitter.onNext(<span class=\"number\">3</span>);</div><div class=\"line\">                emitter.onNext(<span class=\"number\">4</span>);</div><div class=\"line\">                emitter.onNext(<span class=\"number\">5</span>);</div><div class=\"line\">                emitter.onComplete();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).subscribe(<span class=\"keyword\">new</span> Observer&lt;Integer&gt;() &#123;</div><div class=\"line\">            <span class=\"keyword\">public</span> Disposable mDisposable;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSubscribe</span><span class=\"params\">(Disposable d)</span> </span>&#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"onSubscribe\"</span>);</div><div class=\"line\">                <span class=\"keyword\">this</span>.mDisposable = d;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(Integer integer)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (integer == <span class=\"number\">3</span>) &#123;</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"onNext:isDisposed=\"</span> + mDisposable.isDisposed());</div><div class=\"line\">                    mDisposable.dispose();</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"onNext:isDisposed=\"</span> + mDisposable.isDisposed());</div><div class=\"line\">                &#125;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"onNext:valuse=\"</span> + integer);</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"onError\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onComplete</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"onComplete\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p><strong>logcat：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">onSubscribe</div><div class=\"line\">onNext:valuse=<span class=\"number\">1</span></div><div class=\"line\">onNext:valuse=<span class=\"number\">2</span></div><div class=\"line\">onNext:isDisposed=<span class=\"keyword\">false</span></div><div class=\"line\">onNext:isDisposed=<span class=\"keyword\">true</span></div><div class=\"line\">onNext:valuse=<span class=\"number\">3</span></div></pre></td></tr></table></figure>\n<p>由代码可看出：</p>\n<ul>\n<li><code>onSubscribe</code>方法最先调用，并且只调用一次</li>\n<li><code>Disposable.dispose()</code>调用后，<code>onNext</code>将接受不到发出的4，5事件（<strong>但是emitter.onNext(4);</strong><br>​                <strong>emitter.onNext(5)确实执行了；</strong></li>\n<li>Disposable的用处不止这些, 后面讲解到了线程的调度之后, 我们会发现它的重要性.后续补充</li>\n</ul>\n<h3 id=\"subscribe-的多个重载的方法\"><a href=\"#subscribe-的多个重载的方法\" class=\"headerlink\" title=\"subscribe()的多个重载的方法\"></a><code>subscribe()</code>的多个重载的方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span>,<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Disposable <span class=\"title\">subscribe</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"number\">2</span>,<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Disposable <span class=\"title\">subscribe</span><span class=\"params\">(Consumer&lt;? <span class=\"keyword\">super</span> T&gt; onNext)</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"number\">3</span>,<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Disposable <span class=\"title\">subscribe</span><span class=\"params\">(Consumer&lt;? <span class=\"keyword\">super</span> T&gt; onNext, Consumer&lt;? <span class=\"keyword\">super</span> Throwable&gt; \tonError)</span> </span>&#123;&#125; </div><div class=\"line\"><span class=\"number\">4</span>,<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Disposable <span class=\"title\">subscribe</span><span class=\"params\">(Consumer&lt;? <span class=\"keyword\">super</span> T&gt; onNext, Consumer&lt;? <span class=\"keyword\">super</span> Throwable&gt; \tonError, Action onComplete)</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"number\">5</span>,<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Disposable <span class=\"title\">subscribe</span><span class=\"params\">(Consumer&lt;? <span class=\"keyword\">super</span> T&gt; onNext, Consumer&lt;? <span class=\"keyword\">super</span> Throwable&gt; \tonError, Action onComplete, Consumer&lt;? <span class=\"keyword\">super</span> Disposable&gt; onSubscribe)</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"number\">6</span>,<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">subscribe</span><span class=\"params\">(Observer&lt;? <span class=\"keyword\">super</span> T&gt; observer)</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>不带任何参数的<code>subscribe()</code> 表示下游不关心任何事件,你上游尽管发你的数据去吧, 下游无法接受</li>\n<li>带有一个<code>Consumer</code>参数的方法表示下游只关心onNext事件, 其他的事件我假装没看见, 因此我们如果只需要onNext事件可以这么写</li>\n<li><code>Observer</code>参数，如例子，比较完整的onSubscribe，onNext，onComplete，onError</li>\n<li>如果我们不需要其他回调，可选择我们需要的<code>Consumer</code> 的具体参数</li>\n</ul>\n<p><a href=\"https://www.jianshu.com/p/464fa025229e\">参考链接</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjkcgh6mc00051kyg5eawlutx","category_id":"cjkcgh6m900021kyg3xcof5vt","_id":"cjkcgh6mf000b1kygirp44z03"},{"post_id":"cjkcgh6m100001kyguqk46mj2","category_id":"cjkcgh6m900021kyg3xcof5vt","_id":"cjkcgh6mj000g1kygmnowbzhx"},{"post_id":"cjkcgh6me000a1kygwwtj660o","category_id":"cjkcgh6m900021kyg3xcof5vt","_id":"cjkcgh6mk000j1kyg5rk4p3v7"},{"post_id":"cjkcgh6m700011kygt246os06","category_id":"cjkcgh6m900021kyg3xcof5vt","_id":"cjkcgh6mm000o1kygtrg16lu2"},{"post_id":"cjkcgh6mk000i1kygjr73uxg1","category_id":"cjkcgh6m900021kyg3xcof5vt","_id":"cjkcgh6mn000r1kygsbukv7hv"},{"post_id":"cjkcgh6mb00041kygj1vjlpdi","category_id":"cjkcgh6m900021kyg3xcof5vt","_id":"cjkcgh6mo000w1kygkootxvib"},{"post_id":"cjkcgh6mm000q1kygvyukqpse","category_id":"cjkcgh6ml000m1kygq26v4xfr","_id":"cjkcgh6mp000z1kyg7mgakudf"},{"post_id":"cjkcgh6mc00061kygclj4134z","category_id":"cjkcgh6ml000m1kygq26v4xfr","_id":"cjkcgh6mr00141kyg4smk2u92"},{"post_id":"cjkcgh6mn000t1kygj7x1a8d1","category_id":"cjkcgh6ml000m1kygq26v4xfr","_id":"cjkcgh6ms00171kygjbxdygup"},{"post_id":"cjkcgh6mo000y1kyg4qctp6sc","category_id":"cjkcgh6m900021kyg3xcof5vt","_id":"cjkcgh6mt001a1kygc2lmb375"},{"post_id":"cjkcgh6mg000d1kyglo39dt7y","category_id":"cjkcgh6ml000m1kygq26v4xfr","_id":"cjkcgh6mu001f1kygidp3cy99"},{"post_id":"cjkcgh6mp00111kyg28qhupw0","category_id":"cjkcgh6ml000m1kygq26v4xfr","_id":"cjkcgh6mv001i1kygdsb3d72s"},{"post_id":"cjkcgh6mr00161kyga970j0ks","category_id":"cjkcgh6ml000m1kygq26v4xfr","_id":"cjkcgh6mw001l1kygxalcu35v"},{"post_id":"cjkcgh6ml000l1kyg3qq3n9n0","category_id":"cjkcgh6ml000m1kygq26v4xfr","_id":"cjkcgh6mx001q1kygo2pbly8w"},{"post_id":"cjkcgh6mt001c1kygo1dxvjh4","category_id":"cjkcgh6m900021kyg3xcof5vt","_id":"cjkcgh6my001t1kyg1ho49m3g"},{"post_id":"cjkcgh6mv001k1kyg7fslntmx","category_id":"cjkcgh6m900021kyg3xcof5vt","_id":"cjkcgh6mz001w1kygct6w2gha"},{"post_id":"cjkcgh6ms00191kygas1uyb9x","category_id":"cjkcgh6mu001d1kyghtvt0hj1","_id":"cjkcgh6n0001z1kygug6znoyf"},{"post_id":"cjkcgh6mw001n1kyg2tf6ssme","category_id":"cjkcgh6m900021kyg3xcof5vt","_id":"cjkcgh6n100221kyg8qha3kbo"},{"post_id":"cjkcgh6mx001s1kygl7ym9x56","category_id":"cjkcgh6m900021kyg3xcof5vt","_id":"cjkcgh6n300271kygidc5of13"},{"post_id":"cjkcgh6mu001h1kyg1bymqj7s","category_id":"cjkcgh6mu001d1kyghtvt0hj1","_id":"cjkcgh6n4002a1kyg3tsvt59q"},{"post_id":"cjkcgh6my001v1kygm0y1mb80","category_id":"cjkcgh6m900021kyg3xcof5vt","_id":"cjkcgh6n5002d1kyg0xt6cfal"},{"post_id":"cjkcgh6mz001y1kygv1bs2w71","category_id":"cjkcgh6ml000m1kygq26v4xfr","_id":"cjkcgh6n6002g1kygjvbxins0"},{"post_id":"cjkcgh6n100241kyg01q1m1ec","category_id":"cjkcgh6m900021kyg3xcof5vt","_id":"cjkcgh6n7002j1kyggnz8zsc0"},{"post_id":"cjkcgh6n300291kyg3mu9xfpp","category_id":"cjkcgh6m900021kyg3xcof5vt","_id":"cjkcgh6n8002m1kygnvgxqz39"},{"post_id":"cjkcgh6n4002c1kygfb0ba8t0","category_id":"cjkcgh6m900021kyg3xcof5vt","_id":"cjkcgh6n9002p1kygtnt3a1b6"},{"post_id":"cjkcgh6n000211kygxy05ebii","category_id":"cjkcgh6n200251kygbbutb2qj","_id":"cjkcgh6na002s1kyg76amkj26"},{"post_id":"cjkcgh6n6002f1kygbwm5rc0z","category_id":"cjkcgh6m900021kyg3xcof5vt","_id":"cjkcgh6nc002v1kygxzbdsg9m"},{"post_id":"cjkcgh6n6002i1kygd8qup6nt","category_id":"cjkcgh6m900021kyg3xcof5vt","_id":"cjkcgh6nd002y1kygcatokn6f"},{"post_id":"cjkcgh6n7002l1kygtztt2b6n","category_id":"cjkcgh6m900021kyg3xcof5vt","_id":"cjkcgh6ne00311kygoumcjov1"},{"post_id":"cjkcgh6n8002o1kyg3n3aftdk","category_id":"cjkcgh6m900021kyg3xcof5vt","_id":"cjkcgh6nf00361kygd0hafajb"},{"post_id":"cjkcgh6n9002r1kygdfrgab5b","category_id":"cjkcgh6m900021kyg3xcof5vt","_id":"cjkcgh6ng00391kyglg29t17u"},{"post_id":"cjkcgh6na002u1kygl8ytxh5l","category_id":"cjkcgh6m900021kyg3xcof5vt","_id":"cjkcgh6nh003c1kygedztdkv4"},{"post_id":"cjkcgh6nc002x1kygdkxc2m9w","category_id":"cjkcgh6m900021kyg3xcof5vt","_id":"cjkcgh6ni003f1kyg4tqomp2q"},{"post_id":"cjkcgh6ne00331kygkk55pkjd","category_id":"cjkcgh6m900021kyg3xcof5vt","_id":"cjkcgh6nj003i1kygdjpquyjk"},{"post_id":"cjkcgh6ng00381kygasy19z7r","category_id":"cjkcgh6m900021kyg3xcof5vt","_id":"cjkcgh6nk003l1kygawhqm3ta"},{"post_id":"cjkcgh6ng003b1kygdn69ejtp","category_id":"cjkcgh6m900021kyg3xcof5vt","_id":"cjkcgh6nl003o1kyg04kj7d2b"},{"post_id":"cjkcgh6nd00301kygrcegb0mc","category_id":"cjkcgh6nf00341kygye2bolug","_id":"cjkcgh6nm003r1kyg3u385iys"},{"post_id":"cjkcgh6nh003e1kyguu5ol2i9","category_id":"cjkcgh6nf00341kygye2bolug","_id":"cjkcgh6nn003u1kygt6s9pzgx"},{"post_id":"cjkcgh6ni003h1kygi0724rjv","category_id":"cjkcgh6m900021kyg3xcof5vt","_id":"cjkcgh6no003y1kygr6zd2u5o"},{"post_id":"cjkcgh6nk003k1kyggw5pn1q2","category_id":"cjkcgh6m900021kyg3xcof5vt","_id":"cjkcgh6np00411kygzx033w5o"},{"post_id":"cjkcgh6nl003n1kygbx2xhq7l","category_id":"cjkcgh6m900021kyg3xcof5vt","_id":"cjkcgh6nq00441kygmvgzszz8"},{"post_id":"cjkcgh6nl003q1kyguwygtl9j","category_id":"cjkcgh6m900021kyg3xcof5vt","_id":"cjkcgh6nr00471kygd7oh7tvh"},{"post_id":"cjkcgh6nn003w1kyga33bp0z7","category_id":"cjkcgh6m900021kyg3xcof5vt","_id":"cjkcgh6ns00491kygjuov9zcn"},{"post_id":"cjkcgh6no00401kyg7bcnoi44","category_id":"cjkcgh6m900021kyg3xcof5vt","_id":"cjkcgh6nt004b1kyghqajerc4"},{"post_id":"cjkcgh6np00431kygyaorgo49","category_id":"cjkcgh6n200251kygbbutb2qj","_id":"cjkcgh6nt004d1kyg9g9ao59r"},{"post_id":"cjkcgh6nm003t1kyg5ph4y3q5","category_id":"cjkcgh6nn003x1kygiu2o9p0t","_id":"cjkcgh6nt004f1kygkdldk11d"},{"post_id":"cjkcgh6nq00461kygyh0e972k","category_id":"cjkcgh6m900021kyg3xcof5vt","_id":"cjkcgh6nt004h1kyg089hhydp"},{"post_id":"cjkcgh6ny004i1kygyvb7o6s6","category_id":"cjkcgh6m900021kyg3xcof5vt","_id":"cjkcgh6o1004o1kygvyxhbs6j"},{"post_id":"cjkcgh6nz004k1kygnds1ca9w","category_id":"cjkcgh6mu001d1kyghtvt0hj1","_id":"cjkcgh6o1004q1kygiov9rcgf"}],"PostTag":[{"post_id":"cjkcgh6mc00051kyg5eawlutx","tag_id":"cjkcgh6ma00031kygoshjgu3e","_id":"cjkcgh6me00091kyg2oavgkhl"},{"post_id":"cjkcgh6m100001kyguqk46mj2","tag_id":"cjkcgh6ma00031kygoshjgu3e","_id":"cjkcgh6mf000c1kygmkc6ux4x"},{"post_id":"cjkcgh6me000a1kygwwtj660o","tag_id":"cjkcgh6ma00031kygoshjgu3e","_id":"cjkcgh6mk000h1kygq4ta7uco"},{"post_id":"cjkcgh6m700011kygt246os06","tag_id":"cjkcgh6ma00031kygoshjgu3e","_id":"cjkcgh6ml000k1kyg8xvlkyvv"},{"post_id":"cjkcgh6mk000i1kygjr73uxg1","tag_id":"cjkcgh6ma00031kygoshjgu3e","_id":"cjkcgh6mm000p1kyg9bw2xhsk"},{"post_id":"cjkcgh6mb00041kygj1vjlpdi","tag_id":"cjkcgh6ma00031kygoshjgu3e","_id":"cjkcgh6mn000s1kyg9lyr8dtx"},{"post_id":"cjkcgh6mm000q1kygvyukqpse","tag_id":"cjkcgh6ml000n1kygkctkzkmb","_id":"cjkcgh6mo000x1kyg58xxewuf"},{"post_id":"cjkcgh6mc00061kygclj4134z","tag_id":"cjkcgh6ml000n1kygkctkzkmb","_id":"cjkcgh6mp00101kygpeac2b7s"},{"post_id":"cjkcgh6mn000t1kygj7x1a8d1","tag_id":"cjkcgh6ml000n1kygkctkzkmb","_id":"cjkcgh6mr00151kygqm8liewp"},{"post_id":"cjkcgh6mo000y1kyg4qctp6sc","tag_id":"cjkcgh6ma00031kygoshjgu3e","_id":"cjkcgh6ms00181kyga7027wpf"},{"post_id":"cjkcgh6mg000d1kyglo39dt7y","tag_id":"cjkcgh6ml000n1kygkctkzkmb","_id":"cjkcgh6mt001b1kygmhn8l222"},{"post_id":"cjkcgh6mp00111kyg28qhupw0","tag_id":"cjkcgh6ml000n1kygkctkzkmb","_id":"cjkcgh6mu001g1kygapj3elng"},{"post_id":"cjkcgh6mr00161kyga970j0ks","tag_id":"cjkcgh6ml000n1kygkctkzkmb","_id":"cjkcgh6mv001j1kygacxbad6v"},{"post_id":"cjkcgh6ml000l1kyg3qq3n9n0","tag_id":"cjkcgh6ml000n1kygkctkzkmb","_id":"cjkcgh6mw001m1kyg8po53x2h"},{"post_id":"cjkcgh6mt001c1kygo1dxvjh4","tag_id":"cjkcgh6ma00031kygoshjgu3e","_id":"cjkcgh6mx001r1kyg34e65sm6"},{"post_id":"cjkcgh6mv001k1kyg7fslntmx","tag_id":"cjkcgh6ma00031kygoshjgu3e","_id":"cjkcgh6my001u1kygswefc6o7"},{"post_id":"cjkcgh6ms00191kygas1uyb9x","tag_id":"cjkcgh6mu001e1kyg7xswdv8a","_id":"cjkcgh6mz001x1kygkhrx3hvf"},{"post_id":"cjkcgh6mw001n1kyg2tf6ssme","tag_id":"cjkcgh6ma00031kygoshjgu3e","_id":"cjkcgh6n000201kygt31a5tys"},{"post_id":"cjkcgh6mx001s1kygl7ym9x56","tag_id":"cjkcgh6ma00031kygoshjgu3e","_id":"cjkcgh6n100231kyg3zhwqewn"},{"post_id":"cjkcgh6mu001h1kyg1bymqj7s","tag_id":"cjkcgh6mu001e1kyg7xswdv8a","_id":"cjkcgh6n300281kygrdmv03c5"},{"post_id":"cjkcgh6my001v1kygm0y1mb80","tag_id":"cjkcgh6ma00031kygoshjgu3e","_id":"cjkcgh6n4002b1kygfep9o3wn"},{"post_id":"cjkcgh6mz001y1kygv1bs2w71","tag_id":"cjkcgh6ml000n1kygkctkzkmb","_id":"cjkcgh6n6002e1kygrx1p1l6h"},{"post_id":"cjkcgh6n100241kyg01q1m1ec","tag_id":"cjkcgh6ma00031kygoshjgu3e","_id":"cjkcgh6n6002h1kygzxyk8xdi"},{"post_id":"cjkcgh6n300291kyg3mu9xfpp","tag_id":"cjkcgh6ma00031kygoshjgu3e","_id":"cjkcgh6n7002k1kygcsqjpfzc"},{"post_id":"cjkcgh6n4002c1kygfb0ba8t0","tag_id":"cjkcgh6ma00031kygoshjgu3e","_id":"cjkcgh6n8002n1kygmfn8ezry"},{"post_id":"cjkcgh6n000211kygxy05ebii","tag_id":"cjkcgh6n300261kyghu34hyba","_id":"cjkcgh6n9002q1kygec6hakun"},{"post_id":"cjkcgh6n6002f1kygbwm5rc0z","tag_id":"cjkcgh6ma00031kygoshjgu3e","_id":"cjkcgh6na002t1kygn9r0i2a2"},{"post_id":"cjkcgh6n6002i1kygd8qup6nt","tag_id":"cjkcgh6ma00031kygoshjgu3e","_id":"cjkcgh6nc002w1kygjtv6ef37"},{"post_id":"cjkcgh6n7002l1kygtztt2b6n","tag_id":"cjkcgh6ma00031kygoshjgu3e","_id":"cjkcgh6nd002z1kygzoynxobx"},{"post_id":"cjkcgh6n8002o1kyg3n3aftdk","tag_id":"cjkcgh6ma00031kygoshjgu3e","_id":"cjkcgh6ne00321kyga3wmjn2s"},{"post_id":"cjkcgh6n9002r1kygdfrgab5b","tag_id":"cjkcgh6ma00031kygoshjgu3e","_id":"cjkcgh6nf00371kyg2hirk3tj"},{"post_id":"cjkcgh6na002u1kygl8ytxh5l","tag_id":"cjkcgh6ma00031kygoshjgu3e","_id":"cjkcgh6ng003a1kygjm1ipyvs"},{"post_id":"cjkcgh6nc002x1kygdkxc2m9w","tag_id":"cjkcgh6ma00031kygoshjgu3e","_id":"cjkcgh6nh003d1kygaelqmxz5"},{"post_id":"cjkcgh6ne00331kygkk55pkjd","tag_id":"cjkcgh6ma00031kygoshjgu3e","_id":"cjkcgh6ni003g1kyg241tjsqn"},{"post_id":"cjkcgh6ng00381kygasy19z7r","tag_id":"cjkcgh6ma00031kygoshjgu3e","_id":"cjkcgh6nj003j1kygkjjla8lg"},{"post_id":"cjkcgh6ng003b1kygdn69ejtp","tag_id":"cjkcgh6ma00031kygoshjgu3e","_id":"cjkcgh6nl003m1kygfk8q1tvp"},{"post_id":"cjkcgh6nd00301kygrcegb0mc","tag_id":"cjkcgh6nf00351kygbkf1i3ri","_id":"cjkcgh6nl003p1kygorx3vbjn"},{"post_id":"cjkcgh6nh003e1kyguu5ol2i9","tag_id":"cjkcgh6nf00351kygbkf1i3ri","_id":"cjkcgh6nm003s1kygdhbxdy0u"},{"post_id":"cjkcgh6ni003h1kygi0724rjv","tag_id":"cjkcgh6ma00031kygoshjgu3e","_id":"cjkcgh6nn003v1kygat7o1cor"},{"post_id":"cjkcgh6nk003k1kyggw5pn1q2","tag_id":"cjkcgh6ma00031kygoshjgu3e","_id":"cjkcgh6no003z1kygzfzkrtv1"},{"post_id":"cjkcgh6nl003n1kygbx2xhq7l","tag_id":"cjkcgh6ma00031kygoshjgu3e","_id":"cjkcgh6np00421kygmc7opfd4"},{"post_id":"cjkcgh6nl003q1kyguwygtl9j","tag_id":"cjkcgh6ma00031kygoshjgu3e","_id":"cjkcgh6nq00451kyg73u1a88m"},{"post_id":"cjkcgh6nm003t1kyg5ph4y3q5","tag_id":"cjkcgh6ma00031kygoshjgu3e","_id":"cjkcgh6nr00481kygz2ja5w3f"},{"post_id":"cjkcgh6nn003w1kyga33bp0z7","tag_id":"cjkcgh6ma00031kygoshjgu3e","_id":"cjkcgh6ns004a1kygz2zme642"},{"post_id":"cjkcgh6no00401kyg7bcnoi44","tag_id":"cjkcgh6ma00031kygoshjgu3e","_id":"cjkcgh6nt004c1kygkoocx7fm"},{"post_id":"cjkcgh6np00431kygyaorgo49","tag_id":"cjkcgh6n300261kyghu34hyba","_id":"cjkcgh6nt004e1kygoiywtet4"},{"post_id":"cjkcgh6nq00461kygyh0e972k","tag_id":"cjkcgh6ma00031kygoshjgu3e","_id":"cjkcgh6nt004g1kyg54uzoc1v"},{"post_id":"cjkcgh6ny004i1kygyvb7o6s6","tag_id":"cjkcgh6ma00031kygoshjgu3e","_id":"cjkcgh6o0004m1kyg22hf6kfw"},{"post_id":"cjkcgh6nz004k1kygnds1ca9w","tag_id":"cjkcgh6mu001e1kyg7xswdv8a","_id":"cjkcgh6o1004p1kygs3jyxbu3"}],"Tag":[{"name":"Android","_id":"cjkcgh6ma00031kygoshjgu3e"},{"name":"RN","_id":"cjkcgh6ml000n1kygkctkzkmb"},{"name":"Rxjava","_id":"cjkcgh6mu001e1kyg7xswdv8a"},{"name":"Dev","_id":"cjkcgh6n300261kyghu34hyba"},{"name":"Life","_id":"cjkcgh6nf00351kygbkf1i3ri"}]}}