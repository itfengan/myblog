{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.png","path":"favicon.png","modified":0,"renderable":0},{"_id":"source/uploads/wechat-qcode.jpg","path":"uploads/wechat-qcode.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/myimg.jpg","path":"images/myimg.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/favicon.png","hash":"81d9781886293ade0f24e69a1cc06ff91ae777e7","modified":1510639315000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1510639315000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1510639315000},{"_id":"themes/next/.gitignore","hash":"efec790f5b7a0256763e1cc08f12c4f0aff509f6","modified":1510639315000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1510639315000},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1510639315000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1510639315000},{"_id":"themes/next/_config.yml","hash":"75e4e4954caa633c8b12704403f5b6b819bd10a1","modified":1510639315000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1510639315000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1510639315000},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1510639315000},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1510639315000},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1510639315000},{"_id":"source/_posts/Android-阴影布局-继承FrameLayout.md","hash":"35315d825291a3c5f75bbffcc6fe704f91d25f37","modified":1510639315000},{"_id":"source/_posts/Android7-0之广播变动.md","hash":"c67304a7ec57ac1710a26b4a09f957735585a729","modified":1510639315000},{"_id":"source/_posts/Android7-0之应用间共享文件.md","hash":"693ca3fd1ddc7fe6b7fb9331e9844d3ef195b281","modified":1510639315000},{"_id":"source/_posts/Gson封装.md","hash":"0d3aafe5320a4cc89ff75fc97d0caeb6ce36ca96","modified":1510639315000},{"_id":"source/_posts/view被软键盘挡住和点击外部软键盘消失.md","hash":"065079b700ed8e36706d61a2f910a63e4fab15ab","modified":1510639315000},{"_id":"source/_posts/“我的第一篇文章”.md","hash":"f8e8eb3df43d3dc9b126bd633f8b4733046b17fe","modified":1510639428000},{"_id":"source/_posts/保存图片到本地.md","hash":"41f1f983aa48aca40f0dba276228cfa7ed60ca11","modified":1510639315000},{"_id":"source/_posts/图片上传-角度不正确.md","hash":"d3e32a32b61357b009c20bc0babaa7c26cd51ae8","modified":1510639315000},{"_id":"source/_posts/祝你今天心情愉快.md","hash":"ba0fd18c6554a1127834e74a2ecd793efd015e95","modified":1510639315000},{"_id":"source/_posts/随滑动改变的的动态矩形背景.md","hash":"94c8844614c62c2bf037e73ce764b436e3a5157d","modified":1510639315000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1510639315000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1510639315000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1510639315000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1510639315000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1510639315000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1510639315000},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1510639315000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1510639315000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1510639315000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1510639315000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1510639315000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1510639315000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1510639315000},{"_id":"themes/next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1510639315000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1510639315000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1510639315000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1510639315000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1510639315000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1510639315000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1510639315000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1510639315000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1510639315000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1510639315000},{"_id":"themes/next/test/.jshintrc","hash":"096ed6df627373edd820f24d46b8baf528dee61d","modified":1510639315000},{"_id":"source/uploads/wechat-qcode.jpg","hash":"07a245af7df3ed177865e1550244e230e71bb7da","modified":1510639315000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1510639315000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1510639315000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1510639315000},{"_id":"themes/next/layout/_macro/post.swig","hash":"1ca03011bed92614832b1343b65be92183957dc5","modified":1510639315000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b883289054ee54a374caad5d4883591beb94bd8b","modified":1510639315000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"85327c2174d09c6d69c9033592e6c8f7eb7ac3ba","modified":1510639315000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"82a9bc2ba60ce68419128ff60624bd74b15dfb78","modified":1510639315000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1510639315000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"0ce71d8322ea7dea82d9371fa2fe13949aa870e3","modified":1510639315000},{"_id":"themes/next/layout/_partials/head.swig","hash":"f83b1c55bedd2c1a3eb734c72c6997795a4e5f99","modified":1510639315000},{"_id":"themes/next/layout/_partials/header.swig","hash":"963a765dc00e6ac43cfc53ffaf5725eb854cf95e","modified":1510639315000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1510639315000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1510639315000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1510639315000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1510639315000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1510639315000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1510639315000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1510639315000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1510639315000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1510639315000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1510639315000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1510639315000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1510639315000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1510639315000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1510639315000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1510639315000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1510639315000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1510639315000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1510639315000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1510639315000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1510639315000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1510639315000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1510639315000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1510639315000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1510639315000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1510639315000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1510639315000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1510639315000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1510639315000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1510639315000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1510639315000},{"_id":"themes/next/source/images/myimg.jpg","hash":"11ab9ecdabcb0dcb10a69d7c22f6d335bdcd6073","modified":1510639315000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1510639315000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1510639315000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1510639315000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1510639315000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1510639315000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1510639315000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1510639315000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1510639315000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1510639315000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1510639315000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1510639315000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1510639315000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"069bb17fb1db3bc7c85c88efa3ed94ab6becbe2c","modified":1510639315000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"1561bd0c107d725252c6d746e9ac177fc18f93bf","modified":1510639315000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1510639315000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1510639315000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1510639315000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1510639315000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1510639315000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1510639315000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1510639315000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1510639315000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1510639315000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1510639315000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1510639315000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1510639315000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1510639315000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1510639315000},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1510639315000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1510639315000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1510639315000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1510639315000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1510639315000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1510639315000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1510639315000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1510639315000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1510639315000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1510639315000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1510639315000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1510639315000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1510639315000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1510639315000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1510639315000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1510639315000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1510639315000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1510639315000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1510639315000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1510639315000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1510639315000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1510639315000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1510639315000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1510639315000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1510639315000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"44e761721e8ad787ef571a3cc57bbc12d318a2a3","modified":1510639315000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"334176d838ee528e58468d8bc74ff3a6d3f25b2b","modified":1510639315000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1510639315000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1510639315000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1510639315000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"8c7af79407d223486fba72b8150fe045a553bf70","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1510639315000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1510639315000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1510639315000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1510639315000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1510639315000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1510639315000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1510639315000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1510639315000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1510639315000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1510639315000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1510639315000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1510639315000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1510639315000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1510639315000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1510639315000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1510639315000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1510639315000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1510639315000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1510639315000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1510639315000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1510639315000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1510639315000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1510639315000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1510639315000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1510639315000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1510639315000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1510639315000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1510639315000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1510639315000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1510639315000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1510639315000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1510639315000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1510639315000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1510639315000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1510639315000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1510639315000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1510639315000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1510639315000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1510639315000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1510639315000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1510639315000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1510639315000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1510639315000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1510639315000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1510639315000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1510639315000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1510639315000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1510639315000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1510639315000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1510639315000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1510639315000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1510639315000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1510639315000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1510639315000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1510639315000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1510639315000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1510639315000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1510639315000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1510639315000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1510639315000},{"_id":"public/2017/08/08/祝你今天心情愉快/index.html","hash":"2b5c7c41ef27419c6c38ace6d6e5c5180c9ffa31","modified":1510639542885},{"_id":"public/2017/01/23/Android7-0之广播变动/index.html","hash":"d0f1a42c0e1d1845f9c1537f4ba3d293ea3716a6","modified":1510639542885},{"_id":"public/archives/index.html","hash":"b75e1fc209f6bb01106aea7f144b96683414adca","modified":1510639542885},{"_id":"public/archives/2017/index.html","hash":"06b0fa400ffb1557c7f879dafdb0a0e84935eedc","modified":1510639542885},{"_id":"public/archives/2017/01/index.html","hash":"7a7edc40da2d87d09040282d40d11c6fc7629a27","modified":1510639542885},{"_id":"public/archives/2017/03/index.html","hash":"e6b21a797a3bcb2390a4e5dc2c30bcc7767e909a","modified":1510639542885},{"_id":"public/archives/2017/08/index.html","hash":"7b7fceb3e958996636be1c90157ec06e39474672","modified":1510639542885},{"_id":"public/archives/2017/10/index.html","hash":"550a84b1273c0252ba645a2c6cd8f25b1fd7e0e2","modified":1510639542885},{"_id":"public/tags/Android/index.html","hash":"6ef84e801663edd159047b762cbaf4982d67bbfa","modified":1510639542885},{"_id":"public/2017/10/11/随滑动改变的的动态矩形背景/index.html","hash":"921461b2cd3cd92b77245dfb08f09066358a1e9e","modified":1510639542885},{"_id":"public/2017/08/21/Gson封装/index.html","hash":"352640542607d881270d1abfa80358dca849244e","modified":1510639542885},{"_id":"public/2017/08/21/view被软键盘挡住和点击外部软键盘消失/index.html","hash":"0d0651d15bf86da96cde2efbaebc8c2d40db98f5","modified":1510639542885},{"_id":"public/2017/08/21/保存图片到本地/index.html","hash":"c1b38122fa30568b962689994758e027471f8f76","modified":1510639542886},{"_id":"public/2017/08/08/图片上传-角度不正确/index.html","hash":"1fdea9e0bfa57c65ea60b0ad92523dfc4223bf33","modified":1510639542886},{"_id":"public/2017/03/15/Android-阴影布局-继承FrameLayout/index.html","hash":"5d370f57134222483e2c34d38567cb691645cf65","modified":1510639542886},{"_id":"public/2017/01/23/Android7-0之应用间共享文件/index.html","hash":"89b1d0f40fc0dd34eab0030958c83f4f2c143c6a","modified":1510639542886},{"_id":"public/index.html","hash":"3ca8a6c9304be7f8e88c1ba074b20db5154a200c","modified":1510639542886},{"_id":"public/2017/11/14/“我的第一篇文章”/index.html","hash":"27e62e9ecc457ffdfe515edcd6721e7bf0ba5bd2","modified":1510639445570},{"_id":"public/archives/2017/11/index.html","hash":"55708f89ec5bc2c18777548c512280d909e98c0e","modified":1510639445570},{"_id":"public/favicon.png","hash":"81d9781886293ade0f24e69a1cc06ff91ae777e7","modified":1510639445573},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1510639445573},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1510639445573},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1510639445573},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1510639445573},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1510639445573},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1510639445573},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1510639445573},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1510639445573},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1510639445573},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1510639445574},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1510639445574},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1510639445574},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1510639445574},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1510639445574},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1510639445574},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1510639445574},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1510639445574},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1510639445574},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1510639445574},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1510639445574},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1510639445574},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1510639445574},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1510639445574},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1510639445574},{"_id":"public/uploads/wechat-qcode.jpg","hash":"07a245af7df3ed177865e1550244e230e71bb7da","modified":1510639446159},{"_id":"public/images/myimg.jpg","hash":"11ab9ecdabcb0dcb10a69d7c22f6d335bdcd6073","modified":1510639446160},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1510639446163},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1510639446163},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1510639446163},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1510639446166},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1510639446166},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1510639446166},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1510639446166},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1510639446166},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1510639446166},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1510639446166},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1510639446166},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1510639446166},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1510639446166},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1510639446166},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1510639446166},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1510639446166},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1510639446166},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1510639446166},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1510639446166},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1510639446166},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1510639446166},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1510639446167},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1510639446167},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1510639446167},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1510639446167},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1510639446167},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1510639446167},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1510639446167},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1510639446167},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1510639446168},{"_id":"public/css/main.css","hash":"0c70410a2f7c13fef1770d05e4943d9252b72ada","modified":1510639446168},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1510639446168},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1510639446168},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1510639446168},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1510639446168},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1510639446168},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1510639446168},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1510639446168},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1510639446169},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1510639446169},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1510639446169},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1510639446175},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1510639539000}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Android7.0之广播变动","date":"2017-01-23T09:45:15.000Z","_content":"#### Android7.0的后台优化 ####\nAndroid中有一些系统的隐式广播,我们可以利用这些广播注册BroadCastReceiver来监听,比如手机网络变动(Wifi的时候自动下载更新包,发送错误日志),当这些广播到来的时候(网络从Wifi到移动数据来回切换的时候),后台会频繁的启动已经监听这些的应用,并且现在很多应用都会注册这些广播(如网络变化),那么就会带来大量的电量消耗,所以Android7.0中删除了三项隐式广播,又花了内存和电量的消耗\n\n<!--more-->\n#### 具体体现 ####\n- Android7.0以上应用不会接受和发送以下三种广播\n1. CONNECTIVITY_ACTION广播:网络状态改变\n2. ACTION_NEW_PICTURE广播:一个新的相机,拍照和图片的添加\n3. ACTION_NEW_VIDEO广播:一个新的视频摄像记录下来\n\n#### 解决办法 ####\n可以使用JobScheduler API(Android5.0提供),任务调度,可以使你再未来的某个时间点满足某个特定条件执行一个任务(当设备连接到Wifi,连通电源适配器的时候),具体用法以后再次整理.\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=28285910&auto=1&height=66\"></iframe>","source":"_posts/Android7-0之广播变动.md","raw":"---\ntitle: Android7.0之广播变动\ndate: 2017-01-23 17:45:15\ntags: Android\n---\n#### Android7.0的后台优化 ####\nAndroid中有一些系统的隐式广播,我们可以利用这些广播注册BroadCastReceiver来监听,比如手机网络变动(Wifi的时候自动下载更新包,发送错误日志),当这些广播到来的时候(网络从Wifi到移动数据来回切换的时候),后台会频繁的启动已经监听这些的应用,并且现在很多应用都会注册这些广播(如网络变化),那么就会带来大量的电量消耗,所以Android7.0中删除了三项隐式广播,又花了内存和电量的消耗\n\n<!--more-->\n#### 具体体现 ####\n- Android7.0以上应用不会接受和发送以下三种广播\n1. CONNECTIVITY_ACTION广播:网络状态改变\n2. ACTION_NEW_PICTURE广播:一个新的相机,拍照和图片的添加\n3. ACTION_NEW_VIDEO广播:一个新的视频摄像记录下来\n\n#### 解决办法 ####\n可以使用JobScheduler API(Android5.0提供),任务调度,可以使你再未来的某个时间点满足某个特定条件执行一个任务(当设备连接到Wifi,连通电源适配器的时候),具体用法以后再次整理.\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=28285910&auto=1&height=66\"></iframe>","slug":"Android7-0之广播变动","published":1,"updated":"2017-11-14T06:01:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9z7pyye0000sbyg1jlh8v86","content":"<h4 id=\"Android7-0的后台优化\"><a href=\"#Android7-0的后台优化\" class=\"headerlink\" title=\"Android7.0的后台优化\"></a>Android7.0的后台优化</h4><p>Android中有一些系统的隐式广播,我们可以利用这些广播注册BroadCastReceiver来监听,比如手机网络变动(Wifi的时候自动下载更新包,发送错误日志),当这些广播到来的时候(网络从Wifi到移动数据来回切换的时候),后台会频繁的启动已经监听这些的应用,并且现在很多应用都会注册这些广播(如网络变化),那么就会带来大量的电量消耗,所以Android7.0中删除了三项隐式广播,又花了内存和电量的消耗</p>\n<a id=\"more\"></a>\n<h4 id=\"具体体现\"><a href=\"#具体体现\" class=\"headerlink\" title=\"具体体现\"></a>具体体现</h4><ul>\n<li>Android7.0以上应用不会接受和发送以下三种广播</li>\n</ul>\n<ol>\n<li>CONNECTIVITY_ACTION广播:网络状态改变</li>\n<li>ACTION_NEW_PICTURE广播:一个新的相机,拍照和图片的添加</li>\n<li>ACTION_NEW_VIDEO广播:一个新的视频摄像记录下来</li>\n</ol>\n<h4 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><p>可以使用JobScheduler API(Android5.0提供),任务调度,可以使你再未来的某个时间点满足某个特定条件执行一个任务(当设备连接到Wifi,连通电源适配器的时候),具体用法以后再次整理.</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"http://music.163.com/outchain/player?type=2&id=28285910&auto=1&height=66\"></iframe>","excerpt":"<h4 id=\"Android7-0的后台优化\"><a href=\"#Android7-0的后台优化\" class=\"headerlink\" title=\"Android7.0的后台优化\"></a>Android7.0的后台优化</h4><p>Android中有一些系统的隐式广播,我们可以利用这些广播注册BroadCastReceiver来监听,比如手机网络变动(Wifi的时候自动下载更新包,发送错误日志),当这些广播到来的时候(网络从Wifi到移动数据来回切换的时候),后台会频繁的启动已经监听这些的应用,并且现在很多应用都会注册这些广播(如网络变化),那么就会带来大量的电量消耗,所以Android7.0中删除了三项隐式广播,又花了内存和电量的消耗</p>","more":"<h4 id=\"具体体现\"><a href=\"#具体体现\" class=\"headerlink\" title=\"具体体现\"></a>具体体现</h4><ul>\n<li>Android7.0以上应用不会接受和发送以下三种广播</li>\n</ul>\n<ol>\n<li>CONNECTIVITY_ACTION广播:网络状态改变</li>\n<li>ACTION_NEW_PICTURE广播:一个新的相机,拍照和图片的添加</li>\n<li>ACTION_NEW_VIDEO广播:一个新的视频摄像记录下来</li>\n</ol>\n<h4 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><p>可以使用JobScheduler API(Android5.0提供),任务调度,可以使你再未来的某个时间点满足某个特定条件执行一个任务(当设备连接到Wifi,连通电源适配器的时候),具体用法以后再次整理.</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=28285910&auto=1&height=66\"></iframe>"},{"title":"Android　阴影布局(继承FrameLayout)","date":"2017-03-15T09:52:55.000Z","_content":"# 阴影布局(继承FrameLayout) #\n\n前言：\n很多情况下，美腻的UI美眉喜欢搞一些花里胡哨阴影什么的,作为一名有追求的程序员迎合美眉的需求，搞一些小阴影并不是什么大问题，比如写一个自定义shape，用5.0的ｚ轴新特性和CardView都可以满足的，但是有些效果不太符合预计设计的效果，像自定义shape作为背景，看起来阴影会有些假，用５．０新特性第一个是版本问题还一个是有时候不起作用，网上也有解决不起作用的方法，我试了，都不太起作用，用cardview的话，如果cardview包裹的太多太复杂的控件，效果也不是太明显，所以有一个自定义FrameLayout来自己画阴影，以后再碰见阴影就又多了一种手段，满足应付设计师\n\n<!--more-->\n\n[https://github.com/itfengan/xShadowLayout](https://github.com/itfengan/xShadowLayout)\n\n效果图\n\n![这里写图片描述](http://img.blog.csdn.net/20171010160954830?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmVuZ2FuaXQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n```\npackage fengan.shadowdemo;\n\n/**\n * Created by fengan on 2017/10/10/010.\n */\n\n\nimport android.annotation.SuppressLint;\nimport android.content.Context;\nimport android.content.res.TypedArray;\nimport android.graphics.Bitmap;\nimport android.graphics.BlurMaskFilter;\nimport android.graphics.Canvas;\nimport android.graphics.Color;\nimport android.graphics.Paint;\nimport android.graphics.PorterDuff;\nimport android.graphics.Rect;\nimport android.support.annotation.FloatRange;\nimport android.util.AttributeSet;\nimport android.widget.FrameLayout;\n\n/**\n * Created by fengan on 10.10.2017.\n */\npublic class ShadowLayout extends FrameLayout {\n\n    // Default shadow values\n    private final static float DEFAULT_SHADOW_RADIUS = 30.0F;\n    private final static float DEFAULT_SHADOW_DISTANCE = 15.0F;\n    private final static float DEFAULT_SHADOW_ANGLE = 45.0F;\n    private final static int DEFAULT_SHADOW_COLOR = Color.DKGRAY;\n\n    // Shadow bounds values\n    private final static int MAX_ALPHA = 255;\n    private final static float MAX_ANGLE = 360.0F;\n    private final static float MIN_RADIUS = 0.1F;\n    private final static float MIN_ANGLE = 0.0F;\n    // Shadow paint\n    private final Paint mPaint = new Paint(Paint.ANTI_ALIAS_FLAG) {\n        {\n            setDither(true);\n            setFilterBitmap(true);\n        }\n    };\n    // Shadow bitmap and canvas\n    private Bitmap mBitmap;\n    private final Canvas mCanvas = new Canvas();\n    // View bounds\n    private final Rect mBounds = new Rect();\n    // Check whether need to redraw shadow\n    private boolean mInvalidateShadow = true;\n\n    // Detect if shadow is visible\n    private boolean mIsShadowed;\n\n    // Shadow variables\n    private int mShadowColor;\n    private int mShadowAlpha;\n    private float mShadowRadius;\n    private float mShadowDistance;\n    private float mShadowAngle;\n    private float mShadowDx;\n    private float mShadowDy;\n\n    public ShadowLayout(final Context context) {\n        this(context, null);\n    }\n\n    public ShadowLayout(final Context context, final AttributeSet attrs) {\n        this(context, attrs, 0);\n    }\n\n    public ShadowLayout(final Context context, final AttributeSet attrs, final int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n\n        setWillNotDraw(false);\n        setLayerType(LAYER_TYPE_HARDWARE, mPaint);\n\n        // Retrieve attributes from xml\n        final TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.ShadowLayout);\n        try {\n            setIsShadowed(typedArray.getBoolean(R.styleable.ShadowLayout_fengan_shadowed, true));\n            setShadowRadius(\n                    typedArray.getDimension(\n                            R.styleable.ShadowLayout_fengan_shadow_radius, DEFAULT_SHADOW_RADIUS\n                    )\n            );\n            setShadowDistance(\n                    typedArray.getDimension(\n                            R.styleable.ShadowLayout_fengan_shadow_distance, DEFAULT_SHADOW_DISTANCE\n                    )\n            );\n            setShadowAngle(\n                    typedArray.getInteger(\n                            R.styleable.ShadowLayout_fengan_shadow_angle, (int) DEFAULT_SHADOW_ANGLE\n                    )\n            );\n            setShadowColor(\n                    typedArray.getColor(\n                            R.styleable.ShadowLayout_fengan_shadow_color, DEFAULT_SHADOW_COLOR\n                    )\n            );\n        } finally {\n            typedArray.recycle();\n        }\n    }\n\n    @Override\n    protected void onDetachedFromWindow() {\n        super.onDetachedFromWindow();\n        // Clear shadow bitmap\n        if (mBitmap != null) {\n            mBitmap.recycle();\n            mBitmap = null;\n        }\n    }\n\n    public boolean isShadowed() {\n        return mIsShadowed;\n    }\n\n    public void setIsShadowed(final boolean isShadowed) {\n        mIsShadowed = isShadowed;\n        postInvalidate();\n    }\n\n    public float getShadowDistance() {\n        return mShadowDistance;\n    }\n\n    public void setShadowDistance(final float shadowDistance) {\n        mShadowDistance = shadowDistance;\n        resetShadow();\n    }\n\n    public float getShadowAngle() {\n        return mShadowAngle;\n    }\n\n    @SuppressLint(\"SupportAnnotationUsage\")\n    @FloatRange\n    public void setShadowAngle(@FloatRange(from = MIN_ANGLE, to = MAX_ANGLE) final float shadowAngle) {\n        mShadowAngle = Math.max(MIN_ANGLE, Math.min(shadowAngle, MAX_ANGLE));\n        resetShadow();\n    }\n\n    public float getShadowRadius() {\n        return mShadowRadius;\n    }\n\n    public void setShadowRadius(final float shadowRadius) {\n        mShadowRadius = Math.max(MIN_RADIUS, shadowRadius);\n\n        if (isInEditMode()) return;\n        // Set blur filter to paint\n        mPaint.setMaskFilter(new BlurMaskFilter(mShadowRadius, BlurMaskFilter.Blur.NORMAL));\n        resetShadow();\n    }\n\n    public int getShadowColor() {\n        return mShadowColor;\n    }\n\n    public void setShadowColor(final int shadowColor) {\n        mShadowColor = shadowColor;\n        mShadowAlpha = Color.alpha(shadowColor);\n\n        resetShadow();\n    }\n\n    public float getShadowDx() {\n        return mShadowDx;\n    }\n\n    public float getShadowDy() {\n        return mShadowDy;\n    }\n\n    // Reset shadow layer\n    private void resetShadow() {\n        // Detect shadow axis offset\n        mShadowDx = (float) ((mShadowDistance) * Math.cos(mShadowAngle / 180.0F * Math.PI));\n        mShadowDy = (float) ((mShadowDistance) * Math.sin(mShadowAngle / 180.0F * Math.PI));\n\n        // Set padding for shadow bitmap\n        final int padding = (int) (mShadowDistance + mShadowRadius);\n        setPadding(padding, padding, padding, padding);\n        requestLayout();\n    }\n\n    private int adjustShadowAlpha(final boolean adjust) {\n        return Color.argb(\n                adjust ? MAX_ALPHA : mShadowAlpha,\n                Color.red(mShadowColor),\n                Color.green(mShadowColor),\n                Color.blue(mShadowColor)\n        );\n    }\n\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n\n        // Set ShadowLayout bounds\n        mBounds.set(\n                0, 0, MeasureSpec.getSize(widthMeasureSpec), MeasureSpec.getSize(heightMeasureSpec)\n        );\n    }\n\n    @Override\n    public void requestLayout() {\n        // Redraw shadow\n        mInvalidateShadow = true;\n        super.requestLayout();\n    }\n\n    @Override\n    protected void dispatchDraw(final Canvas canvas) {\n        // If is not shadowed, skip\n        if (mIsShadowed) {\n            // If need to redraw shadow\n            if (mInvalidateShadow) {\n                // If bounds is zero\n                if (mBounds.width() != 0 && mBounds.height() != 0) {\n                    // Reset bitmap to bounds\n                    mBitmap = Bitmap.createBitmap(\n                            mBounds.width(), mBounds.height(), Bitmap.Config.ARGB_8888\n                    );\n                    // Canvas reset\n                    mCanvas.setBitmap(mBitmap);\n\n                    // We just redraw\n                    mInvalidateShadow = false;\n                    // Main feature of this lib. We create the local copy of all content, so now\n                    // we can draw bitmap as a bottom layer of natural canvas.\n                    // We draw shadow like blur effect on bitmap, cause of setShadowLayer() method of\n                    // paint does`t draw shadow, it draw another copy of bitmap\n                    super.dispatchDraw(mCanvas);\n\n                    // Get the alpha bounds of bitmap\n                    final Bitmap extractedAlpha = mBitmap.extractAlpha();\n                    // Clear past content content to draw shadow\n                    mCanvas.drawColor(0, PorterDuff.Mode.CLEAR);\n\n                    // Draw extracted alpha bounds of our local canvas\n                    mPaint.setColor(adjustShadowAlpha(false));\n                    mCanvas.drawBitmap(extractedAlpha, mShadowDx, mShadowDy, mPaint);\n\n                    // Recycle and clear extracted alpha\n                    extractedAlpha.recycle();\n                } else {\n                    // Create placeholder bitmap when size is zero and wait until new size coming up\n                    mBitmap = Bitmap.createBitmap(1, 1, Bitmap.Config.RGB_565);\n                }\n            }\n\n            // Reset alpha to draw child with full alpha\n            mPaint.setColor(adjustShadowAlpha(true));\n            // Draw shadow bitmap\n            if (mCanvas != null && mBitmap != null && !mBitmap.isRecycled())\n                canvas.drawBitmap(mBitmap, 0.0F, 0.0F, mPaint);\n        }\n\n        // Draw child`s\n        super.dispatchDraw(canvas);\n    }\n}\n\n```\n布局文件\n\n```\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/activity_main\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:paddingBottom=\"@dimen/activity_vertical_margin\"\n    android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n    android:paddingRight=\"@dimen/activity_horizontal_margin\"\n    android:paddingTop=\"@dimen/activity_vertical_margin\"\n    tools:context=\"fengan.shadowdemo.MainActivity\">\n    <fengan.shadowdemo.ShadowLayout\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        app:fengan_shadowed=\"true\"\n        app:fengan_shadow_angle=\"45\"\n        android:layout_centerInParent=\"true\"\n        app:fengan_shadow_radius=\"6dp\"\n        app:fengan_shadow_distance=\"10dp\"\n        app:fengan_shadow_color=\"#883F51B5\">\n        <TextView\n            android:layout_width=\"250dp\"\n            android:layout_height=\"250dp\"\n            android:background=\"@drawable/bg\"\n            android:gravity=\"center\"\n            android:text=\"Hello World!\"\n            android:textColor=\"#ffffff\"\n            android:textSize=\"19sp\"/>\n    </fengan.shadowdemo.ShadowLayout>\n</RelativeLayout>\n\n```\n自定义属性ａｔｔｒｓ．ｘｍｌ\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n\n    <declare-styleable name=\"ShadowLayout\">\n        <attr name=\"fengan_shadowed\" format=\"boolean\"/>\n        <attr name=\"fengan_shadow_distance\" format=\"dimension\"/>\n        <attr name=\"fengan_shadow_angle\" format=\"integer\"/>\n        <attr name=\"fengan_shadow_radius\" format=\"dimension\"/>\n        <attr name=\"fengan_shadow_color\" format=\"color\"/>\n    </declare-styleable>\n\n</resources>\n```\n有灵性的哥哥们，已经猜到这些属性对应的意思啦．．．\n在此整理方便大家日后使用．．．\n\n","source":"_posts/Android-阴影布局-继承FrameLayout.md","raw":"---\ntitle: Android　阴影布局(继承FrameLayout)\ndate: 2017-03-15 17:52:55\ntags: Android\n---\n# 阴影布局(继承FrameLayout) #\n\n前言：\n很多情况下，美腻的UI美眉喜欢搞一些花里胡哨阴影什么的,作为一名有追求的程序员迎合美眉的需求，搞一些小阴影并不是什么大问题，比如写一个自定义shape，用5.0的ｚ轴新特性和CardView都可以满足的，但是有些效果不太符合预计设计的效果，像自定义shape作为背景，看起来阴影会有些假，用５．０新特性第一个是版本问题还一个是有时候不起作用，网上也有解决不起作用的方法，我试了，都不太起作用，用cardview的话，如果cardview包裹的太多太复杂的控件，效果也不是太明显，所以有一个自定义FrameLayout来自己画阴影，以后再碰见阴影就又多了一种手段，满足应付设计师\n\n<!--more-->\n\n[https://github.com/itfengan/xShadowLayout](https://github.com/itfengan/xShadowLayout)\n\n效果图\n\n![这里写图片描述](http://img.blog.csdn.net/20171010160954830?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmVuZ2FuaXQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n```\npackage fengan.shadowdemo;\n\n/**\n * Created by fengan on 2017/10/10/010.\n */\n\n\nimport android.annotation.SuppressLint;\nimport android.content.Context;\nimport android.content.res.TypedArray;\nimport android.graphics.Bitmap;\nimport android.graphics.BlurMaskFilter;\nimport android.graphics.Canvas;\nimport android.graphics.Color;\nimport android.graphics.Paint;\nimport android.graphics.PorterDuff;\nimport android.graphics.Rect;\nimport android.support.annotation.FloatRange;\nimport android.util.AttributeSet;\nimport android.widget.FrameLayout;\n\n/**\n * Created by fengan on 10.10.2017.\n */\npublic class ShadowLayout extends FrameLayout {\n\n    // Default shadow values\n    private final static float DEFAULT_SHADOW_RADIUS = 30.0F;\n    private final static float DEFAULT_SHADOW_DISTANCE = 15.0F;\n    private final static float DEFAULT_SHADOW_ANGLE = 45.0F;\n    private final static int DEFAULT_SHADOW_COLOR = Color.DKGRAY;\n\n    // Shadow bounds values\n    private final static int MAX_ALPHA = 255;\n    private final static float MAX_ANGLE = 360.0F;\n    private final static float MIN_RADIUS = 0.1F;\n    private final static float MIN_ANGLE = 0.0F;\n    // Shadow paint\n    private final Paint mPaint = new Paint(Paint.ANTI_ALIAS_FLAG) {\n        {\n            setDither(true);\n            setFilterBitmap(true);\n        }\n    };\n    // Shadow bitmap and canvas\n    private Bitmap mBitmap;\n    private final Canvas mCanvas = new Canvas();\n    // View bounds\n    private final Rect mBounds = new Rect();\n    // Check whether need to redraw shadow\n    private boolean mInvalidateShadow = true;\n\n    // Detect if shadow is visible\n    private boolean mIsShadowed;\n\n    // Shadow variables\n    private int mShadowColor;\n    private int mShadowAlpha;\n    private float mShadowRadius;\n    private float mShadowDistance;\n    private float mShadowAngle;\n    private float mShadowDx;\n    private float mShadowDy;\n\n    public ShadowLayout(final Context context) {\n        this(context, null);\n    }\n\n    public ShadowLayout(final Context context, final AttributeSet attrs) {\n        this(context, attrs, 0);\n    }\n\n    public ShadowLayout(final Context context, final AttributeSet attrs, final int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n\n        setWillNotDraw(false);\n        setLayerType(LAYER_TYPE_HARDWARE, mPaint);\n\n        // Retrieve attributes from xml\n        final TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.ShadowLayout);\n        try {\n            setIsShadowed(typedArray.getBoolean(R.styleable.ShadowLayout_fengan_shadowed, true));\n            setShadowRadius(\n                    typedArray.getDimension(\n                            R.styleable.ShadowLayout_fengan_shadow_radius, DEFAULT_SHADOW_RADIUS\n                    )\n            );\n            setShadowDistance(\n                    typedArray.getDimension(\n                            R.styleable.ShadowLayout_fengan_shadow_distance, DEFAULT_SHADOW_DISTANCE\n                    )\n            );\n            setShadowAngle(\n                    typedArray.getInteger(\n                            R.styleable.ShadowLayout_fengan_shadow_angle, (int) DEFAULT_SHADOW_ANGLE\n                    )\n            );\n            setShadowColor(\n                    typedArray.getColor(\n                            R.styleable.ShadowLayout_fengan_shadow_color, DEFAULT_SHADOW_COLOR\n                    )\n            );\n        } finally {\n            typedArray.recycle();\n        }\n    }\n\n    @Override\n    protected void onDetachedFromWindow() {\n        super.onDetachedFromWindow();\n        // Clear shadow bitmap\n        if (mBitmap != null) {\n            mBitmap.recycle();\n            mBitmap = null;\n        }\n    }\n\n    public boolean isShadowed() {\n        return mIsShadowed;\n    }\n\n    public void setIsShadowed(final boolean isShadowed) {\n        mIsShadowed = isShadowed;\n        postInvalidate();\n    }\n\n    public float getShadowDistance() {\n        return mShadowDistance;\n    }\n\n    public void setShadowDistance(final float shadowDistance) {\n        mShadowDistance = shadowDistance;\n        resetShadow();\n    }\n\n    public float getShadowAngle() {\n        return mShadowAngle;\n    }\n\n    @SuppressLint(\"SupportAnnotationUsage\")\n    @FloatRange\n    public void setShadowAngle(@FloatRange(from = MIN_ANGLE, to = MAX_ANGLE) final float shadowAngle) {\n        mShadowAngle = Math.max(MIN_ANGLE, Math.min(shadowAngle, MAX_ANGLE));\n        resetShadow();\n    }\n\n    public float getShadowRadius() {\n        return mShadowRadius;\n    }\n\n    public void setShadowRadius(final float shadowRadius) {\n        mShadowRadius = Math.max(MIN_RADIUS, shadowRadius);\n\n        if (isInEditMode()) return;\n        // Set blur filter to paint\n        mPaint.setMaskFilter(new BlurMaskFilter(mShadowRadius, BlurMaskFilter.Blur.NORMAL));\n        resetShadow();\n    }\n\n    public int getShadowColor() {\n        return mShadowColor;\n    }\n\n    public void setShadowColor(final int shadowColor) {\n        mShadowColor = shadowColor;\n        mShadowAlpha = Color.alpha(shadowColor);\n\n        resetShadow();\n    }\n\n    public float getShadowDx() {\n        return mShadowDx;\n    }\n\n    public float getShadowDy() {\n        return mShadowDy;\n    }\n\n    // Reset shadow layer\n    private void resetShadow() {\n        // Detect shadow axis offset\n        mShadowDx = (float) ((mShadowDistance) * Math.cos(mShadowAngle / 180.0F * Math.PI));\n        mShadowDy = (float) ((mShadowDistance) * Math.sin(mShadowAngle / 180.0F * Math.PI));\n\n        // Set padding for shadow bitmap\n        final int padding = (int) (mShadowDistance + mShadowRadius);\n        setPadding(padding, padding, padding, padding);\n        requestLayout();\n    }\n\n    private int adjustShadowAlpha(final boolean adjust) {\n        return Color.argb(\n                adjust ? MAX_ALPHA : mShadowAlpha,\n                Color.red(mShadowColor),\n                Color.green(mShadowColor),\n                Color.blue(mShadowColor)\n        );\n    }\n\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n\n        // Set ShadowLayout bounds\n        mBounds.set(\n                0, 0, MeasureSpec.getSize(widthMeasureSpec), MeasureSpec.getSize(heightMeasureSpec)\n        );\n    }\n\n    @Override\n    public void requestLayout() {\n        // Redraw shadow\n        mInvalidateShadow = true;\n        super.requestLayout();\n    }\n\n    @Override\n    protected void dispatchDraw(final Canvas canvas) {\n        // If is not shadowed, skip\n        if (mIsShadowed) {\n            // If need to redraw shadow\n            if (mInvalidateShadow) {\n                // If bounds is zero\n                if (mBounds.width() != 0 && mBounds.height() != 0) {\n                    // Reset bitmap to bounds\n                    mBitmap = Bitmap.createBitmap(\n                            mBounds.width(), mBounds.height(), Bitmap.Config.ARGB_8888\n                    );\n                    // Canvas reset\n                    mCanvas.setBitmap(mBitmap);\n\n                    // We just redraw\n                    mInvalidateShadow = false;\n                    // Main feature of this lib. We create the local copy of all content, so now\n                    // we can draw bitmap as a bottom layer of natural canvas.\n                    // We draw shadow like blur effect on bitmap, cause of setShadowLayer() method of\n                    // paint does`t draw shadow, it draw another copy of bitmap\n                    super.dispatchDraw(mCanvas);\n\n                    // Get the alpha bounds of bitmap\n                    final Bitmap extractedAlpha = mBitmap.extractAlpha();\n                    // Clear past content content to draw shadow\n                    mCanvas.drawColor(0, PorterDuff.Mode.CLEAR);\n\n                    // Draw extracted alpha bounds of our local canvas\n                    mPaint.setColor(adjustShadowAlpha(false));\n                    mCanvas.drawBitmap(extractedAlpha, mShadowDx, mShadowDy, mPaint);\n\n                    // Recycle and clear extracted alpha\n                    extractedAlpha.recycle();\n                } else {\n                    // Create placeholder bitmap when size is zero and wait until new size coming up\n                    mBitmap = Bitmap.createBitmap(1, 1, Bitmap.Config.RGB_565);\n                }\n            }\n\n            // Reset alpha to draw child with full alpha\n            mPaint.setColor(adjustShadowAlpha(true));\n            // Draw shadow bitmap\n            if (mCanvas != null && mBitmap != null && !mBitmap.isRecycled())\n                canvas.drawBitmap(mBitmap, 0.0F, 0.0F, mPaint);\n        }\n\n        // Draw child`s\n        super.dispatchDraw(canvas);\n    }\n}\n\n```\n布局文件\n\n```\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/activity_main\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:paddingBottom=\"@dimen/activity_vertical_margin\"\n    android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n    android:paddingRight=\"@dimen/activity_horizontal_margin\"\n    android:paddingTop=\"@dimen/activity_vertical_margin\"\n    tools:context=\"fengan.shadowdemo.MainActivity\">\n    <fengan.shadowdemo.ShadowLayout\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        app:fengan_shadowed=\"true\"\n        app:fengan_shadow_angle=\"45\"\n        android:layout_centerInParent=\"true\"\n        app:fengan_shadow_radius=\"6dp\"\n        app:fengan_shadow_distance=\"10dp\"\n        app:fengan_shadow_color=\"#883F51B5\">\n        <TextView\n            android:layout_width=\"250dp\"\n            android:layout_height=\"250dp\"\n            android:background=\"@drawable/bg\"\n            android:gravity=\"center\"\n            android:text=\"Hello World!\"\n            android:textColor=\"#ffffff\"\n            android:textSize=\"19sp\"/>\n    </fengan.shadowdemo.ShadowLayout>\n</RelativeLayout>\n\n```\n自定义属性ａｔｔｒｓ．ｘｍｌ\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n\n    <declare-styleable name=\"ShadowLayout\">\n        <attr name=\"fengan_shadowed\" format=\"boolean\"/>\n        <attr name=\"fengan_shadow_distance\" format=\"dimension\"/>\n        <attr name=\"fengan_shadow_angle\" format=\"integer\"/>\n        <attr name=\"fengan_shadow_radius\" format=\"dimension\"/>\n        <attr name=\"fengan_shadow_color\" format=\"color\"/>\n    </declare-styleable>\n\n</resources>\n```\n有灵性的哥哥们，已经猜到这些属性对应的意思啦．．．\n在此整理方便大家日后使用．．．\n\n","slug":"Android-阴影布局-继承FrameLayout","published":1,"updated":"2017-11-14T06:01:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9z7pyyh0001sbygdwarcdyx","content":"<h1 id=\"阴影布局-继承FrameLayout\"><a href=\"#阴影布局-继承FrameLayout\" class=\"headerlink\" title=\"阴影布局(继承FrameLayout)\"></a>阴影布局(继承FrameLayout)</h1><p>前言：<br>很多情况下，美腻的UI美眉喜欢搞一些花里胡哨阴影什么的,作为一名有追求的程序员迎合美眉的需求，搞一些小阴影并不是什么大问题，比如写一个自定义shape，用5.0的ｚ轴新特性和CardView都可以满足的，但是有些效果不太符合预计设计的效果，像自定义shape作为背景，看起来阴影会有些假，用５．０新特性第一个是版本问题还一个是有时候不起作用，网上也有解决不起作用的方法，我试了，都不太起作用，用cardview的话，如果cardview包裹的太多太复杂的控件，效果也不是太明显，所以有一个自定义FrameLayout来自己画阴影，以后再碰见阴影就又多了一种手段，满足应付设计师</p>\n<a id=\"more\"></a>\n<p><a href=\"https://github.com/itfengan/xShadowLayout\" target=\"_blank\" rel=\"external\">https://github.com/itfengan/xShadowLayout</a></p>\n<p>效果图</p>\n<p><img src=\"http://img.blog.csdn.net/20171010160954830?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmVuZ2FuaXQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> fengan.shadowdemo;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Created by fengan on 2017/10/10/010.</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.annotation.SuppressLint;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.res.TypedArray;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Bitmap;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.BlurMaskFilter;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Canvas;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Color;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Paint;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.PorterDuff;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Rect;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.annotation.FloatRange;</div><div class=\"line\"><span class=\"keyword\">import</span> android.util.AttributeSet;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.FrameLayout;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Created by fengan on 10.10.2017.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShadowLayout</span> <span class=\"keyword\">extends</span> <span class=\"title\">FrameLayout</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Default shadow values</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> DEFAULT_SHADOW_RADIUS = <span class=\"number\">30.0</span>F;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> DEFAULT_SHADOW_DISTANCE = <span class=\"number\">15.0</span>F;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> DEFAULT_SHADOW_ANGLE = <span class=\"number\">45.0</span>F;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> DEFAULT_SHADOW_COLOR = Color.DKGRAY;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Shadow bounds values</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> MAX_ALPHA = <span class=\"number\">255</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> MAX_ANGLE = <span class=\"number\">360.0</span>F;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> MIN_RADIUS = <span class=\"number\">0.1</span>F;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> MIN_ANGLE = <span class=\"number\">0.0</span>F;</div><div class=\"line\">    <span class=\"comment\">// Shadow paint</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Paint mPaint = <span class=\"keyword\">new</span> Paint(Paint.ANTI_ALIAS_FLAG) &#123;</div><div class=\"line\">        &#123;</div><div class=\"line\">            setDither(<span class=\"keyword\">true</span>);</div><div class=\"line\">            setFilterBitmap(<span class=\"keyword\">true</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"comment\">// Shadow bitmap and canvas</span></div><div class=\"line\">    <span class=\"keyword\">private</span> Bitmap mBitmap;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Canvas mCanvas = <span class=\"keyword\">new</span> Canvas();</div><div class=\"line\">    <span class=\"comment\">// View bounds</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Rect mBounds = <span class=\"keyword\">new</span> Rect();</div><div class=\"line\">    <span class=\"comment\">// Check whether need to redraw shadow</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mInvalidateShadow = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Detect if shadow is visible</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mIsShadowed;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Shadow variables</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mShadowColor;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mShadowAlpha;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> mShadowRadius;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> mShadowDistance;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> mShadowAngle;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> mShadowDx;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> mShadowDy;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ShadowLayout</span><span class=\"params\">(<span class=\"keyword\">final</span> Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>(context, <span class=\"keyword\">null</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ShadowLayout</span><span class=\"params\">(<span class=\"keyword\">final</span> Context context, <span class=\"keyword\">final</span> AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>(context, attrs, <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ShadowLayout</span><span class=\"params\">(<span class=\"keyword\">final</span> Context context, <span class=\"keyword\">final</span> AttributeSet attrs, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</div><div class=\"line\"></div><div class=\"line\">        setWillNotDraw(<span class=\"keyword\">false</span>);</div><div class=\"line\">        setLayerType(LAYER_TYPE_HARDWARE, mPaint);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Retrieve attributes from xml</span></div><div class=\"line\">        <span class=\"keyword\">final</span> TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.ShadowLayout);</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            setIsShadowed(typedArray.getBoolean(R.styleable.ShadowLayout_fengan_shadowed, <span class=\"keyword\">true</span>));</div><div class=\"line\">            setShadowRadius(</div><div class=\"line\">                    typedArray.getDimension(</div><div class=\"line\">                            R.styleable.ShadowLayout_fengan_shadow_radius, DEFAULT_SHADOW_RADIUS</div><div class=\"line\">                    )</div><div class=\"line\">            );</div><div class=\"line\">            setShadowDistance(</div><div class=\"line\">                    typedArray.getDimension(</div><div class=\"line\">                            R.styleable.ShadowLayout_fengan_shadow_distance, DEFAULT_SHADOW_DISTANCE</div><div class=\"line\">                    )</div><div class=\"line\">            );</div><div class=\"line\">            setShadowAngle(</div><div class=\"line\">                    typedArray.getInteger(</div><div class=\"line\">                            R.styleable.ShadowLayout_fengan_shadow_angle, (<span class=\"keyword\">int</span>) DEFAULT_SHADOW_ANGLE</div><div class=\"line\">                    )</div><div class=\"line\">            );</div><div class=\"line\">            setShadowColor(</div><div class=\"line\">                    typedArray.getColor(</div><div class=\"line\">                            R.styleable.ShadowLayout_fengan_shadow_color, DEFAULT_SHADOW_COLOR</div><div class=\"line\">                    )</div><div class=\"line\">            );</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            typedArray.recycle();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onDetachedFromWindow</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDetachedFromWindow();</div><div class=\"line\">        <span class=\"comment\">// Clear shadow bitmap</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (mBitmap != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mBitmap.recycle();</div><div class=\"line\">            mBitmap = <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isShadowed</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mIsShadowed;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setIsShadowed</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isShadowed)</span> </span>&#123;</div><div class=\"line\">        mIsShadowed = isShadowed;</div><div class=\"line\">        postInvalidate();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">float</span> <span class=\"title\">getShadowDistance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mShadowDistance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setShadowDistance</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">float</span> shadowDistance)</span> </span>&#123;</div><div class=\"line\">        mShadowDistance = shadowDistance;</div><div class=\"line\">        resetShadow();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">float</span> <span class=\"title\">getShadowAngle</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mShadowAngle;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@SuppressLint</span>(<span class=\"string\">\"SupportAnnotationUsage\"</span>)</div><div class=\"line\">    <span class=\"meta\">@FloatRange</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> setShadowAngle(<span class=\"meta\">@FloatRange</span>(from = MIN_ANGLE, to = MAX_ANGLE) <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> shadowAngle) &#123;</div><div class=\"line\">        mShadowAngle = Math.max(MIN_ANGLE, Math.min(shadowAngle, MAX_ANGLE));</div><div class=\"line\">        resetShadow();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">float</span> <span class=\"title\">getShadowRadius</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mShadowRadius;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setShadowRadius</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">float</span> shadowRadius)</span> </span>&#123;</div><div class=\"line\">        mShadowRadius = Math.max(MIN_RADIUS, shadowRadius);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (isInEditMode()) <span class=\"keyword\">return</span>;</div><div class=\"line\">        <span class=\"comment\">// Set blur filter to paint</span></div><div class=\"line\">        mPaint.setMaskFilter(<span class=\"keyword\">new</span> BlurMaskFilter(mShadowRadius, BlurMaskFilter.Blur.NORMAL));</div><div class=\"line\">        resetShadow();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getShadowColor</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mShadowColor;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setShadowColor</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> shadowColor)</span> </span>&#123;</div><div class=\"line\">        mShadowColor = shadowColor;</div><div class=\"line\">        mShadowAlpha = Color.alpha(shadowColor);</div><div class=\"line\"></div><div class=\"line\">        resetShadow();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">float</span> <span class=\"title\">getShadowDx</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mShadowDx;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">float</span> <span class=\"title\">getShadowDy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mShadowDy;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Reset shadow layer</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">resetShadow</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Detect shadow axis offset</span></div><div class=\"line\">        mShadowDx = (<span class=\"keyword\">float</span>) ((mShadowDistance) * Math.cos(mShadowAngle / <span class=\"number\">180.0</span>F * Math.PI));</div><div class=\"line\">        mShadowDy = (<span class=\"keyword\">float</span>) ((mShadowDistance) * Math.sin(mShadowAngle / <span class=\"number\">180.0</span>F * Math.PI));</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Set padding for shadow bitmap</span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> padding = (<span class=\"keyword\">int</span>) (mShadowDistance + mShadowRadius);</div><div class=\"line\">        setPadding(padding, padding, padding, padding);</div><div class=\"line\">        requestLayout();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">adjustShadowAlpha</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> adjust)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Color.argb(</div><div class=\"line\">                adjust ? MAX_ALPHA : mShadowAlpha,</div><div class=\"line\">                Color.red(mShadowColor),</div><div class=\"line\">                Color.green(mShadowColor),</div><div class=\"line\">                Color.blue(mShadowColor)</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Set ShadowLayout bounds</span></div><div class=\"line\">        mBounds.set(</div><div class=\"line\">                <span class=\"number\">0</span>, <span class=\"number\">0</span>, MeasureSpec.getSize(widthMeasureSpec), MeasureSpec.getSize(heightMeasureSpec)</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">requestLayout</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Redraw shadow</span></div><div class=\"line\">        mInvalidateShadow = <span class=\"keyword\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">super</span>.requestLayout();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispatchDraw</span><span class=\"params\">(<span class=\"keyword\">final</span> Canvas canvas)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// If is not shadowed, skip</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (mIsShadowed) &#123;</div><div class=\"line\">            <span class=\"comment\">// If need to redraw shadow</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (mInvalidateShadow) &#123;</div><div class=\"line\">                <span class=\"comment\">// If bounds is zero</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (mBounds.width() != <span class=\"number\">0</span> &amp;&amp; mBounds.height() != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    <span class=\"comment\">// Reset bitmap to bounds</span></div><div class=\"line\">                    mBitmap = Bitmap.createBitmap(</div><div class=\"line\">                            mBounds.width(), mBounds.height(), Bitmap.Config.ARGB_8888</div><div class=\"line\">                    );</div><div class=\"line\">                    <span class=\"comment\">// Canvas reset</span></div><div class=\"line\">                    mCanvas.setBitmap(mBitmap);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// We just redraw</span></div><div class=\"line\">                    mInvalidateShadow = <span class=\"keyword\">false</span>;</div><div class=\"line\">                    <span class=\"comment\">// Main feature of this lib. We create the local copy of all content, so now</span></div><div class=\"line\">                    <span class=\"comment\">// we can draw bitmap as a bottom layer of natural canvas.</span></div><div class=\"line\">                    <span class=\"comment\">// We draw shadow like blur effect on bitmap, cause of setShadowLayer() method of</span></div><div class=\"line\">                    <span class=\"comment\">// paint does`t draw shadow, it draw another copy of bitmap</span></div><div class=\"line\">                    <span class=\"keyword\">super</span>.dispatchDraw(mCanvas);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// Get the alpha bounds of bitmap</span></div><div class=\"line\">                    <span class=\"keyword\">final</span> Bitmap extractedAlpha = mBitmap.extractAlpha();</div><div class=\"line\">                    <span class=\"comment\">// Clear past content content to draw shadow</span></div><div class=\"line\">                    mCanvas.drawColor(<span class=\"number\">0</span>, PorterDuff.Mode.CLEAR);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// Draw extracted alpha bounds of our local canvas</span></div><div class=\"line\">                    mPaint.setColor(adjustShadowAlpha(<span class=\"keyword\">false</span>));</div><div class=\"line\">                    mCanvas.drawBitmap(extractedAlpha, mShadowDx, mShadowDy, mPaint);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// Recycle and clear extracted alpha</span></div><div class=\"line\">                    extractedAlpha.recycle();</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"comment\">// Create placeholder bitmap when size is zero and wait until new size coming up</span></div><div class=\"line\">                    mBitmap = Bitmap.createBitmap(<span class=\"number\">1</span>, <span class=\"number\">1</span>, Bitmap.Config.RGB_565);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Reset alpha to draw child with full alpha</span></div><div class=\"line\">            mPaint.setColor(adjustShadowAlpha(<span class=\"keyword\">true</span>));</div><div class=\"line\">            <span class=\"comment\">// Draw shadow bitmap</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (mCanvas != <span class=\"keyword\">null</span> &amp;&amp; mBitmap != <span class=\"keyword\">null</span> &amp;&amp; !mBitmap.isRecycled())</div><div class=\"line\">                canvas.drawBitmap(mBitmap, <span class=\"number\">0.0</span>F, <span class=\"number\">0.0</span>F, mPaint);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Draw child`s</span></div><div class=\"line\">        <span class=\"keyword\">super</span>.dispatchDraw(canvas);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>布局文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/activity_main\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:paddingBottom</span>=<span class=\"string\">\"@dimen/activity_vertical_margin\"</span></div><div class=\"line\">    <span class=\"attr\">android:paddingLeft</span>=<span class=\"string\">\"@dimen/activity_horizontal_margin\"</span></div><div class=\"line\">    <span class=\"attr\">android:paddingRight</span>=<span class=\"string\">\"@dimen/activity_horizontal_margin\"</span></div><div class=\"line\">    <span class=\"attr\">android:paddingTop</span>=<span class=\"string\">\"@dimen/activity_vertical_margin\"</span></div><div class=\"line\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\"fengan.shadowdemo.MainActivity\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fengan.shadowdemo.ShadowLayout</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">app:fengan_shadowed</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">app:fengan_shadow_angle</span>=<span class=\"string\">\"45\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_centerInParent</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">app:fengan_shadow_radius</span>=<span class=\"string\">\"6dp\"</span></div><div class=\"line\">        <span class=\"attr\">app:fengan_shadow_distance</span>=<span class=\"string\">\"10dp\"</span></div><div class=\"line\">        <span class=\"attr\">app:fengan_shadow_color</span>=<span class=\"string\">\"#883F51B5\"</span>&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"250dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"250dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"@drawable/bg\"</span></div><div class=\"line\">            <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></div><div class=\"line\">            <span class=\"attr\">android:text</span>=<span class=\"string\">\"Hello World!\"</span></div><div class=\"line\">            <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"#ffffff\"</span></div><div class=\"line\">            <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"19sp\"</span>/&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">fengan.shadowdemo.ShadowLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>自定义属性ａｔｔｒｓ．ｘｍｌ<br><figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span>?&gt;</div><div class=\"line\">&lt;<span class=\"built_in\">resources</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;declare-styleable <span class=\"built_in\">name</span>=<span class=\"string\">\"ShadowLayout\"</span>&gt;</div><div class=\"line\">        &lt;attr <span class=\"built_in\">name</span>=<span class=\"string\">\"fengan_shadowed\"</span> <span class=\"built_in\">format</span>=<span class=\"string\">\"boolean\"</span>/&gt;</div><div class=\"line\">        &lt;attr <span class=\"built_in\">name</span>=<span class=\"string\">\"fengan_shadow_distance\"</span> <span class=\"built_in\">format</span>=<span class=\"string\">\"dimension\"</span>/&gt;</div><div class=\"line\">        &lt;attr <span class=\"built_in\">name</span>=<span class=\"string\">\"fengan_shadow_angle\"</span> <span class=\"built_in\">format</span>=<span class=\"string\">\"integer\"</span>/&gt;</div><div class=\"line\">        &lt;attr <span class=\"built_in\">name</span>=<span class=\"string\">\"fengan_shadow_radius\"</span> <span class=\"built_in\">format</span>=<span class=\"string\">\"dimension\"</span>/&gt;</div><div class=\"line\">        &lt;attr <span class=\"built_in\">name</span>=<span class=\"string\">\"fengan_shadow_color\"</span> <span class=\"built_in\">format</span>=<span class=\"string\">\"color\"</span>/&gt;</div><div class=\"line\">    &lt;/declare-styleable&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/<span class=\"built_in\">resources</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>有灵性的哥哥们，已经猜到这些属性对应的意思啦．．．<br>在此整理方便大家日后使用．．．</p>\n","excerpt":"<h1 id=\"阴影布局-继承FrameLayout\"><a href=\"#阴影布局-继承FrameLayout\" class=\"headerlink\" title=\"阴影布局(继承FrameLayout)\"></a>阴影布局(继承FrameLayout)</h1><p>前言：<br>很多情况下，美腻的UI美眉喜欢搞一些花里胡哨阴影什么的,作为一名有追求的程序员迎合美眉的需求，搞一些小阴影并不是什么大问题，比如写一个自定义shape，用5.0的ｚ轴新特性和CardView都可以满足的，但是有些效果不太符合预计设计的效果，像自定义shape作为背景，看起来阴影会有些假，用５．０新特性第一个是版本问题还一个是有时候不起作用，网上也有解决不起作用的方法，我试了，都不太起作用，用cardview的话，如果cardview包裹的太多太复杂的控件，效果也不是太明显，所以有一个自定义FrameLayout来自己画阴影，以后再碰见阴影就又多了一种手段，满足应付设计师</p>","more":"<p><a href=\"https://github.com/itfengan/xShadowLayout\">https://github.com/itfengan/xShadowLayout</a></p>\n<p>效果图</p>\n<p><img src=\"http://img.blog.csdn.net/20171010160954830?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmVuZ2FuaXQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> fengan.shadowdemo;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Created by fengan on 2017/10/10/010.</div><div class=\"line\"> */</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.annotation.SuppressLint;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.res.TypedArray;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Bitmap;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.BlurMaskFilter;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Canvas;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Color;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Paint;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.PorterDuff;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Rect;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.annotation.FloatRange;</div><div class=\"line\"><span class=\"keyword\">import</span> android.util.AttributeSet;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.FrameLayout;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Created by fengan on 10.10.2017.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShadowLayout</span> <span class=\"keyword\">extends</span> <span class=\"title\">FrameLayout</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Default shadow values</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> DEFAULT_SHADOW_RADIUS = <span class=\"number\">30.0</span>F;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> DEFAULT_SHADOW_DISTANCE = <span class=\"number\">15.0</span>F;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> DEFAULT_SHADOW_ANGLE = <span class=\"number\">45.0</span>F;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> DEFAULT_SHADOW_COLOR = Color.DKGRAY;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Shadow bounds values</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> MAX_ALPHA = <span class=\"number\">255</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> MAX_ANGLE = <span class=\"number\">360.0</span>F;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> MIN_RADIUS = <span class=\"number\">0.1</span>F;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> MIN_ANGLE = <span class=\"number\">0.0</span>F;</div><div class=\"line\">    <span class=\"comment\">// Shadow paint</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Paint mPaint = <span class=\"keyword\">new</span> Paint(Paint.ANTI_ALIAS_FLAG) &#123;</div><div class=\"line\">        &#123;</div><div class=\"line\">            setDither(<span class=\"keyword\">true</span>);</div><div class=\"line\">            setFilterBitmap(<span class=\"keyword\">true</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"comment\">// Shadow bitmap and canvas</span></div><div class=\"line\">    <span class=\"keyword\">private</span> Bitmap mBitmap;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Canvas mCanvas = <span class=\"keyword\">new</span> Canvas();</div><div class=\"line\">    <span class=\"comment\">// View bounds</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Rect mBounds = <span class=\"keyword\">new</span> Rect();</div><div class=\"line\">    <span class=\"comment\">// Check whether need to redraw shadow</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mInvalidateShadow = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Detect if shadow is visible</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mIsShadowed;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Shadow variables</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mShadowColor;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mShadowAlpha;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> mShadowRadius;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> mShadowDistance;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> mShadowAngle;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> mShadowDx;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> mShadowDy;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ShadowLayout</span><span class=\"params\">(<span class=\"keyword\">final</span> Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>(context, <span class=\"keyword\">null</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ShadowLayout</span><span class=\"params\">(<span class=\"keyword\">final</span> Context context, <span class=\"keyword\">final</span> AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>(context, attrs, <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ShadowLayout</span><span class=\"params\">(<span class=\"keyword\">final</span> Context context, <span class=\"keyword\">final</span> AttributeSet attrs, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</div><div class=\"line\"></div><div class=\"line\">        setWillNotDraw(<span class=\"keyword\">false</span>);</div><div class=\"line\">        setLayerType(LAYER_TYPE_HARDWARE, mPaint);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Retrieve attributes from xml</span></div><div class=\"line\">        <span class=\"keyword\">final</span> TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.ShadowLayout);</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            setIsShadowed(typedArray.getBoolean(R.styleable.ShadowLayout_fengan_shadowed, <span class=\"keyword\">true</span>));</div><div class=\"line\">            setShadowRadius(</div><div class=\"line\">                    typedArray.getDimension(</div><div class=\"line\">                            R.styleable.ShadowLayout_fengan_shadow_radius, DEFAULT_SHADOW_RADIUS</div><div class=\"line\">                    )</div><div class=\"line\">            );</div><div class=\"line\">            setShadowDistance(</div><div class=\"line\">                    typedArray.getDimension(</div><div class=\"line\">                            R.styleable.ShadowLayout_fengan_shadow_distance, DEFAULT_SHADOW_DISTANCE</div><div class=\"line\">                    )</div><div class=\"line\">            );</div><div class=\"line\">            setShadowAngle(</div><div class=\"line\">                    typedArray.getInteger(</div><div class=\"line\">                            R.styleable.ShadowLayout_fengan_shadow_angle, (<span class=\"keyword\">int</span>) DEFAULT_SHADOW_ANGLE</div><div class=\"line\">                    )</div><div class=\"line\">            );</div><div class=\"line\">            setShadowColor(</div><div class=\"line\">                    typedArray.getColor(</div><div class=\"line\">                            R.styleable.ShadowLayout_fengan_shadow_color, DEFAULT_SHADOW_COLOR</div><div class=\"line\">                    )</div><div class=\"line\">            );</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            typedArray.recycle();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onDetachedFromWindow</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDetachedFromWindow();</div><div class=\"line\">        <span class=\"comment\">// Clear shadow bitmap</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (mBitmap != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mBitmap.recycle();</div><div class=\"line\">            mBitmap = <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isShadowed</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mIsShadowed;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setIsShadowed</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isShadowed)</span> </span>&#123;</div><div class=\"line\">        mIsShadowed = isShadowed;</div><div class=\"line\">        postInvalidate();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">float</span> <span class=\"title\">getShadowDistance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mShadowDistance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setShadowDistance</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">float</span> shadowDistance)</span> </span>&#123;</div><div class=\"line\">        mShadowDistance = shadowDistance;</div><div class=\"line\">        resetShadow();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">float</span> <span class=\"title\">getShadowAngle</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mShadowAngle;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@SuppressLint</span>(<span class=\"string\">\"SupportAnnotationUsage\"</span>)</div><div class=\"line\">    <span class=\"meta\">@FloatRange</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> setShadowAngle(<span class=\"meta\">@FloatRange</span>(from = MIN_ANGLE, to = MAX_ANGLE) <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> shadowAngle) &#123;</div><div class=\"line\">        mShadowAngle = Math.max(MIN_ANGLE, Math.min(shadowAngle, MAX_ANGLE));</div><div class=\"line\">        resetShadow();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">float</span> <span class=\"title\">getShadowRadius</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mShadowRadius;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setShadowRadius</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">float</span> shadowRadius)</span> </span>&#123;</div><div class=\"line\">        mShadowRadius = Math.max(MIN_RADIUS, shadowRadius);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (isInEditMode()) <span class=\"keyword\">return</span>;</div><div class=\"line\">        <span class=\"comment\">// Set blur filter to paint</span></div><div class=\"line\">        mPaint.setMaskFilter(<span class=\"keyword\">new</span> BlurMaskFilter(mShadowRadius, BlurMaskFilter.Blur.NORMAL));</div><div class=\"line\">        resetShadow();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getShadowColor</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mShadowColor;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setShadowColor</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> shadowColor)</span> </span>&#123;</div><div class=\"line\">        mShadowColor = shadowColor;</div><div class=\"line\">        mShadowAlpha = Color.alpha(shadowColor);</div><div class=\"line\"></div><div class=\"line\">        resetShadow();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">float</span> <span class=\"title\">getShadowDx</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mShadowDx;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">float</span> <span class=\"title\">getShadowDy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mShadowDy;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Reset shadow layer</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">resetShadow</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Detect shadow axis offset</span></div><div class=\"line\">        mShadowDx = (<span class=\"keyword\">float</span>) ((mShadowDistance) * Math.cos(mShadowAngle / <span class=\"number\">180.0</span>F * Math.PI));</div><div class=\"line\">        mShadowDy = (<span class=\"keyword\">float</span>) ((mShadowDistance) * Math.sin(mShadowAngle / <span class=\"number\">180.0</span>F * Math.PI));</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Set padding for shadow bitmap</span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> padding = (<span class=\"keyword\">int</span>) (mShadowDistance + mShadowRadius);</div><div class=\"line\">        setPadding(padding, padding, padding, padding);</div><div class=\"line\">        requestLayout();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">adjustShadowAlpha</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> adjust)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Color.argb(</div><div class=\"line\">                adjust ? MAX_ALPHA : mShadowAlpha,</div><div class=\"line\">                Color.red(mShadowColor),</div><div class=\"line\">                Color.green(mShadowColor),</div><div class=\"line\">                Color.blue(mShadowColor)</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Set ShadowLayout bounds</span></div><div class=\"line\">        mBounds.set(</div><div class=\"line\">                <span class=\"number\">0</span>, <span class=\"number\">0</span>, MeasureSpec.getSize(widthMeasureSpec), MeasureSpec.getSize(heightMeasureSpec)</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">requestLayout</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Redraw shadow</span></div><div class=\"line\">        mInvalidateShadow = <span class=\"keyword\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">super</span>.requestLayout();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispatchDraw</span><span class=\"params\">(<span class=\"keyword\">final</span> Canvas canvas)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// If is not shadowed, skip</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (mIsShadowed) &#123;</div><div class=\"line\">            <span class=\"comment\">// If need to redraw shadow</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (mInvalidateShadow) &#123;</div><div class=\"line\">                <span class=\"comment\">// If bounds is zero</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (mBounds.width() != <span class=\"number\">0</span> &amp;&amp; mBounds.height() != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    <span class=\"comment\">// Reset bitmap to bounds</span></div><div class=\"line\">                    mBitmap = Bitmap.createBitmap(</div><div class=\"line\">                            mBounds.width(), mBounds.height(), Bitmap.Config.ARGB_8888</div><div class=\"line\">                    );</div><div class=\"line\">                    <span class=\"comment\">// Canvas reset</span></div><div class=\"line\">                    mCanvas.setBitmap(mBitmap);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// We just redraw</span></div><div class=\"line\">                    mInvalidateShadow = <span class=\"keyword\">false</span>;</div><div class=\"line\">                    <span class=\"comment\">// Main feature of this lib. We create the local copy of all content, so now</span></div><div class=\"line\">                    <span class=\"comment\">// we can draw bitmap as a bottom layer of natural canvas.</span></div><div class=\"line\">                    <span class=\"comment\">// We draw shadow like blur effect on bitmap, cause of setShadowLayer() method of</span></div><div class=\"line\">                    <span class=\"comment\">// paint does`t draw shadow, it draw another copy of bitmap</span></div><div class=\"line\">                    <span class=\"keyword\">super</span>.dispatchDraw(mCanvas);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// Get the alpha bounds of bitmap</span></div><div class=\"line\">                    <span class=\"keyword\">final</span> Bitmap extractedAlpha = mBitmap.extractAlpha();</div><div class=\"line\">                    <span class=\"comment\">// Clear past content content to draw shadow</span></div><div class=\"line\">                    mCanvas.drawColor(<span class=\"number\">0</span>, PorterDuff.Mode.CLEAR);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// Draw extracted alpha bounds of our local canvas</span></div><div class=\"line\">                    mPaint.setColor(adjustShadowAlpha(<span class=\"keyword\">false</span>));</div><div class=\"line\">                    mCanvas.drawBitmap(extractedAlpha, mShadowDx, mShadowDy, mPaint);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// Recycle and clear extracted alpha</span></div><div class=\"line\">                    extractedAlpha.recycle();</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"comment\">// Create placeholder bitmap when size is zero and wait until new size coming up</span></div><div class=\"line\">                    mBitmap = Bitmap.createBitmap(<span class=\"number\">1</span>, <span class=\"number\">1</span>, Bitmap.Config.RGB_565);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Reset alpha to draw child with full alpha</span></div><div class=\"line\">            mPaint.setColor(adjustShadowAlpha(<span class=\"keyword\">true</span>));</div><div class=\"line\">            <span class=\"comment\">// Draw shadow bitmap</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (mCanvas != <span class=\"keyword\">null</span> &amp;&amp; mBitmap != <span class=\"keyword\">null</span> &amp;&amp; !mBitmap.isRecycled())</div><div class=\"line\">                canvas.drawBitmap(mBitmap, <span class=\"number\">0.0</span>F, <span class=\"number\">0.0</span>F, mPaint);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Draw child`s</span></div><div class=\"line\">        <span class=\"keyword\">super</span>.dispatchDraw(canvas);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>布局文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span></div><div class=\"line\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/activity_main\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:paddingBottom</span>=<span class=\"string\">\"@dimen/activity_vertical_margin\"</span></div><div class=\"line\">    <span class=\"attr\">android:paddingLeft</span>=<span class=\"string\">\"@dimen/activity_horizontal_margin\"</span></div><div class=\"line\">    <span class=\"attr\">android:paddingRight</span>=<span class=\"string\">\"@dimen/activity_horizontal_margin\"</span></div><div class=\"line\">    <span class=\"attr\">android:paddingTop</span>=<span class=\"string\">\"@dimen/activity_vertical_margin\"</span></div><div class=\"line\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\"fengan.shadowdemo.MainActivity\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fengan.shadowdemo.ShadowLayout</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">app:fengan_shadowed</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">app:fengan_shadow_angle</span>=<span class=\"string\">\"45\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_centerInParent</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">app:fengan_shadow_radius</span>=<span class=\"string\">\"6dp\"</span></div><div class=\"line\">        <span class=\"attr\">app:fengan_shadow_distance</span>=<span class=\"string\">\"10dp\"</span></div><div class=\"line\">        <span class=\"attr\">app:fengan_shadow_color</span>=<span class=\"string\">\"#883F51B5\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"250dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"250dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"@drawable/bg\"</span></div><div class=\"line\">            <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></div><div class=\"line\">            <span class=\"attr\">android:text</span>=<span class=\"string\">\"Hello World!\"</span></div><div class=\"line\">            <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"#ffffff\"</span></div><div class=\"line\">            <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"19sp\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">fengan.shadowdemo.ShadowLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>自定义属性ａｔｔｒｓ．ｘｍｌ<br><figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span>?&gt;</div><div class=\"line\">&lt;<span class=\"built_in\">resources</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;declare-styleable <span class=\"built_in\">name</span>=<span class=\"string\">\"ShadowLayout\"</span>&gt;</div><div class=\"line\">        &lt;attr <span class=\"built_in\">name</span>=<span class=\"string\">\"fengan_shadowed\"</span> <span class=\"built_in\">format</span>=<span class=\"string\">\"boolean\"</span>/&gt;</div><div class=\"line\">        &lt;attr <span class=\"built_in\">name</span>=<span class=\"string\">\"fengan_shadow_distance\"</span> <span class=\"built_in\">format</span>=<span class=\"string\">\"dimension\"</span>/&gt;</div><div class=\"line\">        &lt;attr <span class=\"built_in\">name</span>=<span class=\"string\">\"fengan_shadow_angle\"</span> <span class=\"built_in\">format</span>=<span class=\"string\">\"integer\"</span>/&gt;</div><div class=\"line\">        &lt;attr <span class=\"built_in\">name</span>=<span class=\"string\">\"fengan_shadow_radius\"</span> <span class=\"built_in\">format</span>=<span class=\"string\">\"dimension\"</span>/&gt;</div><div class=\"line\">        &lt;attr <span class=\"built_in\">name</span>=<span class=\"string\">\"fengan_shadow_color\"</span> <span class=\"built_in\">format</span>=<span class=\"string\">\"color\"</span>/&gt;</div><div class=\"line\">    &lt;/declare-styleable&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/<span class=\"built_in\">resources</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>有灵性的哥哥们，已经猜到这些属性对应的意思啦．．．<br>在此整理方便大家日后使用．．．</p>"},{"title":"Android7.0之应用间共享文件","date":"2017-01-23T08:58:17.000Z","_content":"## Android7.0适配之应用间共享文件 ##\n\n\n### 出现问题 ###\nAndroid N(API 25),打开相册编辑页面crash,报出FileUriExposedException异常\n\n```\n    android.os.FileUriExposedException: file:////storage/emulated/0/temp/1474956193735.jpg exposed beyond app through Intent.getData()\nat android.os.StrictMode.onFileUriExposed(StrictMode.java:1799)\nat android.net.Uri.checkFileUriExposed(Uri.java:2346)\nat android.content.Intent.prepareToLeaveProcess(Intent.java:8933)\nat android.content.Intent.prepareToLeaveProcess(Intent.java:8894)\nat android.app.Instrumentation.execStartActivity(Instrumentation.java:1517)\nat android.app.Activity.startActivityForResult(Activity.java:4223)\n...\nat android.app.Activity.startActivityForResult(Activity.java:4182)\n```\n<!--more-->\n### 查找原因 ###\nAndroid N的应用,API禁止向应用外公开file://URI,如果一项包含文件URI的Intent离开应用, 应用crash并报FileUriExposedException异常\n### 解决办法 ###\n若想要在应用间共享文件,应该发送一项content://URI,并该URI临时访问权限,进行此授权的方式是通过FileProvider类 \n### 具体步骤 ###\n#### [1] 清单文件 ####\n```\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.fengan.providerdemo\">\n\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\">\n        <activity android:name=\".MainActivity\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n           <!--authorities=\"你的包名+fileprovider\" -->\n        <provider\n            android:authorities=\"com.fengan.providerdemo.fileprovider\"\n            android:name=\"android.support.v4.content.FileProvider\"\n            android:grantUriPermissions=\"true\"\n            android:exported=\"false\">\n            <meta-data\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\n                android:resource=\"@xml/filepaths\"/>\n        </provider>\n    </application>\n\n</manifest>\n```\n#### [2] res下xml文件夹 ####\n![Alt text](./1485158383668.png)\n注意xml文件名和清单文件中@xml/filepaths相同\nxml文件内容\n\n```\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n<paths>\n    <!-- external-path:sd ；path:你的应用保存文件的根目录；name随便定义-->\n    //<external-path path=\"fengan_imgs/\" name=\"files_path\" />\n    <external-path path=\"\" name=\"files_path\" />\n</paths>\n```\n注意:\npath=\"\",有特殊意义,它代表更目录,也就是说可以向应用共享根目录及其子目录下任何一个文件,如果将path写为path=\"fengan_imgs/\",那么只能在fengan_imgs/目录下才可以分享!\n[3]核心代码\n将File转换为uri\n\n```\n private static Uri getUriForFile(Context context, File file) {\n        if (context == null || file == null) {\n            throw new NullPointerException();\n        }\n        Uri uri;\n        if (Build.VERSION.SDK_INT >= 24) {\n        //和android:authorities=\"com.fengan.providerdemo.fileprovider\"对应\n            uri = FileProvider.getUriForFile(context.getApplicationContext(), \"com.fengan.providerdemo.fileprovider\", file);\n        } else {\n            uri = Uri.fromFile(file);\n        }\n        return uri;\n    }\n```\n\n\n\n\n- Uri的scheme类型为file,改成了又FileProvider创建一个content类型的Uri打开相机,打印该Uri为content://com.fengan.providerdemo/files_path/temp/1474960080319.jpg`。 \n//其中camera_photos就是file_paths.xml中paths的name。\n\n```\n /**\n     * 打开相机\n     * 兼容7.0\n     *\n     * @param activity    Activity\n     * @param file        File\n     * @param requestCode result requestCode\n     */\n    public static void startActionCapture(Activity activity, File file, int requestCode) {\n        if (activity == null) {\n            return;\n        }\n        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n     intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION); //添加这一句表示对目标应用临时授权该Uri所代表的文件\n        intent.putExtra(MediaStore.EXTRA_OUTPUT, getUriForFile(activity, file));//拍取照片保存到指定Uri\n        activity.startActivityForResult(intent, requestCode);\n    }\n```\n## 总结 ##\n - 针对涉及到从Android设备上获取照片(拍照,或从相册,文件中选择)打开相机,裁剪图片,压缩图片,可以使用一个轻量级开源库,TakePhoto!\n https://github.com/crazycodeboy/TakePhoto/\n\n","source":"_posts/Android7-0之应用间共享文件.md","raw":"---\ntitle: Android7.0之应用间共享文件\ndate: 2017-01-23 16:58:17\ntags: Android\n---\n## Android7.0适配之应用间共享文件 ##\n\n\n### 出现问题 ###\nAndroid N(API 25),打开相册编辑页面crash,报出FileUriExposedException异常\n\n```\n    android.os.FileUriExposedException: file:////storage/emulated/0/temp/1474956193735.jpg exposed beyond app through Intent.getData()\nat android.os.StrictMode.onFileUriExposed(StrictMode.java:1799)\nat android.net.Uri.checkFileUriExposed(Uri.java:2346)\nat android.content.Intent.prepareToLeaveProcess(Intent.java:8933)\nat android.content.Intent.prepareToLeaveProcess(Intent.java:8894)\nat android.app.Instrumentation.execStartActivity(Instrumentation.java:1517)\nat android.app.Activity.startActivityForResult(Activity.java:4223)\n...\nat android.app.Activity.startActivityForResult(Activity.java:4182)\n```\n<!--more-->\n### 查找原因 ###\nAndroid N的应用,API禁止向应用外公开file://URI,如果一项包含文件URI的Intent离开应用, 应用crash并报FileUriExposedException异常\n### 解决办法 ###\n若想要在应用间共享文件,应该发送一项content://URI,并该URI临时访问权限,进行此授权的方式是通过FileProvider类 \n### 具体步骤 ###\n#### [1] 清单文件 ####\n```\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.fengan.providerdemo\">\n\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\">\n        <activity android:name=\".MainActivity\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n           <!--authorities=\"你的包名+fileprovider\" -->\n        <provider\n            android:authorities=\"com.fengan.providerdemo.fileprovider\"\n            android:name=\"android.support.v4.content.FileProvider\"\n            android:grantUriPermissions=\"true\"\n            android:exported=\"false\">\n            <meta-data\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\n                android:resource=\"@xml/filepaths\"/>\n        </provider>\n    </application>\n\n</manifest>\n```\n#### [2] res下xml文件夹 ####\n![Alt text](./1485158383668.png)\n注意xml文件名和清单文件中@xml/filepaths相同\nxml文件内容\n\n```\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n<paths>\n    <!-- external-path:sd ；path:你的应用保存文件的根目录；name随便定义-->\n    //<external-path path=\"fengan_imgs/\" name=\"files_path\" />\n    <external-path path=\"\" name=\"files_path\" />\n</paths>\n```\n注意:\npath=\"\",有特殊意义,它代表更目录,也就是说可以向应用共享根目录及其子目录下任何一个文件,如果将path写为path=\"fengan_imgs/\",那么只能在fengan_imgs/目录下才可以分享!\n[3]核心代码\n将File转换为uri\n\n```\n private static Uri getUriForFile(Context context, File file) {\n        if (context == null || file == null) {\n            throw new NullPointerException();\n        }\n        Uri uri;\n        if (Build.VERSION.SDK_INT >= 24) {\n        //和android:authorities=\"com.fengan.providerdemo.fileprovider\"对应\n            uri = FileProvider.getUriForFile(context.getApplicationContext(), \"com.fengan.providerdemo.fileprovider\", file);\n        } else {\n            uri = Uri.fromFile(file);\n        }\n        return uri;\n    }\n```\n\n\n\n\n- Uri的scheme类型为file,改成了又FileProvider创建一个content类型的Uri打开相机,打印该Uri为content://com.fengan.providerdemo/files_path/temp/1474960080319.jpg`。 \n//其中camera_photos就是file_paths.xml中paths的name。\n\n```\n /**\n     * 打开相机\n     * 兼容7.0\n     *\n     * @param activity    Activity\n     * @param file        File\n     * @param requestCode result requestCode\n     */\n    public static void startActionCapture(Activity activity, File file, int requestCode) {\n        if (activity == null) {\n            return;\n        }\n        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n     intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION); //添加这一句表示对目标应用临时授权该Uri所代表的文件\n        intent.putExtra(MediaStore.EXTRA_OUTPUT, getUriForFile(activity, file));//拍取照片保存到指定Uri\n        activity.startActivityForResult(intent, requestCode);\n    }\n```\n## 总结 ##\n - 针对涉及到从Android设备上获取照片(拍照,或从相册,文件中选择)打开相机,裁剪图片,压缩图片,可以使用一个轻量级开源库,TakePhoto!\n https://github.com/crazycodeboy/TakePhoto/\n\n","slug":"Android7-0之应用间共享文件","published":1,"updated":"2017-11-14T06:01:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9z7pyyl0003sbygo3tm2otq","content":"<h2 id=\"Android7-0适配之应用间共享文件\"><a href=\"#Android7-0适配之应用间共享文件\" class=\"headerlink\" title=\"Android7.0适配之应用间共享文件\"></a>Android7.0适配之应用间共享文件</h2><h3 id=\"出现问题\"><a href=\"#出现问题\" class=\"headerlink\" title=\"出现问题\"></a>出现问题</h3><p>Android N(API 25),打开相册编辑页面crash,报出FileUriExposedException异常</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">    android<span class=\"selector-class\">.os</span><span class=\"selector-class\">.FileUriExposedException</span>: file:<span class=\"comment\">////storage/emulated/0/temp/1474956193735.jpg exposed beyond app through Intent.getData()</span></div><div class=\"line\">at android<span class=\"selector-class\">.os</span><span class=\"selector-class\">.StrictMode</span><span class=\"selector-class\">.onFileUriExposed</span>(StrictMode<span class=\"selector-class\">.java</span>:<span class=\"number\">1799</span>)</div><div class=\"line\">at android<span class=\"selector-class\">.net</span><span class=\"selector-class\">.Uri</span><span class=\"selector-class\">.checkFileUriExposed</span>(Uri<span class=\"selector-class\">.java</span>:<span class=\"number\">2346</span>)</div><div class=\"line\">at android<span class=\"selector-class\">.content</span><span class=\"selector-class\">.Intent</span><span class=\"selector-class\">.prepareToLeaveProcess</span>(Intent<span class=\"selector-class\">.java</span>:<span class=\"number\">8933</span>)</div><div class=\"line\">at android<span class=\"selector-class\">.content</span><span class=\"selector-class\">.Intent</span><span class=\"selector-class\">.prepareToLeaveProcess</span>(Intent<span class=\"selector-class\">.java</span>:<span class=\"number\">8894</span>)</div><div class=\"line\">at android<span class=\"selector-class\">.app</span><span class=\"selector-class\">.Instrumentation</span><span class=\"selector-class\">.execStartActivity</span>(Instrumentation<span class=\"selector-class\">.java</span>:<span class=\"number\">1517</span>)</div><div class=\"line\">at android<span class=\"selector-class\">.app</span><span class=\"selector-class\">.Activity</span><span class=\"selector-class\">.startActivityForResult</span>(Activity<span class=\"selector-class\">.java</span>:<span class=\"number\">4223</span>)</div><div class=\"line\">...</div><div class=\"line\">at android<span class=\"selector-class\">.app</span><span class=\"selector-class\">.Activity</span><span class=\"selector-class\">.startActivityForResult</span>(Activity<span class=\"selector-class\">.java</span>:<span class=\"number\">4182</span>)</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"查找原因\"><a href=\"#查找原因\" class=\"headerlink\" title=\"查找原因\"></a>查找原因</h3><p>Android N的应用,API禁止向应用外公开file://URI,如果一项包含文件URI的Intent离开应用, 应用crash并报FileUriExposedException异常</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>若想要在应用间共享文件,应该发送一项content://URI,并该URI临时访问权限,进行此授权的方式是通过FileProvider类 </p>\n<h3 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h3><h4 id=\"1-清单文件\"><a href=\"#1-清单文件\" class=\"headerlink\" title=\"[1] 清单文件\"></a>[1] 清单文件</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">package</span>=<span class=\"string\">\"com.fengan.providerdemo\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">application</span></span></div><div class=\"line\">        <span class=\"attr\">android:allowBackup</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@mipmap/ic_launcher\"</span></div><div class=\"line\">        <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span></div><div class=\"line\">        <span class=\"attr\">android:supportsRtl</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/AppTheme\"</span>&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".MainActivity\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\">           <span class=\"comment\">&lt;!--authorities=\"你的包名+fileprovider\" --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">provider</span></span></div><div class=\"line\">            <span class=\"attr\">android:authorities</span>=<span class=\"string\">\"com.fengan.providerdemo.fileprovider\"</span></div><div class=\"line\">            <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.v4.content.FileProvider\"</span></div><div class=\"line\">            <span class=\"attr\">android:grantUriPermissions</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">            <span class=\"attr\">android:exported</span>=<span class=\"string\">\"false\"</span>&gt;</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">meta-data</span></span></div><div class=\"line\">                <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.FILE_PROVIDER_PATHS\"</span></div><div class=\"line\">                <span class=\"attr\">android:resource</span>=<span class=\"string\">\"@xml/filepaths\"</span>/&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">provider</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"2-res下xml文件夹\"><a href=\"#2-res下xml文件夹\" class=\"headerlink\" title=\"[2] res下xml文件夹\"></a>[2] res下xml文件夹</h4><p><img src=\"./1485158383668.png\" alt=\"Alt text\"><br>注意xml文件名和清单文件中@xml/filepaths相同<br>xml文件内容</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">paths</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- external-path:sd ；path:你的应用保存文件的根目录；name随便定义--&gt;</span></div><div class=\"line\">    //<span class=\"tag\">&lt;<span class=\"name\">external-path</span> <span class=\"attr\">path</span>=<span class=\"string\">\"fengan_imgs/\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"files_path\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">external-path</span> <span class=\"attr\">path</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"files_path\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">paths</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>注意:<br>path=””,有特殊意义,它代表更目录,也就是说可以向应用共享根目录及其子目录下任何一个文件,如果将path写为path=”fengan_imgs/“,那么只能在fengan_imgs/目录下才可以分享!<br>[3]核心代码<br>将File转换为uri</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Uri getUriForFile(Context context, <span class=\"keyword\">File</span> <span class=\"keyword\">file</span>) &#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (context == <span class=\"keyword\">null</span> || <span class=\"keyword\">file</span> == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</div><div class=\"line\">       &#125;</div><div class=\"line\">       Uri uri;</div><div class=\"line\">       <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= <span class=\"number\">24</span>) &#123;</div><div class=\"line\">       <span class=\"comment\">//和android:authorities=\"com.fengan.providerdemo.fileprovider\"对应</span></div><div class=\"line\">           uri = FileProvider.getUriForFile(context.getApplicationContext(), <span class=\"string\">\"com.fengan.providerdemo.fileprovider\"</span>, <span class=\"keyword\">file</span>);</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           uri = Uri.fromFile(<span class=\"keyword\">file</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> uri;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Uri的scheme类型为file,改成了又FileProvider创建一个content类型的Uri打开相机,打印该Uri为content://com.fengan.providerdemo/files_path/temp/1474960080319.jpg`。<br>//其中camera_photos就是file_paths.xml中paths的name。</li>\n</ul>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * 打开相机</div><div class=\"line\">    * 兼容7.0</div><div class=\"line\">    *</div><div class=\"line\">    * <span class=\"doctag\">@param</span> activity    Activity</div><div class=\"line\">    * <span class=\"doctag\">@param</span> file        File</div><div class=\"line\">    * <span class=\"doctag\">@param</span> requestCode result requestCode</div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">startActionCapture</span><span class=\"params\">(Activity activity, File file, <span class=\"keyword\">int</span> requestCode)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (activity == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       Intent intent = <span class=\"keyword\">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</div><div class=\"line\">    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION); <span class=\"comment\">//添加这一句表示对目标应用临时授权该Uri所代表的文件</span></div><div class=\"line\">       intent.putExtra(MediaStore.EXTRA_OUTPUT, getUriForFile(activity, file));<span class=\"comment\">//拍取照片保存到指定Uri</span></div><div class=\"line\">       activity.startActivityForResult(intent, requestCode);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>针对涉及到从Android设备上获取照片(拍照,或从相册,文件中选择)打开相机,裁剪图片,压缩图片,可以使用一个轻量级开源库,TakePhoto!<br><a href=\"https://github.com/crazycodeboy/TakePhoto/\" target=\"_blank\" rel=\"external\">https://github.com/crazycodeboy/TakePhoto/</a></li>\n</ul>\n","excerpt":"<h2 id=\"Android7-0适配之应用间共享文件\"><a href=\"#Android7-0适配之应用间共享文件\" class=\"headerlink\" title=\"Android7.0适配之应用间共享文件\"></a>Android7.0适配之应用间共享文件</h2><h3 id=\"出现问题\"><a href=\"#出现问题\" class=\"headerlink\" title=\"出现问题\"></a>出现问题</h3><p>Android N(API 25),打开相册编辑页面crash,报出FileUriExposedException异常</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">    android<span class=\"selector-class\">.os</span><span class=\"selector-class\">.FileUriExposedException</span>: file:<span class=\"comment\">////storage/emulated/0/temp/1474956193735.jpg exposed beyond app through Intent.getData()</span></div><div class=\"line\">at android<span class=\"selector-class\">.os</span><span class=\"selector-class\">.StrictMode</span><span class=\"selector-class\">.onFileUriExposed</span>(StrictMode<span class=\"selector-class\">.java</span>:<span class=\"number\">1799</span>)</div><div class=\"line\">at android<span class=\"selector-class\">.net</span><span class=\"selector-class\">.Uri</span><span class=\"selector-class\">.checkFileUriExposed</span>(Uri<span class=\"selector-class\">.java</span>:<span class=\"number\">2346</span>)</div><div class=\"line\">at android<span class=\"selector-class\">.content</span><span class=\"selector-class\">.Intent</span><span class=\"selector-class\">.prepareToLeaveProcess</span>(Intent<span class=\"selector-class\">.java</span>:<span class=\"number\">8933</span>)</div><div class=\"line\">at android<span class=\"selector-class\">.content</span><span class=\"selector-class\">.Intent</span><span class=\"selector-class\">.prepareToLeaveProcess</span>(Intent<span class=\"selector-class\">.java</span>:<span class=\"number\">8894</span>)</div><div class=\"line\">at android<span class=\"selector-class\">.app</span><span class=\"selector-class\">.Instrumentation</span><span class=\"selector-class\">.execStartActivity</span>(Instrumentation<span class=\"selector-class\">.java</span>:<span class=\"number\">1517</span>)</div><div class=\"line\">at android<span class=\"selector-class\">.app</span><span class=\"selector-class\">.Activity</span><span class=\"selector-class\">.startActivityForResult</span>(Activity<span class=\"selector-class\">.java</span>:<span class=\"number\">4223</span>)</div><div class=\"line\">...</div><div class=\"line\">at android<span class=\"selector-class\">.app</span><span class=\"selector-class\">.Activity</span><span class=\"selector-class\">.startActivityForResult</span>(Activity<span class=\"selector-class\">.java</span>:<span class=\"number\">4182</span>)</div></pre></td></tr></table></figure>","more":"<h3 id=\"查找原因\"><a href=\"#查找原因\" class=\"headerlink\" title=\"查找原因\"></a>查找原因</h3><p>Android N的应用,API禁止向应用外公开file://URI,如果一项包含文件URI的Intent离开应用, 应用crash并报FileUriExposedException异常</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>若想要在应用间共享文件,应该发送一项content://URI,并该URI临时访问权限,进行此授权的方式是通过FileProvider类 </p>\n<h3 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h3><h4 id=\"1-清单文件\"><a href=\"#1-清单文件\" class=\"headerlink\" title=\"[1] 清单文件\"></a>[1] 清单文件</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">package</span>=<span class=\"string\">\"com.fengan.providerdemo\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">application</span></div><div class=\"line\">        <span class=\"attr\">android:allowBackup</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@mipmap/ic_launcher\"</span></div><div class=\"line\">        <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span></div><div class=\"line\">        <span class=\"attr\">android:supportsRtl</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/AppTheme\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".MainActivity\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\">           <span class=\"comment\">&lt;!--authorities=\"你的包名+fileprovider\" --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">provider</span></div><div class=\"line\">            <span class=\"attr\">android:authorities</span>=<span class=\"string\">\"com.fengan.providerdemo.fileprovider\"</span></div><div class=\"line\">            <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.v4.content.FileProvider\"</span></div><div class=\"line\">            <span class=\"attr\">android:grantUriPermissions</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">            <span class=\"attr\">android:exported</span>=<span class=\"string\">\"false\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">meta-data</span></div><div class=\"line\">                <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.FILE_PROVIDER_PATHS\"</span></div><div class=\"line\">                <span class=\"attr\">android:resource</span>=<span class=\"string\">\"@xml/filepaths\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">provider</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"2-res下xml文件夹\"><a href=\"#2-res下xml文件夹\" class=\"headerlink\" title=\"[2] res下xml文件夹\"></a>[2] res下xml文件夹</h4><p><img src=\"./1485158383668.png\" alt=\"Alt text\"><br>注意xml文件名和清单文件中@xml/filepaths相同<br>xml文件内容</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">paths</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- external-path:sd ；path:你的应用保存文件的根目录；name随便定义--&gt;</span></div><div class=\"line\">    //<span class=\"tag\">&lt;<span class=\"name\">external-path</span> <span class=\"attr\">path</span>=<span class=\"string\">\"fengan_imgs/\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"files_path\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">external-path</span> <span class=\"attr\">path</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"files_path\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">paths</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>注意:<br>path=””,有特殊意义,它代表更目录,也就是说可以向应用共享根目录及其子目录下任何一个文件,如果将path写为path=”fengan_imgs/“,那么只能在fengan_imgs/目录下才可以分享!<br>[3]核心代码<br>将File转换为uri</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Uri getUriForFile(Context context, <span class=\"keyword\">File</span> <span class=\"keyword\">file</span>) &#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (context == <span class=\"keyword\">null</span> || <span class=\"keyword\">file</span> == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</div><div class=\"line\">       &#125;</div><div class=\"line\">       Uri uri;</div><div class=\"line\">       <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= <span class=\"number\">24</span>) &#123;</div><div class=\"line\">       <span class=\"comment\">//和android:authorities=\"com.fengan.providerdemo.fileprovider\"对应</span></div><div class=\"line\">           uri = FileProvider.getUriForFile(context.getApplicationContext(), <span class=\"string\">\"com.fengan.providerdemo.fileprovider\"</span>, <span class=\"keyword\">file</span>);</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           uri = Uri.fromFile(<span class=\"keyword\">file</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> uri;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Uri的scheme类型为file,改成了又FileProvider创建一个content类型的Uri打开相机,打印该Uri为content://com.fengan.providerdemo/files_path/temp/1474960080319.jpg`。<br>//其中camera_photos就是file_paths.xml中paths的name。</li>\n</ul>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">    * 打开相机</div><div class=\"line\">    * 兼容7.0</div><div class=\"line\">    *</div><div class=\"line\">    * <span class=\"doctag\">@param</span> activity    Activity</div><div class=\"line\">    * <span class=\"doctag\">@param</span> file        File</div><div class=\"line\">    * <span class=\"doctag\">@param</span> requestCode result requestCode</div><div class=\"line\">    */</span></div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">startActionCapture</span><span class=\"params\">(Activity activity, File file, <span class=\"keyword\">int</span> requestCode)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (activity == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       Intent intent = <span class=\"keyword\">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</div><div class=\"line\">    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION); <span class=\"comment\">//添加这一句表示对目标应用临时授权该Uri所代表的文件</span></div><div class=\"line\">       intent.putExtra(MediaStore.EXTRA_OUTPUT, getUriForFile(activity, file));<span class=\"comment\">//拍取照片保存到指定Uri</span></div><div class=\"line\">       activity.startActivityForResult(intent, requestCode);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>针对涉及到从Android设备上获取照片(拍照,或从相册,文件中选择)打开相机,裁剪图片,压缩图片,可以使用一个轻量级开源库,TakePhoto!<br><a href=\"https://github.com/crazycodeboy/TakePhoto/\">https://github.com/crazycodeboy/TakePhoto/</a></li>\n</ul>"},{"title":"Gson封装","date":"2017-08-21T03:20:34.000Z","_content":"Gson封装\n<!--more-->\n--\n\n```\n\t/**\n\t * Created by fengan on 2017/7/6/006.\n\t */\n\n\timport com.google.gson.Gson;\n\timport com.google.gson.JsonArray;\n\timport com.google.gson.JsonElement;\n\timport com.google.gson.JsonParser;\n\timport com.google.gson.reflect.TypeToken;\n\n\timport java.util.ArrayList;\n\timport java.util.List;\n\timport java.util.Map;\n\n\n\tpublic class GsonUtil {\n    private static Gson gson = null;\n\n    static {\n        if (gson == null) {\n            gson = new Gson();\n        }\n    }\n\n    private GsonUtil() {\n    }\n\n    /**\n     * 转成json\n     *\n     * @param object\n     * @return\n     */\n    public static String GsonString(Object object) {\n        String gsonString = null;\n        if (gson != null) {\n            gsonString = gson.toJson(object);\n        }\n        return gsonString;\n    }\n\n    /**\n     * 转成bean\n     *\n     * @param gsonString\n     * @param cls\n     * @return\n     */\n    public static <T> T GsonToBean(String gsonString, Class<T> cls) {\n        T t = null;\n        if (gson != null) {\n            t = gson.fromJson(gsonString, cls);\n        }\n        return t;\n    }\n\n    /**\n     * 转成list\n     * 泛型在编译期类型被擦除导致报错\n     *\n     * @param gsonString\n     * @param cls\n     * @return\n     */\n    public static <T> List<T> GsonToList(String gsonString, Class<T> cls) {\n        List<T> list = null;\n        if (gson != null) {\n            list = gson.fromJson(gsonString, new TypeToken<List<T>>() {\n            }.getType());\n        }\n        return list;\n    }\n\n    /**\n     * 转成list\n     * 解决泛型问题\n     *\n     * @param json\n     * @param cls\n     * @param <T>\n     * @return\n     */\n    public static <T> List<T> jsonToList(String json, Class<T> cls) {\n        Gson gson = new Gson();\n        List<T> list = new ArrayList<T>();\n        JsonArray array = new JsonParser().parse(json).getAsJsonArray();\n        for (final JsonElement elem : array) {\n            list.add(gson.fromJson(elem, cls));\n        }\n        return list;\n    }\n\n\n    /**\n     * 转成list中有map的\n     *\n     * @param gsonString\n     * @return\n     */\n    public static <T> List<Map<String, T>> GsonToListMaps(String gsonString) {\n        List<Map<String, T>> list = null;\n        if (gson != null) {\n            list = gson.fromJson(gsonString,\n                    new TypeToken<List<Map<String, T>>>() {\n                    }.getType());\n        }\n        return list;\n    }\n\n    /**\n     * 转成map的\n     *\n     * @param gsonString\n     * @return\n     */\n    public static <T> Map<String, T> GsonToMaps(String gsonString) {\n        Map<String, T> map = null;\n        if (gson != null) {\n            map = gson.fromJson(gsonString, new TypeToken<Map<String, T>>() {\n            }.getType());\n        }\n        return map;\n    }\n}\n```\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=415792881&auto=1&height=66\"></iframe>","source":"_posts/Gson封装.md","raw":"---\ntitle: Gson封装\ndate: 2017-08-21 11:20:34\ntags:\n---\nGson封装\n<!--more-->\n--\n\n```\n\t/**\n\t * Created by fengan on 2017/7/6/006.\n\t */\n\n\timport com.google.gson.Gson;\n\timport com.google.gson.JsonArray;\n\timport com.google.gson.JsonElement;\n\timport com.google.gson.JsonParser;\n\timport com.google.gson.reflect.TypeToken;\n\n\timport java.util.ArrayList;\n\timport java.util.List;\n\timport java.util.Map;\n\n\n\tpublic class GsonUtil {\n    private static Gson gson = null;\n\n    static {\n        if (gson == null) {\n            gson = new Gson();\n        }\n    }\n\n    private GsonUtil() {\n    }\n\n    /**\n     * 转成json\n     *\n     * @param object\n     * @return\n     */\n    public static String GsonString(Object object) {\n        String gsonString = null;\n        if (gson != null) {\n            gsonString = gson.toJson(object);\n        }\n        return gsonString;\n    }\n\n    /**\n     * 转成bean\n     *\n     * @param gsonString\n     * @param cls\n     * @return\n     */\n    public static <T> T GsonToBean(String gsonString, Class<T> cls) {\n        T t = null;\n        if (gson != null) {\n            t = gson.fromJson(gsonString, cls);\n        }\n        return t;\n    }\n\n    /**\n     * 转成list\n     * 泛型在编译期类型被擦除导致报错\n     *\n     * @param gsonString\n     * @param cls\n     * @return\n     */\n    public static <T> List<T> GsonToList(String gsonString, Class<T> cls) {\n        List<T> list = null;\n        if (gson != null) {\n            list = gson.fromJson(gsonString, new TypeToken<List<T>>() {\n            }.getType());\n        }\n        return list;\n    }\n\n    /**\n     * 转成list\n     * 解决泛型问题\n     *\n     * @param json\n     * @param cls\n     * @param <T>\n     * @return\n     */\n    public static <T> List<T> jsonToList(String json, Class<T> cls) {\n        Gson gson = new Gson();\n        List<T> list = new ArrayList<T>();\n        JsonArray array = new JsonParser().parse(json).getAsJsonArray();\n        for (final JsonElement elem : array) {\n            list.add(gson.fromJson(elem, cls));\n        }\n        return list;\n    }\n\n\n    /**\n     * 转成list中有map的\n     *\n     * @param gsonString\n     * @return\n     */\n    public static <T> List<Map<String, T>> GsonToListMaps(String gsonString) {\n        List<Map<String, T>> list = null;\n        if (gson != null) {\n            list = gson.fromJson(gsonString,\n                    new TypeToken<List<Map<String, T>>>() {\n                    }.getType());\n        }\n        return list;\n    }\n\n    /**\n     * 转成map的\n     *\n     * @param gsonString\n     * @return\n     */\n    public static <T> Map<String, T> GsonToMaps(String gsonString) {\n        Map<String, T> map = null;\n        if (gson != null) {\n            map = gson.fromJson(gsonString, new TypeToken<Map<String, T>>() {\n            }.getType());\n        }\n        return map;\n    }\n}\n```\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=415792881&auto=1&height=66\"></iframe>","slug":"Gson封装","published":1,"updated":"2017-11-14T06:01:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9z7pyym0004sbygbqb2lsgb","content":"<p>Gson封装</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><a id=\"more\"></a></h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * Created by fengan on 2017/7/6/006.</div><div class=\"line\">\t */</div><div class=\"line\"></div><div class=\"line\">\timport com.google.gson.Gson;</div><div class=\"line\">\timport com.google.gson.JsonArray;</div><div class=\"line\">\timport com.google.gson.JsonElement;</div><div class=\"line\">\timport com.google.gson.JsonParser;</div><div class=\"line\">\timport com.google.gson.reflect.TypeToken;</div><div class=\"line\"></div><div class=\"line\">\timport java.util.ArrayList;</div><div class=\"line\">\timport java.util.<span class=\"keyword\">List</span>;</div><div class=\"line\">\timport java.util.Map;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GsonUtil</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Gson gson = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (gson == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            gson = <span class=\"keyword\">new</span> Gson();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> GsonUtil() &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 转成json</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> object</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String GsonString(Object object) &#123;</div><div class=\"line\">        String gsonString = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (gson != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            gsonString = gson.toJson(object);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> gsonString;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 转成bean</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> gsonString</div><div class=\"line\">     * <span class=\"doctag\">@param</span> cls</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T GsonToBean(String gsonString, <span class=\"class\"><span class=\"keyword\">Class</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"title\">cls</span>) </span>&#123;</div><div class=\"line\">        T t = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (gson != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            t = gson.fromJson(gsonString, cls);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> t;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 转成list</div><div class=\"line\">     * 泛型在编译期类型被擦除导致报错</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> gsonString</div><div class=\"line\">     * <span class=\"doctag\">@param</span> cls</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"keyword\">List</span>&lt;T&gt; GsonToList(String gsonString, <span class=\"class\"><span class=\"keyword\">Class</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"title\">cls</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">List</span>&lt;T&gt; <span class=\"keyword\">list</span> = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (gson != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">list</span> = gson.fromJson(gsonString, <span class=\"keyword\">new</span> TypeToken&lt;<span class=\"keyword\">List</span>&lt;T&gt;&gt;() &#123;</div><div class=\"line\">            &#125;.getType());</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">list</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 转成list</div><div class=\"line\">     * 解决泛型问题</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> json</div><div class=\"line\">     * <span class=\"doctag\">@param</span> cls</div><div class=\"line\">     * <span class=\"doctag\">@param</span> &lt;T&gt;</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"keyword\">List</span>&lt;T&gt; jsonToList(String json, <span class=\"class\"><span class=\"keyword\">Class</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"title\">cls</span>) </span>&#123;</div><div class=\"line\">        Gson gson = <span class=\"keyword\">new</span> Gson();</div><div class=\"line\">        <span class=\"keyword\">List</span>&lt;T&gt; <span class=\"keyword\">list</span> = <span class=\"keyword\">new</span> ArrayList&lt;T&gt;();</div><div class=\"line\">        JsonArray <span class=\"keyword\">array</span> = <span class=\"keyword\">new</span> JsonParser().parse(json).getAsJsonArray();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">final</span> JsonElement elem : <span class=\"keyword\">array</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">list</span>.add(gson.fromJson(elem, cls));</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">list</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 转成list中有map的</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> gsonString</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"keyword\">List</span>&lt;Map&lt;String, T&gt;&gt; GsonToListMaps(String gsonString) &#123;</div><div class=\"line\">        <span class=\"keyword\">List</span>&lt;Map&lt;String, T&gt;&gt; <span class=\"keyword\">list</span> = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (gson != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">list</span> = gson.fromJson(gsonString,</div><div class=\"line\">                    <span class=\"keyword\">new</span> TypeToken&lt;<span class=\"keyword\">List</span>&lt;Map&lt;String, T&gt;&gt;&gt;() &#123;</div><div class=\"line\">                    &#125;.getType());</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">list</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 转成map的</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> gsonString</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; Map&lt;String, T&gt; GsonToMaps(String gsonString) &#123;</div><div class=\"line\">        Map&lt;String, T&gt; map = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (gson != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            map = gson.fromJson(gsonString, <span class=\"keyword\">new</span> TypeToken&lt;Map&lt;String, T&gt;&gt;() &#123;</div><div class=\"line\">            &#125;.getType());</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> map;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=415792881&auto=1&height=66\"></iframe>","excerpt":"<p>Gson封装</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a>","more":"</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * Created by fengan on 2017/7/6/006.</div><div class=\"line\">\t */</span></div><div class=\"line\"></div><div class=\"line\">\timport com.google.gson.Gson;</div><div class=\"line\">\timport com.google.gson.JsonArray;</div><div class=\"line\">\timport com.google.gson.JsonElement;</div><div class=\"line\">\timport com.google.gson.JsonParser;</div><div class=\"line\">\timport com.google.gson.reflect.TypeToken;</div><div class=\"line\"></div><div class=\"line\">\timport java.util.ArrayList;</div><div class=\"line\">\timport java.util.<span class=\"keyword\">List</span>;</div><div class=\"line\">\timport java.util.Map;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GsonUtil</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Gson gson = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (gson == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            gson = <span class=\"keyword\">new</span> Gson();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> GsonUtil() &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 转成json</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> object</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String GsonString(Object object) &#123;</div><div class=\"line\">        String gsonString = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (gson != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            gsonString = gson.toJson(object);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> gsonString;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 转成bean</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> gsonString</div><div class=\"line\">     * <span class=\"doctag\">@param</span> cls</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T GsonToBean(String gsonString, <span class=\"class\"><span class=\"keyword\">Class</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"title\">cls</span>) </span>&#123;</div><div class=\"line\">        T t = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (gson != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            t = gson.fromJson(gsonString, cls);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> t;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 转成list</div><div class=\"line\">     * 泛型在编译期类型被擦除导致报错</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> gsonString</div><div class=\"line\">     * <span class=\"doctag\">@param</span> cls</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"keyword\">List</span>&lt;T&gt; GsonToList(String gsonString, <span class=\"class\"><span class=\"keyword\">Class</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"title\">cls</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">List</span>&lt;T&gt; <span class=\"keyword\">list</span> = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (gson != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">list</span> = gson.fromJson(gsonString, <span class=\"keyword\">new</span> TypeToken&lt;<span class=\"keyword\">List</span>&lt;T&gt;&gt;() &#123;</div><div class=\"line\">            &#125;.getType());</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">list</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 转成list</div><div class=\"line\">     * 解决泛型问题</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> json</div><div class=\"line\">     * <span class=\"doctag\">@param</span> cls</div><div class=\"line\">     * <span class=\"doctag\">@param</span> &lt;T&gt;</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"keyword\">List</span>&lt;T&gt; jsonToList(String json, <span class=\"class\"><span class=\"keyword\">Class</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"title\">cls</span>) </span>&#123;</div><div class=\"line\">        Gson gson = <span class=\"keyword\">new</span> Gson();</div><div class=\"line\">        <span class=\"keyword\">List</span>&lt;T&gt; <span class=\"keyword\">list</span> = <span class=\"keyword\">new</span> ArrayList&lt;T&gt;();</div><div class=\"line\">        JsonArray <span class=\"keyword\">array</span> = <span class=\"keyword\">new</span> JsonParser().parse(json).getAsJsonArray();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">final</span> JsonElement elem : <span class=\"keyword\">array</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">list</span>.add(gson.fromJson(elem, cls));</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">list</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 转成list中有map的</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> gsonString</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"keyword\">List</span>&lt;Map&lt;String, T&gt;&gt; GsonToListMaps(String gsonString) &#123;</div><div class=\"line\">        <span class=\"keyword\">List</span>&lt;Map&lt;String, T&gt;&gt; <span class=\"keyword\">list</span> = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (gson != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">list</span> = gson.fromJson(gsonString,</div><div class=\"line\">                    <span class=\"keyword\">new</span> TypeToken&lt;<span class=\"keyword\">List</span>&lt;Map&lt;String, T&gt;&gt;&gt;() &#123;</div><div class=\"line\">                    &#125;.getType());</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">list</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 转成map的</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> gsonString</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; Map&lt;String, T&gt; GsonToMaps(String gsonString) &#123;</div><div class=\"line\">        Map&lt;String, T&gt; map = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (gson != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            map = gson.fromJson(gsonString, <span class=\"keyword\">new</span> TypeToken&lt;Map&lt;String, T&gt;&gt;() &#123;</div><div class=\"line\">            &#125;.getType());</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> map;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=415792881&auto=1&height=66\"></iframe>"},{"title":"view被软键盘挡住和点击外部软键盘消失","date":"2017-08-21T03:02:01.000Z","_content":"# 软键盘(挡住button,和点击外部软键盘消失) #\n# 以下是解决挡住button的逻辑 (写的比较急,黄色的部分就是edittext)#\n    \n\n> ![引用块内容](http://img.blog.csdn.net/20170615102440904?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmVuZ2FuaXQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n<!--more-->\n\n\n    //    控制是否移动布局。比如只有密码输入框获取到焦点时才执行。\n    public  boolean flag = true;\n\n    /**\n     * @param act          activiry用于获取底部导航栏高度。\n     * @param root         最外层布局，需要调整的布局\n     * @param scrollToView 被键盘遮挡的scrollToView，滚动root,使scrollToView在root可视区域的底部\n     */\n    public  void controlKeyboardLayout(Context act, final View root, final View scrollToView) {\n        final int navigationBarHeight = getNavigationBarHeight(act);\n\n        root.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n            @Override\n            public void onGlobalLayout() {\n                Rect rect = new Rect();\n                //获取root在窗体的可视区域\n                root.getWindowVisibleDisplayFrame(rect);\n                //获取root在窗体的不可视区域高度(被其他View遮挡的区域高度)\n                int rootInvisibleHeight = root.getRootView().getHeight() - rect.bottom;\n                //若不可视区域高度大于100，则键盘显示\n                if (rootInvisibleHeight > navigationBarHeight && flag) {\n                    int[] location = new int[2];\n                    //获取scrollToView在窗体的坐标\n                    scrollToView.getLocationInWindow(location);\n                    //计算root滚动高度，使scrollToView在可见区域\n                    int srollHeight = (location[1] + scrollToView.getHeight()) - rect.bottom;\n                    if (root.getScrollY() != 0) {// 如果已经滚动，要根据上次滚动，重新计算位置。\n                        srollHeight += root.getScrollY();\n                    }\n                    root.scrollTo(0, srollHeight);\n                } else {\n                    //键盘隐藏\n                    root.scrollTo(0, 0);\n                }\n            }\n        });\n    }\n\n# 以下是解决控制点击可选择的区域让软键盘消失或者不消失 #\n      /**\n     * 获取底部导航栏高度\n     *\n     * @param act\n     * @return\n     */\n    private  int getNavigationBarHeight(Context act) {\n        Resources resources = act.getResources();\n        int resourceId = resources.getIdentifier(\"navigation_bar_height\", \"dimen\", \"android\");\n        int height = resources.getDimensionPixelSize(resourceId);\n        Log.v(\"dbw\", \"Navi height:\" + height);\n        return height;\n    }\n\n    //软键盘消失的管理\n    //region软键盘的处理\n\n    /**\n     * 清除editText的焦点\n     *\n     * @param v   焦点所在View\n     * @param ids 输入框\n     */\n    public void clearViewFocus(View v, int... ids) {\n        if (null != v && null != ids && ids.length > 0) {\n            for (int id : ids) {\n                if (v.getId() == id) {\n                    v.clearFocus();\n                    break;\n                }\n            }\n        }\n    }\n    /**\n     * 隐藏键盘\n     *\n     * @param v   焦点所在View\n     * @param ids 输入框\n     * @return true代表焦点在edit上\n     */\n    public boolean isFocusEditText(View v, int... ids) {\n        if (v instanceof EditText) {\n            EditText tmp_et = (EditText) v;\n            for (int id : ids) {\n                if (tmp_et.getId() == id) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    //是否触摸在指定view上面,对某个控件过滤\n    public boolean isTouchView(View[] views, MotionEvent ev) {\n        if (views == null || views.length == 0) return false;\n        int[] location = new int[2];\n        for (View view : views) {\n            view.getLocationOnScreen(location);\n            int x = location[0];\n            int y = location[1];\n            if (ev.getX() > x && ev.getX() < (x + view.getWidth())\n                    && ev.getY() > y && ev.getY() < (y + view.getHeight())) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    //region 右滑返回上级\n    @Override\n    public boolean dispatchTouchEvent(MotionEvent ev) {\n        if (ev.getAction() == MotionEvent.ACTION_DOWN) {\n            if (isTouchView(filterViewByIds(), ev)) return super.dispatchTouchEvent(ev);\n            if (hideSoftByEditViewIds() == null || hideSoftByEditViewIds().length == 0)\n                return super.dispatchTouchEvent(ev);\n            View v = getCurrentFocus();\n            if (isFocusEditText(v, hideSoftByEditViewIds())) {\n                //隐藏键盘\n                hideInputForce(this);\n                clearViewFocus(v, hideSoftByEditViewIds());\n            }\n        }\n        return super.dispatchTouchEvent(ev);\n\n    }\n\n\n    /**\n     * 传入EditText的Id\n     * 没有传入的EditText不做处理\n     *\n     * @return id 数组\n     */\n    public int[] hideSoftByEditViewIds() {\n        return null;\n    }\n\n    /**\n     * 传入要过滤的View\n     * 过滤之后点击将不会有隐藏软键盘的操作\n     *\n     * @return id 数组\n     */\n    public View[] filterViewByIds() {\n        return null;\n    }\n\n    /**\n     * des:隐藏软键盘,这种方式参数为activity\n     *\n     * @param activity\n     */\n    public static void hideInputForce(Activity activity) {\n        if (activity == null || activity.getCurrentFocus() == null)\n            return;\n\n        ((InputMethodManager) activity.getSystemService(INPUT_METHOD_SERVICE))\n                .hideSoftInputFromWindow(activity.getCurrentFocus()\n                        .getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);\n    }\n\n# 以下Demo全部代码 #\n\n\n\tpublic class MainActivity extends AppCompatActivity {\n\n    private EditText mEt1;\n    private EditText mEt2;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Button btn = (Button) findViewById(R.id.btn);\n        mEt1 = (EditText) findViewById(R.id.et1);\n        mEt2 = (EditText) findViewById(R.id.et2);\n        LinearLayout LL = (LinearLayout) findViewById(R.id.LL);\n        controlKeyboardLayout(this,LL,btn);\n    }\n\n\n    //    控制是否移动布局。比如只有密码输入框获取到焦点时才执行。\n    public  boolean flag = true;\n\n    /**\n     * @param act          activiry用于获取底部导航栏高度。\n     * @param root         最外层布局，需要调整的布局\n     * @param scrollToView 被键盘遮挡的scrollToView，滚动root,使scrollToView在root可视区域的底部\n     */\n    public  void controlKeyboardLayout(Context act, final View root, final View scrollToView) {\n        final int navigationBarHeight = getNavigationBarHeight(act);\n\n        root.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n            @Override\n            public void onGlobalLayout() {\n                Rect rect = new Rect();\n                //获取root在窗体的可视区域\n                root.getWindowVisibleDisplayFrame(rect);\n                //获取root在窗体的不可视区域高度(被其他View遮挡的区域高度)\n                int rootInvisibleHeight = root.getRootView().getHeight() - rect.bottom;\n                //若不可视区域高度大于100，则键盘显示\n                if (rootInvisibleHeight > navigationBarHeight && flag) {\n                    int[] location = new int[2];\n                    //获取scrollToView在窗体的坐标\n                    scrollToView.getLocationInWindow(location);\n                    //计算root滚动高度，使scrollToView在可见区域\n                    int srollHeight = (location[1] + scrollToView.getHeight()) - rect.bottom;\n                    if (root.getScrollY() != 0) {// 如果已经滚动，要根据上次滚动，重新计算位置。\n                        srollHeight += root.getScrollY();\n                    }\n                    root.scrollTo(0, srollHeight);\n                } else {\n                    //键盘隐藏\n                    root.scrollTo(0, 0);\n                }\n            }\n        });\n    }\n\n    /**\n     * 获取底部导航栏高度\n     *\n     * @param act\n     * @return\n     */\n    private  int getNavigationBarHeight(Context act) {\n        Resources resources = act.getResources();\n        int resourceId = resources.getIdentifier(\"navigation_bar_height\", \"dimen\", \"android\");\n        int height = resources.getDimensionPixelSize(resourceId);\n        Log.v(\"dbw\", \"Navi height:\" + height);\n        return height;\n    }\n\n    //软键盘消失的管理\n    //region软键盘的处理\n\n    /**\n     * 清除editText的焦点\n     *\n     * @param v   焦点所在View\n     * @param ids 输入框\n     */\n    public void clearViewFocus(View v, int... ids) {\n        if (null != v && null != ids && ids.length > 0) {\n            for (int id : ids) {\n                if (v.getId() == id) {\n                    v.clearFocus();\n                    break;\n                }\n            }\n        }\n    }\n    /**\n     * 隐藏键盘\n     *\n     * @param v   焦点所在View\n     * @param ids 输入框\n     * @return true代表焦点在edit上\n     */\n    public boolean isFocusEditText(View v, int... ids) {\n        if (v instanceof EditText) {\n            EditText tmp_et = (EditText) v;\n            for (int id : ids) {\n                if (tmp_et.getId() == id) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    //是否触摸在指定view上面,对某个控件过滤\n    public boolean isTouchView(View[] views, MotionEvent ev) {\n        if (views == null || views.length == 0) return false;\n        int[] location = new int[2];\n        for (View view : views) {\n            view.getLocationOnScreen(location);\n            int x = location[0];\n            int y = location[1];\n            if (ev.getX() > x && ev.getX() < (x + view.getWidth())\n                    && ev.getY() > y && ev.getY() < (y + view.getHeight())) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    //region 右滑返回上级\n    @Override\n    public boolean dispatchTouchEvent(MotionEvent ev) {\n        if (ev.getAction() == MotionEvent.ACTION_DOWN) {\n            if (isTouchView(filterViewByIds(), ev)) return super.dispatchTouchEvent(ev);\n            if (hideSoftByEditViewIds() == null || hideSoftByEditViewIds().length == 0)\n                return super.dispatchTouchEvent(ev);\n            View v = getCurrentFocus();\n            if (isFocusEditText(v, hideSoftByEditViewIds())) {\n                //隐藏键盘\n                hideInputForce(this);\n                clearViewFocus(v, hideSoftByEditViewIds());\n            }\n        }\n        return super.dispatchTouchEvent(ev);\n\n    }\n\n\n    /**\n     * 传入EditText的Id\n     * 没有传入的EditText不做处理\n     *\n     * @return id 数组\n     */\n    public int[] hideSoftByEditViewIds() {\n        int []  ids = {R.id.et1,R.id.et2};\n        return ids;\n    }\n\n    /**\n     * 传入要过滤的View\n     * 过滤之后点击将不会有隐藏软键盘的操作\n     *\n     * @return id 数组\n     */\n    public View[] filterViewByIds() {\n        View [] views = {mEt1,mEt2};//点击这两个控件,软键盘不会消失\n        return views;\n    }\n\n    /**\n     * des:隐藏软键盘,这种方式参数为activity\n     *\n     * @param activity\n     */\n    public static void hideInputForce(Activity activity) {\n        if (activity == null || activity.getCurrentFocus() == null)\n            return;\n\n        ((InputMethodManager) activity.getSystemService(INPUT_METHOD_SERVICE))\n                .hideSoftInputFromWindow(activity.getCurrentFocus()\n                        .getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);\n    }\n\t}\n# 以下是布局文件 #\n\n\t```\n\t<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\t<LinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/activity_main\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    tools:context=\"fengan.softinputdemo.MainActivity\">\n    <LinearLayout\n        android:id=\"@+id/LL\"\n        android:layout_marginTop=\"100dp\"\n        android:layout_width=\"match_parent\"\n        android:orientation=\"vertical\"\n        android:layout_height=\"wrap_content\">\n    <EditText\n        android:id=\"@+id/et1\"\n        android:layout_marginTop=\"60dp\"\n        android:background=\"#ff0\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"60dp\"/>\n    <EditText\n        android:id=\"@+id/et2\"\n        android:layout_marginTop=\"20dp\"\n        android:background=\"#ff0\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"60dp\"/>\n    <Button\n        android:text=\"软键盘挡住button\"\n        android:id=\"@+id/btn\"\n        android:layout_marginTop=\"30dp\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"/>\n    </LinearLayout>\n</LinearLayout>\n\n\t\n\t可以将隐藏显示的代码封装到BaseActivity\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=448707059&auto=1&height=66\"></iframe>","source":"_posts/view被软键盘挡住和点击外部软键盘消失.md","raw":"---\ntitle: view被软键盘挡住和点击外部软键盘消失\ndate: 2017-08-21 11:02:01\ntags:\n---\n# 软键盘(挡住button,和点击外部软键盘消失) #\n# 以下是解决挡住button的逻辑 (写的比较急,黄色的部分就是edittext)#\n    \n\n> ![引用块内容](http://img.blog.csdn.net/20170615102440904?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmVuZ2FuaXQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n<!--more-->\n\n\n    //    控制是否移动布局。比如只有密码输入框获取到焦点时才执行。\n    public  boolean flag = true;\n\n    /**\n     * @param act          activiry用于获取底部导航栏高度。\n     * @param root         最外层布局，需要调整的布局\n     * @param scrollToView 被键盘遮挡的scrollToView，滚动root,使scrollToView在root可视区域的底部\n     */\n    public  void controlKeyboardLayout(Context act, final View root, final View scrollToView) {\n        final int navigationBarHeight = getNavigationBarHeight(act);\n\n        root.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n            @Override\n            public void onGlobalLayout() {\n                Rect rect = new Rect();\n                //获取root在窗体的可视区域\n                root.getWindowVisibleDisplayFrame(rect);\n                //获取root在窗体的不可视区域高度(被其他View遮挡的区域高度)\n                int rootInvisibleHeight = root.getRootView().getHeight() - rect.bottom;\n                //若不可视区域高度大于100，则键盘显示\n                if (rootInvisibleHeight > navigationBarHeight && flag) {\n                    int[] location = new int[2];\n                    //获取scrollToView在窗体的坐标\n                    scrollToView.getLocationInWindow(location);\n                    //计算root滚动高度，使scrollToView在可见区域\n                    int srollHeight = (location[1] + scrollToView.getHeight()) - rect.bottom;\n                    if (root.getScrollY() != 0) {// 如果已经滚动，要根据上次滚动，重新计算位置。\n                        srollHeight += root.getScrollY();\n                    }\n                    root.scrollTo(0, srollHeight);\n                } else {\n                    //键盘隐藏\n                    root.scrollTo(0, 0);\n                }\n            }\n        });\n    }\n\n# 以下是解决控制点击可选择的区域让软键盘消失或者不消失 #\n      /**\n     * 获取底部导航栏高度\n     *\n     * @param act\n     * @return\n     */\n    private  int getNavigationBarHeight(Context act) {\n        Resources resources = act.getResources();\n        int resourceId = resources.getIdentifier(\"navigation_bar_height\", \"dimen\", \"android\");\n        int height = resources.getDimensionPixelSize(resourceId);\n        Log.v(\"dbw\", \"Navi height:\" + height);\n        return height;\n    }\n\n    //软键盘消失的管理\n    //region软键盘的处理\n\n    /**\n     * 清除editText的焦点\n     *\n     * @param v   焦点所在View\n     * @param ids 输入框\n     */\n    public void clearViewFocus(View v, int... ids) {\n        if (null != v && null != ids && ids.length > 0) {\n            for (int id : ids) {\n                if (v.getId() == id) {\n                    v.clearFocus();\n                    break;\n                }\n            }\n        }\n    }\n    /**\n     * 隐藏键盘\n     *\n     * @param v   焦点所在View\n     * @param ids 输入框\n     * @return true代表焦点在edit上\n     */\n    public boolean isFocusEditText(View v, int... ids) {\n        if (v instanceof EditText) {\n            EditText tmp_et = (EditText) v;\n            for (int id : ids) {\n                if (tmp_et.getId() == id) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    //是否触摸在指定view上面,对某个控件过滤\n    public boolean isTouchView(View[] views, MotionEvent ev) {\n        if (views == null || views.length == 0) return false;\n        int[] location = new int[2];\n        for (View view : views) {\n            view.getLocationOnScreen(location);\n            int x = location[0];\n            int y = location[1];\n            if (ev.getX() > x && ev.getX() < (x + view.getWidth())\n                    && ev.getY() > y && ev.getY() < (y + view.getHeight())) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    //region 右滑返回上级\n    @Override\n    public boolean dispatchTouchEvent(MotionEvent ev) {\n        if (ev.getAction() == MotionEvent.ACTION_DOWN) {\n            if (isTouchView(filterViewByIds(), ev)) return super.dispatchTouchEvent(ev);\n            if (hideSoftByEditViewIds() == null || hideSoftByEditViewIds().length == 0)\n                return super.dispatchTouchEvent(ev);\n            View v = getCurrentFocus();\n            if (isFocusEditText(v, hideSoftByEditViewIds())) {\n                //隐藏键盘\n                hideInputForce(this);\n                clearViewFocus(v, hideSoftByEditViewIds());\n            }\n        }\n        return super.dispatchTouchEvent(ev);\n\n    }\n\n\n    /**\n     * 传入EditText的Id\n     * 没有传入的EditText不做处理\n     *\n     * @return id 数组\n     */\n    public int[] hideSoftByEditViewIds() {\n        return null;\n    }\n\n    /**\n     * 传入要过滤的View\n     * 过滤之后点击将不会有隐藏软键盘的操作\n     *\n     * @return id 数组\n     */\n    public View[] filterViewByIds() {\n        return null;\n    }\n\n    /**\n     * des:隐藏软键盘,这种方式参数为activity\n     *\n     * @param activity\n     */\n    public static void hideInputForce(Activity activity) {\n        if (activity == null || activity.getCurrentFocus() == null)\n            return;\n\n        ((InputMethodManager) activity.getSystemService(INPUT_METHOD_SERVICE))\n                .hideSoftInputFromWindow(activity.getCurrentFocus()\n                        .getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);\n    }\n\n# 以下Demo全部代码 #\n\n\n\tpublic class MainActivity extends AppCompatActivity {\n\n    private EditText mEt1;\n    private EditText mEt2;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Button btn = (Button) findViewById(R.id.btn);\n        mEt1 = (EditText) findViewById(R.id.et1);\n        mEt2 = (EditText) findViewById(R.id.et2);\n        LinearLayout LL = (LinearLayout) findViewById(R.id.LL);\n        controlKeyboardLayout(this,LL,btn);\n    }\n\n\n    //    控制是否移动布局。比如只有密码输入框获取到焦点时才执行。\n    public  boolean flag = true;\n\n    /**\n     * @param act          activiry用于获取底部导航栏高度。\n     * @param root         最外层布局，需要调整的布局\n     * @param scrollToView 被键盘遮挡的scrollToView，滚动root,使scrollToView在root可视区域的底部\n     */\n    public  void controlKeyboardLayout(Context act, final View root, final View scrollToView) {\n        final int navigationBarHeight = getNavigationBarHeight(act);\n\n        root.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n            @Override\n            public void onGlobalLayout() {\n                Rect rect = new Rect();\n                //获取root在窗体的可视区域\n                root.getWindowVisibleDisplayFrame(rect);\n                //获取root在窗体的不可视区域高度(被其他View遮挡的区域高度)\n                int rootInvisibleHeight = root.getRootView().getHeight() - rect.bottom;\n                //若不可视区域高度大于100，则键盘显示\n                if (rootInvisibleHeight > navigationBarHeight && flag) {\n                    int[] location = new int[2];\n                    //获取scrollToView在窗体的坐标\n                    scrollToView.getLocationInWindow(location);\n                    //计算root滚动高度，使scrollToView在可见区域\n                    int srollHeight = (location[1] + scrollToView.getHeight()) - rect.bottom;\n                    if (root.getScrollY() != 0) {// 如果已经滚动，要根据上次滚动，重新计算位置。\n                        srollHeight += root.getScrollY();\n                    }\n                    root.scrollTo(0, srollHeight);\n                } else {\n                    //键盘隐藏\n                    root.scrollTo(0, 0);\n                }\n            }\n        });\n    }\n\n    /**\n     * 获取底部导航栏高度\n     *\n     * @param act\n     * @return\n     */\n    private  int getNavigationBarHeight(Context act) {\n        Resources resources = act.getResources();\n        int resourceId = resources.getIdentifier(\"navigation_bar_height\", \"dimen\", \"android\");\n        int height = resources.getDimensionPixelSize(resourceId);\n        Log.v(\"dbw\", \"Navi height:\" + height);\n        return height;\n    }\n\n    //软键盘消失的管理\n    //region软键盘的处理\n\n    /**\n     * 清除editText的焦点\n     *\n     * @param v   焦点所在View\n     * @param ids 输入框\n     */\n    public void clearViewFocus(View v, int... ids) {\n        if (null != v && null != ids && ids.length > 0) {\n            for (int id : ids) {\n                if (v.getId() == id) {\n                    v.clearFocus();\n                    break;\n                }\n            }\n        }\n    }\n    /**\n     * 隐藏键盘\n     *\n     * @param v   焦点所在View\n     * @param ids 输入框\n     * @return true代表焦点在edit上\n     */\n    public boolean isFocusEditText(View v, int... ids) {\n        if (v instanceof EditText) {\n            EditText tmp_et = (EditText) v;\n            for (int id : ids) {\n                if (tmp_et.getId() == id) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    //是否触摸在指定view上面,对某个控件过滤\n    public boolean isTouchView(View[] views, MotionEvent ev) {\n        if (views == null || views.length == 0) return false;\n        int[] location = new int[2];\n        for (View view : views) {\n            view.getLocationOnScreen(location);\n            int x = location[0];\n            int y = location[1];\n            if (ev.getX() > x && ev.getX() < (x + view.getWidth())\n                    && ev.getY() > y && ev.getY() < (y + view.getHeight())) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    //region 右滑返回上级\n    @Override\n    public boolean dispatchTouchEvent(MotionEvent ev) {\n        if (ev.getAction() == MotionEvent.ACTION_DOWN) {\n            if (isTouchView(filterViewByIds(), ev)) return super.dispatchTouchEvent(ev);\n            if (hideSoftByEditViewIds() == null || hideSoftByEditViewIds().length == 0)\n                return super.dispatchTouchEvent(ev);\n            View v = getCurrentFocus();\n            if (isFocusEditText(v, hideSoftByEditViewIds())) {\n                //隐藏键盘\n                hideInputForce(this);\n                clearViewFocus(v, hideSoftByEditViewIds());\n            }\n        }\n        return super.dispatchTouchEvent(ev);\n\n    }\n\n\n    /**\n     * 传入EditText的Id\n     * 没有传入的EditText不做处理\n     *\n     * @return id 数组\n     */\n    public int[] hideSoftByEditViewIds() {\n        int []  ids = {R.id.et1,R.id.et2};\n        return ids;\n    }\n\n    /**\n     * 传入要过滤的View\n     * 过滤之后点击将不会有隐藏软键盘的操作\n     *\n     * @return id 数组\n     */\n    public View[] filterViewByIds() {\n        View [] views = {mEt1,mEt2};//点击这两个控件,软键盘不会消失\n        return views;\n    }\n\n    /**\n     * des:隐藏软键盘,这种方式参数为activity\n     *\n     * @param activity\n     */\n    public static void hideInputForce(Activity activity) {\n        if (activity == null || activity.getCurrentFocus() == null)\n            return;\n\n        ((InputMethodManager) activity.getSystemService(INPUT_METHOD_SERVICE))\n                .hideSoftInputFromWindow(activity.getCurrentFocus()\n                        .getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);\n    }\n\t}\n# 以下是布局文件 #\n\n\t```\n\t<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\t<LinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/activity_main\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    tools:context=\"fengan.softinputdemo.MainActivity\">\n    <LinearLayout\n        android:id=\"@+id/LL\"\n        android:layout_marginTop=\"100dp\"\n        android:layout_width=\"match_parent\"\n        android:orientation=\"vertical\"\n        android:layout_height=\"wrap_content\">\n    <EditText\n        android:id=\"@+id/et1\"\n        android:layout_marginTop=\"60dp\"\n        android:background=\"#ff0\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"60dp\"/>\n    <EditText\n        android:id=\"@+id/et2\"\n        android:layout_marginTop=\"20dp\"\n        android:background=\"#ff0\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"60dp\"/>\n    <Button\n        android:text=\"软键盘挡住button\"\n        android:id=\"@+id/btn\"\n        android:layout_marginTop=\"30dp\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"/>\n    </LinearLayout>\n</LinearLayout>\n\n\t\n\t可以将隐藏显示的代码封装到BaseActivity\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=448707059&auto=1&height=66\"></iframe>","slug":"view被软键盘挡住和点击外部软键盘消失","published":1,"updated":"2017-11-14T06:01:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9z7pyym0005sbyg3ff61z9n","content":"<h1 id=\"软键盘-挡住button-和点击外部软键盘消失\"><a href=\"#软键盘-挡住button-和点击外部软键盘消失\" class=\"headerlink\" title=\"软键盘(挡住button,和点击外部软键盘消失)\"></a>软键盘(挡住button,和点击外部软键盘消失)</h1><h1 id=\"以下是解决挡住button的逻辑-写的比较急-黄色的部分就是edittext\"><a href=\"#以下是解决挡住button的逻辑-写的比较急-黄色的部分就是edittext\" class=\"headerlink\" title=\"以下是解决挡住button的逻辑 (写的比较急,黄色的部分就是edittext)\"></a>以下是解决挡住button的逻辑 (写的比较急,黄色的部分就是edittext)</h1><blockquote>\n<p><img src=\"http://img.blog.csdn.net/20170615102440904?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmVuZ2FuaXQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"引用块内容\"></p>\n</blockquote>\n<a id=\"more\"></a>\n<pre><code>//    控制是否移动布局。比如只有密码输入框获取到焦点时才执行。\npublic  boolean flag = true;\n\n/**\n * @param act          activiry用于获取底部导航栏高度。\n * @param root         最外层布局，需要调整的布局\n * @param scrollToView 被键盘遮挡的scrollToView，滚动root,使scrollToView在root可视区域的底部\n */\npublic  void controlKeyboardLayout(Context act, final View root, final View scrollToView) {\n    final int navigationBarHeight = getNavigationBarHeight(act);\n\n    root.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n        @Override\n        public void onGlobalLayout() {\n            Rect rect = new Rect();\n            //获取root在窗体的可视区域\n            root.getWindowVisibleDisplayFrame(rect);\n            //获取root在窗体的不可视区域高度(被其他View遮挡的区域高度)\n            int rootInvisibleHeight = root.getRootView().getHeight() - rect.bottom;\n            //若不可视区域高度大于100，则键盘显示\n            if (rootInvisibleHeight &gt; navigationBarHeight &amp;&amp; flag) {\n                int[] location = new int[2];\n                //获取scrollToView在窗体的坐标\n                scrollToView.getLocationInWindow(location);\n                //计算root滚动高度，使scrollToView在可见区域\n                int srollHeight = (location[1] + scrollToView.getHeight()) - rect.bottom;\n                if (root.getScrollY() != 0) {// 如果已经滚动，要根据上次滚动，重新计算位置。\n                    srollHeight += root.getScrollY();\n                }\n                root.scrollTo(0, srollHeight);\n            } else {\n                //键盘隐藏\n                root.scrollTo(0, 0);\n            }\n        }\n    });\n}\n</code></pre><h1 id=\"以下是解决控制点击可选择的区域让软键盘消失或者不消失\"><a href=\"#以下是解决控制点击可选择的区域让软键盘消失或者不消失\" class=\"headerlink\" title=\"以下是解决控制点击可选择的区域让软键盘消失或者不消失\"></a>以下是解决控制点击可选择的区域让软键盘消失或者不消失</h1><pre><code>  /**\n * 获取底部导航栏高度\n *\n * @param act\n * @return\n */\nprivate  int getNavigationBarHeight(Context act) {\n    Resources resources = act.getResources();\n    int resourceId = resources.getIdentifier(&quot;navigation_bar_height&quot;, &quot;dimen&quot;, &quot;android&quot;);\n    int height = resources.getDimensionPixelSize(resourceId);\n    Log.v(&quot;dbw&quot;, &quot;Navi height:&quot; + height);\n    return height;\n}\n\n//软键盘消失的管理\n//region软键盘的处理\n\n/**\n * 清除editText的焦点\n *\n * @param v   焦点所在View\n * @param ids 输入框\n */\npublic void clearViewFocus(View v, int... ids) {\n    if (null != v &amp;&amp; null != ids &amp;&amp; ids.length &gt; 0) {\n        for (int id : ids) {\n            if (v.getId() == id) {\n                v.clearFocus();\n                break;\n            }\n        }\n    }\n}\n/**\n * 隐藏键盘\n *\n * @param v   焦点所在View\n * @param ids 输入框\n * @return true代表焦点在edit上\n */\npublic boolean isFocusEditText(View v, int... ids) {\n    if (v instanceof EditText) {\n        EditText tmp_et = (EditText) v;\n        for (int id : ids) {\n            if (tmp_et.getId() == id) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n//是否触摸在指定view上面,对某个控件过滤\npublic boolean isTouchView(View[] views, MotionEvent ev) {\n    if (views == null || views.length == 0) return false;\n    int[] location = new int[2];\n    for (View view : views) {\n        view.getLocationOnScreen(location);\n        int x = location[0];\n        int y = location[1];\n        if (ev.getX() &gt; x &amp;&amp; ev.getX() &lt; (x + view.getWidth())\n                &amp;&amp; ev.getY() &gt; y &amp;&amp; ev.getY() &lt; (y + view.getHeight())) {\n            return true;\n        }\n    }\n    return false;\n}\n\n//region 右滑返回上级\n@Override\npublic boolean dispatchTouchEvent(MotionEvent ev) {\n    if (ev.getAction() == MotionEvent.ACTION_DOWN) {\n        if (isTouchView(filterViewByIds(), ev)) return super.dispatchTouchEvent(ev);\n        if (hideSoftByEditViewIds() == null || hideSoftByEditViewIds().length == 0)\n            return super.dispatchTouchEvent(ev);\n        View v = getCurrentFocus();\n        if (isFocusEditText(v, hideSoftByEditViewIds())) {\n            //隐藏键盘\n            hideInputForce(this);\n            clearViewFocus(v, hideSoftByEditViewIds());\n        }\n    }\n    return super.dispatchTouchEvent(ev);\n\n}\n\n\n/**\n * 传入EditText的Id\n * 没有传入的EditText不做处理\n *\n * @return id 数组\n */\npublic int[] hideSoftByEditViewIds() {\n    return null;\n}\n\n/**\n * 传入要过滤的View\n * 过滤之后点击将不会有隐藏软键盘的操作\n *\n * @return id 数组\n */\npublic View[] filterViewByIds() {\n    return null;\n}\n\n/**\n * des:隐藏软键盘,这种方式参数为activity\n *\n * @param activity\n */\npublic static void hideInputForce(Activity activity) {\n    if (activity == null || activity.getCurrentFocus() == null)\n        return;\n\n    ((InputMethodManager) activity.getSystemService(INPUT_METHOD_SERVICE))\n            .hideSoftInputFromWindow(activity.getCurrentFocus()\n                    .getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);\n}\n</code></pre><h1 id=\"以下Demo全部代码\"><a href=\"#以下Demo全部代码\" class=\"headerlink\" title=\"以下Demo全部代码\"></a>以下Demo全部代码</h1><pre><code>public class MainActivity extends AppCompatActivity {\n\nprivate EditText mEt1;\nprivate EditText mEt2;\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    Button btn = (Button) findViewById(R.id.btn);\n    mEt1 = (EditText) findViewById(R.id.et1);\n    mEt2 = (EditText) findViewById(R.id.et2);\n    LinearLayout LL = (LinearLayout) findViewById(R.id.LL);\n    controlKeyboardLayout(this,LL,btn);\n}\n\n\n//    控制是否移动布局。比如只有密码输入框获取到焦点时才执行。\npublic  boolean flag = true;\n\n/**\n * @param act          activiry用于获取底部导航栏高度。\n * @param root         最外层布局，需要调整的布局\n * @param scrollToView 被键盘遮挡的scrollToView，滚动root,使scrollToView在root可视区域的底部\n */\npublic  void controlKeyboardLayout(Context act, final View root, final View scrollToView) {\n    final int navigationBarHeight = getNavigationBarHeight(act);\n\n    root.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n        @Override\n        public void onGlobalLayout() {\n            Rect rect = new Rect();\n            //获取root在窗体的可视区域\n            root.getWindowVisibleDisplayFrame(rect);\n            //获取root在窗体的不可视区域高度(被其他View遮挡的区域高度)\n            int rootInvisibleHeight = root.getRootView().getHeight() - rect.bottom;\n            //若不可视区域高度大于100，则键盘显示\n            if (rootInvisibleHeight &gt; navigationBarHeight &amp;&amp; flag) {\n                int[] location = new int[2];\n                //获取scrollToView在窗体的坐标\n                scrollToView.getLocationInWindow(location);\n                //计算root滚动高度，使scrollToView在可见区域\n                int srollHeight = (location[1] + scrollToView.getHeight()) - rect.bottom;\n                if (root.getScrollY() != 0) {// 如果已经滚动，要根据上次滚动，重新计算位置。\n                    srollHeight += root.getScrollY();\n                }\n                root.scrollTo(0, srollHeight);\n            } else {\n                //键盘隐藏\n                root.scrollTo(0, 0);\n            }\n        }\n    });\n}\n\n/**\n * 获取底部导航栏高度\n *\n * @param act\n * @return\n */\nprivate  int getNavigationBarHeight(Context act) {\n    Resources resources = act.getResources();\n    int resourceId = resources.getIdentifier(&quot;navigation_bar_height&quot;, &quot;dimen&quot;, &quot;android&quot;);\n    int height = resources.getDimensionPixelSize(resourceId);\n    Log.v(&quot;dbw&quot;, &quot;Navi height:&quot; + height);\n    return height;\n}\n\n//软键盘消失的管理\n//region软键盘的处理\n\n/**\n * 清除editText的焦点\n *\n * @param v   焦点所在View\n * @param ids 输入框\n */\npublic void clearViewFocus(View v, int... ids) {\n    if (null != v &amp;&amp; null != ids &amp;&amp; ids.length &gt; 0) {\n        for (int id : ids) {\n            if (v.getId() == id) {\n                v.clearFocus();\n                break;\n            }\n        }\n    }\n}\n/**\n * 隐藏键盘\n *\n * @param v   焦点所在View\n * @param ids 输入框\n * @return true代表焦点在edit上\n */\npublic boolean isFocusEditText(View v, int... ids) {\n    if (v instanceof EditText) {\n        EditText tmp_et = (EditText) v;\n        for (int id : ids) {\n            if (tmp_et.getId() == id) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n//是否触摸在指定view上面,对某个控件过滤\npublic boolean isTouchView(View[] views, MotionEvent ev) {\n    if (views == null || views.length == 0) return false;\n    int[] location = new int[2];\n    for (View view : views) {\n        view.getLocationOnScreen(location);\n        int x = location[0];\n        int y = location[1];\n        if (ev.getX() &gt; x &amp;&amp; ev.getX() &lt; (x + view.getWidth())\n                &amp;&amp; ev.getY() &gt; y &amp;&amp; ev.getY() &lt; (y + view.getHeight())) {\n            return true;\n        }\n    }\n    return false;\n}\n\n//region 右滑返回上级\n@Override\npublic boolean dispatchTouchEvent(MotionEvent ev) {\n    if (ev.getAction() == MotionEvent.ACTION_DOWN) {\n        if (isTouchView(filterViewByIds(), ev)) return super.dispatchTouchEvent(ev);\n        if (hideSoftByEditViewIds() == null || hideSoftByEditViewIds().length == 0)\n            return super.dispatchTouchEvent(ev);\n        View v = getCurrentFocus();\n        if (isFocusEditText(v, hideSoftByEditViewIds())) {\n            //隐藏键盘\n            hideInputForce(this);\n            clearViewFocus(v, hideSoftByEditViewIds());\n        }\n    }\n    return super.dispatchTouchEvent(ev);\n\n}\n\n\n/**\n * 传入EditText的Id\n * 没有传入的EditText不做处理\n *\n * @return id 数组\n */\npublic int[] hideSoftByEditViewIds() {\n    int []  ids = {R.id.et1,R.id.et2};\n    return ids;\n}\n\n/**\n * 传入要过滤的View\n * 过滤之后点击将不会有隐藏软键盘的操作\n *\n * @return id 数组\n */\npublic View[] filterViewByIds() {\n    View [] views = {mEt1,mEt2};//点击这两个控件,软键盘不会消失\n    return views;\n}\n\n/**\n * des:隐藏软键盘,这种方式参数为activity\n *\n * @param activity\n */\npublic static void hideInputForce(Activity activity) {\n    if (activity == null || activity.getCurrentFocus() == null)\n        return;\n\n    ((InputMethodManager) activity.getSystemService(INPUT_METHOD_SERVICE))\n            .hideSoftInputFromWindow(activity.getCurrentFocus()\n                    .getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);\n}\n}\n</code></pre><h1 id=\"以下是布局文件\"><a href=\"#以下是布局文件\" class=\"headerlink\" title=\"以下是布局文件\"></a>以下是布局文件</h1><pre><code>```\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;LinearLayout\nxmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\nxmlns:tools=&quot;http://schemas.android.com/tools&quot;\nandroid:id=&quot;@+id/activity_main&quot;\nandroid:layout_width=&quot;match_parent&quot;\nandroid:layout_height=&quot;match_parent&quot;\nandroid:orientation=&quot;vertical&quot;\ntools:context=&quot;fengan.softinputdemo.MainActivity&quot;&gt;\n&lt;LinearLayout\n    android:id=&quot;@+id/LL&quot;\n    android:layout_marginTop=&quot;100dp&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:orientation=&quot;vertical&quot;\n    android:layout_height=&quot;wrap_content&quot;&gt;\n&lt;EditText\n    android:id=&quot;@+id/et1&quot;\n    android:layout_marginTop=&quot;60dp&quot;\n    android:background=&quot;#ff0&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;60dp&quot;/&gt;\n&lt;EditText\n    android:id=&quot;@+id/et2&quot;\n    android:layout_marginTop=&quot;20dp&quot;\n    android:background=&quot;#ff0&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;60dp&quot;/&gt;\n&lt;Button\n    android:text=&quot;软键盘挡住button&quot;\n    android:id=&quot;@+id/btn&quot;\n    android:layout_marginTop=&quot;30dp&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;wrap_content&quot;/&gt;\n&lt;/LinearLayout&gt;\n</code></pre><p></p>\n<pre><code>可以将隐藏显示的代码封装到BaseActivity\n</code></pre><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=448707059&auto=1&height=66\"></iframe>","excerpt":"<h1 id=\"软键盘-挡住button-和点击外部软键盘消失\"><a href=\"#软键盘-挡住button-和点击外部软键盘消失\" class=\"headerlink\" title=\"软键盘(挡住button,和点击外部软键盘消失)\"></a>软键盘(挡住button,和点击外部软键盘消失)</h1><h1 id=\"以下是解决挡住button的逻辑-写的比较急-黄色的部分就是edittext\"><a href=\"#以下是解决挡住button的逻辑-写的比较急-黄色的部分就是edittext\" class=\"headerlink\" title=\"以下是解决挡住button的逻辑 (写的比较急,黄色的部分就是edittext)\"></a>以下是解决挡住button的逻辑 (写的比较急,黄色的部分就是edittext)</h1><blockquote>\n<p><img src=\"http://img.blog.csdn.net/20170615102440904?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmVuZ2FuaXQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"引用块内容\"></p>\n</blockquote>","more":"<pre><code>//    控制是否移动布局。比如只有密码输入框获取到焦点时才执行。\npublic  boolean flag = true;\n\n/**\n * @param act          activiry用于获取底部导航栏高度。\n * @param root         最外层布局，需要调整的布局\n * @param scrollToView 被键盘遮挡的scrollToView，滚动root,使scrollToView在root可视区域的底部\n */\npublic  void controlKeyboardLayout(Context act, final View root, final View scrollToView) {\n    final int navigationBarHeight = getNavigationBarHeight(act);\n\n    root.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n        @Override\n        public void onGlobalLayout() {\n            Rect rect = new Rect();\n            //获取root在窗体的可视区域\n            root.getWindowVisibleDisplayFrame(rect);\n            //获取root在窗体的不可视区域高度(被其他View遮挡的区域高度)\n            int rootInvisibleHeight = root.getRootView().getHeight() - rect.bottom;\n            //若不可视区域高度大于100，则键盘显示\n            if (rootInvisibleHeight &gt; navigationBarHeight &amp;&amp; flag) {\n                int[] location = new int[2];\n                //获取scrollToView在窗体的坐标\n                scrollToView.getLocationInWindow(location);\n                //计算root滚动高度，使scrollToView在可见区域\n                int srollHeight = (location[1] + scrollToView.getHeight()) - rect.bottom;\n                if (root.getScrollY() != 0) {// 如果已经滚动，要根据上次滚动，重新计算位置。\n                    srollHeight += root.getScrollY();\n                }\n                root.scrollTo(0, srollHeight);\n            } else {\n                //键盘隐藏\n                root.scrollTo(0, 0);\n            }\n        }\n    });\n}\n</code></pre><h1 id=\"以下是解决控制点击可选择的区域让软键盘消失或者不消失\"><a href=\"#以下是解决控制点击可选择的区域让软键盘消失或者不消失\" class=\"headerlink\" title=\"以下是解决控制点击可选择的区域让软键盘消失或者不消失\"></a>以下是解决控制点击可选择的区域让软键盘消失或者不消失</h1><pre><code>  /**\n * 获取底部导航栏高度\n *\n * @param act\n * @return\n */\nprivate  int getNavigationBarHeight(Context act) {\n    Resources resources = act.getResources();\n    int resourceId = resources.getIdentifier(&quot;navigation_bar_height&quot;, &quot;dimen&quot;, &quot;android&quot;);\n    int height = resources.getDimensionPixelSize(resourceId);\n    Log.v(&quot;dbw&quot;, &quot;Navi height:&quot; + height);\n    return height;\n}\n\n//软键盘消失的管理\n//region软键盘的处理\n\n/**\n * 清除editText的焦点\n *\n * @param v   焦点所在View\n * @param ids 输入框\n */\npublic void clearViewFocus(View v, int... ids) {\n    if (null != v &amp;&amp; null != ids &amp;&amp; ids.length &gt; 0) {\n        for (int id : ids) {\n            if (v.getId() == id) {\n                v.clearFocus();\n                break;\n            }\n        }\n    }\n}\n/**\n * 隐藏键盘\n *\n * @param v   焦点所在View\n * @param ids 输入框\n * @return true代表焦点在edit上\n */\npublic boolean isFocusEditText(View v, int... ids) {\n    if (v instanceof EditText) {\n        EditText tmp_et = (EditText) v;\n        for (int id : ids) {\n            if (tmp_et.getId() == id) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n//是否触摸在指定view上面,对某个控件过滤\npublic boolean isTouchView(View[] views, MotionEvent ev) {\n    if (views == null || views.length == 0) return false;\n    int[] location = new int[2];\n    for (View view : views) {\n        view.getLocationOnScreen(location);\n        int x = location[0];\n        int y = location[1];\n        if (ev.getX() &gt; x &amp;&amp; ev.getX() &lt; (x + view.getWidth())\n                &amp;&amp; ev.getY() &gt; y &amp;&amp; ev.getY() &lt; (y + view.getHeight())) {\n            return true;\n        }\n    }\n    return false;\n}\n\n//region 右滑返回上级\n@Override\npublic boolean dispatchTouchEvent(MotionEvent ev) {\n    if (ev.getAction() == MotionEvent.ACTION_DOWN) {\n        if (isTouchView(filterViewByIds(), ev)) return super.dispatchTouchEvent(ev);\n        if (hideSoftByEditViewIds() == null || hideSoftByEditViewIds().length == 0)\n            return super.dispatchTouchEvent(ev);\n        View v = getCurrentFocus();\n        if (isFocusEditText(v, hideSoftByEditViewIds())) {\n            //隐藏键盘\n            hideInputForce(this);\n            clearViewFocus(v, hideSoftByEditViewIds());\n        }\n    }\n    return super.dispatchTouchEvent(ev);\n\n}\n\n\n/**\n * 传入EditText的Id\n * 没有传入的EditText不做处理\n *\n * @return id 数组\n */\npublic int[] hideSoftByEditViewIds() {\n    return null;\n}\n\n/**\n * 传入要过滤的View\n * 过滤之后点击将不会有隐藏软键盘的操作\n *\n * @return id 数组\n */\npublic View[] filterViewByIds() {\n    return null;\n}\n\n/**\n * des:隐藏软键盘,这种方式参数为activity\n *\n * @param activity\n */\npublic static void hideInputForce(Activity activity) {\n    if (activity == null || activity.getCurrentFocus() == null)\n        return;\n\n    ((InputMethodManager) activity.getSystemService(INPUT_METHOD_SERVICE))\n            .hideSoftInputFromWindow(activity.getCurrentFocus()\n                    .getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);\n}\n</code></pre><h1 id=\"以下Demo全部代码\"><a href=\"#以下Demo全部代码\" class=\"headerlink\" title=\"以下Demo全部代码\"></a>以下Demo全部代码</h1><pre><code>public class MainActivity extends AppCompatActivity {\n\nprivate EditText mEt1;\nprivate EditText mEt2;\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    Button btn = (Button) findViewById(R.id.btn);\n    mEt1 = (EditText) findViewById(R.id.et1);\n    mEt2 = (EditText) findViewById(R.id.et2);\n    LinearLayout LL = (LinearLayout) findViewById(R.id.LL);\n    controlKeyboardLayout(this,LL,btn);\n}\n\n\n//    控制是否移动布局。比如只有密码输入框获取到焦点时才执行。\npublic  boolean flag = true;\n\n/**\n * @param act          activiry用于获取底部导航栏高度。\n * @param root         最外层布局，需要调整的布局\n * @param scrollToView 被键盘遮挡的scrollToView，滚动root,使scrollToView在root可视区域的底部\n */\npublic  void controlKeyboardLayout(Context act, final View root, final View scrollToView) {\n    final int navigationBarHeight = getNavigationBarHeight(act);\n\n    root.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n        @Override\n        public void onGlobalLayout() {\n            Rect rect = new Rect();\n            //获取root在窗体的可视区域\n            root.getWindowVisibleDisplayFrame(rect);\n            //获取root在窗体的不可视区域高度(被其他View遮挡的区域高度)\n            int rootInvisibleHeight = root.getRootView().getHeight() - rect.bottom;\n            //若不可视区域高度大于100，则键盘显示\n            if (rootInvisibleHeight &gt; navigationBarHeight &amp;&amp; flag) {\n                int[] location = new int[2];\n                //获取scrollToView在窗体的坐标\n                scrollToView.getLocationInWindow(location);\n                //计算root滚动高度，使scrollToView在可见区域\n                int srollHeight = (location[1] + scrollToView.getHeight()) - rect.bottom;\n                if (root.getScrollY() != 0) {// 如果已经滚动，要根据上次滚动，重新计算位置。\n                    srollHeight += root.getScrollY();\n                }\n                root.scrollTo(0, srollHeight);\n            } else {\n                //键盘隐藏\n                root.scrollTo(0, 0);\n            }\n        }\n    });\n}\n\n/**\n * 获取底部导航栏高度\n *\n * @param act\n * @return\n */\nprivate  int getNavigationBarHeight(Context act) {\n    Resources resources = act.getResources();\n    int resourceId = resources.getIdentifier(&quot;navigation_bar_height&quot;, &quot;dimen&quot;, &quot;android&quot;);\n    int height = resources.getDimensionPixelSize(resourceId);\n    Log.v(&quot;dbw&quot;, &quot;Navi height:&quot; + height);\n    return height;\n}\n\n//软键盘消失的管理\n//region软键盘的处理\n\n/**\n * 清除editText的焦点\n *\n * @param v   焦点所在View\n * @param ids 输入框\n */\npublic void clearViewFocus(View v, int... ids) {\n    if (null != v &amp;&amp; null != ids &amp;&amp; ids.length &gt; 0) {\n        for (int id : ids) {\n            if (v.getId() == id) {\n                v.clearFocus();\n                break;\n            }\n        }\n    }\n}\n/**\n * 隐藏键盘\n *\n * @param v   焦点所在View\n * @param ids 输入框\n * @return true代表焦点在edit上\n */\npublic boolean isFocusEditText(View v, int... ids) {\n    if (v instanceof EditText) {\n        EditText tmp_et = (EditText) v;\n        for (int id : ids) {\n            if (tmp_et.getId() == id) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n//是否触摸在指定view上面,对某个控件过滤\npublic boolean isTouchView(View[] views, MotionEvent ev) {\n    if (views == null || views.length == 0) return false;\n    int[] location = new int[2];\n    for (View view : views) {\n        view.getLocationOnScreen(location);\n        int x = location[0];\n        int y = location[1];\n        if (ev.getX() &gt; x &amp;&amp; ev.getX() &lt; (x + view.getWidth())\n                &amp;&amp; ev.getY() &gt; y &amp;&amp; ev.getY() &lt; (y + view.getHeight())) {\n            return true;\n        }\n    }\n    return false;\n}\n\n//region 右滑返回上级\n@Override\npublic boolean dispatchTouchEvent(MotionEvent ev) {\n    if (ev.getAction() == MotionEvent.ACTION_DOWN) {\n        if (isTouchView(filterViewByIds(), ev)) return super.dispatchTouchEvent(ev);\n        if (hideSoftByEditViewIds() == null || hideSoftByEditViewIds().length == 0)\n            return super.dispatchTouchEvent(ev);\n        View v = getCurrentFocus();\n        if (isFocusEditText(v, hideSoftByEditViewIds())) {\n            //隐藏键盘\n            hideInputForce(this);\n            clearViewFocus(v, hideSoftByEditViewIds());\n        }\n    }\n    return super.dispatchTouchEvent(ev);\n\n}\n\n\n/**\n * 传入EditText的Id\n * 没有传入的EditText不做处理\n *\n * @return id 数组\n */\npublic int[] hideSoftByEditViewIds() {\n    int []  ids = {R.id.et1,R.id.et2};\n    return ids;\n}\n\n/**\n * 传入要过滤的View\n * 过滤之后点击将不会有隐藏软键盘的操作\n *\n * @return id 数组\n */\npublic View[] filterViewByIds() {\n    View [] views = {mEt1,mEt2};//点击这两个控件,软键盘不会消失\n    return views;\n}\n\n/**\n * des:隐藏软键盘,这种方式参数为activity\n *\n * @param activity\n */\npublic static void hideInputForce(Activity activity) {\n    if (activity == null || activity.getCurrentFocus() == null)\n        return;\n\n    ((InputMethodManager) activity.getSystemService(INPUT_METHOD_SERVICE))\n            .hideSoftInputFromWindow(activity.getCurrentFocus()\n                    .getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);\n}\n}\n</code></pre><h1 id=\"以下是布局文件\"><a href=\"#以下是布局文件\" class=\"headerlink\" title=\"以下是布局文件\"></a>以下是布局文件</h1><pre><code>```\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;LinearLayout\nxmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\nxmlns:tools=&quot;http://schemas.android.com/tools&quot;\nandroid:id=&quot;@+id/activity_main&quot;\nandroid:layout_width=&quot;match_parent&quot;\nandroid:layout_height=&quot;match_parent&quot;\nandroid:orientation=&quot;vertical&quot;\ntools:context=&quot;fengan.softinputdemo.MainActivity&quot;&gt;\n&lt;LinearLayout\n    android:id=&quot;@+id/LL&quot;\n    android:layout_marginTop=&quot;100dp&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:orientation=&quot;vertical&quot;\n    android:layout_height=&quot;wrap_content&quot;&gt;\n&lt;EditText\n    android:id=&quot;@+id/et1&quot;\n    android:layout_marginTop=&quot;60dp&quot;\n    android:background=&quot;#ff0&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;60dp&quot;/&gt;\n&lt;EditText\n    android:id=&quot;@+id/et2&quot;\n    android:layout_marginTop=&quot;20dp&quot;\n    android:background=&quot;#ff0&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;60dp&quot;/&gt;\n&lt;Button\n    android:text=&quot;软键盘挡住button&quot;\n    android:id=&quot;@+id/btn&quot;\n    android:layout_marginTop=&quot;30dp&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;wrap_content&quot;/&gt;\n&lt;/LinearLayout&gt;\n</code></pre><p></LinearLayout></p>\n<pre><code>可以将隐藏显示的代码封装到BaseActivity\n</code></pre><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=448707059&auto=1&height=66\"></iframe>"},{"title":"保存图片到本地","date":"2017-08-21T02:14:21.000Z","_content":"\n# Android保存图片到本地 #\n> 需求\n\n一个很常见的需求,查看大图的同时,点击可以将图片保存到本地\n<!--more-->\n> 我的步骤\n\n1. 使用Gilde获取图片的Drawable\n2. Drawable转成Bitmap\n3. bigtmap压缩并通过流写入\n4. 通知系统图库更新\n\n> 代码块\n\n- 保存图片,流写入,压缩\n- \n        public static void saveImageToGallery(Context context, Bitmap bmp) {\n        // 首先保存图片\n        File appDir = new File(Environment.getExternalStorageDirectory(), \"nongfaziran\");\n        if (!appDir.exists()) {\n            appDir.mkdir();\n        }\n        String fileName = System.currentTimeMillis() + \".jpg\";\n        File file = new File(appDir, fileName);\n        try {\n            FileOutputStream fos = new FileOutputStream(file);\n            bmp.compress(Bitmap.CompressFormat.JPEG, 100, fos);\n            fos.flush();\n            fos.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        // 其次把文件插入到系统图库\n        try {\n            MediaStore.Images.Media.insertImage(context.getContentResolver(),\n                    file.getAbsolutePath(), fileName, null);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n        // 最后通知图库更新\n        context.sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, Uri.fromFile(new File(file.getPath()))));\n        ToastUtil.showShort(\"保存到\" + file.getPath());\n    }`\n> 通过glide回调,获取图片Drawable\n   \n\n\t\t  mTvSave.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                showLoadding();\n                GlideUtils.loadImage(Utils.getContext(), urls.get(mViewPager.getCurrentItem()), mIvImg,new GlideUtils.ImageLoadListener<String, GlideDrawable>() {\n                    @Override\n                    public void onLoadingComplete(String uri, ImageView view, GlideDrawable resource) {\n                        hideLoadding();\n                        FileUtils.saveImageToGallery(Utils.getContext(), BitmapUtils.drawableToBitmap(resource));\n                        showState(\"保存成功\",1);\n                    }\n\n                    @Override\n                    public void onLoadingError(String source, Exception e) {\n                        hideLoadding();\n                        showState(\"保存失败\",0);\n                        ToastUtil.showShort(\"请检查SD卡并检查网络\");\n                    }\n                });\n            }\n        });\n\n> 分享一个Glide封装\n\n\n\n\n\t/**\n \t* Glide封装类\n\t * Created by fengan on 2017/5/6.\n \t* Last Update on 2017.6.22 。 添加注解提醒、返回类型、优化代码\n \t*/\n\tpublic abstract class GlideUtils {\n\n\n    /**\n     * 简单图片加载回调\n     *\n     * @param <T> 图片url 或资源id 或 文件\n     * @param <K> 返回的资源,GlideDrawable或者Bitmap或者GifDrawable,ImageView.setImageRecourse设置\n     */\n    public interface ImageLoadListener<T, K> {\n\n        /**\n         * 图片加载成功回调\n         *\n         * @param uri      图片url 或资源id 或 文件\n         * @param view     目标载体，不传则为空\n         * @param resource 返回的资源,GlideDrawable或者Bitmap或者GifDrawable,ImageView.setImageRecourse设置\n         */\n        void onLoadingComplete(T uri, ImageView view, K resource);\n\n        /**\n         * 图片加载异常返回\n         *\n         * @param source 图片地址、File、资源id\n         * @param e      异常信息\n         */\n        void onLoadingError(T source, Exception e);\n\n    }\n\n\n    /**\n     * 详细加载图片加载回调\n     *\n     * @param <T> 图片url 或资源id 或 文件\n     * @param <K> 返回的资源\n     */\n    public interface ImageLoadDetailListener<T, K> {\n\n        /**\n         * 图片加载成功回调\n         *\n         * @param uri      图片url 或资源id 或 文件\n         * @param view     目标载体，不传则为空\n         * @param resource 返回的资源,GlideDrawable或者Bitmap或者GifDrawable,ImageView.setImageRecourse设置\n         */\n        void onLoadingComplete(T uri, ImageView view, K resource);\n\n        /**\n         * 图片加载异常返回\n         *\n         * @param source        图片地址、File、资源id\n         * @param errorDrawable 加载错误占位图\n         * @param e             异常信息\n         */\n        void onLoadingError(T source, Drawable errorDrawable, Exception e);\n\n        /**\n         * 加载开始\n         *\n         * @param source      图片来源\n         * @param placeHolder 开始加载占位图\n         */\n        void onLoadingStart(T source, Drawable placeHolder);\n\n    }\n\n\n    /**\n     * 根据上下文和 url获取 Glide的DrawableTypeRequest\n     *\n     * @param context 上下文\n     * @param url     图片连接\n     * @param <T>     Context类型\n     * @param <K>     url类型\n     * @return 返回DrawableTypeRequst<K> 类型\n     */\n    private static <T, K> DrawableTypeRequest<K> getDrawableTypeRequest(T context, K url) {\n        DrawableTypeRequest<K> type = null;\n        try {\n            if (context instanceof android.support.v4.app.Fragment) {\n                type = Glide.with((android.support.v4.app.Fragment) context).load(url);\n            } else if (context instanceof android.app.Fragment) {\n                type = Glide.with((android.app.Fragment) context).load(url);\n            } else if (context instanceof Activity) {    //包括FragmentActivity\n                type = Glide.with((Activity) context).load(url);\n            } else if (context instanceof Context) {\n                type = Glide.with((Context) context).load(url);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        return type;\n    }\n\n\n    /**\n     * 图片加载监听类\n     *\n     * @param <T> 图片链接 的类型\n     * @param <K> 图片资源返回类型\n     * @param <Z> 返回的图片url\n     */\n    private static class GlideListener<T, K, Z> implements RequestListener<T, K> {\n\n        ImageLoadListener<Z, K> imageLoadListener = null;\n        Z url;\n        ImageView imageView = null;\n\n        GlideListener(ImageLoadListener<Z, K> imageLoadListener, Z url, ImageView view) {\n            this.imageLoadListener = imageLoadListener;\n            this.url = url;\n            this.imageView = view;\n        }\n\n        GlideListener(ImageLoadListener<Z, K> imageLoadListener, Z url) {\n            this.imageLoadListener = imageLoadListener;\n            this.url = url;\n        }\n\n        GlideListener(Z url) {\n            this.url = url;\n        }\n\n        @Override\n        public boolean onResourceReady(K resource, T model, Target<K> target, boolean isFromMemoryCache, boolean isFirstResource) {\n            if (null != imageLoadListener) {\n                if (imageView != null) {\n                    imageLoadListener.onLoadingComplete(url, imageView, resource);\n                } else {\n                    imageLoadListener.onLoadingComplete(url, null, resource);\n                }\n            }\n\n            return false;\n        }\n\n        @Override\n        public boolean onException(Exception e, T model, Target<K> target, boolean isFirstResource) {\n\n            //LogUtil.e(\"Glide图片加载失败:\"+e + \" 地址为:\"+url);\n\n            if (imageLoadListener != null) {\n                imageLoadListener.onLoadingError(url, e);\n            }\n            return false;\n        }\n    }\n\n\n    /**\n     * 获取存储器上的图片,回调返回GlideDrawable\n     *\n     * @param context           上下文年\n     * @param file              文件File\n     * @param imageLoadListener 回调监听器\n     */\n    public static <T> DrawableRequestBuilder<File> loadImage(T context, @NonNull File file, @NonNull ImageLoadListener<File, GlideDrawable> imageLoadListener) {\n        DrawableTypeRequest<File> type = getDrawableTypeRequest(context, file);\n        if (type != null) {\n            return type.listener(new GlideListener<File, GlideDrawable, File>(imageLoadListener, file));\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * 获取资源中的图片，回调返回GlideDrawable\n     *\n     * @param context           上下文\n     * @param resourceId        资源id\n     * @param imageLoadListener 回调监听器\n     */\n    public static <T> DrawableRequestBuilder<Integer> loadImage(T context, @DrawableRes int resourceId, @NonNull ImageLoadListener<Integer, GlideDrawable> imageLoadListener) {\n        DrawableTypeRequest<Integer> type = getDrawableTypeRequest(context, resourceId);\n        if (type != null) {\n            return type.listener(new GlideListener<Integer, GlideDrawable, Integer>(imageLoadListener, resourceId));\n        } else {\n            return null;\n        }\n\n    }\n\n    /**\n     * 获取网络图片，回调返回 GlideDrawable\n     *\n     * @param context           上下文\n     * @param url               图片url\n     * @param imageLoadListener 回调监听器\n     */\n    public static <T> DrawableRequestBuilder<String> loadImage(T context, @NonNull final String url, @NonNull ImageLoadListener<String, GlideDrawable> imageLoadListener) {\n        DrawableTypeRequest<String> type = getDrawableTypeRequest(context, url);\n        if (type != null) {\n            return type.listener(new GlideListener<String, GlideDrawable, String>(imageLoadListener, url));\n        } else {\n            return null;\n        }\n\n    }\n\n    /**\n     * 加载存储器上的图片到目标载体\n     *\n     * @param file      文件File\n     * @param imageView 要显示到的图片ImageView\n     */\n    public static Target<GlideDrawable> loadImage(@NonNull final File file, @NonNull ImageView imageView, ImageLoadListener<File, GlideDrawable> imageLoadListener) {\n        return getDrawableTypeRequest(imageView.getContext(), file)\n                .diskCacheStrategy(DiskCacheStrategy.NONE)//禁用磁盘缓存\n                .skipMemoryCache(true)//跳过内存缓存\n                .dontAnimate()\n                .listener(new GlideListener<File, GlideDrawable, File>(imageLoadListener, file, imageView))\n                .into(imageView);\n    }\n\n    /**\n     * 加载资源中的图片到目标载体\n     *\n     * @param resourceId 资源id\n     * @param imageView  图片View\n     */\n    public static Target<GlideDrawable> loadImage(@DrawableRes int resourceId, @NonNull ImageView imageView, ImageLoadListener<Integer, GlideDrawable> imageLoadListener) {\n        return getDrawableTypeRequest(imageView.getContext(), resourceId)\n                .listener(new GlideListener<Integer, GlideDrawable, Integer>(imageLoadListener, resourceId, imageView))\n                .into(imageView);\n    }\n\n\n    /**\n     * 加载成圆形头像到普通ImageView，有动画效果\n     *\n     * @param url               图片url\n     * @param imageView         要显示到的ImageView\n     * @param imageLoadListener 加载回调监听器\n     * @param parms             设置占位符和加载失败图片(可变参数默认两张,第一张为占位符,第二张是默认图片)\n     * @return 返回Target<GlideDrawable>\n     */\n    public static Target<GlideDrawable> loadCircleImage(@NonNull String url, @NonNull ImageView imageView, ImageLoadListener<String, GlideDrawable> imageLoadListener, int... parms) {\n        DrawableTypeRequest<String> type = getDrawableTypeRequest(imageView.getContext(), url);\n        if (parms != null && parms.length > 0) {\n            type.placeholder(parms[0]);   //占位符\n            if (parms.length > 1) {\n                type.error(parms[1]);    //图片加载失败显示图片\n            }\n        }\n        type.transform(new CircleTransform(imageView.getContext()));\n        return type.listener(new GlideListener<String, GlideDrawable, String>(imageLoadListener, url, imageView))\n                .into(imageView);\n\n    }\n\n\n    /**\n     * 加载网络图片到指定Imageview，支持CircleImageView\n     *\n     * @param url               图片url\n     * @param imageView         要显示的Imageview\n     * @param imageLoadListener 图片加载回调\n     * @param parms             第一个是error的图片\n     */\n    public static <T> Target<GlideDrawable> loadImage(T context, @NonNull String url, @NonNull ImageView imageView, ImageLoadListener<String, GlideDrawable> imageLoadListener, int... parms) {\n        DrawableTypeRequest<String> type = getDrawableTypeRequest(context, url);\n        if (type != null) {\n            type.asBitmap();\n            if (parms != null && parms.length > 0) {\n                type.placeholder(parms[0]);   //占位符\n                if (parms.length > 1) {\n                    type.error(parms[1]);    //图片加载失败显示图片\n                }\n            }\n\n            //单张CircleImageView不允许动画，不然会不显示,\n            if (imageView instanceof nfzr.zr.nf.nfzr.com.nongfaziran.nfzr.view.CircleImageView) {\n                type.dontAnimate();\n            }\n            return type\n                    .listener(new GlideListener<String, GlideDrawable, String>(imageLoadListener, url, imageView))\n                    .into(imageView);\n        } else {\n            return null;\n        }\n\n    }\n\n    /**\n     * 加载一帧视频，添加圆角\n     *\n     * @param url       图片地址\n     * @param imageView 要加载到的ImageView\n     */\n    public static Target<GlideDrawable> loadImageFormVideo(@NonNull String url, @NonNull ImageView imageView) {\n        return getDrawableTypeRequest(imageView.getContext(), url)\n                .override(SizeUtil.dp2px(150), SizeUtil.dp2px(150))\n                //.placeholder(android.R.drawable.picture_frame)   //占位图\n                .dontAnimate()\n                .into(imageView);\n    }\n\n\n    public static <T> Target<GlideDrawable> loadImageDetail(final T context, @NonNull final String url, @NonNull final ImageView imageView, final Drawable drawable, final ImageLoadDetailListener<String, GlideDrawable> imageLoadListener) {\n        DrawableTypeRequest<String> type = getDrawableTypeRequest(context, url);\n        if (type != null) {\n            return type.into(new SimpleTarget<GlideDrawable>() {\n                @Override\n                public void onResourceReady(GlideDrawable resource, GlideAnimation<? super GlideDrawable> glideAnimation) {\n                    if (imageView != null && resource != null) {\n                        imageView.setImageDrawable(resource);\n                    }\n                    if (imageLoadListener != null) {\n                        imageLoadListener.onLoadingComplete(url, imageView, resource);\n                    }\n\n                }\n\n                @Override\n                public void onStart() {\n                    super.onStart();\n                    if (drawable != null && imageView != null) {\n                        imageView.setImageDrawable(drawable);\n                    }\n\n                }\n\n                @Override\n                public void onLoadStarted(Drawable placeholder) {\n                    super.onLoadStarted(placeholder);\n                    if (imageLoadListener != null) {\n                        imageLoadListener.onLoadingStart(url, placeholder);\n                    }\n\n                }\n\n                @Override\n                public void onLoadFailed(Exception e, Drawable errorDrawable) {\n                    super.onLoadFailed(e, errorDrawable);\n                    if (imageLoadListener != null) {\n                        imageLoadListener.onLoadingError(url, errorDrawable, e);\n                    }\n                }\n            });\n        } else {\n            return null;\n        }\n\n    }\n\n\n    /**\n     * 加载bitmap，回调返回 Bitmap\n     *\n     * @param context           上下文\n     * @param url               图片url\n     * @param imageLoadListener 图片加载监听器\n     * @param <T>               上下文类型\n     */\n    public static <T> BitmapRequestBuilder<String, Bitmap> loadImageBitmap(T context, @NonNull String url,@NonNull ImageLoadListener<String, Bitmap> imageLoadListener) {\n        DrawableTypeRequest<String> type = getDrawableTypeRequest(context, url);\n        if (type != null) {\n            return type.asBitmap()\n                    .listener(new GlideListener<String, Bitmap, String>(imageLoadListener, url));\n        }else{\n            return null;\n        }\n    }\n\n\n    /**\n     * 加载GifDrawable，回调返回 GifDrawable\n     *\n     * @param context           上下文\n     * @param url               图片url\n     * @param imageLoadListener 图片加载监听器\n     */\n    public static <T> GifRequestBuilder<String> loadImageGif(T context, @NonNull String url,@NonNull ImageLoadListener<String, GifDrawable> imageLoadListener) {\n        DrawableTypeRequest<String> type = getDrawableTypeRequest(context, url);\n        if (type != null) {\n            return type.asGif()\n                    .diskCacheStrategy(DiskCacheStrategy.SOURCE)\n                    .listener(new GlideListener<String, GifDrawable, String>(imageLoadListener, url));\n\n        }else{\n            return null;\n        }\n    }\n\n\n    /**\n     * 加载Gif的一张图片到ImageView\n     *\n     * @param url               图片url\n     * @param imageLoadListener 图片加载监听器\n     *                          @param imageView \n     *                          @param drawable 缩略图，可以为空\n     */\n    public static Target<Bitmap> loadImageGifSingle(@NonNull String url, @NonNull ImageView imageView, ImageLoadListener<String, Bitmap> imageLoadListener, Drawable drawable) {\n      \n        DrawableTypeRequest<String> type = getDrawableTypeRequest(imageView.getContext(),url);\n        return type.asBitmap()\n                .placeholder(drawable)\n                .diskCacheStrategy(DiskCacheStrategy.SOURCE)\n                .listener(new GlideListener<String, Bitmap, String>(imageLoadListener, url))\n                .into(imageView);\n    }\n\n\n    /**\n     * 加载gif图片到指定ImageView\n     *\n     * @param url               图片Url\n     * @param imageView         图片View\n     * @param imageLoadListener 图片加载监听器\n     */\n    public static Target<GifDrawable> loadImageGif(@NonNull String url, @NonNull ImageView imageView, ImageLoadListener<String, GifDrawable> imageLoadListener) {\n        DrawableTypeRequest<String> type = getDrawableTypeRequest(imageView.getContext(),url);\n        return type.asGif()\n                .diskCacheStrategy(DiskCacheStrategy.SOURCE)\n                .listener(new GlideListener<String, GifDrawable, String>(imageLoadListener, url, imageView))\n                .into(imageView);\n    }\n\n\n    /**\n     * 释放内存\n     *\n     * @param context 上下文\n     */\n    public static void clearMemory(Context context) {\n        Glide.get(context).clearMemory();\n    }\n\n\n    /**\n     * 取消所有正在下载或等待下载的任务。\n     *\n     * @param context 上下文\n     */\n    public static void cancelAllTasks(Context context) {\n        Glide.with(context).pauseRequests();\n    }\n\n    /**\n     * 恢复所有任务\n     */\n    public static void resumeAllTasks(Context context) {\n        Glide.with(context).resumeRequests();\n    }\n\n    /**\n     * 清除磁盘缓存\n     *\n     * @param context 上下文\n     */\n    public static void clearDiskCache(final Context context) {\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                Glide.get(context).clearDiskCache();\n            }\n        }).start();\n    }\n\n\n    /**\n     * 清除所有缓存\n     *\n     * @param context 上下文\n     */\n    public static void cleanAll(Context context) {\n        clearDiskCache(context);\n        clearMemory(context);\n    }\n\n}\n`\n\n\n----------\n\n\n\t/**\n \t* Created by fengan on 2017/5/25.\n \t*/\n\tpublic class CircleTransform extends BitmapTransformation {\n    public CircleTransform(Context context) {\n        super(context);\n    }\n\n    @Override protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) {\n        return circleCrop(pool, toTransform);\n    }\n\n    private static Bitmap circleCrop(BitmapPool pool, Bitmap source) {\n        if (source == null) return null;\n\n        int size = Math.min(source.getWidth(), source.getHeight());\n        int x = (source.getWidth() - size) / 2;\n        int y = (source.getHeight() - size) / 2;\n\n        Bitmap squared = Bitmap.createBitmap(source, x, y, size, size);\n\n        Bitmap result = pool.get(size, size, Bitmap.Config.ARGB_8888);\n        if (result == null) {\n            result = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\n        }\n\n        Canvas canvas = new Canvas(result);\n        Paint paint = new Paint();\n        paint.setShader(new BitmapShader(squared, BitmapShader.TileMode.CLAMP, BitmapShader.TileMode.CLAMP));\n        paint.setAntiAlias(true);\n        float r = size / 2f;\n        canvas.drawCircle(r, r, r, paint);\n        return result;\n    }\n\n    @Override public String getId() {\n        return getClass().getName();\n    }\n\t}\n\nDrawable转bigmap\n\n    public class BitmapUtils {\n    public static Bitmap drawableToBitmap(Drawable drawable) {\n        Bitmap bitmap = Bitmap.createBitmap(\n                drawable.getIntrinsicWidth(),\n                drawable.getIntrinsicHeight(),\n                drawable.getOpacity() != PixelFormat.OPAQUE ? Bitmap.Config.ARGB_8888\n                        : Bitmap.Config.RGB_565);\n        Canvas canvas = new Canvas(bitmap);\n        //canvas.setBitmap(bitmap);\n        drawable.setBounds(0, 0, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());\n        drawable.draw(canvas);\n        return bitmap;\n    }\n\t}\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=423849475&auto=1&height=66\"></iframe>","source":"_posts/保存图片到本地.md","raw":"---\ntitle: 保存图片到本地\ndate: 2017-08-21 10:14:21\ntags:\n---\n\n# Android保存图片到本地 #\n> 需求\n\n一个很常见的需求,查看大图的同时,点击可以将图片保存到本地\n<!--more-->\n> 我的步骤\n\n1. 使用Gilde获取图片的Drawable\n2. Drawable转成Bitmap\n3. bigtmap压缩并通过流写入\n4. 通知系统图库更新\n\n> 代码块\n\n- 保存图片,流写入,压缩\n- \n        public static void saveImageToGallery(Context context, Bitmap bmp) {\n        // 首先保存图片\n        File appDir = new File(Environment.getExternalStorageDirectory(), \"nongfaziran\");\n        if (!appDir.exists()) {\n            appDir.mkdir();\n        }\n        String fileName = System.currentTimeMillis() + \".jpg\";\n        File file = new File(appDir, fileName);\n        try {\n            FileOutputStream fos = new FileOutputStream(file);\n            bmp.compress(Bitmap.CompressFormat.JPEG, 100, fos);\n            fos.flush();\n            fos.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        // 其次把文件插入到系统图库\n        try {\n            MediaStore.Images.Media.insertImage(context.getContentResolver(),\n                    file.getAbsolutePath(), fileName, null);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n        // 最后通知图库更新\n        context.sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, Uri.fromFile(new File(file.getPath()))));\n        ToastUtil.showShort(\"保存到\" + file.getPath());\n    }`\n> 通过glide回调,获取图片Drawable\n   \n\n\t\t  mTvSave.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                showLoadding();\n                GlideUtils.loadImage(Utils.getContext(), urls.get(mViewPager.getCurrentItem()), mIvImg,new GlideUtils.ImageLoadListener<String, GlideDrawable>() {\n                    @Override\n                    public void onLoadingComplete(String uri, ImageView view, GlideDrawable resource) {\n                        hideLoadding();\n                        FileUtils.saveImageToGallery(Utils.getContext(), BitmapUtils.drawableToBitmap(resource));\n                        showState(\"保存成功\",1);\n                    }\n\n                    @Override\n                    public void onLoadingError(String source, Exception e) {\n                        hideLoadding();\n                        showState(\"保存失败\",0);\n                        ToastUtil.showShort(\"请检查SD卡并检查网络\");\n                    }\n                });\n            }\n        });\n\n> 分享一个Glide封装\n\n\n\n\n\t/**\n \t* Glide封装类\n\t * Created by fengan on 2017/5/6.\n \t* Last Update on 2017.6.22 。 添加注解提醒、返回类型、优化代码\n \t*/\n\tpublic abstract class GlideUtils {\n\n\n    /**\n     * 简单图片加载回调\n     *\n     * @param <T> 图片url 或资源id 或 文件\n     * @param <K> 返回的资源,GlideDrawable或者Bitmap或者GifDrawable,ImageView.setImageRecourse设置\n     */\n    public interface ImageLoadListener<T, K> {\n\n        /**\n         * 图片加载成功回调\n         *\n         * @param uri      图片url 或资源id 或 文件\n         * @param view     目标载体，不传则为空\n         * @param resource 返回的资源,GlideDrawable或者Bitmap或者GifDrawable,ImageView.setImageRecourse设置\n         */\n        void onLoadingComplete(T uri, ImageView view, K resource);\n\n        /**\n         * 图片加载异常返回\n         *\n         * @param source 图片地址、File、资源id\n         * @param e      异常信息\n         */\n        void onLoadingError(T source, Exception e);\n\n    }\n\n\n    /**\n     * 详细加载图片加载回调\n     *\n     * @param <T> 图片url 或资源id 或 文件\n     * @param <K> 返回的资源\n     */\n    public interface ImageLoadDetailListener<T, K> {\n\n        /**\n         * 图片加载成功回调\n         *\n         * @param uri      图片url 或资源id 或 文件\n         * @param view     目标载体，不传则为空\n         * @param resource 返回的资源,GlideDrawable或者Bitmap或者GifDrawable,ImageView.setImageRecourse设置\n         */\n        void onLoadingComplete(T uri, ImageView view, K resource);\n\n        /**\n         * 图片加载异常返回\n         *\n         * @param source        图片地址、File、资源id\n         * @param errorDrawable 加载错误占位图\n         * @param e             异常信息\n         */\n        void onLoadingError(T source, Drawable errorDrawable, Exception e);\n\n        /**\n         * 加载开始\n         *\n         * @param source      图片来源\n         * @param placeHolder 开始加载占位图\n         */\n        void onLoadingStart(T source, Drawable placeHolder);\n\n    }\n\n\n    /**\n     * 根据上下文和 url获取 Glide的DrawableTypeRequest\n     *\n     * @param context 上下文\n     * @param url     图片连接\n     * @param <T>     Context类型\n     * @param <K>     url类型\n     * @return 返回DrawableTypeRequst<K> 类型\n     */\n    private static <T, K> DrawableTypeRequest<K> getDrawableTypeRequest(T context, K url) {\n        DrawableTypeRequest<K> type = null;\n        try {\n            if (context instanceof android.support.v4.app.Fragment) {\n                type = Glide.with((android.support.v4.app.Fragment) context).load(url);\n            } else if (context instanceof android.app.Fragment) {\n                type = Glide.with((android.app.Fragment) context).load(url);\n            } else if (context instanceof Activity) {    //包括FragmentActivity\n                type = Glide.with((Activity) context).load(url);\n            } else if (context instanceof Context) {\n                type = Glide.with((Context) context).load(url);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        return type;\n    }\n\n\n    /**\n     * 图片加载监听类\n     *\n     * @param <T> 图片链接 的类型\n     * @param <K> 图片资源返回类型\n     * @param <Z> 返回的图片url\n     */\n    private static class GlideListener<T, K, Z> implements RequestListener<T, K> {\n\n        ImageLoadListener<Z, K> imageLoadListener = null;\n        Z url;\n        ImageView imageView = null;\n\n        GlideListener(ImageLoadListener<Z, K> imageLoadListener, Z url, ImageView view) {\n            this.imageLoadListener = imageLoadListener;\n            this.url = url;\n            this.imageView = view;\n        }\n\n        GlideListener(ImageLoadListener<Z, K> imageLoadListener, Z url) {\n            this.imageLoadListener = imageLoadListener;\n            this.url = url;\n        }\n\n        GlideListener(Z url) {\n            this.url = url;\n        }\n\n        @Override\n        public boolean onResourceReady(K resource, T model, Target<K> target, boolean isFromMemoryCache, boolean isFirstResource) {\n            if (null != imageLoadListener) {\n                if (imageView != null) {\n                    imageLoadListener.onLoadingComplete(url, imageView, resource);\n                } else {\n                    imageLoadListener.onLoadingComplete(url, null, resource);\n                }\n            }\n\n            return false;\n        }\n\n        @Override\n        public boolean onException(Exception e, T model, Target<K> target, boolean isFirstResource) {\n\n            //LogUtil.e(\"Glide图片加载失败:\"+e + \" 地址为:\"+url);\n\n            if (imageLoadListener != null) {\n                imageLoadListener.onLoadingError(url, e);\n            }\n            return false;\n        }\n    }\n\n\n    /**\n     * 获取存储器上的图片,回调返回GlideDrawable\n     *\n     * @param context           上下文年\n     * @param file              文件File\n     * @param imageLoadListener 回调监听器\n     */\n    public static <T> DrawableRequestBuilder<File> loadImage(T context, @NonNull File file, @NonNull ImageLoadListener<File, GlideDrawable> imageLoadListener) {\n        DrawableTypeRequest<File> type = getDrawableTypeRequest(context, file);\n        if (type != null) {\n            return type.listener(new GlideListener<File, GlideDrawable, File>(imageLoadListener, file));\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * 获取资源中的图片，回调返回GlideDrawable\n     *\n     * @param context           上下文\n     * @param resourceId        资源id\n     * @param imageLoadListener 回调监听器\n     */\n    public static <T> DrawableRequestBuilder<Integer> loadImage(T context, @DrawableRes int resourceId, @NonNull ImageLoadListener<Integer, GlideDrawable> imageLoadListener) {\n        DrawableTypeRequest<Integer> type = getDrawableTypeRequest(context, resourceId);\n        if (type != null) {\n            return type.listener(new GlideListener<Integer, GlideDrawable, Integer>(imageLoadListener, resourceId));\n        } else {\n            return null;\n        }\n\n    }\n\n    /**\n     * 获取网络图片，回调返回 GlideDrawable\n     *\n     * @param context           上下文\n     * @param url               图片url\n     * @param imageLoadListener 回调监听器\n     */\n    public static <T> DrawableRequestBuilder<String> loadImage(T context, @NonNull final String url, @NonNull ImageLoadListener<String, GlideDrawable> imageLoadListener) {\n        DrawableTypeRequest<String> type = getDrawableTypeRequest(context, url);\n        if (type != null) {\n            return type.listener(new GlideListener<String, GlideDrawable, String>(imageLoadListener, url));\n        } else {\n            return null;\n        }\n\n    }\n\n    /**\n     * 加载存储器上的图片到目标载体\n     *\n     * @param file      文件File\n     * @param imageView 要显示到的图片ImageView\n     */\n    public static Target<GlideDrawable> loadImage(@NonNull final File file, @NonNull ImageView imageView, ImageLoadListener<File, GlideDrawable> imageLoadListener) {\n        return getDrawableTypeRequest(imageView.getContext(), file)\n                .diskCacheStrategy(DiskCacheStrategy.NONE)//禁用磁盘缓存\n                .skipMemoryCache(true)//跳过内存缓存\n                .dontAnimate()\n                .listener(new GlideListener<File, GlideDrawable, File>(imageLoadListener, file, imageView))\n                .into(imageView);\n    }\n\n    /**\n     * 加载资源中的图片到目标载体\n     *\n     * @param resourceId 资源id\n     * @param imageView  图片View\n     */\n    public static Target<GlideDrawable> loadImage(@DrawableRes int resourceId, @NonNull ImageView imageView, ImageLoadListener<Integer, GlideDrawable> imageLoadListener) {\n        return getDrawableTypeRequest(imageView.getContext(), resourceId)\n                .listener(new GlideListener<Integer, GlideDrawable, Integer>(imageLoadListener, resourceId, imageView))\n                .into(imageView);\n    }\n\n\n    /**\n     * 加载成圆形头像到普通ImageView，有动画效果\n     *\n     * @param url               图片url\n     * @param imageView         要显示到的ImageView\n     * @param imageLoadListener 加载回调监听器\n     * @param parms             设置占位符和加载失败图片(可变参数默认两张,第一张为占位符,第二张是默认图片)\n     * @return 返回Target<GlideDrawable>\n     */\n    public static Target<GlideDrawable> loadCircleImage(@NonNull String url, @NonNull ImageView imageView, ImageLoadListener<String, GlideDrawable> imageLoadListener, int... parms) {\n        DrawableTypeRequest<String> type = getDrawableTypeRequest(imageView.getContext(), url);\n        if (parms != null && parms.length > 0) {\n            type.placeholder(parms[0]);   //占位符\n            if (parms.length > 1) {\n                type.error(parms[1]);    //图片加载失败显示图片\n            }\n        }\n        type.transform(new CircleTransform(imageView.getContext()));\n        return type.listener(new GlideListener<String, GlideDrawable, String>(imageLoadListener, url, imageView))\n                .into(imageView);\n\n    }\n\n\n    /**\n     * 加载网络图片到指定Imageview，支持CircleImageView\n     *\n     * @param url               图片url\n     * @param imageView         要显示的Imageview\n     * @param imageLoadListener 图片加载回调\n     * @param parms             第一个是error的图片\n     */\n    public static <T> Target<GlideDrawable> loadImage(T context, @NonNull String url, @NonNull ImageView imageView, ImageLoadListener<String, GlideDrawable> imageLoadListener, int... parms) {\n        DrawableTypeRequest<String> type = getDrawableTypeRequest(context, url);\n        if (type != null) {\n            type.asBitmap();\n            if (parms != null && parms.length > 0) {\n                type.placeholder(parms[0]);   //占位符\n                if (parms.length > 1) {\n                    type.error(parms[1]);    //图片加载失败显示图片\n                }\n            }\n\n            //单张CircleImageView不允许动画，不然会不显示,\n            if (imageView instanceof nfzr.zr.nf.nfzr.com.nongfaziran.nfzr.view.CircleImageView) {\n                type.dontAnimate();\n            }\n            return type\n                    .listener(new GlideListener<String, GlideDrawable, String>(imageLoadListener, url, imageView))\n                    .into(imageView);\n        } else {\n            return null;\n        }\n\n    }\n\n    /**\n     * 加载一帧视频，添加圆角\n     *\n     * @param url       图片地址\n     * @param imageView 要加载到的ImageView\n     */\n    public static Target<GlideDrawable> loadImageFormVideo(@NonNull String url, @NonNull ImageView imageView) {\n        return getDrawableTypeRequest(imageView.getContext(), url)\n                .override(SizeUtil.dp2px(150), SizeUtil.dp2px(150))\n                //.placeholder(android.R.drawable.picture_frame)   //占位图\n                .dontAnimate()\n                .into(imageView);\n    }\n\n\n    public static <T> Target<GlideDrawable> loadImageDetail(final T context, @NonNull final String url, @NonNull final ImageView imageView, final Drawable drawable, final ImageLoadDetailListener<String, GlideDrawable> imageLoadListener) {\n        DrawableTypeRequest<String> type = getDrawableTypeRequest(context, url);\n        if (type != null) {\n            return type.into(new SimpleTarget<GlideDrawable>() {\n                @Override\n                public void onResourceReady(GlideDrawable resource, GlideAnimation<? super GlideDrawable> glideAnimation) {\n                    if (imageView != null && resource != null) {\n                        imageView.setImageDrawable(resource);\n                    }\n                    if (imageLoadListener != null) {\n                        imageLoadListener.onLoadingComplete(url, imageView, resource);\n                    }\n\n                }\n\n                @Override\n                public void onStart() {\n                    super.onStart();\n                    if (drawable != null && imageView != null) {\n                        imageView.setImageDrawable(drawable);\n                    }\n\n                }\n\n                @Override\n                public void onLoadStarted(Drawable placeholder) {\n                    super.onLoadStarted(placeholder);\n                    if (imageLoadListener != null) {\n                        imageLoadListener.onLoadingStart(url, placeholder);\n                    }\n\n                }\n\n                @Override\n                public void onLoadFailed(Exception e, Drawable errorDrawable) {\n                    super.onLoadFailed(e, errorDrawable);\n                    if (imageLoadListener != null) {\n                        imageLoadListener.onLoadingError(url, errorDrawable, e);\n                    }\n                }\n            });\n        } else {\n            return null;\n        }\n\n    }\n\n\n    /**\n     * 加载bitmap，回调返回 Bitmap\n     *\n     * @param context           上下文\n     * @param url               图片url\n     * @param imageLoadListener 图片加载监听器\n     * @param <T>               上下文类型\n     */\n    public static <T> BitmapRequestBuilder<String, Bitmap> loadImageBitmap(T context, @NonNull String url,@NonNull ImageLoadListener<String, Bitmap> imageLoadListener) {\n        DrawableTypeRequest<String> type = getDrawableTypeRequest(context, url);\n        if (type != null) {\n            return type.asBitmap()\n                    .listener(new GlideListener<String, Bitmap, String>(imageLoadListener, url));\n        }else{\n            return null;\n        }\n    }\n\n\n    /**\n     * 加载GifDrawable，回调返回 GifDrawable\n     *\n     * @param context           上下文\n     * @param url               图片url\n     * @param imageLoadListener 图片加载监听器\n     */\n    public static <T> GifRequestBuilder<String> loadImageGif(T context, @NonNull String url,@NonNull ImageLoadListener<String, GifDrawable> imageLoadListener) {\n        DrawableTypeRequest<String> type = getDrawableTypeRequest(context, url);\n        if (type != null) {\n            return type.asGif()\n                    .diskCacheStrategy(DiskCacheStrategy.SOURCE)\n                    .listener(new GlideListener<String, GifDrawable, String>(imageLoadListener, url));\n\n        }else{\n            return null;\n        }\n    }\n\n\n    /**\n     * 加载Gif的一张图片到ImageView\n     *\n     * @param url               图片url\n     * @param imageLoadListener 图片加载监听器\n     *                          @param imageView \n     *                          @param drawable 缩略图，可以为空\n     */\n    public static Target<Bitmap> loadImageGifSingle(@NonNull String url, @NonNull ImageView imageView, ImageLoadListener<String, Bitmap> imageLoadListener, Drawable drawable) {\n      \n        DrawableTypeRequest<String> type = getDrawableTypeRequest(imageView.getContext(),url);\n        return type.asBitmap()\n                .placeholder(drawable)\n                .diskCacheStrategy(DiskCacheStrategy.SOURCE)\n                .listener(new GlideListener<String, Bitmap, String>(imageLoadListener, url))\n                .into(imageView);\n    }\n\n\n    /**\n     * 加载gif图片到指定ImageView\n     *\n     * @param url               图片Url\n     * @param imageView         图片View\n     * @param imageLoadListener 图片加载监听器\n     */\n    public static Target<GifDrawable> loadImageGif(@NonNull String url, @NonNull ImageView imageView, ImageLoadListener<String, GifDrawable> imageLoadListener) {\n        DrawableTypeRequest<String> type = getDrawableTypeRequest(imageView.getContext(),url);\n        return type.asGif()\n                .diskCacheStrategy(DiskCacheStrategy.SOURCE)\n                .listener(new GlideListener<String, GifDrawable, String>(imageLoadListener, url, imageView))\n                .into(imageView);\n    }\n\n\n    /**\n     * 释放内存\n     *\n     * @param context 上下文\n     */\n    public static void clearMemory(Context context) {\n        Glide.get(context).clearMemory();\n    }\n\n\n    /**\n     * 取消所有正在下载或等待下载的任务。\n     *\n     * @param context 上下文\n     */\n    public static void cancelAllTasks(Context context) {\n        Glide.with(context).pauseRequests();\n    }\n\n    /**\n     * 恢复所有任务\n     */\n    public static void resumeAllTasks(Context context) {\n        Glide.with(context).resumeRequests();\n    }\n\n    /**\n     * 清除磁盘缓存\n     *\n     * @param context 上下文\n     */\n    public static void clearDiskCache(final Context context) {\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                Glide.get(context).clearDiskCache();\n            }\n        }).start();\n    }\n\n\n    /**\n     * 清除所有缓存\n     *\n     * @param context 上下文\n     */\n    public static void cleanAll(Context context) {\n        clearDiskCache(context);\n        clearMemory(context);\n    }\n\n}\n`\n\n\n----------\n\n\n\t/**\n \t* Created by fengan on 2017/5/25.\n \t*/\n\tpublic class CircleTransform extends BitmapTransformation {\n    public CircleTransform(Context context) {\n        super(context);\n    }\n\n    @Override protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) {\n        return circleCrop(pool, toTransform);\n    }\n\n    private static Bitmap circleCrop(BitmapPool pool, Bitmap source) {\n        if (source == null) return null;\n\n        int size = Math.min(source.getWidth(), source.getHeight());\n        int x = (source.getWidth() - size) / 2;\n        int y = (source.getHeight() - size) / 2;\n\n        Bitmap squared = Bitmap.createBitmap(source, x, y, size, size);\n\n        Bitmap result = pool.get(size, size, Bitmap.Config.ARGB_8888);\n        if (result == null) {\n            result = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\n        }\n\n        Canvas canvas = new Canvas(result);\n        Paint paint = new Paint();\n        paint.setShader(new BitmapShader(squared, BitmapShader.TileMode.CLAMP, BitmapShader.TileMode.CLAMP));\n        paint.setAntiAlias(true);\n        float r = size / 2f;\n        canvas.drawCircle(r, r, r, paint);\n        return result;\n    }\n\n    @Override public String getId() {\n        return getClass().getName();\n    }\n\t}\n\nDrawable转bigmap\n\n    public class BitmapUtils {\n    public static Bitmap drawableToBitmap(Drawable drawable) {\n        Bitmap bitmap = Bitmap.createBitmap(\n                drawable.getIntrinsicWidth(),\n                drawable.getIntrinsicHeight(),\n                drawable.getOpacity() != PixelFormat.OPAQUE ? Bitmap.Config.ARGB_8888\n                        : Bitmap.Config.RGB_565);\n        Canvas canvas = new Canvas(bitmap);\n        //canvas.setBitmap(bitmap);\n        drawable.setBounds(0, 0, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());\n        drawable.draw(canvas);\n        return bitmap;\n    }\n\t}\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=423849475&auto=1&height=66\"></iframe>","slug":"保存图片到本地","published":1,"updated":"2017-11-14T06:01:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9z7pyys0009sbygss8nx1ry","content":"<h1 id=\"Android保存图片到本地\"><a href=\"#Android保存图片到本地\" class=\"headerlink\" title=\"Android保存图片到本地\"></a>Android保存图片到本地</h1><blockquote>\n<p>需求</p>\n</blockquote>\n<p>一个很常见的需求,查看大图的同时,点击可以将图片保存到本地<br><a id=\"more\"></a></p>\n<blockquote>\n<p>我的步骤</p>\n</blockquote>\n<ol>\n<li>使用Gilde获取图片的Drawable</li>\n<li>Drawable转成Bitmap</li>\n<li>bigtmap压缩并通过流写入</li>\n<li>通知系统图库更新</li>\n</ol>\n<blockquote>\n<p>代码块</p>\n</blockquote>\n<ul>\n<li>保存图片,流写入,压缩</li>\n<li><pre><code>public static void saveImageToGallery(Context context, Bitmap bmp) {\n// 首先保存图片\nFile appDir = new File(Environment.getExternalStorageDirectory(), &quot;nongfaziran&quot;);\nif (!appDir.exists()) {\n    appDir.mkdir();\n}\nString fileName = System.currentTimeMillis() + &quot;.jpg&quot;;\nFile file = new File(appDir, fileName);\ntry {\n    FileOutputStream fos = new FileOutputStream(file);\n    bmp.compress(Bitmap.CompressFormat.JPEG, 100, fos);\n    fos.flush();\n    fos.close();\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n}\n\n// 其次把文件插入到系统图库\ntry {\n    MediaStore.Images.Media.insertImage(context.getContentResolver(),\n            file.getAbsolutePath(), fileName, null);\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n}\n// 最后通知图库更新\ncontext.sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, Uri.fromFile(new File(file.getPath()))));\nToastUtil.showShort(&quot;保存到&quot; + file.getPath());\n</code></pre><p>  }`</p>\n<blockquote>\n<p>通过glide回调,获取图片Drawable</p>\n</blockquote>\n</li>\n</ul>\n<pre><code>  mTvSave.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n        showLoadding();\n        GlideUtils.loadImage(Utils.getContext(), urls.get(mViewPager.getCurrentItem()), mIvImg,new GlideUtils.ImageLoadListener&lt;String, GlideDrawable&gt;() {\n            @Override\n            public void onLoadingComplete(String uri, ImageView view, GlideDrawable resource) {\n                hideLoadding();\n                FileUtils.saveImageToGallery(Utils.getContext(), BitmapUtils.drawableToBitmap(resource));\n                showState(&quot;保存成功&quot;,1);\n            }\n\n            @Override\n            public void onLoadingError(String source, Exception e) {\n                hideLoadding();\n                showState(&quot;保存失败&quot;,0);\n                ToastUtil.showShort(&quot;请检查SD卡并检查网络&quot;);\n            }\n        });\n    }\n});\n</code></pre><blockquote>\n<p>分享一个Glide封装</p>\n</blockquote>\n<pre><code>/**\n * Glide封装类\n * Created by fengan on 2017/5/6.\n * Last Update on 2017.6.22 。 添加注解提醒、返回类型、优化代码\n */\npublic abstract class GlideUtils {\n\n\n/**\n * 简单图片加载回调\n *\n * @param &lt;T&gt; 图片url 或资源id 或 文件\n * @param &lt;K&gt; 返回的资源,GlideDrawable或者Bitmap或者GifDrawable,ImageView.setImageRecourse设置\n */\npublic interface ImageLoadListener&lt;T, K&gt; {\n\n    /**\n     * 图片加载成功回调\n     *\n     * @param uri      图片url 或资源id 或 文件\n     * @param view     目标载体，不传则为空\n     * @param resource 返回的资源,GlideDrawable或者Bitmap或者GifDrawable,ImageView.setImageRecourse设置\n     */\n    void onLoadingComplete(T uri, ImageView view, K resource);\n\n    /**\n     * 图片加载异常返回\n     *\n     * @param source 图片地址、File、资源id\n     * @param e      异常信息\n     */\n    void onLoadingError(T source, Exception e);\n\n}\n\n\n/**\n * 详细加载图片加载回调\n *\n * @param &lt;T&gt; 图片url 或资源id 或 文件\n * @param &lt;K&gt; 返回的资源\n */\npublic interface ImageLoadDetailListener&lt;T, K&gt; {\n\n    /**\n     * 图片加载成功回调\n     *\n     * @param uri      图片url 或资源id 或 文件\n     * @param view     目标载体，不传则为空\n     * @param resource 返回的资源,GlideDrawable或者Bitmap或者GifDrawable,ImageView.setImageRecourse设置\n     */\n    void onLoadingComplete(T uri, ImageView view, K resource);\n\n    /**\n     * 图片加载异常返回\n     *\n     * @param source        图片地址、File、资源id\n     * @param errorDrawable 加载错误占位图\n     * @param e             异常信息\n     */\n    void onLoadingError(T source, Drawable errorDrawable, Exception e);\n\n    /**\n     * 加载开始\n     *\n     * @param source      图片来源\n     * @param placeHolder 开始加载占位图\n     */\n    void onLoadingStart(T source, Drawable placeHolder);\n\n}\n\n\n/**\n * 根据上下文和 url获取 Glide的DrawableTypeRequest\n *\n * @param context 上下文\n * @param url     图片连接\n * @param &lt;T&gt;     Context类型\n * @param &lt;K&gt;     url类型\n * @return 返回DrawableTypeRequst&lt;K&gt; 类型\n */\nprivate static &lt;T, K&gt; DrawableTypeRequest&lt;K&gt; getDrawableTypeRequest(T context, K url) {\n    DrawableTypeRequest&lt;K&gt; type = null;\n    try {\n        if (context instanceof android.support.v4.app.Fragment) {\n            type = Glide.with((android.support.v4.app.Fragment) context).load(url);\n        } else if (context instanceof android.app.Fragment) {\n            type = Glide.with((android.app.Fragment) context).load(url);\n        } else if (context instanceof Activity) {    //包括FragmentActivity\n            type = Glide.with((Activity) context).load(url);\n        } else if (context instanceof Context) {\n            type = Glide.with((Context) context).load(url);\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n\n    return type;\n}\n\n\n/**\n * 图片加载监听类\n *\n * @param &lt;T&gt; 图片链接 的类型\n * @param &lt;K&gt; 图片资源返回类型\n * @param &lt;Z&gt; 返回的图片url\n */\nprivate static class GlideListener&lt;T, K, Z&gt; implements RequestListener&lt;T, K&gt; {\n\n    ImageLoadListener&lt;Z, K&gt; imageLoadListener = null;\n    Z url;\n    ImageView imageView = null;\n\n    GlideListener(ImageLoadListener&lt;Z, K&gt; imageLoadListener, Z url, ImageView view) {\n        this.imageLoadListener = imageLoadListener;\n        this.url = url;\n        this.imageView = view;\n    }\n\n    GlideListener(ImageLoadListener&lt;Z, K&gt; imageLoadListener, Z url) {\n        this.imageLoadListener = imageLoadListener;\n        this.url = url;\n    }\n\n    GlideListener(Z url) {\n        this.url = url;\n    }\n\n    @Override\n    public boolean onResourceReady(K resource, T model, Target&lt;K&gt; target, boolean isFromMemoryCache, boolean isFirstResource) {\n        if (null != imageLoadListener) {\n            if (imageView != null) {\n                imageLoadListener.onLoadingComplete(url, imageView, resource);\n            } else {\n                imageLoadListener.onLoadingComplete(url, null, resource);\n            }\n        }\n\n        return false;\n    }\n\n    @Override\n    public boolean onException(Exception e, T model, Target&lt;K&gt; target, boolean isFirstResource) {\n\n        //LogUtil.e(&quot;Glide图片加载失败:&quot;+e + &quot; 地址为:&quot;+url);\n\n        if (imageLoadListener != null) {\n            imageLoadListener.onLoadingError(url, e);\n        }\n        return false;\n    }\n}\n\n\n/**\n * 获取存储器上的图片,回调返回GlideDrawable\n *\n * @param context           上下文年\n * @param file              文件File\n * @param imageLoadListener 回调监听器\n */\npublic static &lt;T&gt; DrawableRequestBuilder&lt;File&gt; loadImage(T context, @NonNull File file, @NonNull ImageLoadListener&lt;File, GlideDrawable&gt; imageLoadListener) {\n    DrawableTypeRequest&lt;File&gt; type = getDrawableTypeRequest(context, file);\n    if (type != null) {\n        return type.listener(new GlideListener&lt;File, GlideDrawable, File&gt;(imageLoadListener, file));\n    } else {\n        return null;\n    }\n}\n\n/**\n * 获取资源中的图片，回调返回GlideDrawable\n *\n * @param context           上下文\n * @param resourceId        资源id\n * @param imageLoadListener 回调监听器\n */\npublic static &lt;T&gt; DrawableRequestBuilder&lt;Integer&gt; loadImage(T context, @DrawableRes int resourceId, @NonNull ImageLoadListener&lt;Integer, GlideDrawable&gt; imageLoadListener) {\n    DrawableTypeRequest&lt;Integer&gt; type = getDrawableTypeRequest(context, resourceId);\n    if (type != null) {\n        return type.listener(new GlideListener&lt;Integer, GlideDrawable, Integer&gt;(imageLoadListener, resourceId));\n    } else {\n        return null;\n    }\n\n}\n\n/**\n * 获取网络图片，回调返回 GlideDrawable\n *\n * @param context           上下文\n * @param url               图片url\n * @param imageLoadListener 回调监听器\n */\npublic static &lt;T&gt; DrawableRequestBuilder&lt;String&gt; loadImage(T context, @NonNull final String url, @NonNull ImageLoadListener&lt;String, GlideDrawable&gt; imageLoadListener) {\n    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(context, url);\n    if (type != null) {\n        return type.listener(new GlideListener&lt;String, GlideDrawable, String&gt;(imageLoadListener, url));\n    } else {\n        return null;\n    }\n\n}\n\n/**\n * 加载存储器上的图片到目标载体\n *\n * @param file      文件File\n * @param imageView 要显示到的图片ImageView\n */\npublic static Target&lt;GlideDrawable&gt; loadImage(@NonNull final File file, @NonNull ImageView imageView, ImageLoadListener&lt;File, GlideDrawable&gt; imageLoadListener) {\n    return getDrawableTypeRequest(imageView.getContext(), file)\n            .diskCacheStrategy(DiskCacheStrategy.NONE)//禁用磁盘缓存\n            .skipMemoryCache(true)//跳过内存缓存\n            .dontAnimate()\n            .listener(new GlideListener&lt;File, GlideDrawable, File&gt;(imageLoadListener, file, imageView))\n            .into(imageView);\n}\n\n/**\n * 加载资源中的图片到目标载体\n *\n * @param resourceId 资源id\n * @param imageView  图片View\n */\npublic static Target&lt;GlideDrawable&gt; loadImage(@DrawableRes int resourceId, @NonNull ImageView imageView, ImageLoadListener&lt;Integer, GlideDrawable&gt; imageLoadListener) {\n    return getDrawableTypeRequest(imageView.getContext(), resourceId)\n            .listener(new GlideListener&lt;Integer, GlideDrawable, Integer&gt;(imageLoadListener, resourceId, imageView))\n            .into(imageView);\n}\n\n\n/**\n * 加载成圆形头像到普通ImageView，有动画效果\n *\n * @param url               图片url\n * @param imageView         要显示到的ImageView\n * @param imageLoadListener 加载回调监听器\n * @param parms             设置占位符和加载失败图片(可变参数默认两张,第一张为占位符,第二张是默认图片)\n * @return 返回Target&lt;GlideDrawable&gt;\n */\npublic static Target&lt;GlideDrawable&gt; loadCircleImage(@NonNull String url, @NonNull ImageView imageView, ImageLoadListener&lt;String, GlideDrawable&gt; imageLoadListener, int... parms) {\n    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(imageView.getContext(), url);\n    if (parms != null &amp;&amp; parms.length &gt; 0) {\n        type.placeholder(parms[0]);   //占位符\n        if (parms.length &gt; 1) {\n            type.error(parms[1]);    //图片加载失败显示图片\n        }\n    }\n    type.transform(new CircleTransform(imageView.getContext()));\n    return type.listener(new GlideListener&lt;String, GlideDrawable, String&gt;(imageLoadListener, url, imageView))\n            .into(imageView);\n\n}\n\n\n/**\n * 加载网络图片到指定Imageview，支持CircleImageView\n *\n * @param url               图片url\n * @param imageView         要显示的Imageview\n * @param imageLoadListener 图片加载回调\n * @param parms             第一个是error的图片\n */\npublic static &lt;T&gt; Target&lt;GlideDrawable&gt; loadImage(T context, @NonNull String url, @NonNull ImageView imageView, ImageLoadListener&lt;String, GlideDrawable&gt; imageLoadListener, int... parms) {\n    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(context, url);\n    if (type != null) {\n        type.asBitmap();\n        if (parms != null &amp;&amp; parms.length &gt; 0) {\n            type.placeholder(parms[0]);   //占位符\n            if (parms.length &gt; 1) {\n                type.error(parms[1]);    //图片加载失败显示图片\n            }\n        }\n\n        //单张CircleImageView不允许动画，不然会不显示,\n        if (imageView instanceof nfzr.zr.nf.nfzr.com.nongfaziran.nfzr.view.CircleImageView) {\n            type.dontAnimate();\n        }\n        return type\n                .listener(new GlideListener&lt;String, GlideDrawable, String&gt;(imageLoadListener, url, imageView))\n                .into(imageView);\n    } else {\n        return null;\n    }\n\n}\n\n/**\n * 加载一帧视频，添加圆角\n *\n * @param url       图片地址\n * @param imageView 要加载到的ImageView\n */\npublic static Target&lt;GlideDrawable&gt; loadImageFormVideo(@NonNull String url, @NonNull ImageView imageView) {\n    return getDrawableTypeRequest(imageView.getContext(), url)\n            .override(SizeUtil.dp2px(150), SizeUtil.dp2px(150))\n            //.placeholder(android.R.drawable.picture_frame)   //占位图\n            .dontAnimate()\n            .into(imageView);\n}\n\n\npublic static &lt;T&gt; Target&lt;GlideDrawable&gt; loadImageDetail(final T context, @NonNull final String url, @NonNull final ImageView imageView, final Drawable drawable, final ImageLoadDetailListener&lt;String, GlideDrawable&gt; imageLoadListener) {\n    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(context, url);\n    if (type != null) {\n        return type.into(new SimpleTarget&lt;GlideDrawable&gt;() {\n            @Override\n            public void onResourceReady(GlideDrawable resource, GlideAnimation&lt;? super GlideDrawable&gt; glideAnimation) {\n                if (imageView != null &amp;&amp; resource != null) {\n                    imageView.setImageDrawable(resource);\n                }\n                if (imageLoadListener != null) {\n                    imageLoadListener.onLoadingComplete(url, imageView, resource);\n                }\n\n            }\n\n            @Override\n            public void onStart() {\n                super.onStart();\n                if (drawable != null &amp;&amp; imageView != null) {\n                    imageView.setImageDrawable(drawable);\n                }\n\n            }\n\n            @Override\n            public void onLoadStarted(Drawable placeholder) {\n                super.onLoadStarted(placeholder);\n                if (imageLoadListener != null) {\n                    imageLoadListener.onLoadingStart(url, placeholder);\n                }\n\n            }\n\n            @Override\n            public void onLoadFailed(Exception e, Drawable errorDrawable) {\n                super.onLoadFailed(e, errorDrawable);\n                if (imageLoadListener != null) {\n                    imageLoadListener.onLoadingError(url, errorDrawable, e);\n                }\n            }\n        });\n    } else {\n        return null;\n    }\n\n}\n\n\n/**\n * 加载bitmap，回调返回 Bitmap\n *\n * @param context           上下文\n * @param url               图片url\n * @param imageLoadListener 图片加载监听器\n * @param &lt;T&gt;               上下文类型\n */\npublic static &lt;T&gt; BitmapRequestBuilder&lt;String, Bitmap&gt; loadImageBitmap(T context, @NonNull String url,@NonNull ImageLoadListener&lt;String, Bitmap&gt; imageLoadListener) {\n    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(context, url);\n    if (type != null) {\n        return type.asBitmap()\n                .listener(new GlideListener&lt;String, Bitmap, String&gt;(imageLoadListener, url));\n    }else{\n        return null;\n    }\n}\n\n\n/**\n * 加载GifDrawable，回调返回 GifDrawable\n *\n * @param context           上下文\n * @param url               图片url\n * @param imageLoadListener 图片加载监听器\n */\npublic static &lt;T&gt; GifRequestBuilder&lt;String&gt; loadImageGif(T context, @NonNull String url,@NonNull ImageLoadListener&lt;String, GifDrawable&gt; imageLoadListener) {\n    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(context, url);\n    if (type != null) {\n        return type.asGif()\n                .diskCacheStrategy(DiskCacheStrategy.SOURCE)\n                .listener(new GlideListener&lt;String, GifDrawable, String&gt;(imageLoadListener, url));\n\n    }else{\n        return null;\n    }\n}\n\n\n/**\n * 加载Gif的一张图片到ImageView\n *\n * @param url               图片url\n * @param imageLoadListener 图片加载监听器\n *                          @param imageView \n *                          @param drawable 缩略图，可以为空\n */\npublic static Target&lt;Bitmap&gt; loadImageGifSingle(@NonNull String url, @NonNull ImageView imageView, ImageLoadListener&lt;String, Bitmap&gt; imageLoadListener, Drawable drawable) {\n\n    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(imageView.getContext(),url);\n    return type.asBitmap()\n            .placeholder(drawable)\n            .diskCacheStrategy(DiskCacheStrategy.SOURCE)\n            .listener(new GlideListener&lt;String, Bitmap, String&gt;(imageLoadListener, url))\n            .into(imageView);\n}\n\n\n/**\n * 加载gif图片到指定ImageView\n *\n * @param url               图片Url\n * @param imageView         图片View\n * @param imageLoadListener 图片加载监听器\n */\npublic static Target&lt;GifDrawable&gt; loadImageGif(@NonNull String url, @NonNull ImageView imageView, ImageLoadListener&lt;String, GifDrawable&gt; imageLoadListener) {\n    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(imageView.getContext(),url);\n    return type.asGif()\n            .diskCacheStrategy(DiskCacheStrategy.SOURCE)\n            .listener(new GlideListener&lt;String, GifDrawable, String&gt;(imageLoadListener, url, imageView))\n            .into(imageView);\n}\n\n\n/**\n * 释放内存\n *\n * @param context 上下文\n */\npublic static void clearMemory(Context context) {\n    Glide.get(context).clearMemory();\n}\n\n\n/**\n * 取消所有正在下载或等待下载的任务。\n *\n * @param context 上下文\n */\npublic static void cancelAllTasks(Context context) {\n    Glide.with(context).pauseRequests();\n}\n\n/**\n * 恢复所有任务\n */\npublic static void resumeAllTasks(Context context) {\n    Glide.with(context).resumeRequests();\n}\n\n/**\n * 清除磁盘缓存\n *\n * @param context 上下文\n */\npublic static void clearDiskCache(final Context context) {\n    new Thread(new Runnable() {\n        @Override\n        public void run() {\n            Glide.get(context).clearDiskCache();\n        }\n    }).start();\n}\n\n\n/**\n * 清除所有缓存\n *\n * @param context 上下文\n */\npublic static void cleanAll(Context context) {\n    clearDiskCache(context);\n    clearMemory(context);\n}\n</code></pre><p>}<br>`</p>\n<hr>\n<pre><code>/**\n * Created by fengan on 2017/5/25.\n */\npublic class CircleTransform extends BitmapTransformation {\npublic CircleTransform(Context context) {\n    super(context);\n}\n\n@Override protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) {\n    return circleCrop(pool, toTransform);\n}\n\nprivate static Bitmap circleCrop(BitmapPool pool, Bitmap source) {\n    if (source == null) return null;\n\n    int size = Math.min(source.getWidth(), source.getHeight());\n    int x = (source.getWidth() - size) / 2;\n    int y = (source.getHeight() - size) / 2;\n\n    Bitmap squared = Bitmap.createBitmap(source, x, y, size, size);\n\n    Bitmap result = pool.get(size, size, Bitmap.Config.ARGB_8888);\n    if (result == null) {\n        result = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\n    }\n\n    Canvas canvas = new Canvas(result);\n    Paint paint = new Paint();\n    paint.setShader(new BitmapShader(squared, BitmapShader.TileMode.CLAMP, BitmapShader.TileMode.CLAMP));\n    paint.setAntiAlias(true);\n    float r = size / 2f;\n    canvas.drawCircle(r, r, r, paint);\n    return result;\n}\n\n@Override public String getId() {\n    return getClass().getName();\n}\n}\n</code></pre><p>Drawable转bigmap</p>\n<pre><code>public class BitmapUtils {\npublic static Bitmap drawableToBitmap(Drawable drawable) {\n    Bitmap bitmap = Bitmap.createBitmap(\n            drawable.getIntrinsicWidth(),\n            drawable.getIntrinsicHeight(),\n            drawable.getOpacity() != PixelFormat.OPAQUE ? Bitmap.Config.ARGB_8888\n                    : Bitmap.Config.RGB_565);\n    Canvas canvas = new Canvas(bitmap);\n    //canvas.setBitmap(bitmap);\n    drawable.setBounds(0, 0, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());\n    drawable.draw(canvas);\n    return bitmap;\n}\n}\n</code></pre><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=423849475&auto=1&height=66\"></iframe>","excerpt":"<h1 id=\"Android保存图片到本地\"><a href=\"#Android保存图片到本地\" class=\"headerlink\" title=\"Android保存图片到本地\"></a>Android保存图片到本地</h1><blockquote>\n<p>需求</p>\n</blockquote>\n<p>一个很常见的需求,查看大图的同时,点击可以将图片保存到本地<br>","more":"</p>\n<blockquote>\n<p>我的步骤</p>\n</blockquote>\n<ol>\n<li>使用Gilde获取图片的Drawable</li>\n<li>Drawable转成Bitmap</li>\n<li>bigtmap压缩并通过流写入</li>\n<li>通知系统图库更新</li>\n</ol>\n<blockquote>\n<p>代码块</p>\n</blockquote>\n<ul>\n<li>保存图片,流写入,压缩</li>\n<li><pre><code>public static void saveImageToGallery(Context context, Bitmap bmp) {\n// 首先保存图片\nFile appDir = new File(Environment.getExternalStorageDirectory(), &quot;nongfaziran&quot;);\nif (!appDir.exists()) {\n    appDir.mkdir();\n}\nString fileName = System.currentTimeMillis() + &quot;.jpg&quot;;\nFile file = new File(appDir, fileName);\ntry {\n    FileOutputStream fos = new FileOutputStream(file);\n    bmp.compress(Bitmap.CompressFormat.JPEG, 100, fos);\n    fos.flush();\n    fos.close();\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n}\n\n// 其次把文件插入到系统图库\ntry {\n    MediaStore.Images.Media.insertImage(context.getContentResolver(),\n            file.getAbsolutePath(), fileName, null);\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n}\n// 最后通知图库更新\ncontext.sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, Uri.fromFile(new File(file.getPath()))));\nToastUtil.showShort(&quot;保存到&quot; + file.getPath());\n</code></pre><p>  }`</p>\n<blockquote>\n<p>通过glide回调,获取图片Drawable</p>\n</blockquote>\n</li>\n</ul>\n<pre><code>  mTvSave.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n        showLoadding();\n        GlideUtils.loadImage(Utils.getContext(), urls.get(mViewPager.getCurrentItem()), mIvImg,new GlideUtils.ImageLoadListener&lt;String, GlideDrawable&gt;() {\n            @Override\n            public void onLoadingComplete(String uri, ImageView view, GlideDrawable resource) {\n                hideLoadding();\n                FileUtils.saveImageToGallery(Utils.getContext(), BitmapUtils.drawableToBitmap(resource));\n                showState(&quot;保存成功&quot;,1);\n            }\n\n            @Override\n            public void onLoadingError(String source, Exception e) {\n                hideLoadding();\n                showState(&quot;保存失败&quot;,0);\n                ToastUtil.showShort(&quot;请检查SD卡并检查网络&quot;);\n            }\n        });\n    }\n});\n</code></pre><blockquote>\n<p>分享一个Glide封装</p>\n</blockquote>\n<pre><code>/**\n * Glide封装类\n * Created by fengan on 2017/5/6.\n * Last Update on 2017.6.22 。 添加注解提醒、返回类型、优化代码\n */\npublic abstract class GlideUtils {\n\n\n/**\n * 简单图片加载回调\n *\n * @param &lt;T&gt; 图片url 或资源id 或 文件\n * @param &lt;K&gt; 返回的资源,GlideDrawable或者Bitmap或者GifDrawable,ImageView.setImageRecourse设置\n */\npublic interface ImageLoadListener&lt;T, K&gt; {\n\n    /**\n     * 图片加载成功回调\n     *\n     * @param uri      图片url 或资源id 或 文件\n     * @param view     目标载体，不传则为空\n     * @param resource 返回的资源,GlideDrawable或者Bitmap或者GifDrawable,ImageView.setImageRecourse设置\n     */\n    void onLoadingComplete(T uri, ImageView view, K resource);\n\n    /**\n     * 图片加载异常返回\n     *\n     * @param source 图片地址、File、资源id\n     * @param e      异常信息\n     */\n    void onLoadingError(T source, Exception e);\n\n}\n\n\n/**\n * 详细加载图片加载回调\n *\n * @param &lt;T&gt; 图片url 或资源id 或 文件\n * @param &lt;K&gt; 返回的资源\n */\npublic interface ImageLoadDetailListener&lt;T, K&gt; {\n\n    /**\n     * 图片加载成功回调\n     *\n     * @param uri      图片url 或资源id 或 文件\n     * @param view     目标载体，不传则为空\n     * @param resource 返回的资源,GlideDrawable或者Bitmap或者GifDrawable,ImageView.setImageRecourse设置\n     */\n    void onLoadingComplete(T uri, ImageView view, K resource);\n\n    /**\n     * 图片加载异常返回\n     *\n     * @param source        图片地址、File、资源id\n     * @param errorDrawable 加载错误占位图\n     * @param e             异常信息\n     */\n    void onLoadingError(T source, Drawable errorDrawable, Exception e);\n\n    /**\n     * 加载开始\n     *\n     * @param source      图片来源\n     * @param placeHolder 开始加载占位图\n     */\n    void onLoadingStart(T source, Drawable placeHolder);\n\n}\n\n\n/**\n * 根据上下文和 url获取 Glide的DrawableTypeRequest\n *\n * @param context 上下文\n * @param url     图片连接\n * @param &lt;T&gt;     Context类型\n * @param &lt;K&gt;     url类型\n * @return 返回DrawableTypeRequst&lt;K&gt; 类型\n */\nprivate static &lt;T, K&gt; DrawableTypeRequest&lt;K&gt; getDrawableTypeRequest(T context, K url) {\n    DrawableTypeRequest&lt;K&gt; type = null;\n    try {\n        if (context instanceof android.support.v4.app.Fragment) {\n            type = Glide.with((android.support.v4.app.Fragment) context).load(url);\n        } else if (context instanceof android.app.Fragment) {\n            type = Glide.with((android.app.Fragment) context).load(url);\n        } else if (context instanceof Activity) {    //包括FragmentActivity\n            type = Glide.with((Activity) context).load(url);\n        } else if (context instanceof Context) {\n            type = Glide.with((Context) context).load(url);\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n\n    return type;\n}\n\n\n/**\n * 图片加载监听类\n *\n * @param &lt;T&gt; 图片链接 的类型\n * @param &lt;K&gt; 图片资源返回类型\n * @param &lt;Z&gt; 返回的图片url\n */\nprivate static class GlideListener&lt;T, K, Z&gt; implements RequestListener&lt;T, K&gt; {\n\n    ImageLoadListener&lt;Z, K&gt; imageLoadListener = null;\n    Z url;\n    ImageView imageView = null;\n\n    GlideListener(ImageLoadListener&lt;Z, K&gt; imageLoadListener, Z url, ImageView view) {\n        this.imageLoadListener = imageLoadListener;\n        this.url = url;\n        this.imageView = view;\n    }\n\n    GlideListener(ImageLoadListener&lt;Z, K&gt; imageLoadListener, Z url) {\n        this.imageLoadListener = imageLoadListener;\n        this.url = url;\n    }\n\n    GlideListener(Z url) {\n        this.url = url;\n    }\n\n    @Override\n    public boolean onResourceReady(K resource, T model, Target&lt;K&gt; target, boolean isFromMemoryCache, boolean isFirstResource) {\n        if (null != imageLoadListener) {\n            if (imageView != null) {\n                imageLoadListener.onLoadingComplete(url, imageView, resource);\n            } else {\n                imageLoadListener.onLoadingComplete(url, null, resource);\n            }\n        }\n\n        return false;\n    }\n\n    @Override\n    public boolean onException(Exception e, T model, Target&lt;K&gt; target, boolean isFirstResource) {\n\n        //LogUtil.e(&quot;Glide图片加载失败:&quot;+e + &quot; 地址为:&quot;+url);\n\n        if (imageLoadListener != null) {\n            imageLoadListener.onLoadingError(url, e);\n        }\n        return false;\n    }\n}\n\n\n/**\n * 获取存储器上的图片,回调返回GlideDrawable\n *\n * @param context           上下文年\n * @param file              文件File\n * @param imageLoadListener 回调监听器\n */\npublic static &lt;T&gt; DrawableRequestBuilder&lt;File&gt; loadImage(T context, @NonNull File file, @NonNull ImageLoadListener&lt;File, GlideDrawable&gt; imageLoadListener) {\n    DrawableTypeRequest&lt;File&gt; type = getDrawableTypeRequest(context, file);\n    if (type != null) {\n        return type.listener(new GlideListener&lt;File, GlideDrawable, File&gt;(imageLoadListener, file));\n    } else {\n        return null;\n    }\n}\n\n/**\n * 获取资源中的图片，回调返回GlideDrawable\n *\n * @param context           上下文\n * @param resourceId        资源id\n * @param imageLoadListener 回调监听器\n */\npublic static &lt;T&gt; DrawableRequestBuilder&lt;Integer&gt; loadImage(T context, @DrawableRes int resourceId, @NonNull ImageLoadListener&lt;Integer, GlideDrawable&gt; imageLoadListener) {\n    DrawableTypeRequest&lt;Integer&gt; type = getDrawableTypeRequest(context, resourceId);\n    if (type != null) {\n        return type.listener(new GlideListener&lt;Integer, GlideDrawable, Integer&gt;(imageLoadListener, resourceId));\n    } else {\n        return null;\n    }\n\n}\n\n/**\n * 获取网络图片，回调返回 GlideDrawable\n *\n * @param context           上下文\n * @param url               图片url\n * @param imageLoadListener 回调监听器\n */\npublic static &lt;T&gt; DrawableRequestBuilder&lt;String&gt; loadImage(T context, @NonNull final String url, @NonNull ImageLoadListener&lt;String, GlideDrawable&gt; imageLoadListener) {\n    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(context, url);\n    if (type != null) {\n        return type.listener(new GlideListener&lt;String, GlideDrawable, String&gt;(imageLoadListener, url));\n    } else {\n        return null;\n    }\n\n}\n\n/**\n * 加载存储器上的图片到目标载体\n *\n * @param file      文件File\n * @param imageView 要显示到的图片ImageView\n */\npublic static Target&lt;GlideDrawable&gt; loadImage(@NonNull final File file, @NonNull ImageView imageView, ImageLoadListener&lt;File, GlideDrawable&gt; imageLoadListener) {\n    return getDrawableTypeRequest(imageView.getContext(), file)\n            .diskCacheStrategy(DiskCacheStrategy.NONE)//禁用磁盘缓存\n            .skipMemoryCache(true)//跳过内存缓存\n            .dontAnimate()\n            .listener(new GlideListener&lt;File, GlideDrawable, File&gt;(imageLoadListener, file, imageView))\n            .into(imageView);\n}\n\n/**\n * 加载资源中的图片到目标载体\n *\n * @param resourceId 资源id\n * @param imageView  图片View\n */\npublic static Target&lt;GlideDrawable&gt; loadImage(@DrawableRes int resourceId, @NonNull ImageView imageView, ImageLoadListener&lt;Integer, GlideDrawable&gt; imageLoadListener) {\n    return getDrawableTypeRequest(imageView.getContext(), resourceId)\n            .listener(new GlideListener&lt;Integer, GlideDrawable, Integer&gt;(imageLoadListener, resourceId, imageView))\n            .into(imageView);\n}\n\n\n/**\n * 加载成圆形头像到普通ImageView，有动画效果\n *\n * @param url               图片url\n * @param imageView         要显示到的ImageView\n * @param imageLoadListener 加载回调监听器\n * @param parms             设置占位符和加载失败图片(可变参数默认两张,第一张为占位符,第二张是默认图片)\n * @return 返回Target&lt;GlideDrawable&gt;\n */\npublic static Target&lt;GlideDrawable&gt; loadCircleImage(@NonNull String url, @NonNull ImageView imageView, ImageLoadListener&lt;String, GlideDrawable&gt; imageLoadListener, int... parms) {\n    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(imageView.getContext(), url);\n    if (parms != null &amp;&amp; parms.length &gt; 0) {\n        type.placeholder(parms[0]);   //占位符\n        if (parms.length &gt; 1) {\n            type.error(parms[1]);    //图片加载失败显示图片\n        }\n    }\n    type.transform(new CircleTransform(imageView.getContext()));\n    return type.listener(new GlideListener&lt;String, GlideDrawable, String&gt;(imageLoadListener, url, imageView))\n            .into(imageView);\n\n}\n\n\n/**\n * 加载网络图片到指定Imageview，支持CircleImageView\n *\n * @param url               图片url\n * @param imageView         要显示的Imageview\n * @param imageLoadListener 图片加载回调\n * @param parms             第一个是error的图片\n */\npublic static &lt;T&gt; Target&lt;GlideDrawable&gt; loadImage(T context, @NonNull String url, @NonNull ImageView imageView, ImageLoadListener&lt;String, GlideDrawable&gt; imageLoadListener, int... parms) {\n    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(context, url);\n    if (type != null) {\n        type.asBitmap();\n        if (parms != null &amp;&amp; parms.length &gt; 0) {\n            type.placeholder(parms[0]);   //占位符\n            if (parms.length &gt; 1) {\n                type.error(parms[1]);    //图片加载失败显示图片\n            }\n        }\n\n        //单张CircleImageView不允许动画，不然会不显示,\n        if (imageView instanceof nfzr.zr.nf.nfzr.com.nongfaziran.nfzr.view.CircleImageView) {\n            type.dontAnimate();\n        }\n        return type\n                .listener(new GlideListener&lt;String, GlideDrawable, String&gt;(imageLoadListener, url, imageView))\n                .into(imageView);\n    } else {\n        return null;\n    }\n\n}\n\n/**\n * 加载一帧视频，添加圆角\n *\n * @param url       图片地址\n * @param imageView 要加载到的ImageView\n */\npublic static Target&lt;GlideDrawable&gt; loadImageFormVideo(@NonNull String url, @NonNull ImageView imageView) {\n    return getDrawableTypeRequest(imageView.getContext(), url)\n            .override(SizeUtil.dp2px(150), SizeUtil.dp2px(150))\n            //.placeholder(android.R.drawable.picture_frame)   //占位图\n            .dontAnimate()\n            .into(imageView);\n}\n\n\npublic static &lt;T&gt; Target&lt;GlideDrawable&gt; loadImageDetail(final T context, @NonNull final String url, @NonNull final ImageView imageView, final Drawable drawable, final ImageLoadDetailListener&lt;String, GlideDrawable&gt; imageLoadListener) {\n    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(context, url);\n    if (type != null) {\n        return type.into(new SimpleTarget&lt;GlideDrawable&gt;() {\n            @Override\n            public void onResourceReady(GlideDrawable resource, GlideAnimation&lt;? super GlideDrawable&gt; glideAnimation) {\n                if (imageView != null &amp;&amp; resource != null) {\n                    imageView.setImageDrawable(resource);\n                }\n                if (imageLoadListener != null) {\n                    imageLoadListener.onLoadingComplete(url, imageView, resource);\n                }\n\n            }\n\n            @Override\n            public void onStart() {\n                super.onStart();\n                if (drawable != null &amp;&amp; imageView != null) {\n                    imageView.setImageDrawable(drawable);\n                }\n\n            }\n\n            @Override\n            public void onLoadStarted(Drawable placeholder) {\n                super.onLoadStarted(placeholder);\n                if (imageLoadListener != null) {\n                    imageLoadListener.onLoadingStart(url, placeholder);\n                }\n\n            }\n\n            @Override\n            public void onLoadFailed(Exception e, Drawable errorDrawable) {\n                super.onLoadFailed(e, errorDrawable);\n                if (imageLoadListener != null) {\n                    imageLoadListener.onLoadingError(url, errorDrawable, e);\n                }\n            }\n        });\n    } else {\n        return null;\n    }\n\n}\n\n\n/**\n * 加载bitmap，回调返回 Bitmap\n *\n * @param context           上下文\n * @param url               图片url\n * @param imageLoadListener 图片加载监听器\n * @param &lt;T&gt;               上下文类型\n */\npublic static &lt;T&gt; BitmapRequestBuilder&lt;String, Bitmap&gt; loadImageBitmap(T context, @NonNull String url,@NonNull ImageLoadListener&lt;String, Bitmap&gt; imageLoadListener) {\n    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(context, url);\n    if (type != null) {\n        return type.asBitmap()\n                .listener(new GlideListener&lt;String, Bitmap, String&gt;(imageLoadListener, url));\n    }else{\n        return null;\n    }\n}\n\n\n/**\n * 加载GifDrawable，回调返回 GifDrawable\n *\n * @param context           上下文\n * @param url               图片url\n * @param imageLoadListener 图片加载监听器\n */\npublic static &lt;T&gt; GifRequestBuilder&lt;String&gt; loadImageGif(T context, @NonNull String url,@NonNull ImageLoadListener&lt;String, GifDrawable&gt; imageLoadListener) {\n    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(context, url);\n    if (type != null) {\n        return type.asGif()\n                .diskCacheStrategy(DiskCacheStrategy.SOURCE)\n                .listener(new GlideListener&lt;String, GifDrawable, String&gt;(imageLoadListener, url));\n\n    }else{\n        return null;\n    }\n}\n\n\n/**\n * 加载Gif的一张图片到ImageView\n *\n * @param url               图片url\n * @param imageLoadListener 图片加载监听器\n *                          @param imageView \n *                          @param drawable 缩略图，可以为空\n */\npublic static Target&lt;Bitmap&gt; loadImageGifSingle(@NonNull String url, @NonNull ImageView imageView, ImageLoadListener&lt;String, Bitmap&gt; imageLoadListener, Drawable drawable) {\n\n    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(imageView.getContext(),url);\n    return type.asBitmap()\n            .placeholder(drawable)\n            .diskCacheStrategy(DiskCacheStrategy.SOURCE)\n            .listener(new GlideListener&lt;String, Bitmap, String&gt;(imageLoadListener, url))\n            .into(imageView);\n}\n\n\n/**\n * 加载gif图片到指定ImageView\n *\n * @param url               图片Url\n * @param imageView         图片View\n * @param imageLoadListener 图片加载监听器\n */\npublic static Target&lt;GifDrawable&gt; loadImageGif(@NonNull String url, @NonNull ImageView imageView, ImageLoadListener&lt;String, GifDrawable&gt; imageLoadListener) {\n    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(imageView.getContext(),url);\n    return type.asGif()\n            .diskCacheStrategy(DiskCacheStrategy.SOURCE)\n            .listener(new GlideListener&lt;String, GifDrawable, String&gt;(imageLoadListener, url, imageView))\n            .into(imageView);\n}\n\n\n/**\n * 释放内存\n *\n * @param context 上下文\n */\npublic static void clearMemory(Context context) {\n    Glide.get(context).clearMemory();\n}\n\n\n/**\n * 取消所有正在下载或等待下载的任务。\n *\n * @param context 上下文\n */\npublic static void cancelAllTasks(Context context) {\n    Glide.with(context).pauseRequests();\n}\n\n/**\n * 恢复所有任务\n */\npublic static void resumeAllTasks(Context context) {\n    Glide.with(context).resumeRequests();\n}\n\n/**\n * 清除磁盘缓存\n *\n * @param context 上下文\n */\npublic static void clearDiskCache(final Context context) {\n    new Thread(new Runnable() {\n        @Override\n        public void run() {\n            Glide.get(context).clearDiskCache();\n        }\n    }).start();\n}\n\n\n/**\n * 清除所有缓存\n *\n * @param context 上下文\n */\npublic static void cleanAll(Context context) {\n    clearDiskCache(context);\n    clearMemory(context);\n}\n</code></pre><p>}<br>`</p>\n<hr>\n<pre><code>/**\n * Created by fengan on 2017/5/25.\n */\npublic class CircleTransform extends BitmapTransformation {\npublic CircleTransform(Context context) {\n    super(context);\n}\n\n@Override protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) {\n    return circleCrop(pool, toTransform);\n}\n\nprivate static Bitmap circleCrop(BitmapPool pool, Bitmap source) {\n    if (source == null) return null;\n\n    int size = Math.min(source.getWidth(), source.getHeight());\n    int x = (source.getWidth() - size) / 2;\n    int y = (source.getHeight() - size) / 2;\n\n    Bitmap squared = Bitmap.createBitmap(source, x, y, size, size);\n\n    Bitmap result = pool.get(size, size, Bitmap.Config.ARGB_8888);\n    if (result == null) {\n        result = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\n    }\n\n    Canvas canvas = new Canvas(result);\n    Paint paint = new Paint();\n    paint.setShader(new BitmapShader(squared, BitmapShader.TileMode.CLAMP, BitmapShader.TileMode.CLAMP));\n    paint.setAntiAlias(true);\n    float r = size / 2f;\n    canvas.drawCircle(r, r, r, paint);\n    return result;\n}\n\n@Override public String getId() {\n    return getClass().getName();\n}\n}\n</code></pre><p>Drawable转bigmap</p>\n<pre><code>public class BitmapUtils {\npublic static Bitmap drawableToBitmap(Drawable drawable) {\n    Bitmap bitmap = Bitmap.createBitmap(\n            drawable.getIntrinsicWidth(),\n            drawable.getIntrinsicHeight(),\n            drawable.getOpacity() != PixelFormat.OPAQUE ? Bitmap.Config.ARGB_8888\n                    : Bitmap.Config.RGB_565);\n    Canvas canvas = new Canvas(bitmap);\n    //canvas.setBitmap(bitmap);\n    drawable.setBounds(0, 0, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());\n    drawable.draw(canvas);\n    return bitmap;\n}\n}\n</code></pre><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=423849475&auto=1&height=66\"></iframe>"},{"title":"祝你今天心情愉快","date":"2017-08-08T03:32:51.000Z","_content":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28138588&auto=1&height=66\"></iframe>","source":"_posts/祝你今天心情愉快.md","raw":"---\ntitle: 祝你今天心情愉快\ndate: 2017-08-08 11:32:51\ntags:\n---\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28138588&auto=1&height=66\"></iframe>","slug":"祝你今天心情愉快","published":1,"updated":"2017-11-14T06:01:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9z7pyyu000csbygv5rzdjz8","content":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=28138588&auto=1&height=66\"></iframe>","excerpt":"","more":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28138588&auto=1&height=66\"></iframe>"},{"title":"图片上传,角度不正确","date":"2017-08-08T03:39:51.000Z","_content":"# 图片上传,部分机型角度不正确问题解决 #\n## 前言 ##\n\n现在app大多都有上传图片功能,比如上传图片,发表动态可能还会上传多张图片,那在我做图片上传的时候,出现了部分机型上传图片后,图片的角度是正确的,我的两个测试机小米和华为是没问题的,但是三星的上传后,图片是默认旋转了90°,那这里要讲的就是怎么解决这个问题,在此记录一下,以保证后面再出现类似需求要多考虑一些\n<!--more-->\n> 解决问题\n\n直接进入正题\n##### 当我们上传图片需要做的处理 #####\n- 压缩\n- 判断角度是否正确\n- 如果不角度不对,纠正角度\n- 其他(加水印什么的看具体需求)\n\n解决\n以下代码块\n    \n\t`     /**\n     * 压缩图片，处理某些手机拍照角度旋转的问题\n     * @param context\n     * @param filePath\n     * @param file\n     * @param q\n     * @return\n     * @throws FileNotFoundException\n     */\n    public static File compressImage(Context context, String filePath, File file, int q) throws FileNotFoundException {\n        Bitmap bm = getSmallBitmap(filePath);\n        int degree = readPictureDegree(filePath);\n        LogUtil.e(\"fengan\", \"degree==\" + degree);\n        if (degree != 0) {//旋转照片角度\n            bm = rotateBitmap(bm, degree);\n        }\n        FileOutputStream out = new FileOutputStream(file);\n        bm.compress(Bitmap.CompressFormat.JPEG, q, out);\n        return file;\n    }`\n\n\n\n\n    /**\n     * 获取图片角度\n     * @param path\n     * @return\n     */\n    public static int readPictureDegree(String path) {\n        int degree = 0;\n        try {\n            ExifInterface exifInterface = new ExifInterface(path);\n            int orientation = exifInterface.getAttributeInt(\n                    ExifInterface.TAG_ORIENTATION,\n                    ExifInterface.ORIENTATION_NORMAL);\n            switch (orientation) {\n                case ExifInterface.ORIENTATION_ROTATE_90:\n                    degree = 90;\n                    break;\n                case ExifInterface.ORIENTATION_ROTATE_180:\n                    degree = 180;\n                    break;\n                case ExifInterface.ORIENTATION_ROTATE_270:\n                    degree = 270;\n                    break;\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return degree;\n    }\n\n     /**\n     * 旋转照片\n     * @param bitmap\n     * @param degress\n     * @return\n     */\n    public static Bitmap rotateBitmap(Bitmap bitmap, int degress) {\n        if (bitmap != null) {\n            Matrix m = new Matrix();\n            m.postRotate(degress);\n            bitmap = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(),\n                    bitmap.getHeight(), m, true);\n            return bitmap;\n        }\n        return bitmap;\n    }\n        /**\n     * 根据路径获得突破并压缩返回bitmap用于显示\n     *\n     * @return\n     */\n    public static Bitmap getSmallBitmap(String filePath) {\n        final BitmapFactory.Options options = new BitmapFactory.Options();\n        options.inJustDecodeBounds = true;\n        BitmapFactory.decodeFile(filePath, options);\n\n        // Calculate inSampleSize\n        options.inSampleSize = calculateInSampleSize(options, 480, 800);\n\n        // Decode bitmap with inSampleSize set\n        options.inJustDecodeBounds = false;\n\n        return BitmapFactory.decodeFile(filePath, options);\n    }\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=490602392&auto=1&height=66\"></iframe>","source":"_posts/图片上传-角度不正确.md","raw":"---\ntitle: '图片上传,角度不正确'\ndate: 2017-08-08 11:39:51\ntags: Android\n---\n# 图片上传,部分机型角度不正确问题解决 #\n## 前言 ##\n\n现在app大多都有上传图片功能,比如上传图片,发表动态可能还会上传多张图片,那在我做图片上传的时候,出现了部分机型上传图片后,图片的角度是正确的,我的两个测试机小米和华为是没问题的,但是三星的上传后,图片是默认旋转了90°,那这里要讲的就是怎么解决这个问题,在此记录一下,以保证后面再出现类似需求要多考虑一些\n<!--more-->\n> 解决问题\n\n直接进入正题\n##### 当我们上传图片需要做的处理 #####\n- 压缩\n- 判断角度是否正确\n- 如果不角度不对,纠正角度\n- 其他(加水印什么的看具体需求)\n\n解决\n以下代码块\n    \n\t`     /**\n     * 压缩图片，处理某些手机拍照角度旋转的问题\n     * @param context\n     * @param filePath\n     * @param file\n     * @param q\n     * @return\n     * @throws FileNotFoundException\n     */\n    public static File compressImage(Context context, String filePath, File file, int q) throws FileNotFoundException {\n        Bitmap bm = getSmallBitmap(filePath);\n        int degree = readPictureDegree(filePath);\n        LogUtil.e(\"fengan\", \"degree==\" + degree);\n        if (degree != 0) {//旋转照片角度\n            bm = rotateBitmap(bm, degree);\n        }\n        FileOutputStream out = new FileOutputStream(file);\n        bm.compress(Bitmap.CompressFormat.JPEG, q, out);\n        return file;\n    }`\n\n\n\n\n    /**\n     * 获取图片角度\n     * @param path\n     * @return\n     */\n    public static int readPictureDegree(String path) {\n        int degree = 0;\n        try {\n            ExifInterface exifInterface = new ExifInterface(path);\n            int orientation = exifInterface.getAttributeInt(\n                    ExifInterface.TAG_ORIENTATION,\n                    ExifInterface.ORIENTATION_NORMAL);\n            switch (orientation) {\n                case ExifInterface.ORIENTATION_ROTATE_90:\n                    degree = 90;\n                    break;\n                case ExifInterface.ORIENTATION_ROTATE_180:\n                    degree = 180;\n                    break;\n                case ExifInterface.ORIENTATION_ROTATE_270:\n                    degree = 270;\n                    break;\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return degree;\n    }\n\n     /**\n     * 旋转照片\n     * @param bitmap\n     * @param degress\n     * @return\n     */\n    public static Bitmap rotateBitmap(Bitmap bitmap, int degress) {\n        if (bitmap != null) {\n            Matrix m = new Matrix();\n            m.postRotate(degress);\n            bitmap = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(),\n                    bitmap.getHeight(), m, true);\n            return bitmap;\n        }\n        return bitmap;\n    }\n        /**\n     * 根据路径获得突破并压缩返回bitmap用于显示\n     *\n     * @return\n     */\n    public static Bitmap getSmallBitmap(String filePath) {\n        final BitmapFactory.Options options = new BitmapFactory.Options();\n        options.inJustDecodeBounds = true;\n        BitmapFactory.decodeFile(filePath, options);\n\n        // Calculate inSampleSize\n        options.inSampleSize = calculateInSampleSize(options, 480, 800);\n\n        // Decode bitmap with inSampleSize set\n        options.inJustDecodeBounds = false;\n\n        return BitmapFactory.decodeFile(filePath, options);\n    }\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=490602392&auto=1&height=66\"></iframe>","slug":"图片上传-角度不正确","published":1,"updated":"2017-11-14T06:01:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9z7pyyu000dsbygekj3qbf6","content":"<h1 id=\"图片上传-部分机型角度不正确问题解决\"><a href=\"#图片上传-部分机型角度不正确问题解决\" class=\"headerlink\" title=\"图片上传,部分机型角度不正确问题解决\"></a>图片上传,部分机型角度不正确问题解决</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>现在app大多都有上传图片功能,比如上传图片,发表动态可能还会上传多张图片,那在我做图片上传的时候,出现了部分机型上传图片后,图片的角度是正确的,我的两个测试机小米和华为是没问题的,但是三星的上传后,图片是默认旋转了90°,那这里要讲的就是怎么解决这个问题,在此记录一下,以保证后面再出现类似需求要多考虑一些<br><a id=\"more\"></a></p>\n<blockquote>\n<p>解决问题</p>\n</blockquote>\n<p>直接进入正题</p>\n<h5 id=\"当我们上传图片需要做的处理\"><a href=\"#当我们上传图片需要做的处理\" class=\"headerlink\" title=\"当我们上传图片需要做的处理\"></a>当我们上传图片需要做的处理</h5><ul>\n<li>压缩</li>\n<li>判断角度是否正确</li>\n<li>如果不角度不对,纠正角度</li>\n<li>其他(加水印什么的看具体需求)</li>\n</ul>\n<p>解决<br>以下代码块</p>\n<pre><code>`     /**\n * 压缩图片，处理某些手机拍照角度旋转的问题\n * @param context\n * @param filePath\n * @param file\n * @param q\n * @return\n * @throws FileNotFoundException\n */\npublic static File compressImage(Context context, String filePath, File file, int q) throws FileNotFoundException {\n    Bitmap bm = getSmallBitmap(filePath);\n    int degree = readPictureDegree(filePath);\n    LogUtil.e(&quot;fengan&quot;, &quot;degree==&quot; + degree);\n    if (degree != 0) {//旋转照片角度\n        bm = rotateBitmap(bm, degree);\n    }\n    FileOutputStream out = new FileOutputStream(file);\n    bm.compress(Bitmap.CompressFormat.JPEG, q, out);\n    return file;\n}`\n\n\n\n\n/**\n * 获取图片角度\n * @param path\n * @return\n */\npublic static int readPictureDegree(String path) {\n    int degree = 0;\n    try {\n        ExifInterface exifInterface = new ExifInterface(path);\n        int orientation = exifInterface.getAttributeInt(\n                ExifInterface.TAG_ORIENTATION,\n                ExifInterface.ORIENTATION_NORMAL);\n        switch (orientation) {\n            case ExifInterface.ORIENTATION_ROTATE_90:\n                degree = 90;\n                break;\n            case ExifInterface.ORIENTATION_ROTATE_180:\n                degree = 180;\n                break;\n            case ExifInterface.ORIENTATION_ROTATE_270:\n                degree = 270;\n                break;\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return degree;\n}\n\n /**\n * 旋转照片\n * @param bitmap\n * @param degress\n * @return\n */\npublic static Bitmap rotateBitmap(Bitmap bitmap, int degress) {\n    if (bitmap != null) {\n        Matrix m = new Matrix();\n        m.postRotate(degress);\n        bitmap = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(),\n                bitmap.getHeight(), m, true);\n        return bitmap;\n    }\n    return bitmap;\n}\n    /**\n * 根据路径获得突破并压缩返回bitmap用于显示\n *\n * @return\n */\npublic static Bitmap getSmallBitmap(String filePath) {\n    final BitmapFactory.Options options = new BitmapFactory.Options();\n    options.inJustDecodeBounds = true;\n    BitmapFactory.decodeFile(filePath, options);\n\n    // Calculate inSampleSize\n    options.inSampleSize = calculateInSampleSize(options, 480, 800);\n\n    // Decode bitmap with inSampleSize set\n    options.inJustDecodeBounds = false;\n\n    return BitmapFactory.decodeFile(filePath, options);\n}\n</code></pre><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=490602392&auto=1&height=66\"></iframe>","excerpt":"<h1 id=\"图片上传-部分机型角度不正确问题解决\"><a href=\"#图片上传-部分机型角度不正确问题解决\" class=\"headerlink\" title=\"图片上传,部分机型角度不正确问题解决\"></a>图片上传,部分机型角度不正确问题解决</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>现在app大多都有上传图片功能,比如上传图片,发表动态可能还会上传多张图片,那在我做图片上传的时候,出现了部分机型上传图片后,图片的角度是正确的,我的两个测试机小米和华为是没问题的,但是三星的上传后,图片是默认旋转了90°,那这里要讲的就是怎么解决这个问题,在此记录一下,以保证后面再出现类似需求要多考虑一些<br>","more":"</p>\n<blockquote>\n<p>解决问题</p>\n</blockquote>\n<p>直接进入正题</p>\n<h5 id=\"当我们上传图片需要做的处理\"><a href=\"#当我们上传图片需要做的处理\" class=\"headerlink\" title=\"当我们上传图片需要做的处理\"></a>当我们上传图片需要做的处理</h5><ul>\n<li>压缩</li>\n<li>判断角度是否正确</li>\n<li>如果不角度不对,纠正角度</li>\n<li>其他(加水印什么的看具体需求)</li>\n</ul>\n<p>解决<br>以下代码块</p>\n<pre><code>`     /**\n * 压缩图片，处理某些手机拍照角度旋转的问题\n * @param context\n * @param filePath\n * @param file\n * @param q\n * @return\n * @throws FileNotFoundException\n */\npublic static File compressImage(Context context, String filePath, File file, int q) throws FileNotFoundException {\n    Bitmap bm = getSmallBitmap(filePath);\n    int degree = readPictureDegree(filePath);\n    LogUtil.e(&quot;fengan&quot;, &quot;degree==&quot; + degree);\n    if (degree != 0) {//旋转照片角度\n        bm = rotateBitmap(bm, degree);\n    }\n    FileOutputStream out = new FileOutputStream(file);\n    bm.compress(Bitmap.CompressFormat.JPEG, q, out);\n    return file;\n}`\n\n\n\n\n/**\n * 获取图片角度\n * @param path\n * @return\n */\npublic static int readPictureDegree(String path) {\n    int degree = 0;\n    try {\n        ExifInterface exifInterface = new ExifInterface(path);\n        int orientation = exifInterface.getAttributeInt(\n                ExifInterface.TAG_ORIENTATION,\n                ExifInterface.ORIENTATION_NORMAL);\n        switch (orientation) {\n            case ExifInterface.ORIENTATION_ROTATE_90:\n                degree = 90;\n                break;\n            case ExifInterface.ORIENTATION_ROTATE_180:\n                degree = 180;\n                break;\n            case ExifInterface.ORIENTATION_ROTATE_270:\n                degree = 270;\n                break;\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return degree;\n}\n\n /**\n * 旋转照片\n * @param bitmap\n * @param degress\n * @return\n */\npublic static Bitmap rotateBitmap(Bitmap bitmap, int degress) {\n    if (bitmap != null) {\n        Matrix m = new Matrix();\n        m.postRotate(degress);\n        bitmap = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(),\n                bitmap.getHeight(), m, true);\n        return bitmap;\n    }\n    return bitmap;\n}\n    /**\n * 根据路径获得突破并压缩返回bitmap用于显示\n *\n * @return\n */\npublic static Bitmap getSmallBitmap(String filePath) {\n    final BitmapFactory.Options options = new BitmapFactory.Options();\n    options.inJustDecodeBounds = true;\n    BitmapFactory.decodeFile(filePath, options);\n\n    // Calculate inSampleSize\n    options.inSampleSize = calculateInSampleSize(options, 480, 800);\n\n    // Decode bitmap with inSampleSize set\n    options.inJustDecodeBounds = false;\n\n    return BitmapFactory.decodeFile(filePath, options);\n}\n</code></pre><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=490602392&auto=1&height=66\"></iframe>"},{"title":"随滑动改变的的动态矩形背景","date":"2017-10-11T08:11:06.000Z","_content":"\n# 随滑动改变的动态矩形背景 #\n> 前言\n\n可能看到这个标题有点懵逼,本屌的表达能力有限,最近工作比较清闲,朋友公司正在做到这个效果,所以就帮基友写了一个小Demo,总体来说就是以下效果.\n\ngithub移步:\nhttps://github.com/itfengan/DynamicRectangleView\n\n<!--more-->\n\n> 朋友公司需要达到的效果\n\n![这里写图片描述](http://img.blog.csdn.net/20171011155803164?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmVuZ2FuaXQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n> Demo中的效果\n\n![这里写图片描述](http://img.blog.csdn.net/20171011155905764?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmVuZ2FuaXQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## 使用过程 ##\n\n> layout\n\n        <com.fengan.dynamicrectangledemo.DynamicRectangleView\n        android:id=\"@+id/drv\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"250dp\"\n        app:fengan_limit_percent=\"0.2\"\n        app:fengan_percent=\"0.5\"\n        ></com.fengan.dynamicrectangledemo.DynamicRectangleView>\n\n> code\n\n     @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        SeekBar seekBar = (SeekBar) findViewById(R.id.sb);\n        final DynamicRectangleView dynamicRectangleView = (DynamicRectangleView) findViewById(R.id.drv);\n        seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {\n            @Override\n            public void onProgressChanged(SeekBar seekBar, int i, boolean b) {\n                dynamicRectangleView.setPercent((float)i/100);\n            }\n\n            @Override\n            public void onStartTrackingTouch(SeekBar seekBar) {\n\n            }\n\n            @Override\n            public void onStopTrackingTouch(SeekBar seekBar) {\n\n            }\n        });\n        findViewById(R.id.btn_scrollview).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                startActivity(new Intent(MainActivity.this,ScrollViewActivity.class));\n            }\n        });\n    }\n\n> attrs.xml(有灵性的哥哥们应该猜得到分别对应的什么意思咯)\n\n    <resources>\n    <declare-styleable name=\"DynamicRectangleView\">\n        <attr name=\"fengan_percent\" format=\"float\"/>\n        <attr name=\"fengan_limit_percent\" format=\"float\"/>\n        <attr name=\"fengan_start_color\" format=\"color\"/>\n        <attr name=\"fengan_end_color\" format=\"color\"/>\n    </declare-styleable>\n\t</resources>\n\n1. fengan_percent:右侧短边占左侧的百分比\n2. fengan_limit_percent:当滑动到最小的百分比\n3. fengan_start_color:渐变色的初始颜色(ps:朋友公司效果图是渐变色,当然也可以不需要)\n4. fengan_end_color:渐变色的终止颜色\n\n> DynamicRectangleView.java\n\n    package com.fengan.dynamicrectangledemo;\n\n\timport android.content.Context;\n\timport android.content.res.TypedArray;\n\timport android.graphics.Canvas;\n\timport android.graphics.Color;\n\timport android.graphics.LinearGradient;\n\timport android.graphics.Paint;\n\timport android.graphics.Path;\n\timport android.graphics.Shader;\n\timport android.util.AttributeSet;\n\timport android.util.Log;\n\timport android.view.View;\n\n\t/**\n\t * Created by fengan on 2017/10/11/011.\n \t\t*/\n\n\tpublic class DynamicRectangleView extends View {\n\n    // Default  values\n    private final static int DEFAULT_START_COLOR = Color.parseColor(\"#88D94600\");\n    private final static int DEFAULT_END_COLOR = Color.parseColor(\"#D94600\");\n    private final static float DEFAULT_PERCENT = (float) 0.5;//右边高度占左边高度的百分比\n    private final static float DEFAULT_LIMIT_PERCENT = (float) 0.2;//最小高度占左边高度的百分比\n\n    private Paint mPaint;\n    private float OriginalRightHeight;\n    private float OriginalLeftHeight;\n    private float currentRightHeight;\n    private float currentLeftHeight;\n    private float minHeight;\n    private float maxHeight;\n    private int mStartColor;\n    private int mEndColor;\n    private float mPercent;\n    private float mLimitPercent;\n    private Path mPath;\n\n\n    public DynamicRectangleView(Context context) {\n        this(context, null);\n    }\n\n    public DynamicRectangleView(Context context, AttributeSet attrs) {\n        this(context, attrs, 0);\n    }\n\n\n    public DynamicRectangleView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        // Retrieve attributes from xml\n        final TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.DynamicRectangleView);\n        try {\n            mPercent = typedArray.getFloat(R.styleable.DynamicRectangleView_fengan_percent, DEFAULT_PERCENT);\n            mLimitPercent = typedArray.getFloat(R.styleable.DynamicRectangleView_fengan_percent, DEFAULT_LIMIT_PERCENT);\n            mStartColor = typedArray.getColor(R.styleable.DynamicRectangleView_fengan_start_color, DEFAULT_START_COLOR);\n            mEndColor = typedArray.getColor(R.styleable.DynamicRectangleView_fengan_end_color, DEFAULT_END_COLOR);\n        } finally {\n            typedArray.recycle();\n        }\n        initView(context);\n    }\n\n    private void initView(Context context) {\n        mPaint = new Paint();\n        mPath = new Path();\n        mPaint.setAntiAlias(true);\n\t//        mPaint.setColor(Color.RED);//纯色\n    }\n\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n    }\n\n    @Override\n    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\n        super.onSizeChanged(w, h, oldw, oldh);\n        OriginalLeftHeight = getMeasuredHeight();\n        OriginalRightHeight = getMeasuredHeight()*mPercent;\n        minHeight = getMeasuredHeight() *mLimitPercent;\n        maxHeight = OriginalRightHeight;\n        //设置当前高度\n        currentRightHeight = OriginalRightHeight;\n        currentLeftHeight = OriginalLeftHeight;\n        // LinearGradient 第一个参数第二个参数为 起始位置x,y  三四参数为终点位置x,y。\n        // 如果x不变则为y轴渐变， y不变则为x轴渐变\n        // 第五个参数为颜色渐变，此处为红色渐变为绿色\n        // 第七个参数为渐变次数，可repeat\n        Shader mShader = new LinearGradient(0, 0, maxHeight, maxHeight,\n                new int[]{mStartColor, mEndColor},\n                null, Shader.TileMode.CLAMP);\n        // Shader.TileMode三种模式\n        // REPEAT:沿着渐变方向循环重复\n        // CLAMP:如果在预先定义的范围外画的话，就重复边界的颜色\n        // MIRROR:与REPEAT一样都是循环重复，但这个会对称重复\n        mPaint.setShader(mShader);// 用Shader中定义定义的颜色来话\n    }\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        mPath.reset();\n        mPath.moveTo(0, 0);\n        mPath.lineTo(getMeasuredWidth(), 0);\n        mPath.lineTo(getMeasuredWidth(), currentRightHeight);\n        mPath.lineTo(0, currentLeftHeight);\n        mPath.close();\n        canvas.drawPath(mPath, mPaint);\n    }\n\n    public void setPercent(float percent) {\n        Log.e(\"fengan\", \"percent=\" + percent);\n        currentRightHeight = OriginalRightHeight * (1 - percent);\n        currentLeftHeight = OriginalLeftHeight * (1 - percent);\n        if (currentLeftHeight < minHeight) {\n            currentLeftHeight = minHeight;\n        }\n        if (currentRightHeight < minHeight) {\n            currentRightHeight = minHeight;\n        }\n        postInvalidate();\n    }\n\t}\n\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=455345562&auto=1&height=66\"></iframe>\n","source":"_posts/随滑动改变的的动态矩形背景.md","raw":"---\ntitle: 随滑动改变的的动态矩形背景\ndate: 2017-10-11 16:11:06\ntags:\n---\n\n# 随滑动改变的动态矩形背景 #\n> 前言\n\n可能看到这个标题有点懵逼,本屌的表达能力有限,最近工作比较清闲,朋友公司正在做到这个效果,所以就帮基友写了一个小Demo,总体来说就是以下效果.\n\ngithub移步:\nhttps://github.com/itfengan/DynamicRectangleView\n\n<!--more-->\n\n> 朋友公司需要达到的效果\n\n![这里写图片描述](http://img.blog.csdn.net/20171011155803164?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmVuZ2FuaXQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n> Demo中的效果\n\n![这里写图片描述](http://img.blog.csdn.net/20171011155905764?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmVuZ2FuaXQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## 使用过程 ##\n\n> layout\n\n        <com.fengan.dynamicrectangledemo.DynamicRectangleView\n        android:id=\"@+id/drv\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"250dp\"\n        app:fengan_limit_percent=\"0.2\"\n        app:fengan_percent=\"0.5\"\n        ></com.fengan.dynamicrectangledemo.DynamicRectangleView>\n\n> code\n\n     @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        SeekBar seekBar = (SeekBar) findViewById(R.id.sb);\n        final DynamicRectangleView dynamicRectangleView = (DynamicRectangleView) findViewById(R.id.drv);\n        seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {\n            @Override\n            public void onProgressChanged(SeekBar seekBar, int i, boolean b) {\n                dynamicRectangleView.setPercent((float)i/100);\n            }\n\n            @Override\n            public void onStartTrackingTouch(SeekBar seekBar) {\n\n            }\n\n            @Override\n            public void onStopTrackingTouch(SeekBar seekBar) {\n\n            }\n        });\n        findViewById(R.id.btn_scrollview).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                startActivity(new Intent(MainActivity.this,ScrollViewActivity.class));\n            }\n        });\n    }\n\n> attrs.xml(有灵性的哥哥们应该猜得到分别对应的什么意思咯)\n\n    <resources>\n    <declare-styleable name=\"DynamicRectangleView\">\n        <attr name=\"fengan_percent\" format=\"float\"/>\n        <attr name=\"fengan_limit_percent\" format=\"float\"/>\n        <attr name=\"fengan_start_color\" format=\"color\"/>\n        <attr name=\"fengan_end_color\" format=\"color\"/>\n    </declare-styleable>\n\t</resources>\n\n1. fengan_percent:右侧短边占左侧的百分比\n2. fengan_limit_percent:当滑动到最小的百分比\n3. fengan_start_color:渐变色的初始颜色(ps:朋友公司效果图是渐变色,当然也可以不需要)\n4. fengan_end_color:渐变色的终止颜色\n\n> DynamicRectangleView.java\n\n    package com.fengan.dynamicrectangledemo;\n\n\timport android.content.Context;\n\timport android.content.res.TypedArray;\n\timport android.graphics.Canvas;\n\timport android.graphics.Color;\n\timport android.graphics.LinearGradient;\n\timport android.graphics.Paint;\n\timport android.graphics.Path;\n\timport android.graphics.Shader;\n\timport android.util.AttributeSet;\n\timport android.util.Log;\n\timport android.view.View;\n\n\t/**\n\t * Created by fengan on 2017/10/11/011.\n \t\t*/\n\n\tpublic class DynamicRectangleView extends View {\n\n    // Default  values\n    private final static int DEFAULT_START_COLOR = Color.parseColor(\"#88D94600\");\n    private final static int DEFAULT_END_COLOR = Color.parseColor(\"#D94600\");\n    private final static float DEFAULT_PERCENT = (float) 0.5;//右边高度占左边高度的百分比\n    private final static float DEFAULT_LIMIT_PERCENT = (float) 0.2;//最小高度占左边高度的百分比\n\n    private Paint mPaint;\n    private float OriginalRightHeight;\n    private float OriginalLeftHeight;\n    private float currentRightHeight;\n    private float currentLeftHeight;\n    private float minHeight;\n    private float maxHeight;\n    private int mStartColor;\n    private int mEndColor;\n    private float mPercent;\n    private float mLimitPercent;\n    private Path mPath;\n\n\n    public DynamicRectangleView(Context context) {\n        this(context, null);\n    }\n\n    public DynamicRectangleView(Context context, AttributeSet attrs) {\n        this(context, attrs, 0);\n    }\n\n\n    public DynamicRectangleView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        // Retrieve attributes from xml\n        final TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.DynamicRectangleView);\n        try {\n            mPercent = typedArray.getFloat(R.styleable.DynamicRectangleView_fengan_percent, DEFAULT_PERCENT);\n            mLimitPercent = typedArray.getFloat(R.styleable.DynamicRectangleView_fengan_percent, DEFAULT_LIMIT_PERCENT);\n            mStartColor = typedArray.getColor(R.styleable.DynamicRectangleView_fengan_start_color, DEFAULT_START_COLOR);\n            mEndColor = typedArray.getColor(R.styleable.DynamicRectangleView_fengan_end_color, DEFAULT_END_COLOR);\n        } finally {\n            typedArray.recycle();\n        }\n        initView(context);\n    }\n\n    private void initView(Context context) {\n        mPaint = new Paint();\n        mPath = new Path();\n        mPaint.setAntiAlias(true);\n\t//        mPaint.setColor(Color.RED);//纯色\n    }\n\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n    }\n\n    @Override\n    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\n        super.onSizeChanged(w, h, oldw, oldh);\n        OriginalLeftHeight = getMeasuredHeight();\n        OriginalRightHeight = getMeasuredHeight()*mPercent;\n        minHeight = getMeasuredHeight() *mLimitPercent;\n        maxHeight = OriginalRightHeight;\n        //设置当前高度\n        currentRightHeight = OriginalRightHeight;\n        currentLeftHeight = OriginalLeftHeight;\n        // LinearGradient 第一个参数第二个参数为 起始位置x,y  三四参数为终点位置x,y。\n        // 如果x不变则为y轴渐变， y不变则为x轴渐变\n        // 第五个参数为颜色渐变，此处为红色渐变为绿色\n        // 第七个参数为渐变次数，可repeat\n        Shader mShader = new LinearGradient(0, 0, maxHeight, maxHeight,\n                new int[]{mStartColor, mEndColor},\n                null, Shader.TileMode.CLAMP);\n        // Shader.TileMode三种模式\n        // REPEAT:沿着渐变方向循环重复\n        // CLAMP:如果在预先定义的范围外画的话，就重复边界的颜色\n        // MIRROR:与REPEAT一样都是循环重复，但这个会对称重复\n        mPaint.setShader(mShader);// 用Shader中定义定义的颜色来话\n    }\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        mPath.reset();\n        mPath.moveTo(0, 0);\n        mPath.lineTo(getMeasuredWidth(), 0);\n        mPath.lineTo(getMeasuredWidth(), currentRightHeight);\n        mPath.lineTo(0, currentLeftHeight);\n        mPath.close();\n        canvas.drawPath(mPath, mPaint);\n    }\n\n    public void setPercent(float percent) {\n        Log.e(\"fengan\", \"percent=\" + percent);\n        currentRightHeight = OriginalRightHeight * (1 - percent);\n        currentLeftHeight = OriginalLeftHeight * (1 - percent);\n        if (currentLeftHeight < minHeight) {\n            currentLeftHeight = minHeight;\n        }\n        if (currentRightHeight < minHeight) {\n            currentRightHeight = minHeight;\n        }\n        postInvalidate();\n    }\n\t}\n\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=455345562&auto=1&height=66\"></iframe>\n","slug":"随滑动改变的的动态矩形背景","published":1,"updated":"2017-11-14T06:01:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9z7pyyv000fsbyg6s66i1tk","content":"<h1 id=\"随滑动改变的动态矩形背景\"><a href=\"#随滑动改变的动态矩形背景\" class=\"headerlink\" title=\"随滑动改变的动态矩形背景\"></a>随滑动改变的动态矩形背景</h1><blockquote>\n<p>前言</p>\n</blockquote>\n<p>可能看到这个标题有点懵逼,本屌的表达能力有限,最近工作比较清闲,朋友公司正在做到这个效果,所以就帮基友写了一个小Demo,总体来说就是以下效果.</p>\n<p>github移步:<br><a href=\"https://github.com/itfengan/DynamicRectangleView\" target=\"_blank\" rel=\"external\">https://github.com/itfengan/DynamicRectangleView</a></p>\n<a id=\"more\"></a>\n<blockquote>\n<p>朋友公司需要达到的效果</p>\n</blockquote>\n<p><img src=\"http://img.blog.csdn.net/20171011155803164?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmVuZ2FuaXQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<blockquote>\n<p>Demo中的效果</p>\n</blockquote>\n<p><img src=\"http://img.blog.csdn.net/20171011155905764?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmVuZ2FuaXQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"使用过程\"><a href=\"#使用过程\" class=\"headerlink\" title=\"使用过程\"></a>使用过程</h2><blockquote>\n<p>layout</p>\n</blockquote>\n<pre><code>&lt;com.fengan.dynamicrectangledemo.DynamicRectangleView\nandroid:id=&quot;@+id/drv&quot;\nandroid:layout_width=&quot;match_parent&quot;\nandroid:layout_height=&quot;250dp&quot;\napp:fengan_limit_percent=&quot;0.2&quot;\napp:fengan_percent=&quot;0.5&quot;\n&gt;&lt;/com.fengan.dynamicrectangledemo.DynamicRectangleView&gt;\n</code></pre><blockquote>\n<p>code</p>\n</blockquote>\n<pre><code> @Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    SeekBar seekBar = (SeekBar) findViewById(R.id.sb);\n    final DynamicRectangleView dynamicRectangleView = (DynamicRectangleView) findViewById(R.id.drv);\n    seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {\n        @Override\n        public void onProgressChanged(SeekBar seekBar, int i, boolean b) {\n            dynamicRectangleView.setPercent((float)i/100);\n        }\n\n        @Override\n        public void onStartTrackingTouch(SeekBar seekBar) {\n\n        }\n\n        @Override\n        public void onStopTrackingTouch(SeekBar seekBar) {\n\n        }\n    });\n    findViewById(R.id.btn_scrollview).setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View view) {\n            startActivity(new Intent(MainActivity.this,ScrollViewActivity.class));\n        }\n    });\n}\n</code></pre><blockquote>\n<p>attrs.xml(有灵性的哥哥们应该猜得到分别对应的什么意思咯)</p>\n</blockquote>\n<pre><code>&lt;resources&gt;\n&lt;declare-styleable name=&quot;DynamicRectangleView&quot;&gt;\n    &lt;attr name=&quot;fengan_percent&quot; format=&quot;float&quot;/&gt;\n    &lt;attr name=&quot;fengan_limit_percent&quot; format=&quot;float&quot;/&gt;\n    &lt;attr name=&quot;fengan_start_color&quot; format=&quot;color&quot;/&gt;\n    &lt;attr name=&quot;fengan_end_color&quot; format=&quot;color&quot;/&gt;\n&lt;/declare-styleable&gt;\n&lt;/resources&gt;\n</code></pre><ol>\n<li>fengan_percent:右侧短边占左侧的百分比</li>\n<li>fengan_limit_percent:当滑动到最小的百分比</li>\n<li>fengan_start_color:渐变色的初始颜色(ps:朋友公司效果图是渐变色,当然也可以不需要)</li>\n<li>fengan_end_color:渐变色的终止颜色</li>\n</ol>\n<blockquote>\n<p>DynamicRectangleView.java</p>\n</blockquote>\n<pre><code>package com.fengan.dynamicrectangledemo;\n\nimport android.content.Context;\nimport android.content.res.TypedArray;\nimport android.graphics.Canvas;\nimport android.graphics.Color;\nimport android.graphics.LinearGradient;\nimport android.graphics.Paint;\nimport android.graphics.Path;\nimport android.graphics.Shader;\nimport android.util.AttributeSet;\nimport android.util.Log;\nimport android.view.View;\n\n/**\n * Created by fengan on 2017/10/11/011.\n     */\n\npublic class DynamicRectangleView extends View {\n\n// Default  values\nprivate final static int DEFAULT_START_COLOR = Color.parseColor(&quot;#88D94600&quot;);\nprivate final static int DEFAULT_END_COLOR = Color.parseColor(&quot;#D94600&quot;);\nprivate final static float DEFAULT_PERCENT = (float) 0.5;//右边高度占左边高度的百分比\nprivate final static float DEFAULT_LIMIT_PERCENT = (float) 0.2;//最小高度占左边高度的百分比\n\nprivate Paint mPaint;\nprivate float OriginalRightHeight;\nprivate float OriginalLeftHeight;\nprivate float currentRightHeight;\nprivate float currentLeftHeight;\nprivate float minHeight;\nprivate float maxHeight;\nprivate int mStartColor;\nprivate int mEndColor;\nprivate float mPercent;\nprivate float mLimitPercent;\nprivate Path mPath;\n\n\npublic DynamicRectangleView(Context context) {\n    this(context, null);\n}\n\npublic DynamicRectangleView(Context context, AttributeSet attrs) {\n    this(context, attrs, 0);\n}\n\n\npublic DynamicRectangleView(Context context, AttributeSet attrs, int defStyleAttr) {\n    super(context, attrs, defStyleAttr);\n    // Retrieve attributes from xml\n    final TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.DynamicRectangleView);\n    try {\n        mPercent = typedArray.getFloat(R.styleable.DynamicRectangleView_fengan_percent, DEFAULT_PERCENT);\n        mLimitPercent = typedArray.getFloat(R.styleable.DynamicRectangleView_fengan_percent, DEFAULT_LIMIT_PERCENT);\n        mStartColor = typedArray.getColor(R.styleable.DynamicRectangleView_fengan_start_color, DEFAULT_START_COLOR);\n        mEndColor = typedArray.getColor(R.styleable.DynamicRectangleView_fengan_end_color, DEFAULT_END_COLOR);\n    } finally {\n        typedArray.recycle();\n    }\n    initView(context);\n}\n\nprivate void initView(Context context) {\n    mPaint = new Paint();\n    mPath = new Path();\n    mPaint.setAntiAlias(true);\n//        mPaint.setColor(Color.RED);//纯色\n}\n\n@Override\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n    super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n}\n\n@Override\nprotected void onSizeChanged(int w, int h, int oldw, int oldh) {\n    super.onSizeChanged(w, h, oldw, oldh);\n    OriginalLeftHeight = getMeasuredHeight();\n    OriginalRightHeight = getMeasuredHeight()*mPercent;\n    minHeight = getMeasuredHeight() *mLimitPercent;\n    maxHeight = OriginalRightHeight;\n    //设置当前高度\n    currentRightHeight = OriginalRightHeight;\n    currentLeftHeight = OriginalLeftHeight;\n    // LinearGradient 第一个参数第二个参数为 起始位置x,y  三四参数为终点位置x,y。\n    // 如果x不变则为y轴渐变， y不变则为x轴渐变\n    // 第五个参数为颜色渐变，此处为红色渐变为绿色\n    // 第七个参数为渐变次数，可repeat\n    Shader mShader = new LinearGradient(0, 0, maxHeight, maxHeight,\n            new int[]{mStartColor, mEndColor},\n            null, Shader.TileMode.CLAMP);\n    // Shader.TileMode三种模式\n    // REPEAT:沿着渐变方向循环重复\n    // CLAMP:如果在预先定义的范围外画的话，就重复边界的颜色\n    // MIRROR:与REPEAT一样都是循环重复，但这个会对称重复\n    mPaint.setShader(mShader);// 用Shader中定义定义的颜色来话\n}\n@Override\nprotected void onDraw(Canvas canvas) {\n    super.onDraw(canvas);\n    mPath.reset();\n    mPath.moveTo(0, 0);\n    mPath.lineTo(getMeasuredWidth(), 0);\n    mPath.lineTo(getMeasuredWidth(), currentRightHeight);\n    mPath.lineTo(0, currentLeftHeight);\n    mPath.close();\n    canvas.drawPath(mPath, mPaint);\n}\n\npublic void setPercent(float percent) {\n    Log.e(&quot;fengan&quot;, &quot;percent=&quot; + percent);\n    currentRightHeight = OriginalRightHeight * (1 - percent);\n    currentLeftHeight = OriginalLeftHeight * (1 - percent);\n    if (currentLeftHeight &lt; minHeight) {\n        currentLeftHeight = minHeight;\n    }\n    if (currentRightHeight &lt; minHeight) {\n        currentRightHeight = minHeight;\n    }\n    postInvalidate();\n}\n}\n</code></pre><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=455345562&auto=1&height=66\"></iframe>\n","excerpt":"<h1 id=\"随滑动改变的动态矩形背景\"><a href=\"#随滑动改变的动态矩形背景\" class=\"headerlink\" title=\"随滑动改变的动态矩形背景\"></a>随滑动改变的动态矩形背景</h1><blockquote>\n<p>前言</p>\n</blockquote>\n<p>可能看到这个标题有点懵逼,本屌的表达能力有限,最近工作比较清闲,朋友公司正在做到这个效果,所以就帮基友写了一个小Demo,总体来说就是以下效果.</p>\n<p>github移步:<br><a href=\"https://github.com/itfengan/DynamicRectangleView\">https://github.com/itfengan/DynamicRectangleView</a></p>","more":"<blockquote>\n<p>朋友公司需要达到的效果</p>\n</blockquote>\n<p><img src=\"http://img.blog.csdn.net/20171011155803164?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmVuZ2FuaXQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<blockquote>\n<p>Demo中的效果</p>\n</blockquote>\n<p><img src=\"http://img.blog.csdn.net/20171011155905764?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmVuZ2FuaXQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"使用过程\"><a href=\"#使用过程\" class=\"headerlink\" title=\"使用过程\"></a>使用过程</h2><blockquote>\n<p>layout</p>\n</blockquote>\n<pre><code>&lt;com.fengan.dynamicrectangledemo.DynamicRectangleView\nandroid:id=&quot;@+id/drv&quot;\nandroid:layout_width=&quot;match_parent&quot;\nandroid:layout_height=&quot;250dp&quot;\napp:fengan_limit_percent=&quot;0.2&quot;\napp:fengan_percent=&quot;0.5&quot;\n&gt;&lt;/com.fengan.dynamicrectangledemo.DynamicRectangleView&gt;\n</code></pre><blockquote>\n<p>code</p>\n</blockquote>\n<pre><code> @Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    SeekBar seekBar = (SeekBar) findViewById(R.id.sb);\n    final DynamicRectangleView dynamicRectangleView = (DynamicRectangleView) findViewById(R.id.drv);\n    seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {\n        @Override\n        public void onProgressChanged(SeekBar seekBar, int i, boolean b) {\n            dynamicRectangleView.setPercent((float)i/100);\n        }\n\n        @Override\n        public void onStartTrackingTouch(SeekBar seekBar) {\n\n        }\n\n        @Override\n        public void onStopTrackingTouch(SeekBar seekBar) {\n\n        }\n    });\n    findViewById(R.id.btn_scrollview).setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View view) {\n            startActivity(new Intent(MainActivity.this,ScrollViewActivity.class));\n        }\n    });\n}\n</code></pre><blockquote>\n<p>attrs.xml(有灵性的哥哥们应该猜得到分别对应的什么意思咯)</p>\n</blockquote>\n<pre><code>&lt;resources&gt;\n&lt;declare-styleable name=&quot;DynamicRectangleView&quot;&gt;\n    &lt;attr name=&quot;fengan_percent&quot; format=&quot;float&quot;/&gt;\n    &lt;attr name=&quot;fengan_limit_percent&quot; format=&quot;float&quot;/&gt;\n    &lt;attr name=&quot;fengan_start_color&quot; format=&quot;color&quot;/&gt;\n    &lt;attr name=&quot;fengan_end_color&quot; format=&quot;color&quot;/&gt;\n&lt;/declare-styleable&gt;\n&lt;/resources&gt;\n</code></pre><ol>\n<li>fengan_percent:右侧短边占左侧的百分比</li>\n<li>fengan_limit_percent:当滑动到最小的百分比</li>\n<li>fengan_start_color:渐变色的初始颜色(ps:朋友公司效果图是渐变色,当然也可以不需要)</li>\n<li>fengan_end_color:渐变色的终止颜色</li>\n</ol>\n<blockquote>\n<p>DynamicRectangleView.java</p>\n</blockquote>\n<pre><code>package com.fengan.dynamicrectangledemo;\n\nimport android.content.Context;\nimport android.content.res.TypedArray;\nimport android.graphics.Canvas;\nimport android.graphics.Color;\nimport android.graphics.LinearGradient;\nimport android.graphics.Paint;\nimport android.graphics.Path;\nimport android.graphics.Shader;\nimport android.util.AttributeSet;\nimport android.util.Log;\nimport android.view.View;\n\n/**\n * Created by fengan on 2017/10/11/011.\n     */\n\npublic class DynamicRectangleView extends View {\n\n// Default  values\nprivate final static int DEFAULT_START_COLOR = Color.parseColor(&quot;#88D94600&quot;);\nprivate final static int DEFAULT_END_COLOR = Color.parseColor(&quot;#D94600&quot;);\nprivate final static float DEFAULT_PERCENT = (float) 0.5;//右边高度占左边高度的百分比\nprivate final static float DEFAULT_LIMIT_PERCENT = (float) 0.2;//最小高度占左边高度的百分比\n\nprivate Paint mPaint;\nprivate float OriginalRightHeight;\nprivate float OriginalLeftHeight;\nprivate float currentRightHeight;\nprivate float currentLeftHeight;\nprivate float minHeight;\nprivate float maxHeight;\nprivate int mStartColor;\nprivate int mEndColor;\nprivate float mPercent;\nprivate float mLimitPercent;\nprivate Path mPath;\n\n\npublic DynamicRectangleView(Context context) {\n    this(context, null);\n}\n\npublic DynamicRectangleView(Context context, AttributeSet attrs) {\n    this(context, attrs, 0);\n}\n\n\npublic DynamicRectangleView(Context context, AttributeSet attrs, int defStyleAttr) {\n    super(context, attrs, defStyleAttr);\n    // Retrieve attributes from xml\n    final TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.DynamicRectangleView);\n    try {\n        mPercent = typedArray.getFloat(R.styleable.DynamicRectangleView_fengan_percent, DEFAULT_PERCENT);\n        mLimitPercent = typedArray.getFloat(R.styleable.DynamicRectangleView_fengan_percent, DEFAULT_LIMIT_PERCENT);\n        mStartColor = typedArray.getColor(R.styleable.DynamicRectangleView_fengan_start_color, DEFAULT_START_COLOR);\n        mEndColor = typedArray.getColor(R.styleable.DynamicRectangleView_fengan_end_color, DEFAULT_END_COLOR);\n    } finally {\n        typedArray.recycle();\n    }\n    initView(context);\n}\n\nprivate void initView(Context context) {\n    mPaint = new Paint();\n    mPath = new Path();\n    mPaint.setAntiAlias(true);\n//        mPaint.setColor(Color.RED);//纯色\n}\n\n@Override\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n    super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n}\n\n@Override\nprotected void onSizeChanged(int w, int h, int oldw, int oldh) {\n    super.onSizeChanged(w, h, oldw, oldh);\n    OriginalLeftHeight = getMeasuredHeight();\n    OriginalRightHeight = getMeasuredHeight()*mPercent;\n    minHeight = getMeasuredHeight() *mLimitPercent;\n    maxHeight = OriginalRightHeight;\n    //设置当前高度\n    currentRightHeight = OriginalRightHeight;\n    currentLeftHeight = OriginalLeftHeight;\n    // LinearGradient 第一个参数第二个参数为 起始位置x,y  三四参数为终点位置x,y。\n    // 如果x不变则为y轴渐变， y不变则为x轴渐变\n    // 第五个参数为颜色渐变，此处为红色渐变为绿色\n    // 第七个参数为渐变次数，可repeat\n    Shader mShader = new LinearGradient(0, 0, maxHeight, maxHeight,\n            new int[]{mStartColor, mEndColor},\n            null, Shader.TileMode.CLAMP);\n    // Shader.TileMode三种模式\n    // REPEAT:沿着渐变方向循环重复\n    // CLAMP:如果在预先定义的范围外画的话，就重复边界的颜色\n    // MIRROR:与REPEAT一样都是循环重复，但这个会对称重复\n    mPaint.setShader(mShader);// 用Shader中定义定义的颜色来话\n}\n@Override\nprotected void onDraw(Canvas canvas) {\n    super.onDraw(canvas);\n    mPath.reset();\n    mPath.moveTo(0, 0);\n    mPath.lineTo(getMeasuredWidth(), 0);\n    mPath.lineTo(getMeasuredWidth(), currentRightHeight);\n    mPath.lineTo(0, currentLeftHeight);\n    mPath.close();\n    canvas.drawPath(mPath, mPaint);\n}\n\npublic void setPercent(float percent) {\n    Log.e(&quot;fengan&quot;, &quot;percent=&quot; + percent);\n    currentRightHeight = OriginalRightHeight * (1 - percent);\n    currentLeftHeight = OriginalLeftHeight * (1 - percent);\n    if (currentLeftHeight &lt; minHeight) {\n        currentLeftHeight = minHeight;\n    }\n    if (currentRightHeight &lt; minHeight) {\n        currentRightHeight = minHeight;\n    }\n    postInvalidate();\n}\n}\n</code></pre><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=455345562&auto=1&height=66\"></iframe>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj9z7pyye0000sbyg1jlh8v86","tag_id":"cj9z7pyyk0002sbygtm9e8zdp","_id":"cj9z7pyyo0007sbyg15uts4aj"},{"post_id":"cj9z7pyyh0001sbygdwarcdyx","tag_id":"cj9z7pyyk0002sbygtm9e8zdp","_id":"cj9z7pyyt000bsbygh2k6b96w"},{"post_id":"cj9z7pyyl0003sbygo3tm2otq","tag_id":"cj9z7pyyk0002sbygtm9e8zdp","_id":"cj9z7pyyv000esbygkmlsw0dq"},{"post_id":"cj9z7pyyu000dsbygekj3qbf6","tag_id":"cj9z7pyyk0002sbygtm9e8zdp","_id":"cj9z7pyyw000gsbyggzhez0jc"}],"Tag":[{"name":"Android","_id":"cj9z7pyyk0002sbygtm9e8zdp"}]}}